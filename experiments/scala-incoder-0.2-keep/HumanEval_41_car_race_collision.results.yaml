language: scala
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32\
    \ = mutable.Set[Car]()\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpglj31c7o.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpglj31c7o.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpglj31c7o.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpglj31c7o.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpglj31c7o.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppaj3l25d.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppaj3l25d.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same grou"
  stdout: ''
  timestamp: 1659793137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3\
    \ = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n  \
    \      val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6\
    \ = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n  \
    \      val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9\
    \ = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n \
    \       val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12\
    \ = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n \
    \       val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15\
    \ = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n \
    \       val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18\
    \ = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n \
    \       val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21\
    \ = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n \
    \       val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24\
    \ = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n \
    \       val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27\
    \ = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n \
    \       val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30\
    \ = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n \
    \       val collisionsCount32 = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud8m56ww.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpud8m56ww.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpud8m56ww.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpud8m56ww.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud8m56ww.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollided"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBefore = mutable.ArrayBuffer.fill(n)(0)\n        val speedsAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n       \
    \ val speedsBeforeAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ speedsBeforeAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ speedsBeforeAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val speedsBeforeAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpawaluu83.scala:38:11 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpawaluu83.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfter\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfter is already\
    \ defined as \e[33mvalue\e[0m \e[35mspeedsBeforeAfterAfterAfterAfterAfterAfterAfter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawaluu83.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter is already\
    \ defined as \e[33mvalue\e[0m \e[35mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawaluu83.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ is already defined as \e[33mvalue\e[0m "
  stdout: ''
  timestamp: 1659793307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpijwllkua.scala:49:54 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpijwllkua.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffe"
  stdout: ''
  timestamp: 1659793136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var currentCar = 0\n        var previousCar = 0\n        var currentSpeed\
    \ = 0\n        var previousSpeed = 0\n        var currentCollision = 0\n     \
    \   var previousCollision = 0\n        var currentCollisionCount = 0\n       \
    \ var previousCollisionCount = 0\n        var currentCollisionCount2 = 0\n   \
    \     var previousCollisionCount2 = 0\n        var currentCollisionCount3 = 0\n\
    \        var previousCollisionCount3 = 0\n        var currentCollisionCount4 =\
    \ 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5\
    \ = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6\
    \ = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7\
    \ = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8\
    \ = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9\
    \ = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10\
    \ = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11\
    \ = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12\
    \ = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13\
    \ = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14\
    \ = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15\
    \ = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16\
    \ = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17\
    \ = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18\
    \ = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19\
    \ = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20\
    \ = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21\
    \ = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22\
    \ = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23\
    \ = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24\
    \ = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25\
    \ = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26\
    \ = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27\
    \ = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28\
    \ = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29\
    \ = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30\
    \ = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31\
    \ = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32\
    \ = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33\
    \ = 0\n        var previousCollisionCount33 = 0\n        var currentCollisionCount34\
    \ = 0\n        var previousCollisionCount34 = 0\n        var currentCollisionCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvxpztn39.scala:89:4 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvxpztn39.scala:89:5 ---------------------\e[0m\e[0m\n\e[31m89 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = 0\n        val collisionsCountPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCar =\
    \ mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzrn50fte.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzrn50fte.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpzrn50fte.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzrn50fte.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(carsRight).filter(_._1.x == _._1.x).filter(_._1.y\
    \ == _._1.y).filter(_._1.z == _._1.z).filter(_._1.x == _._2.x).filter(_._1.y ==\
    \ _._2.y).filter(_._1.z == _._2.z).filter(_._2.x == _._1.x).filter(_._2.y == _._1.y).filter(_._2.z\
    \ == _._1.z).filter(_._2.x == _._2.x).filter(_._2.y == _._2.y).filter(_._2.z ==\
    \ _._2.z).length\n        collisions += carsCollisions\n        collisions.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfs3d7i8x.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfs3d7i8x.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfs3d7i8x.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfs3d7i8x.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfs3d7i8x.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisio"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyj0maw_8.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyj0maw_8.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyj0maw_8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyj0maw_8.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyj0maw_8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1659793305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val\
    \ carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val\
    \ carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph9xvie0q.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = Array.fill(n\
    \ / \e[31m2\e[0m)(mutable.Stack.empty[\e[35mInt\e[0m])\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph9xvie0q.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(mutable.Stack.empty[\e[35mInt\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph9xvie0q.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(mutable.Stack.empty[\e[35mInt\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph9xvie0q.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(mutable.Stack.empty[\e[35mInt\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph9"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuc1bv2fz.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuc1bv2fz.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val speed = mutable.Set[Double]()\n\
    \        val speeds = mutable.Set[Double]()\n        val speedLimit = mutable.Set[Double]()\n\
    \        val speedLimits = mutable.Set[Double]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mut\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu4q9ngpp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4q9ngpp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4q9ngpp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4q9ngpp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4q9ngpp.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is "
  stdout: ''
  timestamp: 1659793306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionCount = 0\n        val collisionsSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarCount = 0\n        val carsMovingLeft = cars.filter(_.getDirection.x\
    \ < 0).map(_.getSpeed)\n        val carsMovingRight = cars.filter(_.getDirection.x\
    \ > 0).map(_.getSpeed)\n        carsMovingLeft.foreach(speed => collisions +=\
    \ cars.find(_.getSpeed == speed))\n        carsMovingRight.foreach(speed => collisions\
    \ += cars.find(_.getSpeed == speed))\n        collisions.foreach(c => {\n    \
    \        collisionCount += 1\n            collisionsSoFar += c\n            collisionsSoFarCount\
    \ += 1\n        })\n        collisionCount - collisionsSoFarCount\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp488mmy_n.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp488mmy_n.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp488mmy_n.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp488mmy_n.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp488mmy_n.scala:14:37\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisio"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvl9du5da.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvl9du5da.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mspeedLeft is already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvl9du5da.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeedRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedRight is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvl9du5da.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mspeedLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLeft is already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvl9du5da.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mspeedRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedRight is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group o"
  stdout: ''
  timestamp: 1659793306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft\
    \ = collisions.tail\n        val collisionsRight = collisions.init\n        val\
    \ collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsauox1xx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = collisions.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsLeft is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsauox1xx.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = collisions.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsRight is already defined as \e[33mvalue\e[0m \e[35mcollisionsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsauox1xx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = collisions.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsLeft is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsauox1xx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = collisions.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsRight is already defined as \e[33mvalue\e[0m \e[35mcollisionsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsauox1xx.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = collisions.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_ < n)\n\
    \        val carsRight = cars.filter(_ >= n)\n        val collisions = carsLeft.filter(_\
    \ => carsRight.contains(_)).size\n        collisions\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3dxmpzmt.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3dxmpzmt.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3dxmpzmt.scala:14:37\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcarsLeft\e[0m = cars.filter(_ < n)\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Vector[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3dxmpzmt.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.filter(_\
    \ >= n)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0mvalue >= is not a member of Vector[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports mig"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp08zquf6e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp08zquf6e.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is alre"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.random(2)))\n        val collided\
    \ = cars.foldLeft(0)((acc, car) => acc + (car.collide(cars)))\n        collided\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjxlnrzc.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e\
    [31m2\e[0m), Vector.random(\e[31m2\e[0m)))\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                                  \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjxlnrzc.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m2\e\
    [0m), Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^\e[0m\n\e[31m   |\e[0m\
    \                                           Not found: Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxjxlnrzc.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.random(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue random is not a member of object\
    \ scala.collection.immutable.Vector - did you mean Vector.range?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxjxlnrzc.scala:13:72 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.random(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue random is not\
    \ a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxjxlnrzc.sc"
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppei_00fu.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppei_00fu.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppei_00fu.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppei_00fu.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10), Vector.random(10)))\n        val\
    \ carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n  \
    \      val collisions = carsLeft.foldLeft(0)(_ + carsRight.foldLeft(0)(_ + collision))\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_avxls3.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e\
    [31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                                \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_avxls3.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e\
    [0m), Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^\e[0m\n\e[31m   |\e[0m\
    \                                           Not found: Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_avxls3.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m),\
    \ Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                      \
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue random is not\
    \ a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_avxls3.scala:13:73 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m),\
    \ Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                      \
    \                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue random is not a member of object scala.collection.immutable.Vector -\
    \ did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/t"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc6dxcve_.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc6dxcve_.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc6dxcve_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc6dxcve_.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2)))\n        val collided = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionsCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCount = mutable.Set.empty[Car]\n\
    \        val collisionsCountCountCount = mutable.Set.empty[Car]\n        val collisionsCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCount =\
    \ mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbebmzdlj.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbebmzdlj.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCountCountCountCountCountCountCountCountCountCount\e[0m = mutable.Set.empty[\e\
    [35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsCountCountCountCountCountCountCountCountCountCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbebmzdlj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = mutable.Set.empty[\e[35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbebmzdlj.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = mutable.Set.empty[\e[35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbuldrom.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptbuldrom.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val collisionsCount\
    \ = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9t8forp5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t8forp5.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t8forp5.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t8forp5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t8forp5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Car])\n        val collisions = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n       \
    \ val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5gor7bid.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5gor7bid.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5gor7bid.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5gor7bid.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5gor7bid.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m    "
  stdout: ''
  timestamp: 1659793306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Int]()\n        val speedLimit = mutable.ListBuffer[Int]()\n\
    \        val speedLimits = mutable.ListBuffer[Int]()\n        val speedLimit2\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit2s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit3 = mutable.ListBuffer[Int]()\n        val speedLimit3s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit4 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit4s = mutable.ListBuffer[Int]()\n        val speedLimit5\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit5s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit6 = mutable.ListBuffer[Int]()\n        val speedLimit6s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit7 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit7s = mutable.ListBuffer[Int]()\n        val speedLimit8\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit8s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit9 = mutable.ListBuffer[Int]()\n        val speedLimit9s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit10 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit10s = mutable.ListBuffer[Int]()\n        val speedLimit11\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit11s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit12 = mutable.ListBuffer[Int]()\n        val speedLimit12s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit13 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit13s = mutable.ListBuffer[Int]()\n        val speedLimit14\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit14s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit15 = mutable.ListBuffer[Int]()\n        val speedLimit15s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit16 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit16s = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1k4nqg60.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp1k4nqg60.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1k4nqg60.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1k4nqg60.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1k4nqg60.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1k4nqg60.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedLimit\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1659793307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfcbsac9v.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfcbsac9v.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfcbsac9v.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfcbsac9v.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfcbsac9v.scala:23:12 ---------------------------\e[0m\e["
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2*n)(0)\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val speed =\
    \ mutable.ListBuffer.empty[Double]\n        val speeds = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit = mutable.ListBuffer.empty[Double]\n        val speedLimits\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit2 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit2s = mutable.ListBuffer.empty[Double]\n        val speedLimit3\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit3s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit4 = mutable.ListBuffer.empty[Double]\n        val speedLimit4s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit5 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit5s = mutable.ListBuffer.empty[Double]\n        val speedLimit6\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit6s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit7 = mutable.ListBuffer.empty[Double]\n        val speedLimit7s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit8 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit8s = mutable.ListBuffer.empty[Double]\n        val speedLimit9\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit9s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit10 = mutable.ListBuffer.empty[Double]\n        val speedLimit10s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit11 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit11s = mutable.ListBuffer.empty[Double]\n        val speedLimit12\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit12s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit13 = mutable.ListBuffer.empty[Double]\n        val speedLimit13s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit14 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit14s = mutable.ListBuffer.empty[Double]\n        val speedLimit15\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit15s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit16 = mutable.ListBuffer.empty[Double]\n        val speedLimit16s\
    \ = mutable.ListBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2k8vow_3.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2k8vow_3.scala:13:30 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e[31m2\e[0m*n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    Long\n\e[31m   |\e[0m      \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2k8vow_3.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k8vow_3.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer.empty[\e\
    [35mDouble\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2k8vow_3.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer.empty[\e\
    [35mDouble\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2k8vow_3.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedLimit\e[0m = mutable.ListBuffer.empty[\e\
    [35mDouble\e[0m]\n\e[31m\e[31m   |\e[0m                         "
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothRight = mut\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxq216ptx.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxq216ptx.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq216ptx.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxq216ptx.scala:15:29 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq216ptx.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]("
  stdout: ''
  timestamp: 1659793319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Car]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speedLimit = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpig1o_u29.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpig1o_u29.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpig1o_u29.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpig1o_u29.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpig1o_u29.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = muta"
  stdout: ''
  timestamp: 1659793318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothRight =\
    \ mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfk0oyt2s.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBoth\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e[33mvalue\e\
    [0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfk0oyt2s.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfk0oyt2s.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfk0oyt2s.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e\
    [31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions).forall(x\
    \ => x._1 == x._2))).sum\n        val collisionsRight = carsRight.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions).forall(x => x._1 == x._2))).sum\n       \
    \ collisions ++ collisionsLeft ++ collisionsRight\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpokydvd2r.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpokydvd2r.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpokydvd2r.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpokydvd2r.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokydvd2r.scala:16:25\
    \ --"
  stdout: ''
  timestamp: 1659793320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => new Car(math.random))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.ArrayBuffer.empty[Long]\n\
    \        carsLeft.foreach(c => carsRight.foreach(otherCar => {\n            if\
    \ (c.collidesWith(otherCar)) {\n                collisions += otherCar.index\n\
    \            }\n        }))\n        collisions.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuoxgzq_s.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ArrayBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(math.random))\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuoxgzq_s.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => new Car(i, j)))\n       \
    \ val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmsld3x21.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsld3x21.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsld3x21.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmsld3x21.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuff"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppei_00fu.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppei_00fu.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppei_00fu.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppei_00fu.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvl9du5da.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvl9du5da.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mspeedLeft is already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvl9du5da.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeedRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedRight is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvl9du5da.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mspeedLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLeft is already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvl9du5da.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mspeedRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedRight is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group o"
  stdout: ''
  timestamp: 1659793306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collisionsCount = mutable.Set.empty[Car]\n        val collisionsCount2\
    \ = mutable.Set.empty[Car]\n        val collisionsCount3 = mutable.Set.empty[Car]\n\
    \        val collisionsCount4 = mutable.Set.empty[Car]\n        val collisionsCount5\
    \ = mutable.Set.empty[Car]\n        val collisionsCount6 = mutable.Set.empty[Car]\n\
    \        val collisionsCount7 = mutable.Set.empty[Car]\n        val collisionsCount8\
    \ = mutable.Set.empty[Car]\n        val collisionsCount9 = mutable.Set.empty[Car]\n\
    \        val collisionsCount10 = mutable.Set.empty[Car]\n        val collisionsCount11\
    \ = mutable.Set.empty[Car]\n        val collisionsCount12 = mutable.Set.empty[Car]\n\
    \        val collisionsCount13 = mutable.Set.empty[Car]\n        val collisionsCount14\
    \ = mutable.Set.empty[Car]\n        val collisionsCount15 = mutable.Set.empty[Car]\n\
    \        val collisionsCount16 = mutable.Set.empty[Car]\n        val collisionsCount17\
    \ = mutable.Set.empty[Car]\n        val collisionsCount18 = mutable.Set.empty[Car]\n\
    \        val collisionsCount19 = mutable.Set.empty[Car]\n        val collisionsCount20\
    \ = mutable.Set.empty[Car]\n        val collisionsCount21 = mutable.Set.empty[Car]\n\
    \        val collisionsCount22 = mutable.Set.empty[Car]\n        val collisionsCount23\
    \ = mutable.Set.empty[Car]\n        val collisionsCount24 = mutable.Set.empty[Car]\n\
    \        val collisionsCount25 = mutable.Set.empty[Car]\n        val collisionsCount26\
    \ = mutable.Set.empty[Car]\n        val collisionsCount27 = mutable.Set.empty[Car]\n\
    \        val collisionsCount28 = mutable.Set.empty[Car]\n        val collisionsCount29\
    \ = mutable.Set.empty[Car]\n        val collisionsCount30 = mutable.Set.empty[Car]\n\
    \        val collisionsCount31 = mutable.Set.empty[Car]\n        val collisionsCount32\
    \ = mutable.Set.empty[Car]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0d0uhb0c.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0d0uhb0c.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0d0uhb0c.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0d0uhb0c.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0d0uhb0c.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions).filter(_._1).length))\n\
    \        val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.zip(collisions).filter(_._1).length))\n\
    \        collisions += collisionsLeft + collisionsRight\n        collisions.toList.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjds2s2bz.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjds2s2bz.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjds2s2bz.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjds2s2bz.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjds2s2bz.scala:16:25\
    \ --"
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).count(x\
    \ => x._1 == x._2)\n        collisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx44vf7i7.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx44vf7i7.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx44vf7i7.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx44vf7i7.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val left = mutable.ListBuffer[Long]()\n        val right = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1u5eyckp.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1u5eyckp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1u5eyckp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1u5eyckp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1u5eyckp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659793319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaknxkyu9.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaknxkyu9.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaknxkyu9.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaknxkyu9.scala:16:58\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value _1 is not a\
    \ member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659793168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32\
    \ = mutable.Set[Car]()\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpglj31c7o.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpglj31c7o.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpglj31c7o.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpglj31c7o.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpglj31c7o.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10)))\n        val collides = mutable.Set.empty[Car]\n\
    \        val collideCars = mutable.Set.empty[Car]\n        val collideCarsCount\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount2 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount3 = mutable.Set.empty[Car]\n        val collideCarsCount4\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount5 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount6 = mutable.Set.empty[Car]\n        val collideCarsCount7\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount8 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount9 = mutable.Set.empty[Car]\n        val collideCarsCount10\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount11 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount12 = mutable.Set.empty[Car]\n        val collideCarsCount13\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount14 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount15 = mutable.Set.empty[Car]\n        val collideCarsCount16\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount17 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount18 = mutable.Set.empty[Car]\n        val collideCarsCount19\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount20 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount21 = mutable.Set.empty[Car]\n        val collideCarsCount22\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount23 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount24 = mutable.Set.empty[Car]\n        val collideCarsCount25\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount26 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount27 = mutable.Set.empty[Car]\n        val collideCarsCount28\
    \ = mutable.Set.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8gmt0y2.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu8gmt0y2.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m      \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu8gmt0y2.scala:13:43 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu8gmt0y2.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu8gmt0y2.scala:13:73\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e\
    [0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                  \
    \                                                ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue random is not a member of object scala.collection."
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        carsLeft.foreach(c => collisions += carsRight.count(_.collidesWith(c)))\n\
    \        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyub413o.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyub413o.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyub413o.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyub413o.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyub413o.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisio"
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach { cars =>\n            cars.foreach\
    \ { car =>\n                cars.foreach { car =>\n                    if (car.head\
    \ == car.last) collisions += car.last\n                }\n            }\n    \
    \    }\n        collisions.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2tvfpfe.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq2tvfpfe.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var currentCar = 0\n        var previousCar = 0\n        var currentDistance\
    \ = 0\n        var previousDistance = 0\n        var currentSpeed = 0\n      \
    \  var previousSpeed = 0\n        var currentDirection = 0\n        var previousDirection\
    \ = 0\n        var currentCollision = 0\n        var previousCollision = 0\n \
    \       var currentCollisionCount = 0\n        var previousCollisionCount = 0\n\
    \        var currentCollisionCount2 = 0\n        var previousCollisionCount2 =\
    \ 0\n        var currentCollisionCount3 = 0\n        var previousCollisionCount3\
    \ = 0\n        var currentCollisionCount4 = 0\n        var previousCollisionCount4\
    \ = 0\n        var currentCollisionCount5 = 0\n        var previousCollisionCount5\
    \ = 0\n        var currentCollisionCount6 = 0\n        var previousCollisionCount6\
    \ = 0\n        var currentCollisionCount7 = 0\n        var previousCollisionCount7\
    \ = 0\n        var currentCollisionCount8 = 0\n        var previousCollisionCount8\
    \ = 0\n        var currentCollisionCount9 = 0\n        var previousCollisionCount9\
    \ = 0\n        var currentCollisionCount10 = 0\n        var previousCollisionCount10\
    \ = 0\n        var currentCollisionCount11 = 0\n        var previousCollisionCount11\
    \ = 0\n        var currentCollisionCount12 = 0\n        var previousCollisionCount12\
    \ = 0\n        var currentCollisionCount13 = 0\n        var previousCollisionCount13\
    \ = 0\n        var currentCollisionCount14 = 0\n        var previousCollisionCount14\
    \ = 0\n        var currentCollisionCount15 = 0\n        var previousCollisionCount15\
    \ = 0\n        var currentCollisionCount16 = 0\n        var previousCollisionCount16\
    \ = 0\n        var currentCollisionCount17 = 0\n        var previousCollisionCount17\
    \ = 0\n        var currentCollisionCount18 = 0\n        var previousCollisionCount18\
    \ = 0\n        var currentCollisionCount19 = 0\n        var previousCollisionCount19\
    \ = 0\n        var currentCollisionCount20 = 0\n        var previousCollisionCount20\
    \ = 0\n        var currentCollisionCount21 = 0\n        var previousCollisionCount21\
    \ = 0\n        var currentCollisionCount22 = 0\n        var previousCollisionCount22\
    \ = 0\n        var currentCollisionCount23 = 0\n        var previousCollisionCount23\
    \ = 0\n        var currentCollisionCount24 = 0\n        var previousCollisionCount24\
    \ = 0\n        var currentCollisionCount25 = 0\n        var previousCollisionCount25\
    \ = 0\n        var currentCollisionCount26 = 0\n        var previousCollisionCount26\
    \ = 0\n        var currentCollisionCount27 = 0\n        var previousCollisionCount27\
    \ = 0\n        var currentCollisionCount28 = 0\n        var previousCollisionCount28\
    \ = 0\n        var currentCollisionCount29 = 0\n        var previousCollisionCount29\
    \ = 0\n        var currentCollisionCount30 = 0\n        var previousCollisionCount30\
    \ = 0\n        var currentCollisionCount31 = 0\n        var previousCollisionCount31\
    \ = 0\n        var currentCollisionCount32 = 0\n        var previousCollisionCount32\
    \ = 0\n        var currentCollisionCount33 = 0\n        var previousCollisionCount33\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphncim1hr.scala:90:4 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphncim1hr.scala:90:5 ---------------------\e[0m\e[0m\n\e[31m90 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ArrayBuffer(0)\n        val carsLeft = mutable.ArrayBuffer(1 to n).map(i\
    \ => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val carsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val carsLeft\
    \ = carsLeft.zip(carsRight).map(x => x._1 zip x._2).filter(x => x._1 == x._2).map(x\
    \ => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x =>\
    \ x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x\
    \ => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x =>\
    \ x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x\
    \ => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x =>\
    \ x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x\
    \ => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x =>\
    \ x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x\
    \ => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x =>\
    \ x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x\
    \ => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x =>\
    \ x._2).map(x => x._1).map(x => x._2).map(x => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptrb5gqye.scala:17:1050 -------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight).map(\e\
    [36mx\e[0m => x._1 zip x._2).filter(\e[36mx\e[0m => x._1 == x._2).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2).map(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2).map(\e[36mx\e\
    [0m => \n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                                                                            \
    \                                                       "
  stdout: ''
  timestamp: 1659793320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val leftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeft = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val collisionsCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n       \
    \ val speedCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCountCountCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCountCountCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCountCountCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCountCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5vlvl5b7.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5vlvl5b7.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5vlvl5b7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5vlvl5b7.scala:16:26 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mleftToRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5vlvl5b7.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mrightToLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5vlvl5b7.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659793320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpai09g7g5.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpai09g7g5.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpai09g7g5.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpai09g7g5.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3\
    \ = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n  \
    \      val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6\
    \ = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n  \
    \      val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9\
    \ = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n \
    \       val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12\
    \ = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n \
    \       val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15\
    \ = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n \
    \       val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18\
    \ = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n \
    \       val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21\
    \ = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n \
    \       val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24\
    \ = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n \
    \       val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27\
    \ = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n \
    \       val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30\
    \ = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n \
    \       val collisionsCount32 = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud8m56ww.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpud8m56ww.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpud8m56ww.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpud8m56ww.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud8m56ww.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollided"
  stdout: ''
  timestamp: 1659793309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speeds2 = mutable.ListBuffer[Double]()\n\
    \        val speeds3 = mutable.ListBuffer[Double]()\n        val speeds4 = mutable.ListBuffer[Double]()\n\
    \        val speeds5 = mutable.ListBuffer[Double]()\n        val speeds6 = mutable.ListBuffer[Double]()\n\
    \        val speeds7 = mutable.ListBuffer[Double]()\n        val speeds8 = mutable.ListBuffer[Double]()\n\
    \        val speeds9 = mutable.ListBuffer[Double]()\n        val speeds10 = mutable.ListBuffer[Double]()\n\
    \        val speeds11 = mutable.ListBuffer[Double]()\n        val speeds12 = mutable.ListBuffer[Double]()\n\
    \        val speeds13 = mutable.ListBuffer[Double]()\n        val speeds14 = mutable.ListBuffer[Double]()\n\
    \        val speeds15 = mutable.ListBuffer[Double]()\n        val speeds16 = mutable.ListBuffer[Double]()\n\
    \        val speeds17 = mutable.ListBuffer[Double]()\n        val speeds18 = mutable.ListBuffer[Double]()\n\
    \        val speeds19 = mutable.ListBuffer[Double]()\n        val speeds20 = mutable.ListBuffer[Double]()\n\
    \        val speeds21 = mutable.ListBuffer[Double]()\n        val speeds22 = mutable.ListBuffer[Double]()\n\
    \        val speeds23 = mutable.ListBuffer[Double]()\n        val speeds24 = mutable.ListBuffer[Double]()\n\
    \        val speeds25 = mutable.ListBuffer[Double]()\n        val speeds26 = mutable.ListBuffer[Double]()\n\
    \        val speeds27 = mutable.ListBuffer[Double]()\n        val speeds28 = mutable.ListBuffer[Double]()\n\
    \        val speeds29 = mutable.ListBuffer[Double]()\n        val speeds30 = mutable.ListBuffer[Double]()\n\
    \        val speeds31 = mutable.ListBuffer[Double]()\n        val speeds32 = mutable.ListBuffer[Double]()\n\
    \        val speeds33 = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2__58pwr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2__58pwr.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2__58pwr.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2__58pwr.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2__58pwr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeeds2\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2__58pwr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mspe"
  stdout: ''
  timestamp: 1659793320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpijwllkua.scala:49:54 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpijwllkua.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffe"
  stdout: ''
  timestamp: 1659793136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var currentCar = 0\n        var previousCar = 0\n        var currentSpeed\
    \ = 0\n        var previousSpeed = 0\n        var currentDistance = 0\n      \
    \  var previousDistance = 0\n        var currentDirection = 0\n        var previousDirection\
    \ = 0\n        var currentDistanceToPreviousCar = 0\n        var previousDistanceToCurrentCar\
    \ = 0\n        var currentDistanceToPreviousSpeed = 0\n        var previousDistanceToCurrentSpeed\
    \ = 0\n        var currentDistanceToPreviousDirection = 0\n        var previousDistanceToCurrentDirection\
    \ = 0\n        var currentDistanceToPreviousDistance = 0\n        var previousDistanceToCurrentDistance\
    \ = 0\n        var currentDistanceToPreviousCarDirection = 0\n        var previousDistanceToCurrentCarDirection\
    \ = 0\n        var currentDistanceToPreviousSpeedDirection = 0\n        var previousDistanceToCurrentSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousDirectionDirection = 0\n        var\
    \ previousDistanceToCurrentDirectionDirection = 0\n        var currentDistanceToPreviousDistanceDirection\
    \ = 0\n        var previousDistanceToCurrentDistanceDirection = 0\n        var\
    \ currentDistanceToPreviousCarSpeedDirection = 0\n        var previousDistanceToCurrentCarSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousSpeedSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentSpeedSpeedDirection = 0\n        var currentDistanceToPreviousDirectionSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentDirectionSpeedDirection = 0\n    \
    \    var currentDistanceToPreviousDistanceSpeedDirection = 0\n        var previousDistanceToCurrentDistanceSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousCarSpeedSpeedDirection = 0\n     \
    \   var previousDistanceToCurrentCarSpeedSpeedDirection = 0\n        var currentDistanceToPreviousSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentSpeedSpeedSpeedDirection = 0\n   \
    \     var currentDistanceToPreviousDirectionSpeedSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentDirectionSpeedSpeedDirection = 0\n        var currentDistanceToPreviousDistanceSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentDistanceSpeedSpeedDirection = 0\n\
    \        var currentDistanceToPreviousCarSpeedSpeedSpeedDirection = 0\n      \
    \  var previousDistanceToCurrentCarSpeedSpeedSpeedDirection = 0\n        var currentDistanceToPreviousSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentSpeedSpeedSpeedDirection = 0\n   \
    \     var currentDistanceToPreviousDirectionSpeedSpeedSpeedDirection = 0\n   \
    \     var previousDistanceToCurrentDirectionSpeedSpeedSpeedDirection = 0\n   \
    \     var currentDistanceToPreviousDistanceSpeedSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentDistanceSpeedSpeedDirection = 0\n        var currentDistanceToPreviousCarSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentCarSpeedSpeedSpeedDirection = 0\n\
    \        var currentDistanceToPreviousSpeedSpeedSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentSpeedSpeedSpeedDirection = 0\n        var currentDistanceToPreviousDirectionSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentDirectionSpeedSpeedSpeedDirection\
    \ = 0\n        var current\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) ==\
    \ (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_l3ytpax.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_l3ytpax.scala:56:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m56 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentDistanceToPreviousSpeedSpeedSpeedDirection\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDistanceToPreviousSpeedSpeedSpeedDirection is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentDistanceToPreviousSpeedSpeedSpeedDirection\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_l3ytpax.scala:57:12 ---------------------------\e[0m\e[0m\n\e\
    [31m57 |\e[0m        \e[33mvar\e[0m \e[36mpreviousDistanceToCurrentSpeedSpeedSpeedDirection\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpreviousDistanceToCurrentSpeedSpeedSpeedDirection is already\
    \ defined as \e[33mvariable\e[0m \e[35mpreviousDistanceToCurrentSpeedSpeedSpeedDirection\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_l3ytpax.scala:60:12 ---------------------------\e[0m\e[0m\n\e\
    [31m60 |\e[0m        \e[33mvar\e[0m \e[36mcurrentDistanceToPreviousDistanceSpeedSpeedDirection\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDistanceToPreviousDistanceSpeedSpeedDirection is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentDistanceToPreviousDistanceSpeedSpeedDirection\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_l3ytpax.scala:61:12 ---------------------------\e[0m\e[0m\n\e\
    [31m61 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cgqlpkt.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4cgqlpkt.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBoth\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cgqlpkt.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4cgqlpkt.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4cgqlpkt.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659793210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(i\
    \ => i)\n        val collisionsSoFarSize = n\n        val collisionsSoFar = Vector.tabulate(n)(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpam8knyjq.scala:50:49 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = Vector.tabulate(n)(\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpam8knyjq.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSize\e[0m = n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mcollisionsSoFarSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpam8knyjq.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpam8knyjq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSize\e[0m\
    \ = n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mcollisionsSoFarSize is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpam8knyjq.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ArrayBuffer(0)\n        val collisionsLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer(0)\n        val collisionsBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothRight = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBoth = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothRight = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer(0)\n       \
    \ val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3_cp943o.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothLeft\e\
    [0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothLeft is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothRight\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothRight is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothRight\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBoth\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:36:12\
    \ ---------------------------"
  stdout: ''
  timestamp: 1659793202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collide2 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide3 = mutable.ListBuffer.empty[Long]\n\
    \        val collide4 = mutable.ListBuffer.empty[Long]\n        val collide5 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide6 = mutable.ListBuffer.empty[Long]\n\
    \        val collide7 = mutable.ListBuffer.empty[Long]\n        val collide8 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide9 = mutable.ListBuffer.empty[Long]\n\
    \        val collide10 = mutable.ListBuffer.empty[Long]\n        val collide11\
    \ = mutable.ListBuffer.empty[Long]\n        val collide12 = mutable.ListBuffer.empty[Long]\n\
    \        val collide13 = mutable.ListBuffer.empty[Long]\n        val collide14\
    \ = mutable.ListBuffer.empty[Long]\n        val collide15 = mutable.ListBuffer.empty[Long]\n\
    \        val collide16 = mutable.ListBuffer.empty[Long]\n        val collide17\
    \ = mutable.ListBuffer.empty[Long]\n        val collide18 = mutable.ListBuffer.empty[Long]\n\
    \        val collide19 = mutable.ListBuffer.empty[Long]\n        val collide20\
    \ = mutable.ListBuffer.empty[Long]\n        val collide21 = mutable.ListBuffer.empty[Long]\n\
    \        val collide22 = mutable.ListBuffer.empty[Long]\n        val collide23\
    \ = mutable.ListBuffer.empty[Long]\n        val collide24 = mutable.ListBuffer.empty[Long]\n\
    \        val collide25 = mutable.ListBuffer.empty[Long]\n        val collide26\
    \ = mutable.ListBuffer.empty[Long]\n        val collide27 = mutable.ListBuffer.empty[Long]\n\
    \        val collide28 = mutable.ListBuffer.empty[Long]\n        val collide29\
    \ = mutable.ListBuffer.empty[Long]\n        val collide30 = mutable.ListBuffer.empty[Long]\n\
    \        val collide31 = mutable.ListBuffer.empty[Long]\n        val collide32\
    \ = mutable.ListBuffer.empty[Long]\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpykttcy1r.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpykttcy1r.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpykttcy1r.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykttcy1r.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykttcy1r.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                               "
  stdout: ''
  timestamp: 1659793323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = 0\n        val collisionsCountPerCar = mutable.Map[Long,\
    \ Long]()\n        val collisionsCountPerCarPerCar = mutable.Map[Long, mutable.Map[Long,\
    \ Long]]()\n        val collisionsCountPerCarPerCarPerCar = mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]()\n        val collisionsCountPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ Long]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, Long]]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]]]]]()\n    \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgpmq47ae.scala:22:190 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]]]]]]]()\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   end of statement expected but ']' found\n\e[31m\e[31m-- Error: /tmp/tmpgpmq47ae.scala:25:234\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e\
    [33mval\e[0m \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]]]]]]]]]()\n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                      end of statement expected but ']' found\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpgpmq47ae.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]]]]]]]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n\
    \ / 2)(scala.math.random)\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)(_ + carRaceCollision(carsLeft.length))\n\
    \        val collisionsRight = carsRight.foldLeft(0)(_ + carRaceCollision(carsRight.length))\n\
    \        collisions += collisionsLeft + collisionsRight\n        collisions.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqb2q5a0p.scala:13:30\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Array.fill(n / \e[31m2\e[0m)(scala.math.random)\n\e[31m\e[31m   |\e[0m \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \          Found:    Long\n\e[31m   |\e[0m                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqb2q5a0p.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqb2q5a0p.scala:15:38 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.takeRight(n)\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   \
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqb2q5a0p.scala:16:39 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.dropRight(n)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpqb2q5a0p.scala:17:50 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = carsLeft.foldLeft(\e\
    [31m0\e[0m)(_ + carRaceCollision(carsLeft.length))\n\e[31m\e[31m   |\e[0m    \
    \                           "
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpao2k_b00.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq1pcwnhv.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq1pcwnhv.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq1pcwnhv.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq1pcwnhv.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq1pcwnhv.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e["
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd3uepq6e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd3uepq6e.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd3uepq6e.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd3uepq6e.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m"
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.fill(n)(0)\n        val carsLeft = mutable.ListBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ListBuffer.fill(n)(0)\n        val carsLeft =\
    \ carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n \
    \       val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        val carsLeft = carsLeft.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj5nf6zwn.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj5nf6zwn.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj5nf6zwn.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.zip(carsLeft)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj5nf6zwn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj5nf6zwn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.zip(carsLeft)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj5nf6zwn.scala:21:12 ------------"
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collisionCount =\
    \ 0\n        val collisionsCount = 0\n        val carsCount = cars.size\n    \
    \    val carsCollisions = cars.map(c => c.collide(cars))\n        carsCollisions.foreach(c\
    \ => {\n            if (c.collide(cars)) {\n                collides += c\n  \
    \              collisions += c\n                collisionCount += 1\n        \
    \    } else {\n                collisions += c\n                collisionCount\
    \ += 1\n            }\n        })\n        collisions.foreach(c => {\n       \
    \     if (collides.contains(c)) {\n                collisions += c\n         \
    \       collisionCount += 1\n            }\n        })\n        collisionCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5gwzl8yx.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gwzl8yx.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5gwzl8yx.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5gwzl8yx.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gwzl8yx.scala:14:39\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollides"
  stdout: ''
  timestamp: 1659793329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n\
    \n        val collisions = mutable.Set[Long]()\n\n        val carsCollisions =\
    \ carsLeft.zip(\n            carsRight.tail).foldLeft(mutable.Set[Long]())(\n\
    \            (carsCollisions, carsLeft.get, carsRight.tail) => {\n           \
    \     val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n            \
    \        (carsCollisions, carsLeft.get, carsRight.tail) => {\n               \
    \         val collisions = carsCollisions.union(\n                           \
    \ carsLeft.zip(carsRight.tail).foldLeft(0)(\n                                (carsCollisions,\
    \ carsLeft.get, carsRight.tail) => {\n                                    val\
    \ collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n                    \
    \                    (carsCollisions, carsLeft.get, carsRight.tail) => {\n   \
    \                                         val collisions = carsCollisions.union(\n\
    \                                                carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                    (carsCollisions, carsLeft.get,\
    \ carsRight.tail) => {\n                                                     \
    \   val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n              \
    \                                              (carsCollisions, carsLeft.get,\
    \ carsRight.tail) => {\n                                                     \
    \           val collisions = carsCollisions.union(\n                         \
    \                                           carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                                        (carsCollisions,\
    \ carsLeft.get, carsRight.tail) => {\n                                       \
    \                                     val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                                            \
    \    (carsCollisions, carsLeft.get, carsRight.tail) => {\n                   \
    \                                                                 val collisions\
    \ = carsCollisions.union(\n                                                  \
    \                                      carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                                            \
    \                (carsCollisions, carsLeft.get, carsRight.tail) => {\n       \
    \                                                                            \
    \             val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n    \
    \                                                                            \
    \                    (carsCollisions, carsLeft.get, carsRight.tail) => {\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv1jic86k.scala:21:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            (\e[36mcarsCollisions\e[0m, carsLeft.get,\
    \ carsRight.tail) => {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             not a legal formal parameter\n\
    \e[31m\e[31m-- Error: /tmp/tmpv1jic86k.scala:21:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            (\e[36mcarsCollisions\e[0m, carsLeft.get,\
    \ carsRight.tail) => {\n\e[31m\e[31m   |\e[0m                                \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \              not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpv1jic86k.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \             (\e[36mcarsCollisions\e[0m, carsLeft.get, carsRight.tail) => {\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     not a legal formal parameter\n\
    \e[31m\e[31m-- Error: /tmp/tmpv1jic86k.scala:23:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    (\e[36mcarsCollisions\e[0m, carsLeft.get,\
    \ carsRight.tail) => {\n\e[31m\e[31m   |\e[0m                                \
    \                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                       not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpv1jic86k.scala:26:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \                         (\e[36mcarsCollisions\e[0m, carsLeft.get, carsRight.tail)\
    \ => {\n\e[31m\e[31m   |\e[0m                                                \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpv1jic86k.scala:26:73\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \                         (\e[36mcarsCollisions\e[0m, carsLeft.get, carsRight.tail)\
    \ => {\n\e[31m\e[31m   |\e[0m                                                \
    \               ^^^^^^"
  stdout: ''
  timestamp: 1659793328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.fill(n / 2)(Vector.zero)\n        cars(0) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(1) = Vector.fill(n / 2)(Vector.zero)\n     \
    \   cars(2) = Vector.fill(n / 2)(Vector.zero)\n        cars(3) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(4) = Vector.fill(n / 2)(Vector.zero)\n     \
    \   cars(5) = Vector.fill(n / 2)(Vector.zero)\n        cars(6) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(7) = Vector.fill(n / 2)(Vector.zero)\n     \
    \   cars(8) = Vector.fill(n / 2)(Vector.zero)\n        cars(9) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(10) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(11) = Vector.fill(n / 2)(Vector.zero)\n        cars(12) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(13) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(14) = Vector.fill(n / 2)(Vector.zero)\n        cars(15) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(16) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(17) = Vector.fill(n / 2)(Vector.zero)\n        cars(18) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(19) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(20) = Vector.fill(n / 2)(Vector.zero)\n        cars(21) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(22) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(23) = Vector.fill(n / 2)(Vector.zero)\n        cars(24) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(25) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(26) = Vector.fill(n / 2)(Vector.zero)\n        cars(27) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(28) = Vector.fill(n / 2)(Vector.zero)\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9unwxujy.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e\
    [0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m      \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9unwxujy.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36mcars\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ zero is not a member of object scala.collection.immutable.Vector - did you mean\
    \ Vector.from?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9unwxujy.scala:15:8\
    \ -------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        cars(\e[31m0\e[0m)\
    \ = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Nothing] - did you\
    \ mean Vector[Nothing].updated?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9unwxujy.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        cars(\e[31m0\e[0m) =\
    \ Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \ Found:    Long\n\e[31m   |\e[0m                              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9unwxujy.scala:15:44\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        cars(\e[31m0\e[0m)\
    \ = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        \
    \                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue zero is not\
    \ a member of object scala.collection.immutable.Vector - did you mean Vector.from?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9unwxujy.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659793340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = mutable.ListBuffer(1 to n).reverse\n        var cars2 = mutable.ListBuffer(1\
    \ to n).reverse\n        var speed = mutable.ListBuffer(1 to n).reverse\n    \
    \    var speed2 = mutable.ListBuffer(1 to n).reverse\n        var collisionsCount\
    \ = 0\n        var collisionsCount2 = 0\n        var collisionsCount3 = 0\n  \
    \      var collisionsCount4 = 0\n        var collisionsCount5 = 0\n        var\
    \ collisionsCount6 = 0\n        var collisionsCount7 = 0\n        var collisionsCount8\
    \ = 0\n        var collisionsCount9 = 0\n        var collisionsCount10 = 0\n \
    \       var collisionsCount11 = 0\n        var collisionsCount12 = 0\n       \
    \ var collisionsCount13 = 0\n        var collisionsCount14 = 0\n        var collisionsCount15\
    \ = 0\n        var collisionsCount16 = 0\n        var collisionsCount17 = 0\n\
    \        var collisionsCount18 = 0\n        var collisionsCount19 = 0\n      \
    \  var collisionsCount20 = 0\n        var collisionsCount21 = 0\n        var collisionsCount22\
    \ = 0\n        var collisionsCount23 = 0\n        var collisionsCount24 = 0\n\
    \        var collisionsCount25 = 0\n        var collisionsCount26 = 0\n      \
    \  var collisionsCount27 = 0\n        var collisionsCount28 = 0\n        var collisionsCount29\
    \ = 0\n        var collisionsCount30 = 0\n        var collisionsCount31 = 0\n\
    \        var collisionsCount32 = 0\n        var collisionsCount33 = 0\n      \
    \  var collisionsCount34 = 0\n        var collisionsCount35 = 0\n        var collisionsCount36\
    \ = 0\n        var collisionsCount37 = 0\n        var collisionsCount38 = 0\n\
    \        var collisionsCount39 = 0\n        var collisionsCount40 = 0\n      \
    \  var collisionsCount41 = 0\n        var collisionsCount42 = 0\n        var collisionsCount43\
    \ = 0\n        var collisionsCount44 = 0\n        var collisionsCount45 = 0\n\
    \        var collisionsCount46 = 0\n        var collisionsCount47 = 0\n      \
    \  var collisionsCount48 = 0\n        var collisionsCount49 = 0\n        var collisionsCount50\
    \ = 0\n        var collisionsCount51 = 0\n        var collisionsCount52 = 0\n\
    \        var collisionsCount53 = 0\n        var collisionsCount54 = 0\n      \
    \  var collisionsCount55 = 0\n        var collisionsCount56 = 0\n        var collisionsCount57\
    \ = 0\n        var collisionsCount58 = 0\n        var collisionsCount59 = 0\n\
    \        var collisionsCount60 = 0\n        var collisionsCount61 = 0\n      \
    \  var collisionsCount62 = 0\n        var collisionsCount63 = 0\n        var collisionsCount64\
    \ = 0\n        var collisionsCount65 = 0\n        var collisionsCount66 = 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpele35rrc.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).reverse\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpele35rrc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcars2\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).reverse\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpele35rrc.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mspeed\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).reverse\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpele35rrc.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mspeed2\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).reverse\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpele35rrc.scala:84:5 ---------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2bfzslap.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount32\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bfzslap.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2bfzslap.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bfzslap.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bfzslap.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), V"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(\n\
    \            carsRight.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n        ).filter(_._2.size\
    \ == n).map(_._2.size).sum\n        carsCollisions\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7r10pady.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7r10pady.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7r10pady.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7r10pady.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit2s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit4s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit5s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit7s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit8s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit10s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit11 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit11s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit13s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit14 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit14s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit16s\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnag742xo.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpnag742xo.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnag742xo.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnag742xo.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnag742xo.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnag742xo.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedLimit\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659793209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprn_mljko.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprn_mljko.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprn_mljko.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprn_mljko.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m"
  stdout: ''
  timestamp: 1659793332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisions = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklyiwgny.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpklyiwgny.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsC"
  stdout: ''
  timestamp: 1659793332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.tail\n     \
    \   val carsRight = cars.init\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions)(car\
    \ => car._2).sum))\n        val collisionsRight = carsRight.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions)(car => car._2).sum))\n        collisions\
    \ += collisionsLeft\n        collisions += collisionsRight\n        collisions.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbola8myh.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbola8myh.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbola8myh.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpbola8myh.scala:17:91 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = carsLeft.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mcar\e[0m) => acc + (car.zip(collisions)(\e\
    [36mcar\e[0m => car._2).sum))\n\e[31m\e[31m   |\e[0m                         \
    \                                                                  ^^^\e[0m\n\e\
    [31m   |\e[0m                        Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                        I could not infer the type of the parameter\
    \ car.\n\e[31m\e[31m-- [E081] Type Error: /tmp/t"
  stdout: ''
  timestamp: 1659793334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu98jxb5r.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu98jxb5r.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount30 = mutable.ListBuffer.empty[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_ogyki7.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq_ogyki7.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random))\n\e[31m\e[31m   |\e[0m  \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq_ogyki7.scala:13:47 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random))\n\e[31m\e[31m   |\e[0m       \
    \                                        ^^^\e[0m\n\e[31m   |\e[0m           \
    \                                    Not found: type Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_ogyki7.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollides\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq_ogyki7.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_ogyki7.scala:16:30 ------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659793334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ collisions = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speed = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedRight = Array.fill(n / 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx8bwo44q.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedLeft\e[0m = Array.fill(n\
    \ / \e[31m2\e[0m)(mutable.Queue[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mspeedLeft is already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx8bwo44q.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeedRight\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(mutable.Queue[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedRight is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx8bwo44q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mspeedLeft\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(mutable.Queue[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLeft is already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx8bwo44q.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mspeedRight\e[0m = Array.fill(n / \e\
    [31m2\e[0m)(mutable.Queue[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedRight is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx8bwo44q.scala:26:"
  stdout: ''
  timestamp: 1659793338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCounts = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz4unua95.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz4unua95.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCounts_\e[0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts_ is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz4unua95.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts_\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts_ is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz4unua95.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts_\e[0m =\
    \ mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts_ is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz4unua95.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts_\e[0m =\
    \ mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts_ is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be def"
  stdout: ''
  timestamp: 1659793334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuc1bv2fz.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuc1bv2fz.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Car]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val startTime =\
    \ System.currentTimeMillis()\n        val endTime = System.currentTimeMillis()\n\
    \        val startX = scala.math.random\n        val startY = scala.math.random\n\
    \        val endX = scala.math.random\n        val endY = scala.math.random\n\
    \        val startSpeed = scala.math.random\n        val endSpeed = scala.math.random\n\
    \        val startDir = scala.math.random\n        val endDir = scala.math.random\n\
    \        val startAngle = scala.math.random\n        val endAngle = scala.math.random\n\
    \        val startHeading = scala.math.random\n        val endHeading = scala.math.random\n\
    \        val startAccel = scala.math.random\n        val endAccel = scala.math.random\n\
    \        val startThrottle = scala.math.random\n        val endThrottle = scala.math.random\n\
    \        val startBrake = scala.math.random\n        val endBrake = scala.math.random\n\
    \        val startSteer = scala.math.random\n        val endSteer = scala.math.random\n\
    \        val startJump = scala.math.random\n        val endJump = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmph01kwfgm.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmph01kwfgm.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mstartJumpForce\e[0m = scala.math.random\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstartJumpForce is already defined as \e[33mvalue\e[0m \e[35mstartJumpForce\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph01kwfgm.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mendJumpForce\e[0m = scala.math.random\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mendJumpForce is already defined as \e[33mvalue\e[0m \e[35mendJumpForce\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph01kwfgm.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mstartJumpForce\e[0m = scala.math.random\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstartJumpForce is already defined as \e[33mvalue\e[0m \e[35mstartJumpForce\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph01kwfgm.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mendJumpForce\e[0m = scala.math.random\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mendJumpForce is already defined as \e[33mvalue\e[0m \e[35mendJumpForce\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defi"
  stdout: ''
  timestamp: 1659793333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqamw7mu.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqamw7mu.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqamw7mu.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphqamw7mu.scala:16:62\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcarsCollisions\e[0m = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ _1 is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659793335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2*n)(0)\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val speed = Array.fill(2*n)(0)\n\
    \        val speeds = Array.fill(2*n)(0)\n        val speedsDiff = Array.fill(2*n)(0)\n\
    \        val speedsDiffs = Array.fill(2*n)(0)\n        val speedsDiffsSum = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSums = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSums\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSum = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSumsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n       \
    \ val speedsDiffsSumsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSums =\
    \ Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum =\
    \ Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2i1u0nrq.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2i1u0nrq.scala:13:30 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e\
    [31m2\e[0m*n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^\e[0m\n\e[31m   |\e[0m                              Found:    Long\n\e\
    [31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2i1u0nrq.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2i1u0nrq.scala:15:31 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = Array.fill(\e\
    [31m2\e[0m*n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^\e[0m\n\e[31m   |\e[0m                               Found:    Long\n\e\
    [31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2i1u0nrq.scala:16:32 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = Array.fill(\e\
    [31m2\e[0m*n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \     ^^^\e[0m\n\e[31m   |\e[0m                                Found"
  stdout: ''
  timestamp: 1659793338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsqv7ok0k.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqv7ok0k.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(\n            carsRight.zipWithIndex.map\
    \ { case (car, index) =>\n                val carCollision = car.zip(\n      \
    \              carsLeft.zipWithIndex.map { case (carLeft, indexLeft) =>\n    \
    \                    val carRight = carsRight.drop(indexLeft)\n              \
    \          val carCollision = carLeft.zip(\n                            carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                val carLeft\
    \ = carsLeft.drop(indexRight)\n                                val carCollision\
    \ = carLeft.zip(\n                                    carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                        val\
    \ carLeft = carsLeft.drop(indexRight)\n                                      \
    \  val carCollision = carLeft.zip(\n                                         \
    \   carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n            \
    \                                    val carLeft = carsLeft.drop(indexRight)\n\
    \                                                val carCollision = carLeft.zip(\n\
    \                                                    carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                         \
    \               val carLeft = carsLeft.drop(indexRight)\n                    \
    \                                    val carCollision = carLeft.zip(\n       \
    \                                                     carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                         \
    \                       val carLeft = carsLeft.drop(indexRight)\n            \
    \                                                    val carCollision = carLeft.zip(\n\
    \                                                                    carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                         \
    \                               val carLeft = carsLeft.drop(indexRight)\n    \
    \                                                                    val carCollision\
    \ = carLeft.zip(\n                                                           \
    \                 carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n\
    \                                                                            \
    \    val carLeft = carsLeft.drop(indexRight)\n                               \
    \                                                 val carCollision = carLeft.zip(\n\
    \                                                                            \
    \        carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n       \
    \                                                                            \
    \     val carLeft = carsLeft.drop(indexRight)\n                              \
    \                                                          val carCollision =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr94dpzbz.scala:46:106 --------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                                                    \
    \                                    \e[33mval\e[0m \e[36mcarCollision\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr94dpzbz.scala:48:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpr94dpzbz.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr94dpzbz.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpr94dpzbz.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling wit"
  stdout: ''
  timestamp: 1659793337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.tail\n     \
    \   val carsRight = cars.init\n        val carsCollisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsCollisionsLeft = carsLeft.tail.zip(carsRight.init).filter(_._1._1\
    \ == _._1._2).map(_._2._1).sum\n        val carsCollisionsRight = carsRight.tail.zip(carsLeft.init).filter(_._1._1\
    \ == _._1._2).map(_._2._1).sum\n        carsCollisions += carsCollisionsLeft\n\
    \        carsCollisions += carsCollisionsRight\n        carsCollisions.sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6i6c139v.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6i6c139v.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6i6c139v.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcarsCollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6i6c139v.scala:17:76 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = carsLeft.tail.zip(carsRight.init).filter(_._1._1\
    \ == _._1._2).map(_._2._1).sum\n\e[31m\e[31m   |\e[0m                        \
    \                                                  ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 value _1 is not a member of Vector[Int]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6i6c139v.scala:17:103 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsL"
  stdout: ''
  timestamp: 1659793337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = mutable.Set[Int]()\n        val collisionsLeft = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (carRaceCollision(car, collisions)))\n        val collisionsRight\
    \ = carsRight.foldLeft(0)((acc, car) => acc + (carRaceCollision(car, collisions)))\n\
    \        collisionsLeft + collisionsRight\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4vghj8n.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4vghj8n.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4vghj8n.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl4vghj8n.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4vghj8n.scala:17:88\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e\
    [0m = carsLeft.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mcar\e[0m) => acc\
    \ + (carRaceCollision(car, collisions)))\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659793335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuwdz2k_g.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuwdz2k_g.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuwdz2k_g.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuwdz2k_g.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3\
    \ = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n  \
    \      val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6\
    \ = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n  \
    \      val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9\
    \ = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n \
    \       val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12\
    \ = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n \
    \       val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15\
    \ = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n \
    \       val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18\
    \ = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n \
    \       val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21\
    \ = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n \
    \       val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24\
    \ = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n \
    \       val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27\
    \ = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n \
    \       val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30\
    \ = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n \
    \       val collisionsCount32 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp97u8o9qh.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount32\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97u8o9qh.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp97u8o9qh.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97u8o9qh.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97u8o9qh.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), V"
  stdout: ''
  timestamp: 1659793338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collide = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collision = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsn4dfyd_.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpsn4dfyd_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsn4dfyd_.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsn4dfyd_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsn4dfyd_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659793337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var count = 0\n      \
    \  var cars = Vector.fill(n / 2)(Vector.zero)\n        var collisions = Vector.fill(n\
    \ / 2)(Vector.zero)\n        var collisionsCount = 0\n        var collisionsCount2\
    \ = 0\n        var collisionsCount3 = 0\n        var collisionsCount4 = 0\n  \
    \      var collisionsCount5 = 0\n        var collisionsCount6 = 0\n        var\
    \ collisionsCount7 = 0\n        var collisionsCount8 = 0\n        var collisionsCount9\
    \ = 0\n        var collisionsCount10 = 0\n        var collisionsCount11 = 0\n\
    \        var collisionsCount12 = 0\n        var collisionsCount13 = 0\n      \
    \  var collisionsCount14 = 0\n        var collisionsCount15 = 0\n        var collisionsCount16\
    \ = 0\n        var collisionsCount17 = 0\n        var collisionsCount18 = 0\n\
    \        var collisionsCount19 = 0\n        var collisionsCount20 = 0\n      \
    \  var collisionsCount21 = 0\n        var collisionsCount22 = 0\n        var collisionsCount23\
    \ = 0\n        var collisionsCount24 = 0\n        var collisionsCount25 = 0\n\
    \        var collisionsCount26 = 0\n        var collisionsCount27 = 0\n      \
    \  var collisionsCount28 = 0\n        var collisionsCount29 = 0\n        var collisionsCount30\
    \ = 0\n        var collisionsCount31 = 0\n        var collisionsCount32 = 0\n\
    \        var collisionsCount33 = 0\n        var collisionsCount34 = 0\n      \
    \  var collisionsCount35 = 0\n        var collisionsCount36 = 0\n        var collisionsCount37\
    \ = 0\n        var collisionsCount38 = 0\n        var collisionsCount39 = 0\n\
    \        var collisionsCount40 = 0\n        var collisionsCount41 = 0\n      \
    \  var collisionsCount42 = 0\n        var collisionsCount43 = 0\n        var collisionsCount44\
    \ = 0\n        var collisionsCount45 = 0\n        var collisionsCount46 = 0\n\
    \        var collisionsCount47 = 0\n        var collisionsCount48 = 0\n      \
    \  var collisionsCount49 = 0\n        var collisionsCount50 = 0\n        var collisionsCount51\
    \ = 0\n        var collisionsCount52 = 0\n        var collisionsCount53 = 0\n\
    \        var collisionsCount54 = 0\n        var collisionsCount55 = 0\n      \
    \  var collisionsCount56 = 0\n        var collisionsCount57 = 0\n        var collisionsCount58\
    \ = 0\n        var collisionsCount59 = 0\n        var collisionsCount60 = 0\n\
    \        var collisionsCount61 = 0\n        var collisionsCount62 = 0\n      \
    \  var collisionsCount63 = 0\n        var collisionsCount64 = 0\n        var collisionsCount65\
    \ = 0\n        var collisionsCount66 = 0\n        var collisionsCount67 = 0\n\
    \        var collisionsCount68 = 0\n        var collisionsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpidce4iys.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpidce4iys.scala:14:31 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    Long\n\e[31m   |\e[0m              \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpidce4iys.scala:14:45 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue zero is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.from?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidce4iys.scala:15:37\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcollisions\e\
    [0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m      \
    \                               ^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                   Found:    Long\n\e[31m   |\e[0m                          \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpidce4iys.scala:15:51 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mvar\e[0m \e[36mcollisions\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue zero is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.from?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidce4iys.scala:85:5\
    \ ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1659793339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxli41unc.scala:14:1362 -------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh\e[0m => Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e\
    [0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e\
    [36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e[36mo\e\
    [0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e\
    [36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e[36mt\e\
    [0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e\
    [36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e[36my\e\
    [0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e\
    [36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e[36md\e\
    [0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e\
    [36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e[36mi\e\
    [0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e\
    [36ml\e[0m => \n\e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659793339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val speedSoFar\
    \ = mutable.ListBuffer[Double]()\n        val carsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val speedSoFarSoFar\
    \ = mutable.ListBuffer[Double]()\n        val carsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val\
    \ speedSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n        val carsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n      \
    \  val carsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val speedSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n    \
    \    val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n  \
    \      val speedSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwdxk4t5a.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFar is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFar\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdxk4t5a.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwdxk4t5a.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwdxk4t5a.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e[35mDouble\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwdxk4t5a.scala:16:30 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659793336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsqv7ok0k.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqv7ok0k.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.Set[Long]()\n        val collisionsLeft\
    \ = mutable.Set[Long]()\n        val collisionsRight = mutable.Set[Long]()\n \
    \       val collisionsBoth = mutable.Set[Long]()\n        val collisionsBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothRight = mutable.Set[Long]()\n\
    \        val collisionsBothBoth = mutable.Set[Long]()\n        val collisionsBothBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothBothRight = mutable.Set[Long]()\n\
    \        val collisionsBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothRight = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothRight = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBoth = mutable.Set[Long]()\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBoth = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.Set[Long]()\n  \
    \      val collisionsBothBothBothBothBothRight = mutable.Set[Long]()\n       \
    \ val collisionsBothBothBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothRight =\
    \ mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBoth = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBoth = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.Set[\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa1s54_18.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa1s54_18.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBoth\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBoth is already defined as \e[33mvalue\e\
    [0m \e[35mcollisionsBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa1s54_18.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothRight\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothRight is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothRight\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa1s54_18.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa1s54_18.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => i)\n\e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659793344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBefore = mutable.ArrayBuffer.fill(n)(0)\n        val speedsAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n       \
    \ val speedsBeforeAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ speedsBeforeAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ speedsBeforeAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val speedsBeforeAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxyt4sn96.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyt4sn96.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ is already defined as \e[33mvalue\e[0m \e[35mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxyt4sn96.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ is already defined as \e[33mvalue\e[0m \e[35mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxyt4sn96.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659793342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collided =\
    \ mutable.Set.empty[Car]\n        val colliding = mutable.Set.empty[Car]\n   \
    \     val collisions = mutable.Set.empty[Car]\n        val collisionsSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFar = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprh9_lwv3.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprh9_lwv3.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.Set.empty[\e\
    [35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprh9_lwv3.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprh9_lwv3.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1659793346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n       \
    \ val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothRight\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpufe_gr_f.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpufe_gr_f.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = mutable.ListBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m          \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpufe_gr_f.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpufe_gr_f.scala:15:29 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpufe_gr_f.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpufe_gr_f.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBoth\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659793345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeft = scala.collection.mutable.ListBuffer[Int]()\n  \
    \      var carsLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n    \
    \    var carsRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymvk4wdc.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymvk4wdc.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpao2k_b00.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbuldrom.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptbuldrom.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(0.0, 100.0), Vector.random(0.0, 100.0)))\n        val collisions\
    \ = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n \
    \       val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmsxt7b3y.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsxt7b3y.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsxt7b3y.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmsxt7b3y.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^"
  stdout: ''
  timestamp: 1659793348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount4 = mutable.ListBuffer.empty[Long]\n        val collisionsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount7 = mutable.ListBuffer.empty[Long]\n        val collisionsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount10 = mutable.ListBuffer.empty[Long]\n        val collisionsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount13 = mutable.ListBuffer.empty[Long]\n        val collisionsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount16 = mutable.ListBuffer.empty[Long]\n        val collisionsCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount19 = mutable.ListBuffer.empty[Long]\n        val collisionsCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount22 = mutable.ListBuffer.empty[Long]\n        val collisionsCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount25 = mutable.ListBuffer.empty[Long]\n        val collisionsCount26\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount28 = mutable.ListBuffer.empty[Long]\n        val collisionsCount29\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkc393rp7.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkc393rp7.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                                 \
    \  ^\e[0m\n\e[31m   |\e[0m                                   Found:    (n : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc393rp7.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkc393rp7.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkc393rp7.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Long]()\n\
    \        val collisions = mutable.HashSet[Long]()\n        val collisionsSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.HashSet[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqrovd6rs.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqrovd6rs.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqrovd6rs.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqrovd6rs.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[3"
  stdout: ''
  timestamp: 1659793348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnhowg0_j.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnhowg0_j.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnhowg0_j.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnhowg0_j.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2\
    \ * n)(new Car)\n        val collisions = mutable.ListBuffer[Long]()\n       \
    \ val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = cars.zipWithIndex.filter(_._1 < n).map(_._2)\n       \
    \ val carsRight = cars.zipWithIndex.filter(_._1 > n).map(_._2)\n        val carsLeft\
    \ = carsLeft.take(n)\n        val carsRight = carsRight.take(n)\n        val collisionsLeft\
    \ = carsLeft.foldLeft(0)((acc, i) => acc + carsRight(i).collide(cars(i)))\n  \
    \      val collisionsRight = carsRight.foldLeft(0)((acc, i) => acc + carsLeft(i).collide(cars(i)))\n\
    \        collisions += collisionsLeft\n        collisions += collisionsRight\n\
    \        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwz4eb2mt.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.zipWithIndex.filter(_._1\
    \ < n).map(_._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwz4eb2mt.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.zipWithIndex.filter(_._1\
    \ > n).map(_._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwz4eb2mt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.take(n)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwz4eb2mt.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.take(n)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwz4eb2mt.scala:13:30\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Array.fill(\e[31m2\e[0m * n)(\e[33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m\
    \   |\e"
  stdout: ''
  timestamp: 1659793349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.zero))\n\
    \        cars.foreach(c => cars(0) = c)\n        cars.foreach(c => cars(1) = c)\n\
    \        cars.foreach(c => cars(2) = c)\n        cars.foreach(c => cars(3) = c)\n\
    \        cars.foreach(c => cars(4) = c)\n        cars.foreach(c => cars(5) = c)\n\
    \        cars.foreach(c => cars(6) = c)\n        cars.foreach(c => cars(7) = c)\n\
    \        cars.foreach(c => cars(8) = c)\n        cars.foreach(c => cars(9) = c)\n\
    \        cars.foreach(c => cars(10) = c)\n        cars.foreach(c => cars(11) =\
    \ c)\n        cars.foreach(c => cars(12) = c)\n        cars.foreach(c => cars(13)\
    \ = c)\n        cars.foreach(c => cars(14) = c)\n        cars.foreach(c => cars(15)\
    \ = c)\n        cars.foreach(c => cars(16) = c)\n        cars.foreach(c => cars(17)\
    \ = c)\n        cars.foreach(c => cars(18) = c)\n        cars.foreach(c => cars(19)\
    \ = c)\n        cars.foreach(c => cars(20) = c)\n        cars.foreach(c => cars(21)\
    \ = c)\n        cars.foreach(c => cars(22) = c)\n        cars.foreach(c => cars(23)\
    \ = c)\n        cars.foreach(c => cars(24) = c)\n        cars.foreach(c => cars(25)\
    \ = c)\n        cars.foreach(c => cars(26) = c)\n        cars.foreach(c => cars(27)\
    \ = c)\n        cars.foreach(c => cars(28) = c)\n        cars.foreach(c => cars(29)\
    \ = c)\n        cars.foreach(c => cars(30) = c)\n        cars.foreach(c => cars(31)\
    \ = c)\n        cars.foreach(c => cars(32) = c)\n        cars.foreach(c => cars(33)\
    \ = c)\n        cars.foreach(c => cars(34) = c)\n        cars.foreach(c => cars(35)\
    \ = c)\n        cars.foreach(c => cars(36) = c)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqzehbnl.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.zero))\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgqzehbnl.scala:14:59 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.zero))\n\e[31m\e[31m \
    \  |\e[0m                                                           ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqzehbnl.scala:14:74\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e\
    [0m => Vector.zero))\n\e[31m\e[31m   |\e[0m                                  \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue zero\
    \ is not a member of object scala.collection.immutable.Vector - did you mean Vector.from?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqzehbnl.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        cars.foreach(\e[36mc\e[0m => cars(\e[31m0\e[0m)\
    \ = c)\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e\
    [0mvalue update is not a member of Vector[Vector[Nothing]] - did you mean Vector[Vector[Nothing]].updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqzehbnl.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        cars.foreach(\e[36mc\e[0m => cars(\e[31m1\e[0m)\
    \ = c)\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659793353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var currentCar = 0\n        var previousCar = 0\n        var currentCollision\
    \ = 0\n        var previousCollision = 0\n        var currentSpeed = 0\n     \
    \   var previousSpeed = 0\n        var currentCollisionDistance = 0\n        var\
    \ previousCollisionDistance = 0\n        var currentCollisionDistanceSquared =\
    \ 0\n        var previousCollisionDistanceSquared = 0\n        var currentCollisionDistanceSquared2\
    \ = 0\n        var previousCollisionDistanceSquared2 = 0\n        var currentSpeedSquared\
    \ = 0\n        var previousSpeedSquared = 0\n        var currentSpeedSquared2\
    \ = 0\n        var previousSpeedSquared2 = 0\n        var currentSpeedSquared3\
    \ = 0\n        var previousSpeedSquared3 = 0\n        var currentSpeedSquared4\
    \ = 0\n        var previousSpeedSquared4 = 0\n        var currentSpeedSquared5\
    \ = 0\n        var previousSpeedSquared5 = 0\n        var currentSpeedSquared6\
    \ = 0\n        var previousSpeedSquared6 = 0\n        var currentSpeedSquared7\
    \ = 0\n        var previousSpeedSquared7 = 0\n        var currentSpeedSquared8\
    \ = 0\n        var previousSpeedSquared8 = 0\n        var currentSpeedSquared9\
    \ = 0\n        var previousSpeedSquared9 = 0\n        var currentSpeedSquared10\
    \ = 0\n        var previousSpeedSquared10 = 0\n        var currentSpeedSquared11\
    \ = 0\n        var previousSpeedSquared11 = 0\n        var currentSpeedSquared12\
    \ = 0\n        var previousSpeedSquared12 = 0\n        var currentSpeedSquared13\
    \ = 0\n        var previousSpeedSquared13 = 0\n        var currentSpeedSquared14\
    \ = 0\n        var previousSpeedSquared14 = 0\n        var currentSpeedSquared15\
    \ = 0\n        var previousSpeedSquared15 = 0\n        var currentSpeedSquared16\
    \ = 0\n        var previousSpeedSquared16 = 0\n        var currentSpeedSquared17\
    \ = 0\n        var previousSpeedSquared17 = 0\n        var currentSpeedSquared18\
    \ = 0\n        var previousSpeedSquared18 = 0\n        var currentSpeedSquared19\
    \ = 0\n        var previousSpeedSquared19 = 0\n        var currentSpeedSquared20\
    \ = 0\n        var previousSpeedSquared20 = 0\n        var currentSpeedSquared21\
    \ = 0\n        var previousSpeedSquared21 = 0\n        var currentSpeedSquared22\
    \ = 0\n        var previousSpeedSquared22 = 0\n        var currentSpeedSquared23\
    \ = 0\n        var previousSpeedSquared23 = 0\n        var currentSpeedSquared24\
    \ = 0\n        var previousSpeedSquared24 = 0\n        var currentSpeedSquared25\
    \ = 0\n        var previousSpeedSquared25 = 0\n        var currentSpeedSquared26\
    \ = 0\n        var previousSpeedSquared26 = 0\n        var currentSpeedSquared27\
    \ = 0\n        var previousSpeedSquared27 = 0\n        var current\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ptbulnl.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2ptbulnl.scala:81:5 ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.tail\n     \
    \   val carsRight = cars.init\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.last.last.last\
    \ - car.last.last.first))\n        val collisionsRight = carsRight.foldLeft(0)((acc,\
    \ car) => acc + (car.last.last.first - car.last.last.last))\n        val collisionsTotal\
    \ = collisionsLeft + collisionsRight\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiycsvwo8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsTotalInt\e[0m\
    \ = collisionsTotal.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsTotalInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mcollisionsTotalInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiycsvwo8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionsTotalFloat\e[0m\
    \ = collisionsTotal.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsTotalFloat is already defined as \e[33mvalue\e[0m\
    \ \e[35mcollisionsTotalFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiycsvwo8.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcollisionsTotalInt\e[0m\
    \ = collisionsTotal.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsTotalInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mcollisionsTotalInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiycsvwo8.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsTotalFloat\e[0m\
    \ = collisionsTotal.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsTotalFloat is already defined as \e[33mvalue\e[0m\
    \ \e[35mcollisionsTotalFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiycsvwo8.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    "
  stdout: ''
  timestamp: 1659793349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBoth = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBothRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val collisionsBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n     \
    \   val collisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n      \
    \  val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n    \
    \    val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBoth\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8d24liub.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8d24liub.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothRight is already defined as \e[33mvalue\e\
    [0m \e[35mcollisionsBothBothBothBothRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8d24liub.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBoth\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBoth is already defined as \e[33mvalue\e\
    [0m \e[35mcollisionsBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8d24liub.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothLeft\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcollisionsBothBothBothBothBothLeft is already defined as \e[33mvalue\e\
    [0m \e[35mcollisionsBothBothBothBothBothLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8d24liub.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothRight\e[0m = mutab"
  stdout: ''
  timestamp: 1659793350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1.x\
    \ == _._1.x).length\n        collisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphkyozje1.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphkyozje1.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphkyozje1.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphkyozje1.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphkyozje1.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2\
    \ * n)(new Car)\n        val collisions = mutable.ListBuffer[Long]()\n       \
    \ val collisionsSoFar = 0\n        val collisionsSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpeyaslzfv.scala:39:11 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpeyaslzfv.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeyaslzfv.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeyaslzfv.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ E"
  stdout: ''
  timestamp: 1659793351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyj0maw_8.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyj0maw_8.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyj0maw_8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyj0maw_8.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyj0maw_8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1659793305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.fill(n)(new Car)\n        val carsRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeft = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeft = mutable.ListBuffer.fill(n)(new Car)\n  \
    \      val carsLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n        val\
    \ carsRightToLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6kcyhmjx.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kcyhmjx.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6kcyhmjx.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer.fill(n)(\e[33mnew\e\
    [0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6kcyhmjx.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer.fill(n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                       Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6kcyhmjx.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.fill(n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kcyhmjx.scala:15:55 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.fill(n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e["
  stdout: ''
  timestamp: 1659793349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRightToLeftToRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeft\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps60hj4m8.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps60hj4m8.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps60hj4m8.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps60hj4m8.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmps60hj4m8.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps60hj4m8.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659793351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph259htr9.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph259htr9.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph259htr9.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph259htr9.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph259htr9.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3ttxctug.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ttxctug.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCount\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e[35mcollisionsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ttxctug.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3ttxctug.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3ttxctug.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must al"
  stdout: ''
  timestamp: 1659793352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = 0\n \
    \       val cars = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp22zbw4b3.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp22zbw4b3.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp22zbw4b3.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp22zbw4b3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp22zbw4b3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [3"
  stdout: ''
  timestamp: 1659793352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd3uepq6e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd3uepq6e.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd3uepq6e.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd3uepq6e.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m"
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collisions\
    \ = mutable.Set.empty[Long]\n        val carsLeft = cars.takeRight(n)\n      \
    \  val carsRight = cars.dropRight(n)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        carsLeft.foreach(c =>\
    \ collisions += c._1.collidesWith(c._2))\n        carsRight.foreach(c => collisions\
    \ += c._1.collidesWith(c._2))\n        collisions.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk0syktgt.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk0syktgt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.zip(carsLeft)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpk0syktgt.scala:13:35 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0syktgt.scala:13:47 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                       \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                           \
    \    Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk0syktgt.scala:14:25 ------------------------\e[0m\e[0m\n\e[31m14 |\e"
  stdout: ''
  timestamp: 1659793353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysz_9jdk.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659793353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarIter\
    \ = collisionsSoFar.iterator\n        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n\
    \        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIter\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpftn42h8t.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIter is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpftn42h8t.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpftn42h8t.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of to"
  stdout: ''
  timestamp: 1659793356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjmgwkx2g.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjmgwkx2g.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjmgwkx2g.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjmgwkx2g.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjmgwkx2g.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(\n            carsRight.zip(carsLeft.tail,\
    \ carsRight.head))\n            .filter(_._1.collidesWith(_._2))\n           \
    \ .filter(_._1.collidesWith(_._3))\n            .filter(_._1.collidesWith(_._4))\n\
    \            .filter(_._1.collidesWith(_._5))\n            .filter(_._1.collidesWith(_._6))\n\
    \            .filter(_._1.collidesWith(_._7))\n            .filter(_._1.collidesWith(_._8))\n\
    \            .filter(_._1.collidesWith(_._9))\n            .filter(_._1.collidesWith(_._10))\n\
    \            .filter(_._1.collidesWith(_._11))\n            .filter(_._1.collidesWith(_._12))\n\
    \            .filter(_._1.collidesWith(_._13))\n            .filter(_._1.collidesWith(_._14))\n\
    \            .filter(_._1.collidesWith(_._15))\n            .filter(_._1.collidesWith(_._16))\n\
    \            .filter(_._1.collidesWith(_._17))\n            .filter(_._1.collidesWith(_._18))\n\
    \            .filter(_._1.collidesWith(_._19))\n            .filter(_._1.collidesWith(_._20))\n\
    \            .filter(_._1.collidesWith(_._21))\n            .filter(_._1.collidesWith(_._22))\n\
    \            .filter(_._1.collidesWith(_._23))\n            .filter(_._1.collidesWith(_._24))\n\
    \            .filter(_._1.collidesWith(_._25))\n            .filter(_._1.collidesWith(_._26))\n\
    \            .filter(_._1.collidesWith(_._27))\n            .filter(_._1.collidesWith(_._28))\n\
    \            .filter(_._1.collidesWith(_._29))\n            .filter(_._1.collidesWith(_._30))\n\
    \            .filter(_._1.collidesWith(_._31))\n            .filter(_._1.collidesWith(_._32))\n\
    \            .filter(_._1.collidesWith(_._33))\n            .filter(_._1.collidesWith(_._\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyo1c8nnh.scala:51:40 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            .filter(_._1.collidesWith(_._\n\e[31m\e[31m\
    \   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m    \
    \                               an identifier expected, but '_' found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyo1c8nnh.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyo1c8nnh.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyo1c8nnh.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyo1c8nnh.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Ve"
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_(0)\
    \ < 0)\n        val carsRight = cars.filter(_(0) >= 0)\n        val carsCollisions\
    \ = carsLeft.filter(_(0) != _(0) && _(0) != _(1) && _(1) != _(0) && _(1) != _(1)).length\n\
    \        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96076_dx.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp96076_dx.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp96076_dx.scala:16:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsCollisions\e[0m = carsLeft.filter(_(\e[31m0\e[0m) != _(\e[31m0\e[0m)\
    \ && _(\e[31m0\e[0m) != _(\e[31m1\e[0m) && _(\e[31m1\e[0m) != _(\e[31m0\e[0m)\
    \ && _(\e[31m1\e[0m) != _(\e[31m1\e[0m)).length\n\e[31m\e[31m   |\e[0m       \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n3 errors found\n"
  stdout: ''
  timestamp: 1659793359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbuldrom.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptbuldrom.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n       \
    \ val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothRight\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cmwb1_z.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8cmwb1_z.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cmwb1_z.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cmwb1_z.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cmwb1_z.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBoth\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-expla"
  stdout: ''
  timestamp: 1659793359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val maxSpeed\
    \ = 100\n        val minSpeed = -10\n        val maxDistance = 10000\n       \
    \ val minDistance = -10\n        val maxTime = 10\n        val minTime = -100\n\
    \        val maxDistance2 = 10000\n        val minDistance2 = -10\n        val\
    \ maxTime2 = 10\n        val minTime2 = -100\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val distance = mutable.ArrayBuffer.fill(n)(0)\n        val time = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed2 = mutable.ArrayBuffer.fill(n)(0)\n        val distance2 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed3 = mutable.ArrayBuffer.fill(n)(0)\n        val distance3 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time3 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed4 = mutable.ArrayBuffer.fill(n)(0)\n        val distance4 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time4 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed5 = mutable.ArrayBuffer.fill(n)(0)\n        val distance5 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed6 = mutable.ArrayBuffer.fill(n)(0)\n        val distance6 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time6 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed7 = mutable.ArrayBuffer.fill(n)(0)\n        val distance7 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time7 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed8 = mutable.ArrayBuffer.fill(n)(0)\n        val distance8 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed9 = mutable.ArrayBuffer.fill(n)(0)\n        val distance9 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time9 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed10 = mutable.ArrayBuffer.fill(n)(0)\n        val distance10\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val time10 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed11 = mutable.ArrayBuffer.fill(n)(0)\n        val distance11\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val time\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpia2algr9.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia2algr9.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia2algr9.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpia2algr9.scala:25:20 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpia2algr9.scala:26:23 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdistance\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpia2algr9.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mtime\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659793360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3\
    \ = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n  \
    \      val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6\
    \ = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n  \
    \      val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9\
    \ = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n \
    \       val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12\
    \ = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n \
    \       val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15\
    \ = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n \
    \       val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18\
    \ = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n \
    \       val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21\
    \ = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n \
    \       val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24\
    \ = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n \
    \       val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27\
    \ = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n \
    \       val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30\
    \ = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n \
    \       val collisionsCount32 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp97u8o9qh.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount32\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97u8o9qh.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp97u8o9qh.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97u8o9qh.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97u8o9qh.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), V"
  stdout: ''
  timestamp: 1659793338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val xs = mutable.ListBuffer[Double]()\n        val ys = mutable.ListBuffer[Double]()\n\
    \        val xs1 = mutable.ListBuffer[Double]()\n        val ys1 = mutable.ListBuffer[Double]()\n\
    \        val xs2 = mutable.ListBuffer[Double]()\n        val ys2 = mutable.ListBuffer[Double]()\n\
    \        val xs3s = mutable.ListBuffer[Double]()\n        val ys3s = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val xs3b = mutable.ListBuffer[Double]()\n        val ys3b = mutable.ListBuffer[Double]()\n\
    \        val xs3l = mutable.ListBuffer[Double]()\n        val ys3l = mutable.ListBuffer[Double]()\n\
    \        val xs3r = mutable.ListBuffer[Double]()\n        val ys3r = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val xs3b = mutable.ListBuffer[Double]()\n        val ys3b = mutable.ListBuffer[Double]()\n\
    \        val xs3l = mutable.ListBuffer[Double]()\n        val ys3l = mutable.ListBuffer[Double]()\n\
    \        val xs3r = mutable.ListBuffer[Double]()\n        val ys3r = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val xs3b = mutable.ListBuffer[Double]()\n        val ys3b = mutable.ListBuffer[Double]()\n\
    \        val xs3l = mutable.ListBuffer[Double]()\n        val ys3l = mutable.ListBuffer[Double]()\n\
    \        val xs3r = mutable.ListBuffer[Double]()\n        val ys3r = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd880q5rk.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd880q5rk.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mxs3t\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs3t is\
    \ already defined as \e[33mvalue\e[0m \e[35mxs3t\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd880q5rk.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mys3t\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys3t is\
    \ already defined as \e[33mvalue\e[0m \e[35mys3t\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd880q5rk.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mxs3b\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs3b is\
    \ already defined as \e[33mvalue\e[0m \e[35mxs3b\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd880q5rk.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mys3b\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys3b is\
    \ already defined as \e[33mvalue\e[0m \e[35mys3b\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd880q5rk.scala:36:12\
    \ ------------------"
  stdout: ''
  timestamp: 1659793360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        carsLeft.foreach { case (left, right) => if (left.zip(right).forall(_.forall(_.isDefined)))\
    \ collisions += 1 }\n        carsRight.foreach { case (left, right) => if (left.zip(right).forall(_.forall(_.isDefined)))\
    \ collisions += 1 }\n        collisions.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_11g_6mk.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_11g_6mk.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.zip(carsLeft)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp_11g_6mk.scala:13:35 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_11g_6mk.scala:13:59 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m     \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_11g_6mk.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659793363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.random(2)))\n        val collisions\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiqffo1si.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiqffo1si.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiqffo1si.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiqffo1si.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error:"
  stdout: ''
  timestamp: 1659793363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsy7v5e2u.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsy7v5e2u.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysz_9jdk.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659793353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2*n)(new\
    \ Car)\n        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpefbnp93k.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpefbnp93k.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbnp93k.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbnp93k.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbnp93k.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val leftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeft = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount = mutable.ArrayBuffer.fill\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpckf3nxaa.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mleftToRightCount\e[0m =\
    \ mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftToRightCount is already defined as \e[33mvalue\e[0m \e\
    [35mleftToRightCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpckf3nxaa.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mrightToLeftCount\e[0m =\
    \ mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightToLeftCount is already defined as \e[33mvalue\e[0m \e\
    [35mrightToLeftCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpckf3nxaa.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mspeedCount\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedCount is already defined as \e[33mvalue\e[0m \e[35mspeedCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpckf3nxaa.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpckf3nxaa.scala:26:12 ---------------------------\e[0m\e["
  stdout: ''
  timestamp: 1659793363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n \
    \       var collisionsLeft = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i\
    \ + j))\n        var collisionsRight = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        cars.foreach(c => collisions += c.forall(x => collisionsLeft.exists(y\
    \ => x == y) || collisionsRight.exists(y => x == y)))\n        collisions\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpci4yp6rv.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpci4yp6rv.scala:14:59 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpci4yp6rv.scala:15:45\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcollisionsLeft\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                             ^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpci4yp6rv.scala:15:69\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcollisionsLeft\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                               \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \    "
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val carsSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFar = mutable.ListBuffer[Double]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val carsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFar = mutable.ListBuffer[Double]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val carsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val carsSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val speedsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n    \
    \    val speedsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n    \
    \    val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpslcdjtl2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpslcdjtl2.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpslcdjtl2.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \e\
    [33mvalue\e[0m \e[35mcarsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpslcdjtl2.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e[35mDouble\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsSoFarSoFarSoFarSoFarSoFarSoFar is already defined as\
    \ \e[33mvalue\e[0m \e[35mspeedsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpslcdjtl2.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcol"
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n\
    \ / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7osnfnv.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph7osnfnv.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(Array[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph7osnfnv.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(Array[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph7osnfnv.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(Array[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph7osnfnv.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = Array.fill(n / \e[31m2\e\
    [0m)(Array[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods m"
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_ < n)\n\
    \        val carsRight = cars.filter(_ >= n)\n        val carsCollisions = carsLeft.filter(_\
    \ => carsRight.contains(_)).length\n        carsCollisions\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlzaqa2u.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjlzaqa2u.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjlzaqa2u.scala:14:37\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcarsLeft\e[0m = cars.filter(_ < n)\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Vector[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjlzaqa2u.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.filter(_\
    \ >= n)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0mvalue >= is not a member of Vector[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports mig"
  stdout: ''
  timestamp: 1659793365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val left = mutable.ListBuffer[Long]()\n        val right = mutable.ListBuffer[Long]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val car2 = mutable.ListBuffer[Long]()\n        val car3 = mutable.ListBuffer[Long]()\n\
    \        val car4 = mutable.ListBuffer[Long]()\n        val car5 = mutable.ListBuffer[Long]()\n\
    \        val car6 = mutable.ListBuffer[Long]()\n        val car7 = mutable.ListBuffer[Long]()\n\
    \        val car8 = mutable.ListBuffer[Long]()\n        val car9 = mutable.ListBuffer[Long]()\n\
    \        val car10 = mutable.ListBuffer[Long]()\n        val car11 = mutable.ListBuffer[Long]()\n\
    \        val car12 = mutable.ListBuffer[Long]()\n        val car13 = mutable.ListBuffer[Long]()\n\
    \        val car14 = mutable.ListBuffer[Long]()\n        val car15 = mutable.ListBuffer[Long]()\n\
    \        val car16 = mutable.ListBuffer[Long]()\n        val car17 = mutable.ListBuffer[Long]()\n\
    \        val car18 = mutable.ListBuffer[Long]()\n        val car19 = mutable.ListBuffer[Long]()\n\
    \        val car20 = mutable.ListBuffer[Long]()\n        val car21 = mutable.ListBuffer[Long]()\n\
    \        val car22 = mutable.ListBuffer[Long]()\n        val car23 = mutable.ListBuffer[Long]()\n\
    \        val car24 = mutable.ListBuffer[Long]()\n        val car25 = mutable.ListBuffer[Long]()\n\
    \        val car26 = mutable.ListBuffer[Long]()\n        val car27 = mutable.ListBuffer[Long]()\n\
    \        val car28 = mutable.ListBuffer[Long]()\n        val car29 = mutable.ListBuffer[Long]()\n\
    \        val car30 = mutable.ListBuffer[Long]()\n        val car31 = mutable.ListBuffer[Long]()\n\
    \        val car32 = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocfotipg.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpocfotipg.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpocfotipg.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpocfotipg.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpocfotipg.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpocfotipg.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mut"
  stdout: ''
  timestamp: 1659793363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n)\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsCount\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount2 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount3 = mutable.ListBuffer[Long]()\n        val collisionsCount4\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount5 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount6 = mutable.ListBuffer[Long]()\n        val collisionsCount7\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount8 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount9 = mutable.ListBuffer[Long]()\n        val collisionsCount10\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount11 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount12 = mutable.ListBuffer[Long]()\n        val collisionsCount13\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount14 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount15 = mutable.ListBuffer[Long]()\n        val collisionsCount16\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount17 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount18 = mutable.ListBuffer[Long]()\n        val collisionsCount19\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount20 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount21 = mutable.ListBuffer[Long]()\n        val collisionsCount22\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount23 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount24 = mutable.ListBuffer[Long]()\n        val collisionsCount25\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount26 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount27 = mutable.ListBuffer[Long]()\n        val collisionsCount28\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount29 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount30 = mutable.ListBuffer[Long]()\n        val collisionsCount31\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpztsbkf60.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztsbkf60.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = mutable.ListBuffer(\e[31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztsbkf60.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpztsbkf60.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpztsbkf60.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount2\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztsbkf60.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount3\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdgcic9ah.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgcic9ah.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdgcic9ah.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdgcic9ah.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgcic9ah.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollided"
  stdout: ''
  timestamp: 1659793365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_k63cs3q.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_k63cs3q.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Map.empty[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_k63cs3q.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_k63cs3q.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Map.empty[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_k63cs3q.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ListBuffer[Int]())\n        val carsLeft = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ListBuffer[Int]())\n        val carsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ListBuffer[Int]())\n        val carsCollisions = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ListBuffer[Int]())\n        val carsCollisionsLeft =\
    \ mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm5mxblz1.scala:32:70 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm5mxblz1.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ArrayBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer[\e[35mInt\e[0m]())\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpm5mxblz1.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer[\e\
    [35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpm5mxblz1.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer[\e\
    [35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659793365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Car]\n\
    \        val collide = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collision = mutable.Set.empty[Car]\n        val collisionCount =\
    \ mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0bumywro.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0bumywro.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set.empty[\e\
    [35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bumywro.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set.empty[\e\
    [35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bumywro.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set.empty[\e\
    [35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35mcollisionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bumywro.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionCount\e[0m = mutable.Set.empty[\e\
    [35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCount is already defined as \e[33mvalue\e[0m \e[35"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysz_9jdk.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysz_9jdk.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659793353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar2\
    \ = mutable.Set[Long]()\n        val collisionsSoFar3 = mutable.Set[Long]()\n\
    \        val collisionsSoFar4 = mutable.Set[Long]()\n        val collisionsSoFar5\
    \ = mutable.Set[Long]()\n        val collisionsSoFar6 = mutable.Set[Long]()\n\
    \        val collisionsSoFar7 = mutable.Set[Long]()\n        val collisionsSoFar8\
    \ = mutable.Set[Long]()\n        val collisionsSoFar9 = mutable.Set[Long]()\n\
    \        val collisionsSoFar10 = mutable.Set[Long]()\n        val collisionsSoFar11\
    \ = mutable.Set[Long]()\n        val collisionsSoFar12 = mutable.Set[Long]()\n\
    \        val collisionsSoFar13 = mutable.Set[Long]()\n        val collisionsSoFar14\
    \ = mutable.Set[Long]()\n        val collisionsSoFar15 = mutable.Set[Long]()\n\
    \        val collisionsSoFar16 = mutable.Set[Long]()\n        val collisionsSoFar17\
    \ = mutable.Set[Long]()\n        val collisionsSoFar18 = mutable.Set[Long]()\n\
    \        val collisionsSoFar19 = mutable.Set[Long]()\n        val collisionsSoFar20\
    \ = mutable.Set[Long]()\n        val collisionsSoFar21 = mutable.Set[Long]()\n\
    \        val collisionsSoFar22 = mutable.Set[Long]()\n        val collisionsSoFar23\
    \ = mutable.Set[Long]()\n        val collisionsSoFar24 = mutable.Set[Long]()\n\
    \        val collisionsSoFar25 = mutable.Set[Long]()\n        val collisionsSoFar26\
    \ = mutable.Set[Long]()\n        val collisionsSoFar27 = mutable.Set[Long]()\n\
    \        val collisionsSoFar28 = mutable.Set[Long]()\n        val collisionsSoFar29\
    \ = mutable.Set[Long]()\n        val collisionsSoFar30 = mutable.Set[Long]()\n\
    \        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8q6pwx4g.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8q6pwx4g.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8q6pwx4g.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8q6pwx4g.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8q6pwx4g.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach { cars =>\n            cars.foreach\
    \ { car =>\n                cars.foreach { car2 =>\n                    val collision\
    \ = car.zip(car2).forall { case (c1, c2) => c1.zip(c2).forall { case (c1, c2)\
    \ => c1 == c2 } }\n                    if (collision) collisions += cars.count(_\
    \ == car)\n                }\n            }\n        }\n        collisions.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeb4drtss.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeb4drtss.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i != j) {\n                    val collision = carsLeft.exists(carsRight.contains(_\
    \ + j))\n                    if (collision) collisions += collision\n        \
    \        }\n            }\n        }\n        collisions.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm211tas0.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpm211tas0.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm211tas0.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm211tas0.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm211tas0.scala:16:25\
    \ --"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        cars.foreach { cars =>\n         \
    \   cars.foreach { car =>\n                val collision = cars.foldLeft(0) {\
    \ (acc, car) =>\n                    val carLeft = car.head\n                \
    \    val carRight = car.last\n                    val carLeftRight = carLeft.last\
    \ + carLeft.head\n                    val carRightLeft = carRight.last + carRight.head\n\
    \                    if (carLeftRight == carRightLeft) {\n                   \
    \     acc + 1\n                    } else {\n                        acc\n   \
    \                 }\n                }\n                collisions += collision\n\
    \            }\n        }\n        collisions.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp471i0fe6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp471i0fe6.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => Car(i, j)))\n        val\
    \ collisions = mutable.ArrayBuffer(0)\n        val collisionsLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer(0)\n        val collisionsBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothRight = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBoth = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothRight = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer(0)\n       \
    \ val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsmcn_e_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothLeft\e\
    [0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothLeft is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsmcn_e_.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothRight\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothRight is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothRight\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsmcn_e_.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBoth\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsmcn_e_.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothLeft\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothLeft is already defined as \e\
    [33mvalue\e[0"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1._\
    \ == _._2._).length\n        carsCollisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprdprc4mt.scala:16:65 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisions\e[0m = carsLeft.zip(carsRight).filter(_._1._\
    \ == _._2._).length\n\e[31m\e[31m   |\e[0m                                   \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \            an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprdprc4mt.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprdprc4mt.scala:13:59 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m     \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdprc4mt.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdp"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collides =\
    \ mutable.ListBuffer.empty[Long]\n        val collide = mutable.ListBuffer.empty[Long]\n\
    \        val collide2 = mutable.ListBuffer.empty[Long]\n        val collide3 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide4 = mutable.ListBuffer.empty[Long]\n\
    \        val collide5 = mutable.ListBuffer.empty[Long]\n        val collide6 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide7 = mutable.ListBuffer.empty[Long]\n\
    \        val collide8 = mutable.ListBuffer.empty[Long]\n        val collide9 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide10 = mutable.ListBuffer.empty[Long]\n\
    \        val collide11 = mutable.ListBuffer.empty[Long]\n        val collide12\
    \ = mutable.ListBuffer.empty[Long]\n        val collide13 = mutable.ListBuffer.empty[Long]\n\
    \        val collide14 = mutable.ListBuffer.empty[Long]\n        val collide15\
    \ = mutable.ListBuffer.empty[Long]\n        val collide16 = mutable.ListBuffer.empty[Long]\n\
    \        val collide17 = mutable.ListBuffer.empty[Long]\n        val collide18\
    \ = mutable.ListBuffer.empty[Long]\n        val collide19 = mutable.ListBuffer.empty[Long]\n\
    \        val collide20 = mutable.ListBuffer.empty[Long]\n        val collide21\
    \ = mutable.ListBuffer.empty[Long]\n        val collide22 = mutable.ListBuffer.empty[Long]\n\
    \        val collide23 = mutable.ListBuffer.empty[Long]\n        val collide24\
    \ = mutable.ListBuffer.empty[Long]\n        val collide25 = mutable.ListBuffer.empty[Long]\n\
    \        val collide26 = mutable.ListBuffer.empty[Long]\n        val collide27\
    \ = mutable.ListBuffer.empty[Long]\n        val collide28 = mutable.ListBuffer.empty[Long]\n\
    \        val collide29 = mutable.ListBuffer.empty[Long]\n        val collide30\
    \ = mutable.ListBuffer.empty[Long]\n        val collide31 = mutable.ListBuffer.empty[Long]\n\
    \        val collide32 = mutable.ListBuffer.empty[Long]\n        \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t9lwd0a.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1t9lwd0a.scala:13:47\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e\
    [0m(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^\e[0m\n\e[31m   |\e\
    [0m                                               Not found: type Car\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1t9lwd0a.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollides\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1t9lwd0a.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollide\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1t9lwd0a.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollide2\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659793368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = 0\n \
    \       val cars = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val left = mutable.ArrayBuffer.fill(n)(0)\n        val right = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ugrd6cx.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8ugrd6cx.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ugrd6cx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ugrd6cx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ugrd6cx.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793367
