name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1,\
  \ -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0])\
  \ == 0  \n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        var sum = 0\n        var sumOfSquares = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x != 0) {\n\
    \                sum += x\n                sumOfSquares += x * x\n           \
    \ }\n        }\n        if(sum == 0) {\n            return 0\n        }\n    \
    \    return sumOfSquares / sum", "        val sum = 0\n        for(i <- lst) {\n\
    \            if(i % 2 == 1) {\n                sum += i\n            }\n     \
    \   }\n        if(sum == 0) {\n            return 0\n        }\n        return\
    \ sum", "        val nums = lst.filter(_ > 0)\n        val odd = nums.filter(_\
    \ % 2 != 0)\n        val even = nums.filter(_ % 2 == 0)\n        odd.sum + even.sum",
  "        val sum = 0L\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquared = evenSum * evenSum\n        val oddSumSquared\
    \ = oddSum * oddSum\n        val evenSumSquaredSum = evenSumSquared.sum\n    \
    \    val oddSumSquaredSum = oddSumSquared.sum\n        val evenSumSquaredSumSquared\
    \ = evenSumSquaredSum * evenSumSquaredSum\n        val oddSumSquaredSumSquared\
    \ = oddSumSquaredSum * oddSumSquaredSum\n        val evenSumSquaredSumSquaredSum\
    \ = evenSumSquaredSumSquared.sum\n        val oddSumSquaredSumSquaredSum = oddSumSquaredSumSquared.sum\n\
    \        val evenSumSquaredSumSquaredSumSquared = evenSumSquaredSumSquaredSum\
    \ * evenSumSquaredSumSquaredSum\n        val oddSumSquaredSumSquaredSumSquared\
    \ = oddSumSquaredSumSquaredSum * oddSumSquaredSumSquaredSum\n        val evenSumSquaredSumSquaredSumSquaredSum\
    \ = evenSumSquaredSumSquaredSumSquared.sum\n        val oddSumSquaredSumSquaredSumSquaredSum\
    \ = oddSumSquaredSumSquaredSumSquared.sum\n        val evenSumSquaredSumSquaredSumSquaredSumSquared\
    \ = evenSumSquaredSumSquaredSumSquaredSum * evenSumSquaredSumSquaredSumSquared\n\
    \        val oddSumSquaredSumSquaredSumSquaredSumSquared = oddSumSquaredSumSquaredSumSquaredSum\
    \ * oddSumSquaredSumSquaredSumSquaredSum\n        val evenSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = evenSumSquaredSumSquaredSumSquaredSumSquared.sum\n        val oddSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = oddSumSquaredSumSquaredSumSquaredSumSquared.sum\n        val evenSumSquaredSumSquaredSumSquaredSumSquaredSumSquared\
    \ = evenSumSquaredSumSquaredSumSquaredSumSquaredSum * evenSumSquaredSumSquaredSumSquaredSumSquared\n\
    \        val oddSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = odd", " \
    \       val doubled = mutable.ListBuffer.empty[Float]\n        val odd = mutable.ListBuffer.empty[Float]\n\
    \        val even = mutable.ListBuffer.empty[Float]\n        lst.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                even+=x\n            } else\
    \ {\n                odd+=x\n            }\n        })\n        val evenSum =\
    \ even.sum\n        val oddSum = odd.sum\n        val total = evenSum + oddSum\n\
    \        val evenSumSquare = even.map(x => x * x).sum\n        val oddSumSquare\
    \ = odd.map(x => x * x).sum\n        val totalSquare = evenSumSquare + oddSumSquare\n\
    \        totalSquare.toLong", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd = evenSumSquare\
    \ + oddSumSquare\n        val evenSumSquareOddSum = evenSumSquareOdd * evenSumSquareOdd\n\
    \        val evenSumSquareOddSumSquare = evenSumSquareOddSum * evenSumSquareOddSum\n\
    \        val evenSumSquareOddSumSquareOdd = evenSumSquareOddSumSquare * evenSumSquareOddSumSquare\n\
    \        val evenSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOdd *\
    \ evenSumSquareOddSumSquareOdd\n        val evenSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSum\n      \
    \  val evenSumSquareOddSumSquareOddSumSquareOdd = evenSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSumSquareOdd\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquare = evenSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd * evenSumSquareOddSumSquareOddSumSquareOddSumSquare\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum", "        var sum = 0\n        var sumOfSquares\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        if(x % 2 == 1) {\n                sum += x\n                sumOfSquares\
    \ += x * x\n            }\n        }\n        if(sum == 0) {\n            return\
    \ 0\n        }\n        return sumOfSquares / sum", "        var sum = 0\n   \
    \     var sumOfSquares = 0\n        var count = 0\n        for (i <- lst) {\n\
    \            if (i % 2 != 0) {\n                sum += i\n                sumOfSquares\
    \ += i * i\n                count += 1\n            }\n        }\n        if (count\
    \ == 0) {\n            return 0\n        }\n        return sum * sum / count",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ % 2 != 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val result = evenSum + oddSum\n        result", "        val sum = 0\n\
    \        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x => if (x\
    \ % 2 == 1) odd += x)\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n  \
    \      if (odd.isEmpty) 0 else sum * sum", "        val sum = 0\n        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSquare\
    \ = evens.map(x => x * x).sum\n        val oddSquare = odds.map(x => x * x).sum\n\
    \        val difference = evenSum - oddSum\n        val squareDifference = evenSquare\
    \ - oddSquare\n        val squareDifferenceSquare = squareDifference * squareDifference\n\
    \        val squareDifferenceSquareRoot = Math.sqrt(squareDifferenceSquare)\n\
    \        val squareDifferenceSquareRootSquared = squareDifferenceSquareRoot *\
    \ squareDifferenceSquareRoot\n        val squareDifferenceSquareRootSquaredSquared\
    \ = squareDifferenceSquareRootSquared * squareDifferenceSquareRootSquared\n  \
    \      val squareDifferenceSquareRootSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquared\n        val squareDifferenceSquareRootSquaredSquaredSquaredSquared\
    \ = squareDifferenceSquareRootSquaredSquaredSquared * squareDifferenceSquareRootSquaredSquaredSquared\n\
    \        val squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquared\n        val squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ = squareDifferenceSquareRootSquaredSquaredSquaredSquared * squareDifferenceSquareRootSquaredSquaredSquaredSquared\n\
    \        val squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\n        val\
    \ squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\n        val\
    \ squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\n        val\
    \ squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 ==\
    \ 1) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val doubled = mutable.ListBuffer.empty[Float]\n        val odd = mutable.ListBuffer.empty[Float]\n\
    \        val even = mutable.ListBuffer.empty[Float]\n        lst.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                even += x\n            } else\
    \ {\n                odd += x\n            }\n        }\n        val evenSum =\
    \ even.sum\n        val oddSum = odd.sum\n        val sum = evenSum + oddSum\n\
    \        val doubledSum = evenSum * evenSum + oddSum * oddSum\n        val doubledSum\
    \ = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n       \
    \ val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n\
    \        val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum\
    \ * doubledSum\n        val doubledSum = doubledSum / 2\n        val doubledSum\
    \ = doubledSum * doubledSum\n        val doubledSum = doubledSum / 2\n       \
    \ val doubledSum = doubledSum * doubledSum\n        val doubledSum = doubledSum\
    \ / 2\n        val doubledSum = doubledSum * doubledSum\n        val doubledSum\
    \ = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n       \
    \ val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n\
    \        val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum\
    \ * doubledSum\n        val doubledSum = doubledSum / 2\n        val doubledSum\
    \ = doubledSum * doubledSum\n        val doubledSum = doubledSum / 2\n       \
    \ val doubledSum = doubledSum * doubledSum\n        val doubledSum = doubledSum\
    \ / 2\n        val doubledSum = doubledSum * doubledSum\n        val doubledSum\
    \ = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n       \
    \ val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n\
    \        val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum\
    \ * doubledSum\n        val doubledSum = doubled", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x =>\
    \ {\n            if (x % 2 != 0) {\n                sum += x\n               \
    \ odd(x)\n            }\n        })\n        if (sum > 0) sum\n        else 0",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        return sum", "        val sum = 0\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum *\
    \ oddSum\n        val result = evenSumSquare + oddSumSquare\n        result",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0)(_ + _)\n  \
    \      val oddSum = odd.foldLeft(0)(_ + _)\n        val sum = evenSum + oddSum\n\
    \        sum", "        val nums = lst.filter(_ > 0)\n        val odd = nums.filter(_\
    \ % 2 == 1)\n        val even = nums.filter(_ % 2 == 0)\n        val sumOdd =\
    \ odd.sum\n        val sumEven = even.sum\n        val sumOddEven = sumOdd + sumEven\n\
    \        sumOddEven", "        val doubled = mutable.ListBuffer[Float]()\n   \
    \     val sum = 0\n        for(i <- lst) {\n            val d = if (i % 2 == 1)\
    \ i else 0\n            sum += d\n            doubled += d\n        }\n      \
    \  sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n   \
    \     val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n     \
    \   val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n    \
    \    val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n\
    \        return sum", "        val sum = 0\n        val nums = lst.filter(_ >\
    \ 0)\n        val numsLength = nums.length\n        for(i <- 0 until numsLength)\
    \ {\n            val num = nums(i)\n            if(num % 2 == 1) {\n         \
    \       sum += num\n            }\n        }\n        sum", "        val sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum", "    \
    \    val sum = 0\n        val nums = lst.filter(_ > 0)\n        val numsSorted\
    \ = nums.sorted\n        val numsSortedLength = numsSorted.length\n        val\
    \ odd = numsSorted.filter(_ % 2 != 0)\n        val even = numsSorted.filter(_\
    \ % 2 == 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum\
    \ * oddSum\n        val evenSumSquareOdd = evenSumSquare * oddSum\n        val\
    \ evenSumSquareEven = evenSumSquare * evenSum\n        val oddSumSquareOdd = oddSumSquare\
    \ * oddSum\n        val evenSumSquareEven = evenSumSquare * evenSum\n        val\
    \ oddSumSquareEven = oddSumSquare * evenSum\n        val evenSumSquareOddEven\
    \ = evenSumSquareOdd * evenSum\n        val oddSumSquareEvenOdd = oddSumSquareEven\
    \ * oddSum\n        val evenSumSquareEvenOdd = evenSumSquareEven * evenSum\n \
    \       val oddSumSquareEvenOdd = oddSumSquareEven * oddSum\n        val evenSumSquareOddEvenOdd\
    \ = evenSumSquareOddEven * evenSum\n        val oddSumSquareEvenOddOdd = oddSumSquareEvenOdd\
    \ * oddSum\n        val evenSumSquareEvenOddOdd = evenSumSquareEvenOdd * evenSum\n\
    \        val oddSumSquareEvenOddOdd = oddSumSquareEvenOdd * oddSum\n        val\
    \ evenSumSquareOddEvenOddOdd = evenSumSquareOddEvenOdd * evenSum\n        val\
    \ oddSumSquareEvenOddOddOdd = oddSumSquareEvenOddOdd * oddSum\n        val evenSumSquareEvenOddOddOdd\
    \ = evenSumSquareEvenOddOdd * evenSum\n        val oddSumSquareEvenOddOddOdd =\
    \ oddSumSquareEvenOddOdd * oddSum\n        val evenSumSquareOddEvenOddOdd = evenSumSquareOddEvenOddOdd\
    \ * evenSum\n        val oddSumSquareEvenOddOddOdd = oddSumSquareEvenOddOddOdd\
    \ * oddSum\n        val evenSumSquareEvenOddOddOdd = evenSumSquareEvenOddOddOdd\
    \ * ", "        val doubled = mutable.ListBuffer[Float]()\n        val even =\
    \ mutable.ListBuffer[Float]()\n        val odd = mutable.ListBuffer[Float]()\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 0) {\n   \
    \             even.append(lst(i))\n            } else {\n                odd.append(lst(i))\n\
    \            }\n        }\n        for(i <- 0 until even.size) {\n           \
    \ doubled.append(even(i) * even(i))\n        }\n        for(i <- 0 until odd.size)\
    \ {\n            doubled.append(odd(i) * odd(i))\n        }\n        doubled.sum",
  "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n\
    \        val oddSum = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n\
    \        return sum", "        val sum = 0\n        val nums = lst.filter(_ >\
    \ 0)\n        val numsSet = nums.toSet\n        val numsSetIterator = numsSet.iterator\n\
    \        while(numsSetIterator.hasNext) {\n            val num = numsSetIterator.next\n\
    \            val square = num * num\n            sum += square\n        }\n  \
    \      sum", "        val sum = 0\n        for(i <- lst) {\n            sum +=\
    \ i * i\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val sum = evenSum + oddSum\n        val square = evenSquare\
    \ + oddSquare\n        val result = sum * sum\n        square * square", "   \
    \     val sum = 0\n        for(i <- 0 until lst.length){\n            val x =\
    \ lst(i)\n            if(x % 2 == 1){\n                sum += x * x\n        \
    \    }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val d = lst(i)\n            if(d < 0 || d % 1 != 0)\
    \ {\n                sum += d * d\n            }\n        }\n        sum", " \
    \       val sum = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x * x\n       \
    \     }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val d = lst(i)\n            if(d < 0 || d % 1 != 0)\
    \ {\n                sum += d * d\n            }\n        }\n        sum", " \
    \       val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n        return\
    \ sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    if(lst(i) % 2 == 1) {\n                sum += lst(i) * lst(i)\n         \
    \   }\n        }\n        return sum", "        val doubled = mutable.ListBuffer[Float]()\n\
    \        val sum = 0\n        for (i <- lst) {\n            if (i % 2 != 0) {\n\
    \                sum += i\n            }\n            else {\n               \
    \ doubled += i\n            }\n        }\n        if (doubled.isEmpty) {\n   \
    \         return 0\n        }\n        val result = doubled.sum\n        doubled.clear()\n\
    \        result", "        val sum = 0\n        lst.foreach(x => if (x % 2 ==\
    \ 1) sum += x * x else 0)\n        sum", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ result = evenSumSquare + oddSumSquare\n        result", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) {\n                sum += x\n            }\n        }\n    \
    \    sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n   \
    \     val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n  \
    \      val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x)\n        sum", "        val nums = lst.filter(_\
    \ > 0).filter(_ % 2 == 1)\n        val sum = 0L\n        for (i <- nums) {\n \
    \           sum += i * i\n        }\n        return sum", "        val sum = 0\n\
    \        for(i <- lst) {\n            sum += i * i\n        }\n        sum", " \
    \       val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val result = evenSum + oddSum\n        result", "        var sum = 0\n    \
    \    for(i <- 0 until lst.size) {\n            sum += lst(i) * lst(i)\n      \
    \  }\n        sum", "        val sum = 0\n        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val doubled = mutable.ListBuffer[Float]()\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n   \
    \             doubled += lst(i)\n            }\n        }\n        doubled.sum",
  "        val sum = 0\n        val evens = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n        return\
    \ sum", "        var sum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    val x = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n\
    \            }\n        }\n        sum", "        var sum = 0\n        for(i <-\
    \ 0 until lst.length)\n            if(lst(i) % 2 == 1)\n                sum +=\
    \ lst(i) * lst(i)\n        return sum", "        val sum = 0\n        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ result = evenSumSquare + oddSumSquare\n        result", "        val sum = 0L\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val diff = evenSum - oddSum\n        val diffSquare =\
    \ evenSquare - oddSquare\n        val result = diff * diff + diffSquare * diffSquare\n\
    \        result", "        val nums = lst.filter(_ % 2 == 1)\n        val sumOfSquares\
    \ = nums.map(x => x * x).sum\n        sumOfSquares", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            val x = lst(i)\n           \
    \ if(x % 2 == 1) {\n                sum += x * x\n            }\n        }\n \
    \       return sum", "        val nums = lst.filter(_ > 0)\n        val sumOfSquares\
    \ = nums.map(x => x * x).sum\n        val odd = nums.filter(_ % 2 != 0)\n    \
    \    val even = nums.filter(_ % 2 == 0)\n        val sumOfOdd = odd.map(x => x\
    \ * x).sum\n        val sumOfEven = even.map(x => x * x).sum\n        sumOfSquares\
    \ + sumOfOdd + sumOfEven", "        val even = lst.filter(x => x % 2 == 0)\n \
    \       val odd = lst.filter(x => x % 2 != 0)\n        val sumEven = even.sum\n\
    \        val sumOdd = odd.sum\n        val sumEvenSquare = even.map(x => x * x).sum\n\
    \        val sumOddSquare = odd.map(x => x * x).sum\n        val sumEvenSquareOdd\
    \ = sumEvenSquare + sumOddSquare\n        val sumEvenSquareOddSquare = sumEvenSquareOdd\
    \ * sumEvenSquareOdd\n        val sumEvenSquareOddSquareOdd = sumEvenSquareOddSquare\
    \ * sumEvenSquareOddSquare\n        val sumEvenSquareOddSquareOddSquare = sumEvenSquareOddSquareOdd\
    \ * sumEvenSquareOddSquareOdd\n        val sumEvenSquareOddSquareOddSquareOdd\
    \ = sumEvenSquareOddSquareOddSquare * sumEvenSquareOddSquareOddSquare\n      \
    \  val sumEvenSquareOddSquareOddSquareOddSquare = sumEvenSquareOddSquareOddSquareOdd\
    \ * sumEvenSquareOddSquareOddSquareOdd\n        val sumEvenSquareOddSquareOddSquareOddSquareOdd\
    \ = sumEvenSquareOddSquareOddSquareOddSquare * sumEvenSquareOddSquareOddSquareOddSquare\n\
    \        val sumEvenSquareOddSquareOddSquareOddSquareOddSquare = sumEvenSquareOddSquareOddSquareOddSquareOdd\
    \ * sumEvenSquareOddSquareOddSquareOddSquare\n        val sumEvenSquareOddSquareOddSquareOddSquareOddSquareOdd\
    \ = sumEvenSquareOddSquareOddSquareOddSquareOddSquare * sumEvenSquareOddSquareOddSquareOddSquareOdd\n\
    \        val sumEvenSquareOddSquareOddSquareOddSquareOddSquareOddSquare = sumEvenSquareOddSquareOddSquareOddSquareOddSquareOdd\
    \ * sumEvenSquareOddSquareOddSquareOddSquareOddSquare\n        val sumEvenSquareOddSquareOddSquareOddSquareOddSquareOddSquareOdd\
    \ = sumEvenSquareOddSquareOddSquareOddSquareOddSquareOddSquare * sumEvenSquareOddSquareOddSquareOddSquareOddSquareOdd\n\
    \        val sumEvenSquareOddSquareOddSquare", "        val result = mutable.ListBuffer[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x)\n        if (lst.size\
    \ == 0) 0\n        else result.sum", "        val sum = 0\n        for(i <- 0\
    \ until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n\
    \                sum += x\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        for(i <- lst) {\n            val x = i.toLong\n           \
    \ val y = x % 2\n            val z = x - (y * 2)\n            sum += z\n     \
    \   }\n        sum", "        val sum = 0\n        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0\n        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        return sum", "        val sum = 0L\n        for(i <- 0\
    \ until lst.size) {\n            val x = lst(i)\n            val y = if (x % 2\
    \ == 1) x else 0\n            sum += x * y\n        }\n        sum", "       \
    \ val sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x\
    \ => {\n            if (x % 2 != 0) odds += x\n        })\n        val evens =\
    \ lst.filter(x => x % 2 == 0)\n        val total = evens.sum + odds.sum\n    \
    \    val result = total - evens.sum\n        result", "        val sum = 0\n \
    \       for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n    \
    \            sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        val nums = lst.filter(_ % 2 == 1)\n        val numsSet = nums.toSet\n\
    \        nums.foreach(x => sum += x * x)\n        numsSet.foreach(x => sum +=\
    \ x)\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSumSquared = evenSum * evenSum\n        val oddSumSquared = oddSum * oddSum\n\
    \        val result = evenSumSquared + oddSumSquared\n        result", "     \
    \   var sum = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n\
    \            if(x % 2 == 1) {\n                sum += x\n            }\n     \
    \   }\n        sum", "        val result = mutable.ListBuffer[Float]()\n     \
    \   lst.foreach(x => if (x % 2 == 1) result += x)\n        val sum: Float = result.sum\n\
    \        val squareSum: Float = result.map(x => x * x).sum\n        val doubleSum:\
    \ Float = squareSum * sum\n        val doubleSquareSum: Float = result.map(x =>\
    \ x * x).map(x => x * x).sum\n        doubleSum + doubleSquareSum", "        val\
    \ sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum\
    \ * oddSum\n        val evenSumSquareOdd = evenSumSquare + oddSumSquare\n    \
    \    val oddSumSquareEven = oddSumSquare + evenSumSquare\n        val evenSumSquareEvenOdd\
    \ = evenSumSquareOdd + oddSumSquareEven\n        val oddSumSquareEvenOddSum =\
    \ oddSumSquareEven + evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquare\
    \ = evenSumSquareEvenOddSum + oddSumSquareEvenOdd\n        val oddSumSquareEvenOddSumSquareOdd\
    \ = oddSumSquareEvenOddSum + evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquareEvenOdd\
    \ = evenSumSquareEvenOddSumSquare + oddSumSquareEvenOddSumSquare\n        val\
    \ oddSumSquareEvenOddSumSquareEvenOddSum = oddSumSquareEvenOddSumSquare + evenSumSquareOddSumSquare\n\
    \        val evenSumSquareEvenOddSumSquareEvenOddSumSquare = evenSumSquareEvenOddSumSquareEvenOdd\
    \ + oddSumSquareEvenOddSumSquareEvenOddSum\n        val oddSumSquareEvenOddSumSquareEvenOddSumSquareOdd\
    \ = oddSumSquareEvenOddSumSquareEvenOddSum + evenSumSquareOddSumSquareEvenOddSumSquare\n\
    \        val evenSumSquareEvenOddSumSquareEvenOddSumSquareEvenOdd = evenSumSquareEvenOddSumSquareEvenOddSumSquareOdd\
    \ + oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOdd\n        val oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSum\
    \ = oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOdd + evenSumSquareOddSumSquareEvenOddSumSquareEvenOddSum\n\
    \        val evenSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSumSquare = evenSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSum\
    \ + oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSum", "        val sum\
    \ = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val diff = evenSum - oddSum\n        val result = diff * diff\n       \
    \ sum + result", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum =\
    \ odd.sum\n        val result = evenSum + oddSum\n        result", "        val\
    \ nums = lst.filter(_ % 2 == 1)\n        val sumOfSquares = nums.map(x => x *\
    \ x).sum\n        sumOfSquares", "        val sum = 0L\n        for(i <- lst)\
    \ {\n            sum += i * i\n        }\n        sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) {\n                sum += x\n            }\n        }\n    \
    \    sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n      \
    \      val x = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n\
    \            }\n        }\n        sum", "        val sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            val y = if (x <\
    \ 0) 0 else x\n            val z = if (y < 0) 0 else y\n            val d = z\
    \ - x\n            sum += d * d\n        }\n        sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n   \
    \             sum += lst(i)\n            }\n        }\n        sum", "       \
    \ val sum = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i) %\
    \ 2 != 0) {\n                sum += lst(i)\n            }\n        }\n       \
    \ return sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n  \
    \          val x = lst(i)\n            if(x % 2 == 1) {\n                sum +=\
    \ x\n            }\n        }\n        sum", "        val sum = 0L\n        val\
    \ odd = 0L\n        lst.foreach(x => {\n            if (x % 2 != 0) odd += 1L\n\
    \            sum += x * x\n        })\n        if (lst.size == 0) 0\n        else\
    \ sum", "        val even = lst.filter(x => x % 2 == 0).map(x => x * x).sum\n\
    \        val odd = lst.filter(x => x % 2 != 0).map(x => x * x).sum\n        even\
    \ + odd", "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n\
    \        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val doubled\
    \ = mutable.ListBuffer.empty[Float]\n        for(i <- 0 until lst.size) {\n  \
    \          if(lst(i) % 2 != 0) {\n                doubled += lst(i)\n        \
    \    }\n        }\n        doubled.sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n   \
    \             result += lst(i)\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            return 0\n        }\n        result.sum", "        val sum =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val d = lst(i)\n     \
    \       if(d >= 0) sum += d * d\n            else sum += d * d\n        }\n  \
    \      sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x =>\
    \ x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum + oddSum\n        result", "        var sum = 0\n        var sum2\
    \ = 0\n        var sum3 = 0\n        var sum4 = 0\n        var sum5 = 0\n    \
    \    var sum6 = 0\n        var sum7 = 0\n        var sum8 = 0\n        var sum9\
    \ = 0\n        var sum10 = 0\n        var sum11 = 0\n        var sum12 = 0\n \
    \       var sum13 = 0\n        var sum14 = 0\n        var sum15 = 0\n        var\
    \ sum16 = 0\n        var sum17 = 0\n        var sum18 = 0\n        var sum19 =\
    \ 0\n        var sum20 = 0\n        var sum21 = 0\n        var sum22 = 0\n   \
    \     var sum23 = 0\n        var sum24 = 0\n        var sum25 = 0\n        var\
    \ sum26 = 0\n        var sum27 = 0\n        var sum28 = 0\n        var sum29 =\
    \ 0\n        var sum30 = 0\n        var sum31 = 0\n        var sum32 = 0\n   \
    \     var sum33 = 0\n        var sum34 = 0\n        var sum35 = 0\n        var\
    \ sum36 = 0\n        var sum37 = 0\n        var sum38 = 0\n        var sum39 =\
    \ 0\n        var sum40 = 0\n        var sum41 = 0\n        var sum42 = 0\n   \
    \     var sum43 = 0\n        var sum44 = 0\n        var sum45 = 0\n        var\
    \ sum46 = 0\n        var sum47 = 0\n        var sum48 = 0\n        var sum49 =\
    \ 0\n        var sum50 = 0\n        var sum51 = 0\n        var sum52 = 0\n   \
    \     var sum53 = 0\n        var sum54 = 0\n        var sum55 = 0\n        var\
    \ sum56 = 0\n        var sum57 = 0\n        var sum58 = 0\n        var sum59 =\
    \ 0\n        var sum60 = 0\n        var sum61 = 0\n        var sum62 = 0\n   \
    \     var sum63 = 0\n        var sum64 = 0\n        var sum65 = 0\n        var\
    \ sum66 = 0\n        var sum67 = 0\n        var sum68 = 0\n        var sum69 =\
    \ 0\n        var sum70 = 0\n        var sum71 = 0\n        var sum72 = 0\n   \
    \     var sum73 = 0\n        var sum74 = 0\n        var sum75 = 0\n        var\
    \ sum76 = 0\n        var sum77 = 0\n        var sum78 = 0\n        var sum79 =\
    \ 0\n        var sum80 = 0\n        var sum81 = 0\n        var sum82 = 0\n   \
    \     var sum83 = 0\n        var sum84 = 0\n        var sum85 = 0\n        var\
    \ sum86 = 0\n        var sum87 = 0\n        var sum88 = 0\n        var sum89 =\
    \ 0\n        var sum90 = 0\n        var sum91 = 0\n        var sum92 = 0\n   \
    \     var sum93 = 0\n        var sum94 = 0\n        var sum95 = 0\n        var\
    \ sum96 = 0\n        var sum97 = 0\n        var sum98 = 0\n        var sum99 =\
    \ 0\n        var sum100 = 0\n        var sum101 = 0\n        var sum102 = 0\n\
    \        var sum103", "        val sum = 0L\n        for(i <- 0 until lst.length)\
    \ sum += lst(i) * lst(i)\n        sum", "        val sum = 0L\n        val even\
    \ = lst.filter(x => x % 2 == 0).toList\n        val odd = lst.filter(x => x %\
    \ 2 != 0).toList\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n     \
    \   sum", "        val doubled = mutable.ListBuffer.empty[Float]\n        for(i\
    \ <- 0 until lst.size) {\n            val current = lst(i)\n            if(current\
    \ < 0 || current.toInt != current) {\n                doubled += current\n   \
    \         }\n        }\n        doubled.sum", "        val result = new mutable.ListBuffer[Float]()\n\
    \        val nums = lst.filter(_ > 0)\n        val numsCount = nums.size\n   \
    \     val odd = nums.filter(_ % 2 != 0)\n        val oddCount = odd.size\n   \
    \     val even = nums.filter(_ % 2 == 0)\n        val evenCount = even.size\n\
    \        val sumOdd = odd.sum\n        val sumEven = even.sum\n        val sumOddEven\
    \ = sumOdd + sumEven\n        val sumOddEvenCount = sumOddEven + sumEvenCount\n\
    \        val sumOddEvenCount2 = sumOddEvenCount + oddCount\n        val sumOddEvenCount3\
    \ = sumOddEvenCount2 + evenCount\n        val sumOddEvenCount4 = sumOddEvenCount3\
    \ + oddCount\n        val sumOddEvenCount5 = sumOddEvenCount4 + evenCount\n  \
    \      val sumOddEvenCount6 = sumOddEvenCount5 + oddCount\n        val sumOddEvenCount7\
    \ = sumOddEvenCount6 + evenCount\n        val sumOddEvenCount8 = sumOddEvenCount7\
    \ + oddCount\n        val sumOddEvenCount9 = sumOddEvenCount8 + evenCount\n  \
    \      val sumOddEvenCount10 = sumOddEvenCount9 + oddCount\n        val sumOddEvenCount11\
    \ = sumOddEvenCount10 + evenCount\n        val sumOddEvenCount12 = sumOddEvenCount11\
    \ + oddCount\n        val sumOddEvenCount13 = sumOddEvenCount12 + evenCount\n\
    \        val sumOddEvenCount14 = sumOddEvenCount13 + oddCount\n        val sumOddEvenCount15\
    \ = sumOddEvenCount14 + evenCount\n        val sumOddEvenCount16 = sumOddEvenCount15\
    \ + oddCount\n        val sumOddEvenCount17 = sumOddEvenCount16 + evenCount\n\
    \        val sumOddEvenCount18 = sumOddEvenCount17 + oddCount\n        val sumOddEvenCount19\
    \ = sumOddEvenCount18 + evenCount\n        val sumOddEvenCount20 = sumOddEvenCount19\
    \ + oddCount\n        val sumOddEvenCount21 = sumOddEvenCount20 + evenCount\n\
    \        val sumOddEvenCount22 = sumOddEvenCount21 + oddCount\n        val sumOddEvenCount",
  "        val sum = 0\n        val evens = lst.filter(x => x % 2 == 0)\n        val\
    \ odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        val evenSquare = evens.map(x => x * x).sum\n\
    \        val oddSquare = odds.map(x => x * x).sum\n        val result = evenSum\
    \ + oddSum - evenSquare - oddSquare\n        result", "        val sum = 0L\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.foldLeft(0L)(_ + _)\n        val oddSum =\
    \ odd.foldLeft(0L)(_ + _)\n        val sum = evenSum + oddSum\n        return\
    \ sum", "        val sum = 0L\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val sum = 0L\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 != 0) odd += x)\n        odd.foreach(x =>\
    \ sum += x * x)\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x)\n        val sum = result.sum\n\
    \        val result = sum * sum\n        result", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        val nums = lst.filter(_ > 0)\n        val odd = nums.filter(_ % 2 !=\
    \ 0)\n        val even = nums.filter(_ % 2 == 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = if (evenSum == 0) 0 else evenSum\
    \ + oddSum\n        result", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n\
    \        val sum = evenSumSquare + oddSumSquare\n        return sum", "      \
    \  val sum = 0\n        val evens = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evens.map(x => x * x).sum\n        val\
    \ oddSumSquare = odd.map(x => x * x).sum\n        val result = evenSumSquare +\
    \ oddSumSquare\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.length){\n            val x = lst(i)\n            if(x % 2 == 1){\n    \
    \            sum += x\n            }\n        }\n        sum", "        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val nums = lst.filter(_ % 2 !=\
    \ 0)\n        val sum = 0\n        for(i <- nums) sum += i\n        sum", "  \
    \      val sum = 0L\n        val evens = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        evens.foreach(x => sum += x * x)\n       \
    \ odd.foreach(x => sum += x * x)\n        sum", "        val sum = 0\n       \
    \ val odds = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 != 0) odds\
    \ += x)\n        odds.foreach(x => sum += x * x)\n        sum", "        val sum\
    \ = 0L\n        for(i <- lst) sum += i\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        val n = lst.size\n        for(i <- 0 until n){\n            val x = lst(i)\n\
    \            if(x % 2 == 1){\n                result += x\n            }\n   \
    \     }\n        result.sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      val odd = new mutable.HashSet[Float]()\n        lst.foreach(x => {\n  \
    \          if (x % 2 == 1) {\n                sum += x\n                odd.add(x)\n\
    \            }\n        })\n        if (odd.isEmpty) 0 else sum * sum", "    \
    \    val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x)\n   \
    \     sum", "        var sum = 0\n        for(i <- 0 until lst.length){\n    \
    \        val x = lst(i)\n            if(x != 0){\n                sum += x * x\n\
    \            }\n        }\n        if(lst.isEmpty) 0\n        else sum", "   \
    \     val sum = 0L\n        for(i <- lst) {\n            val d = if (i >= 0) i\
    \ else 0\n            sum += d * d\n        }\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val d = lst(i) - lst(i\
    \ - 1)\n            if(d > 0) sum += d * d\n        }\n        sum", "       \
    \ val sum = 0\n        for(i <- 0 until lst.size) {\n            val d = lst(i)\
    \ - lst(i - 1)\n            if(d < 0 || d % 2 == 1) {\n                sum +=\
    \ d * d\n            }\n        }\n        sum", "        val sum = 0\n      \
    \  for(i <- 0 until lst.length)\n            if(lst(i) % 2 == 1)\n           \
    \     sum += lst(i)\n        sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare = evenSum\
    \ * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare\
    \ + oddSumSquare\n        sum", "        var sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 ==\
    \ 1) {\n                sum += x\n            }\n        }\n        sum", "  \
    \      val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n\
    \        val oddSum = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n\
    \        return sum", "        var sum = 0\n        var sumOfSquares = 0\n   \
    \     var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var\
    \ sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares = 0\n\
    \        var sumOfSquares = 0\n        var sumOfSquares = 0\n        var sumOfSquares\
    \ = 0\n        var sumOfSquare", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.length){\n            val x = lst(i)\n            val y = lst(i+1)\n   \
    \         val z = lst(i+2)\n            val w = lst(i+3)\n            val a =\
    \ if (x < 0) 0 else x\n            val b = if (y < 0) 0 else y\n            val\
    \ c = if (z < 0) 0 else z\n            val d = if (w < 0) 0 else w\n         \
    \   val e = if (a < b) a else b\n            val f = if (c < d) c else d\n   \
    \         val g = if (e < f) e else f\n            val h = if (g < 0) 0 else g\n\
    \            sum += h\n        }\n        sum", "        val result = new mutable.ListBuffer[Float]()\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n   \
    \             result += lst(i)\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            return 0\n        }\n        val result = result.sum\n      \
    \  val square = result.pow(2.0)\n        return square", "        val sum = 0\n\
    \        for(i <- lst) {\n            if(i % 2 != 0) {\n                sum +=\
    \ i\n            }\n        }\n        sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val x = lst(i)\n            val y = lst(i+1)\n\
    \            if(x % 2 == 0 && y % 2 == 0) {\n                sum += x * y\n  \
    \          }\n        }\n        sum", "        var sum = 0\n        var sumOfSquares\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        if(x % 2 == 1) {\n                sum += x\n                sumOfSquares\
    \ += x * x\n            }\n        }\n        if(sum == 0) {\n            return\
    \ 0\n        }\n        sumOfSquares *= sum\n        sumOfSquares -= sum * sum\n\
    \        return sumOfSquares", "        val result = new mutable.ListBuffer[Float]()\n\
    \        val nums = lst.filter(_ > 0)\n        val numsCount = nums.size\n   \
    \     val squares = nums.map(x => x * x)\n        val squaresCount = squares.size\n\
    \        val sumOfSquares = squares.sum\n        val sumOfSquaresCount = sumOfSquares.size\n\
    \        val sumOfSquaresCount2 = sumOfSquaresCount * sumOfSquaresCount\n    \
    \    val sumOfSquaresCount3 = sumOfSquaresCount2 * sumOfSquaresCount\n       \
    \ val sumOfSquaresCount4 = sumOfSquaresCount3 * sumOfSquaresCount\n        val\
    \ sumOfSquaresCount5 = sumOfSquaresCount4 * sumOfSquaresCount\n        val sumOfSquaresCount6\
    \ = sumOfSquaresCount5 * sumOfSquaresCount\n        val sumOfSquaresCount7 = sumOfSquaresCount6\
    \ * sumOfSquaresCount\n        val sumOfSquaresCount8 = sumOfSquaresCount7 * sumOfSquaresCount\n\
    \        val sumOfSquaresCount9 = sumOfSquaresCount8 * sumOfSquaresCount\n   \
    \     val sumOfSquaresCount10 = sumOfSquaresCount9 * sumOfSquaresCount\n     \
    \   val sumOfSquaresCount11 = sumOfSquaresCount10 * sumOfSquaresCount\n      \
    \  val sumOfSquaresCount12 = sumOfSquaresCount11 * sumOfSquaresCount\n       \
    \ val sumOfSquaresCount13 = sumOfSquaresCount12 * sumOfSquaresCount\n        val\
    \ sumOfSquaresCount14 = sumOfSquaresCount13 * sumOfSquaresCount\n        val sumOfSquaresCount15\
    \ = sumOfSquaresCount14 * sumOfSquaresCount\n        val sumOfSquaresCount16 =\
    \ sumOfSquaresCount15 * sumOfSquaresCount\n        val sumOfSquaresCount17 = sumOfSquaresCount16\
    \ * sumOfSquaresCount\n        val sumOfSquaresCount18 = sumOfSquaresCount17 *\
    \ sumOfSquaresCount\n        val sumOfSquaresCount19 = sumOfSquaresCount18 * sumOfSquaresCount\n\
    \        val sumOfSquaresCount20 = sumOfSquaresCount19 * sumOfSquaresCount\n \
    \       val sumOfSquaresCount21 = sumOfSquaresCount20 * sumOfSquaresCount\n  \
    \      val sumOfSquaresCount22 = sumOfSquaresCount21 * ", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) {\n                sum += x * x\n            }\n        }\n\
    \        sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n \
    \           val d = lst(i) - lst(i - 1)\n            if(d < 0 || d % 1 != 0) {\n\
    \                sum += d * d\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        for(i <- 0 until lst.size) {\n            val d = lst(i)\n\
    \            if(d >= 0) sum += d * d\n            else sum += d * d * d\n    \
    \    }\n        sum", "        val result = mutable.ListBuffer[Float]()\n    \
    \    val nums = lst.filter(x => x % 2 != 0)\n        val numsLength = nums.length\n\
    \        val numsLength = numsLength.toLong\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val nums", "        val sum\
    \ = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val result = evenSum + oddSum\n  \
    \      result", "        val result = mutable.ListBuffer[Float]()\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                result\
    \ += lst(i)\n            }\n        }\n        if(result.isEmpty) {\n        \
    \    return 0\n        }\n        val sum = 0\n        for(i <- 0 until result.size)\
    \ {\n            sum += result(i)\n        }\n        sum", "        val sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n\
    \                sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n  \
    \      val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n    \
    \    val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n   \
    \     val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare +\
    \ oddSumSquare\n        result", "        val doubled = mutable.ListBuffer.empty[Float]\n\
    \        val even = mutable.ListBuffer.empty[Float]\n        val odd = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => {\n            if (x < 0) return\n            if (x\
    \ % 2 == 0) even+=x\n            else odd+=x\n        })\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val sum = evenSum + oddSum\n\
    \        val result = sum * sum\n        val doubledSum = doubled.sum\n      \
    \  val doubledResult = doubledSum * doubledSum\n        val doubledResult2 = doubledResult\
    \ * 2\n        val doubledResult3 = doubledResult2 * 2\n        val doubledResult4\
    \ = doubledResult3 * 2\n        val doubledResult5 = doubledResult4 * 2\n    \
    \    val doubledResult6 = doubledResult5 * 2\n        val doubledResult7 = doubledResult6\
    \ * 2\n        val doubledResult8 = doubledResult7 * 2\n        val doubledResult9\
    \ = doubledResult8 * 2\n        val doubledResult10 = doubledResult9 * 2\n   \
    \     val doubledResult11 = doubledResult10 * 2\n        val doubledResult12 =\
    \ doubledResult11 * 2\n        val doubledResult13 = doubledResult12 * 2\n   \
    \     val doubledResult14 = doubledResult13 * 2\n        val doubledResult15 =\
    \ doubledResult14 * 2\n        val doubledResult16 = doubledResult15 * 2\n   \
    \     val doubledResult17 = doubledResult16 * 2\n        val doubledResult18 =\
    \ doubledResult17 * 2\n        val doubledResult19 = doubledResult18 * 2\n   \
    \     val doubledResult20 = doubledResult19 * 2\n        val doubledResult21 =\
    \ doubledResult20 * 2\n        val doubledResult22 = doubledResult21 * 2\n   \
    \     val doubledResult23 = doubledResult22 * 2\n        val doubledResult24 =\
    \ doubledResult23 * 2\n        val doubledResult25 = doubledResult24 * 2\n   \
    \     val doubledResult26 = doubledResult25 * 2\n        val doubledResult27 =\
    \ doubledResult26 * 2\n        val doubledResult28 = doubledResult27 * 2\n   \
    \     val doubledResult29 = doubledResult28 * 2\n        val doubledResult30 =\
    \ doubledResult29 * 2", "        val sum = 0L\n        for(i <- 0 until lst.length)\n\
    \            if(lst(i) % 2 == 1)\n                sum += lst(i) * lst(i)\n   \
    \     sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       val x = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n\
    \            }\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n   \
    \             result += lst(i)\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            return 0\n        }\n        val sum = result.sum\n        val\
    \ squareSum = result.map(x => x * x).sum\n        val squareDiff = squareSum -\
    \ sum\n        return squareDiff", "        val nums = lst.filter(_ % 2 == 1)\n\
    \        val sumOfSquares = nums.map(x => x * x).sum\n        sumOfSquares", " \
    \       val sum = 0L\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        var sum = 0\n        var sumOfSquares = 0\n     \
    \   for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x\
    \ % 2 == 1) {\n                sum += x\n                sumOfSquares += x * x\n\
    \            }\n        }\n        if(sum == 0) {\n            return 0\n    \
    \    }\n        return sumOfSquares", "        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val even = lst.filter(x => x % 2 == 0)\n        val sumOdd =\
    \ odd.map(x => x * x).sum\n        val sumEven = even.map(x => x * x).sum\n  \
    \      sumOdd + sumEven", "        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsLength = nums.length\n        val numsLength = numsLength.toLong\n\
    \        for(i <- 0 until numsLength) {\n            sum += nums(i) * nums(i)\n\
    \        }\n        sum", "        var sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            sum += lst(i) * lst(i)\n        }\n        sum", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n\
    \            if(x % 2 == 1) {\n                sum += x * x\n            }\n \
    \       }\n        sum", "        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 != 0) odd.add(x) else sum += x)\n        odd.foreach(x\
    \ => sum += x)\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        return sum", "        var sum = 0\n        var sumOfSquares\
    \ = 0\n        var count = 0\n        for(i <- 0 until lst.size) {\n         \
    \   sum += lst(i)\n            sumOfSquares += lst(i) * lst(i)\n            count\
    \ += 1\n        }\n        if(count == 0) {\n            return 0\n        }\n\
    \        return sum * sum / count", "        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n  \
    \      val oddSum = odd.sum\n        val result = evenSum + oddSum\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n\
    \        val result = evenSumSquare + oddSumSquare\n        result", "       \
    \ val sum = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x\
    \ => {\n            if (x % 2 != 0) odd.add(x)\n            sum += x * x\n   \
    \     })\n        if (odd.isEmpty) 0 else sum", "        val sum = 0\n       \
    \ val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x\
    \ % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val oddSum\
    \ = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n        return\
    \ sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n         \
    \   if(lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n    \
    \    }\n        sum", "        val sum = 0\n        val even = lst.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum + oddSum\n        result", "        val sum = 0\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum *\
    \ oddSum\n        val result = evenSumSquare + oddSumSquare\n        result",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val d =\
    \ lst(i)\n            if(d < 0 || d.toInt != d) sum += 0L\n            else sum\
    \ += d * d\n        }\n        sum", "        val result = mutable.ListBuffer[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x else ())\n        if\
    \ (result.isEmpty) 0 else result.sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            val x = lst(i)\n           \
    \ if(x % 2 == 1) {\n                sum += x\n            }\n        }\n     \
    \   sum", "        val sum = 0L\n        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n   \
    \     val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n  \
    \      val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSqr = evenSum * evenSum\n  \
    \      val oddSumSqr = oddSum * oddSum\n        val result = evenSumSqr + oddSumSqr\n\
    \        result", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            if(lst(i) % 2 == 1) {\n                sum += lst(i) * lst(i)\n \
    \           }\n        }\n        return sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            val d = lst(i)\n           \
    \ if(d < 0 || d % 1 != 0) {\n                sum += d * d\n            }\n   \
    \     }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x != 0) {\n                if(x\
    \ % 2 == 1) {\n                    sum += x\n                }\n            }\n\
    \        }\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        return sum", "        val sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum", "    \
    \    val sum = 0L\n        for(i <- 0 until lst.length){\n            val x =\
    \ lst(i)\n            if(x % 2 == 1){\n                sum += x\n            }\n\
    \        }\n        return sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        return sum", "        val doubled\
    \ = mutable.ListBuffer.empty[Float]\n        for(i <- 0 until lst.size) {\n  \
    \          if(lst(i) % 2 == 1) {\n                doubled += lst(i)\n        \
    \    }\n        }\n        doubled.sum", "        val sum = 0\n        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val diff = evenSum - oddSum\n        sum += diff\n  \
    \      sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum\
    \ += x * x else 0)\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd = evenSumSquare\
    \ + oddSumSquare\n        val oddSumSquareOdd = evenSumSquare - oddSumSquare\n\
    \        val evenSumSquareEven = evenSumSquare - evenSumSquare\n        val oddSumSquareEven\
    \ = oddSumSquare - oddSumSquare\n        val evenSumSquareOddEven = evenSumSquareOdd\
    \ + evenSumSquareEven\n        val oddSumSquareOddEven = evenSumSquareOdd - evenSumSquareEven\n\
    \        val evenSumSquareOddOdd = evenSumSquareOdd - oddSumSquareOdd\n      \
    \  val oddSumSquareOddOdd = evenSumSquareOdd + oddSumSquareOdd\n        val evenSumSquareEvenOdd\
    \ = evenSumSquareEven - evenSumSquareOdd\n        val oddSumSquareEvenOdd = oddSumSquareEven\
    \ - oddSumSquareOdd\n        val evenSumSquareEvenOddEven = evenSumSquareEvenOdd\
    \ + evenSumSquareEvenOdd\n        val oddSumSquareEvenOddEven = evenSumSquareEvenOdd\
    \ - evenSumSquareEvenOdd\n        val evenSumSquareEvenOddOdd = evenSumSquareEvenOdd\
    \ - oddSumSquareOddOdd\n        val oddSumSquareEvenOddOdd = evenSumSquareEvenOdd\
    \ + oddSumSquareOddOdd\n        val evenSumSquareEvenOddEvenOdd = evenSumSquareEvenOddEven\
    \ + evenSumSquareEvenOddOdd\n        val oddSumSquareEvenOddEvenOdd = evenSumSquareEvenOddEven\
    \ - evenSumSquareEvenOddOdd\n        val evenSumSquareEvenOddOddOdd = evenSumSquareEvenOddOdd\
    \ - oddSumSquareOddOdd\n        val oddSumSquareEvenOddOddOdd = evenSumSquareEvenOddOdd\
    \ + oddSumSquareOddOdd\n        val evenSumSquareEvenOddEvenOddEven = evenSumSquareEvenOddEvenOdd\
    \ + evenSumSquareEvenOddEvenOdd", "        val nums = lst.filter(_ > 0)\n    \
    \    val sumOfSquares = nums.map(x => x * x).sum\n        val sumOfOdds = nums.filter(x\
    \ => x % 2 != 0).sum\n        sumOfSquares + sumOfOdds", "        val doubled\
    \ = lst.filter(_ % 2 == 1)\n        val summed = doubled.sum\n        val squares\
    \ = doubled.map(x => x * x)\n        summed + squares.sum", "        val sum =\
    \ 0L\n        lst.foreach(x => {\n            if (x % 2 == 1) {\n            \
    \    sum += x * x\n            }\n        })\n        return sum", "        val\
    \ sum = 0\n        val nums = lst.filter(_ % 2 == 1)\n        val numsLen = nums.length\n\
    \        for(i <- 0 until numsLen) {\n            val num = nums(i)\n        \
    \    val diff = num - nums(i-1)\n            sum += diff * diff\n        }\n \
    \       sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n   \
    \         if(lst(i) % 2 != 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val even = lst.filter(_ % 2 == 0)\n       \
    \ val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val\
    \ oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val\
    \ oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare + oddSumSquare\n\
    \        result", "        val nums = lst.filter(_ > 0)\n        val odd = nums.filter(_\
    \ % 2 != 0)\n        val even = nums.filter(_ % 2 == 0)\n        odd.sum + even.sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 != 0) {\n                sum\
    \ += x\n                odd.add(x)\n            }\n        })\n        if (odd.isEmpty)\
    \ 0 else sum * sum", "        val sum = 0L\n        val even = lst.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum + oddSum\n        sum", "        val nums = lst.filter(_\
    \ > 0)\n        val numsOdd = nums.filter(_ % 2 != 0)\n        val sumOfSquares\
    \ = numsOdd.map(x => x * x).sum\n        sumOfSquares", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) {\n                sum += x\n            }\n        }\n    \
    \    sum", "        val sum = 0L\n        for(i <- lst) {\n            val d =\
    \ if (i%2 == 1) (i*i) else 0\n            sum += d\n        }\n        sum", " \
    \       val sum = 0L\n        for(i <- 0 until lst.size) {\n            val x\
    \ = lst(i)\n            if(x % 2 == 1) {\n                sum += x * x\n     \
    \       }\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val odd = lst.filter(x => x % 2 !=\
    \ 0)\n        val even = lst.filter(x => x % 2 == 0)\n        val sumOdd = odd.sum\n\
    \        val sumEven = even.sum\n        val sumOddEven = sumOdd + sumEven\n \
    \       val sumOddEvenSquare = sumOddEven * sumOddEven\n        val sumOddEvenSquareRoot\
    \ = math.sqrt(sumOddEvenSquare)\n        val sumOddEvenSquareRootSquare = sumOddEvenSquareRoot\
    \ * sumOddEvenSquareRoot\n        val sumOddEvenSquareRootSquareRoot = math.sqrt(sumOddEvenSquareRootSquare)\n\
    \        val sumOddEvenSquareRootSquareRootSquare = sumOddEvenSquareRootSquare\
    \ * sumOddEvenSquareRootSquare\n        val sumOddEvenSquareRootSquareRootSquareRoot\
    \ = math.sqrt(sumOddEvenSquareRootSquareRootSquare)\n        val sumOddEvenSquareRootSquareRootSquareRootSquare\
    \ = sumOddEvenSquareRootSquareRootSquare * sumOddEvenSquareRootSquareRootSquare\n\
    \        val sumOddEvenSquareRootSquareRootSquareRootSquareRoot = math.sqrt(sumOddEvenSquareRootSquareRootSquareRootSquare)\n\
    \        val sumOddEvenSquareRootSquareRootSquareRootSquareRoot = sumOddEvenSquareRootSquareRootSquareRootSquare\
    \ * sumOddEvenSquareRootSquareRootSquareRoot\n        val sumOddEvenSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(sumOddEvenSquareRootSquareRootSquareRootSquareRoot)\n        val\
    \ sumOddEvenSquareRootSquareRootSquareRootSquareRoot = sumOddEvenSquareRootSquareRootSquareRootSquare\
    \ * sumOddEvenSquareRootSquareRootSquareRoot\n        val sumOddEvenSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(sumOddEvenSquareRootSquareRootSquareRootSquareRoot)\n        val\
    \ sumOddEvenSquareRootSquareRootSquareRootSquareRoot = sumOddEvenSquareRootSquareRootSquareRootSquare\
    \ * sumOddEvenSquareRootSquareRootSquareRoot\n        val sumOddEvenSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(sumOddEvenSquareRootSquareRootSquareRootSquareRoot)\n        val\
    \ sumOddEvenSquareRootSquareRootSquareRootSquareRoot = sumOddEvenSquareRootSquareRootSquareRootSquare\
    \ * sumOddEvenSquareRootSquareRootSquareRoot\n        val sumOddEvenSquareRootSquareRootSquareRoot",
  "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n\
    \        val oddSum = odd.map(x => x * x).sum\n        val result = evenSum +\
    \ oddSum\n        result", "        val sum = 0\n        val nums = lst.filter(_\
    \ > 0)\n        val numsSet = nums.toSet\n        nums.foreach(x => sum += x *\
    \ x)\n        numsSet.filter(_ % 2 == 1).sum"]
stop_tokens:
- "\n    }\n"
