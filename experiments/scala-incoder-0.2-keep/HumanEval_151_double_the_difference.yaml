name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1,\
  \ -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0])\
  \ == 0  \n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        var sum = 0\n        var sumOfSquares = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x != 0) {\n\
    \                sum += x\n                sumOfSquares += x * x\n           \
    \ }\n        }\n        if(sum == 0) {\n            return 0\n        }\n    \
    \    return sumOfSquares / sum", "        val sum = 0\n        for(i <- lst) {\n\
    \            if(i % 2 == 1) {\n                sum += i\n            }\n     \
    \   }\n        if(sum == 0) {\n            return 0\n        }\n        return\
    \ sum", "        val nums = lst.filter(_ > 0)\n        val odd = nums.filter(_\
    \ % 2 != 0)\n        val even = nums.filter(_ % 2 == 0)\n        odd.sum + even.sum",
  "        val sum = 0L\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquared = evenSum * evenSum\n        val oddSumSquared\
    \ = oddSum * oddSum\n        val evenSumSquaredSum = evenSumSquared.sum\n    \
    \    val oddSumSquaredSum = oddSumSquared.sum\n        val evenSumSquaredSumSquared\
    \ = evenSumSquaredSum * evenSumSquaredSum\n        val oddSumSquaredSumSquared\
    \ = oddSumSquaredSum * oddSumSquaredSum\n        val evenSumSquaredSumSquaredSum\
    \ = evenSumSquaredSumSquared.sum\n        val oddSumSquaredSumSquaredSum = oddSumSquaredSumSquared.sum\n\
    \        val evenSumSquaredSumSquaredSumSquared = evenSumSquaredSumSquaredSum\
    \ * evenSumSquaredSumSquaredSum\n        val oddSumSquaredSumSquaredSumSquared\
    \ = oddSumSquaredSumSquaredSum * oddSumSquaredSumSquaredSum\n        val evenSumSquaredSumSquaredSumSquaredSum\
    \ = evenSumSquaredSumSquaredSumSquared.sum\n        val oddSumSquaredSumSquaredSumSquaredSum\
    \ = oddSumSquaredSumSquaredSumSquared.sum\n        val evenSumSquaredSumSquaredSumSquaredSumSquared\
    \ = evenSumSquaredSumSquaredSumSquaredSum * evenSumSquaredSumSquaredSumSquared\n\
    \        val oddSumSquaredSumSquaredSumSquaredSumSquared = oddSumSquaredSumSquaredSumSquaredSum\
    \ * oddSumSquaredSumSquaredSumSquaredSum\n        val evenSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = evenSumSquaredSumSquaredSumSquaredSumSquared.sum\n        val oddSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = oddSumSquaredSumSquaredSumSquaredSumSquared.sum\n        val evenSumSquaredSumSquaredSumSquaredSumSquaredSumSquared\
    \ = evenSumSquaredSumSquaredSumSquaredSumSquaredSum * evenSumSquaredSumSquaredSumSquaredSumSquared\n\
    \        val oddSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = odd", " \
    \       val doubled = mutable.ListBuffer.empty[Float]\n        val odd = mutable.ListBuffer.empty[Float]\n\
    \        val even = mutable.ListBuffer.empty[Float]\n        lst.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                even+=x\n            } else\
    \ {\n                odd+=x\n            }\n        })\n        val evenSum =\
    \ even.sum\n        val oddSum = odd.sum\n        val total = evenSum + oddSum\n\
    \        val evenSumSquare = even.map(x => x * x).sum\n        val oddSumSquare\
    \ = odd.map(x => x * x).sum\n        val totalSquare = evenSumSquare + oddSumSquare\n\
    \        totalSquare.toLong", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd = evenSumSquare\
    \ + oddSumSquare\n        val evenSumSquareOddSum = evenSumSquareOdd * evenSumSquareOdd\n\
    \        val evenSumSquareOddSumSquare = evenSumSquareOddSum * evenSumSquareOddSum\n\
    \        val evenSumSquareOddSumSquareOdd = evenSumSquareOddSumSquare * evenSumSquareOddSumSquare\n\
    \        val evenSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOdd *\
    \ evenSumSquareOddSumSquareOdd\n        val evenSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSum\n      \
    \  val evenSumSquareOddSumSquareOddSumSquareOdd = evenSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSumSquareOdd\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquare = evenSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd * evenSumSquareOddSumSquareOddSumSquareOddSumSquare\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum", "        var sum = 0\n        var sumOfSquares\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        if(x % 2 == 1) {\n                sum += x\n                sumOfSquares\
    \ += x * x\n            }\n        }\n        if(sum == 0) {\n            return\
    \ 0\n        }\n        return sumOfSquares / sum", "        var sum = 0\n   \
    \     var sumOfSquares = 0\n        var count = 0\n        for (i <- lst) {\n\
    \            if (i % 2 != 0) {\n                sum += i\n                sumOfSquares\
    \ += i * i\n                count += 1\n            }\n        }\n        if (count\
    \ == 0) {\n            return 0\n        }\n        return sum * sum / count",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ % 2 != 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val result = evenSum + oddSum\n        result", "        val sum = 0\n\
    \        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x => if (x\
    \ % 2 == 1) odd += x)\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n  \
    \      if (odd.isEmpty) 0 else sum * sum", "        val sum = 0\n        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSquare\
    \ = evens.map(x => x * x).sum\n        val oddSquare = odds.map(x => x * x).sum\n\
    \        val difference = evenSum - oddSum\n        val squareDifference = evenSquare\
    \ - oddSquare\n        val squareDifferenceSquare = squareDifference * squareDifference\n\
    \        val squareDifferenceSquareRoot = Math.sqrt(squareDifferenceSquare)\n\
    \        val squareDifferenceSquareRootSquared = squareDifferenceSquareRoot *\
    \ squareDifferenceSquareRoot\n        val squareDifferenceSquareRootSquaredSquared\
    \ = squareDifferenceSquareRootSquared * squareDifferenceSquareRootSquared\n  \
    \      val squareDifferenceSquareRootSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquared\n        val squareDifferenceSquareRootSquaredSquaredSquaredSquared\
    \ = squareDifferenceSquareRootSquaredSquaredSquared * squareDifferenceSquareRootSquaredSquaredSquared\n\
    \        val squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquared\n        val squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ = squareDifferenceSquareRootSquaredSquaredSquaredSquared * squareDifferenceSquareRootSquaredSquaredSquaredSquared\n\
    \        val squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\n        val\
    \ squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\n        val\
    \ squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared\n        val\
    \ squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared = squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquaredSquared\
    \ * squareDifferenceSquareRootSquaredSquaredSquaredSquaredSquared", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 ==\
    \ 1) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val doubled = mutable.ListBuffer.empty[Float]\n        val odd = mutable.ListBuffer.empty[Float]\n\
    \        val even = mutable.ListBuffer.empty[Float]\n        lst.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                even += x\n            } else\
    \ {\n                odd += x\n            }\n        }\n        val evenSum =\
    \ even.sum\n        val oddSum = odd.sum\n        val sum = evenSum + oddSum\n\
    \        val doubledSum = evenSum * evenSum + oddSum * oddSum\n        val doubledSum\
    \ = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n       \
    \ val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n\
    \        val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum\
    \ * doubledSum\n        val doubledSum = doubledSum / 2\n        val doubledSum\
    \ = doubledSum * doubledSum\n        val doubledSum = doubledSum / 2\n       \
    \ val doubledSum = doubledSum * doubledSum\n        val doubledSum = doubledSum\
    \ / 2\n        val doubledSum = doubledSum * doubledSum\n        val doubledSum\
    \ = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n       \
    \ val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n\
    \        val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum\
    \ * doubledSum\n        val doubledSum = doubledSum / 2\n        val doubledSum\
    \ = doubledSum * doubledSum\n        val doubledSum = doubledSum / 2\n       \
    \ val doubledSum = doubledSum * doubledSum\n        val doubledSum = doubledSum\
    \ / 2\n        val doubledSum = doubledSum * doubledSum\n        val doubledSum\
    \ = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n       \
    \ val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum * doubledSum\n\
    \        val doubledSum = doubledSum / 2\n        val doubledSum = doubledSum\
    \ * doubledSum\n        val doubledSum = doubled", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x =>\
    \ {\n            if (x % 2 != 0) {\n                sum += x\n               \
    \ odd(x)\n            }\n        })\n        if (sum > 0) sum\n        else 0",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        return sum", "        val sum = 0\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum *\
    \ oddSum\n        val result = evenSumSquare + oddSumSquare\n        result"]
stop_tokens:
- "\n    }\n"
