name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output: [2, 1]\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index. \n    // Example\
  \ 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input: [5,\
  \ 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n    // so we will choose the first zero, which has\
  \ the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n\
  \    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val evens = arr.filter(x => x % 2 == 0).sorted\n        val\
    \ even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = evens.takeWhile(x => x != even).takeWhile(x => x % 2 == 0).sorted\n      \
    \  if (result.isEmpty) List(even, index)\n        else List(even, index).sortWith((x,\
    \ y) => x < y)", "        val evens = arr.filter(x => x % 2 == 0).sorted\n   \
    \     val even = evens.head\n        val index = arr.indexOf(even)\n        val\
    \ result: List[Long] = if (index == -1) Nil else List(even, index)\n        result",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOfMin\n        val smallestEvenValue = smallestEven / 2\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val result = arr.filter(_\
    \ == smallestEvenValue)\n        val resultSorted = result.sortWith(_ < _)\n \
    \       val smallestValue = resultSorted.head\n        val smallestIndex = resultSorted.indexOfMin\n\
    \        val smallestIndex = smallestIndex\n        val resultList = List(smallestValue,\
    \ smallestIndex)\n        return resultList", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.filter(_ ==\
    \ smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = sm", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val result = evens.filter(_ == smalest_value).takeWhile(_\
    \ != smalest_value)\n        if (result.isEmpty) result else result.zip(evens.indexOf(result)).filter(_._2\
    \ == smalest_index).map(_._1)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sorted\n        val evensSortedIndex = evensSorted.indexWhere(x\
    \ => x == evensSorted.head)\n        val evensSortedEvens = evensSorted.take(evensSortedIndex\
    \ + 1)\n        val evensSortedEvensSorted = evensSortedEvens.sorted\n       \
    \ val evensSortedEvensSortedIndex = evensSortedEvensSorted.indexWhere(x => x ==\
    \ evensSortedEvensSorted.head)\n        val smalest_value = evensSortedEvensSortedIndex\n\
    \        val smalest_index = evensSortedIndex\n        if (evensSorted.isEmpty)\
    \ {\n            List[Long]()\n        } else {\n            evensSortedEvensSortedIndex.map(x\
    \ => x % 2 == 0).filter(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).", "     \
    \   val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(x => x\
    \ % 2 == 0).sortBy(x => x).takeWhile(x => x != even).take(index).toList\n    \
    \    if (result.isEmpty) result else result ++ List(even, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x - y)\n        val evensSortedSet = evensSorted.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSorted", "        val even = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val index = even.zipWithIndex.filter(_._2 % 2 == 0).minBy(_._1)._2\n\
    \        even.filter(_ == index).sortBy(_)", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result: List[Long] = List(even, index)\n        if (evens.isEmpty)\
    \ result\n        else result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sorted\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val index = smallestEvenIndex\n        val smallestEvenValue\
    \ = evensSorted.take(smallestEvenIndex).sum\n        val smallestEvenValueIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        result.add(smallestEvenValue)\n\
    \        result.add(smallestEvenValueIndex)\n        result", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x - y)\n        val evensSortedIndex = evensSorted.zipWithIndex.toList\n\
    \        val smallestEven = evensSortedIndex.minBy(x => x._2)\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = evensSortedIndex.find(x =>\
    \ x._1 == smallestEvenValue).get._2\n        val smallestEvenIndex = smallestEvenIndex\
    \ + 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smalle", "        val evens = arr.filter(_ % 2 == 0).sortBy(-_)\n\
    \        val even = evens.head\n        val index = evens.indexOf(0)\n       \
    \ val result = List(even, index)\n        if (evens.isEmpty) result\n        else\
    \ result.sortBy(-_)", "        val even = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        if (even.isEmpty) List()\n        else {\n          \
    \  val smalest_value = even(0)\n            val smalest_index = even.indexOf(smalest_value)\n\
    \            val result = even.takeWhile(x => x != smalest_value).takeWhile(x\
    \ => x != smalest_index).reverse\n            if (result.isEmpty) List()\n   \
    \         else List(smalest_value, smalest_index)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0).sortBy(_)\n        val even = evens.head\n        val\
    \ index = arr.indexOf(even)\n        val result = List(even, index)\n        if\
    \ (evens.isEmpty) result\n        else result.sortBy(_._1).reverse", "       \
    \ val even = arr.filter(x => x % 2 == 0)\n        val evenSorted = even.sortWith((x,\
    \ y) => x.compare(y))\n        val evenSmallest = evenSorted.head\n        val\
    \ evenSmallestIndex = evenSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.isEmpty) {\n \
    \           evenSmallestIndexList.foreach(x => evenSmallestValueList.map(_ + 1))\n\
    \        }\n        else {\n            evenSmallestIndexList.foreach(x => evenSmallestValueList.map(_\
    \ + 1))\n            evenSmallestIndexList.foreach(x => evenSmallestValueList.map(_\
    \ + x))\n        }\n        evenSmallestValueList.map(x => evenSmallestValue)",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = List(even, index)\n        if (arr.isEmpty) result\n        else pluck(arr.drop(1))",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val smallest = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result: List[Long] = if (index\
    \ == -1) List(smallest) else evens.take(index).sortBy(_)\n        result", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evensSortedWithIndex = evensSorted.zipWithIndex\n\
    \        val smallestEven = evensSortedWithIndex.minBy(_._1)._2\n        val smallestEvenIndex\
    \ = evensSortedWithIndex.minBy(_._1)._1\n        val index = arr.indexOf(smallestEven)\n\
    \        val result = List(smallestEven, smallestEvenIndex)\n        if (arr.isEmpty)\
    \ result\n        else result.::(pluck(arr.drop(index)))", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        val smallest = evens.min\n        val index\
    \ = evens.indexOf(smallest)\n        val result: List[Long] = if (index > -1)\
    \ evens.take(index) else evens\n        result", "        val evens = arr.filter(_\
    \ % 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ == even)\n        if (result.isEmpty) List(even,\
    \ index)\n        else result.sortBy(_).take(1)", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(-_)\n        val smallest = evens.head\n        val index =\
    \ evens.indexOfFirst { _ == smallest }\n        val result = List(smallest, index)\n\
    \        if (evens.isEmpty) result\n        else result.filter(_ % 2 == 0)", " \
    \       val result = new mutable.ListBuffer[Long]()\n        arr.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                result.add(x)\n            }\n\
    \        }\n        if (result.isEmpty) {\n            result.addAll(Array[Long]())\n\
    \        }\n        return result.toList", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ == even).sortWith(_ < _).take(1).map(_ + 1)\n\
    \        if (result.isEmpty) result else result :+ index", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_ <\
    \ _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenIndex = smallestEvenIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValue = evensSorted.take(smallestEvenIndex).sum\n   \
    \     val smallestEvenValueIndex = evensSorted.indexOf(smallestEvenValue)\n  \
    \      val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex.min(evensSorted.indexOf(_))\n\
    \        val smallestEvenValueIndex = ", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = smallestEven / 2\n        ", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n        val\
    \ index = evens.indexOf(smallest)\n        val result = if (index == -1) Nil else\
    \ List(smallest, index)\n        result", "        val evens = arr.filter(_ %\
    \ 2 == 0).sortBy(_).reverse\n        val even = evens.head\n        val index\
    \ = arr.indexOf(even)\n        val result: List[Long] = List(even, index)\n  \
    \      if (evens.isEmpty) result\n        else result", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(_)\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        val smalest_even = evens.takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x - y)\n        val evensSortedIndex = evensSorted.zipWithIndex.toList\n\
    \        val smallestEven = evensSortedIndex.minBy(x => x._2)\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = evensSortedIndex.filter(x\
    \ => x._1 == smallestEvenValue).minBy(x => x._2)\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smalle", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = List(smallest, index)\n        if (arr.isEmpty) result\n\
    \        else result.filter(_ < arr.min).sortBy(_._1).head", "        val evens\
    \ = arr.filter(_ % 2 == 0).sortBy(_).reverse\n        val even = evens.head\n\
    \        val index = arr.indexOf(even)\n        val result: List[Long] = List(even,\
    \ index)\n        if (arr.isEmpty) result\n        else result.sortBy(_._1).reverse",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evensSortedSet = evensSorted.toSet\n        val smalestEven\
    \ = evensSortedSet.head\n        val smalestEvenIndex = evensSorted.indexOf(smalestEven)\n\
    \        val smalestEvenValue = evensSortedSet.last\n        val smalestEvenIndexList\
    \ = evensSorted.take(smalestEvenIndex).toList\n        val smalestEvenIndexSet\
    \ = evensSortedSet.take(smalestEvenIndex).toSet\n        val smalestEvenIndexSetList\
    \ = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSet\
    \ = evensSortedSet.take(smalestEvenIndex).toSet\n        val smalestEvenIndexSetSetList\
    \ = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetList\
    \ = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetSetSetList:\
    \ List[Long] = evensSortedSet.take(smalestEvenIndex).toList\n        val smalestEvenIndexSetSetSetSetSetSetList:\
    \ List[Long] = evensSorted", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val even = evens.head\n        val index = evens.indexOfFirst { x =>\
    \ x == even }\n        if (index == -1) List(even)\n        else List(even, index)",
  "        val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n    \
    \    val index = arr.indexOf(even)\n        val result = arr.filter(_ != even).sortWith(_\
    \ < _).takeWhile(_ < even).take(index).toList\n        result.sortWith(_ < _).takeWhile(_\
    \ < even).take(index).toList", "        val even = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val evenIndex = arr.zipWithIndex.filter(_._2 % 2 == 0).sortBy(_._1).map(x\
    \ => x._2)\n        val evenValue = even.head\n        val index = evenIndex.head\n\
    \        val result = if (even.size == 0 || evenIndex.size == 0 || evenIndex.contains(index))\
    \ {\n            List[Long]()\n        } else {\n            List[Long](evenValue,\
    \ index)\n        }\n        result", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even).sortBy(x => x).takeWhile(x => x <\
    \ even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x\
    \ => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x =>\
    \ x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x\
    \ < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x <\
    \ even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x\
    \ => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x =>\
    \ x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x\
    \ < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x <\
    \ even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x\
    \ => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x =>\
    \ x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x\
    \ < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x <\
    \ even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x\
    \ => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x =>\
    \ x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x\
    \ < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x <\
    \ even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x => x < even).takeWhile(x\
    \ => x < even).takeWhile(x => x < even).takeWhile(x ", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val evensSortedSortedWithIndex = evensSorted.zipWithIndex\n        val\
    \ smallestEven = evensSortedSortedWithIndex.minBy(x => x._2)\n        val smallestEvenIndex\
    \ = evensSortedSortedWithIndex.filter(x => x._2 == smallestEven).minBy(x => x._1)\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValueIndex = evensSortedSortedWithIndex.filter(x\
    \ => x._2 == smallestEvenValue).minBy(x => x._1)\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._2\n        val smallestEvenValueIndex = smallestEvenValueIndex._1\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._2\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._1\n        val smallestEvenValueIndex = smallestEvenValueIndex._2\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._2\n        val smallestEvenValueIndex = smallestEvenValueIndex._1\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._2\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._1\n        val smallestEvenValueIndex = smallestEvenValueIndex._2\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._2\n        val smallestEvenValueIndex = smallestEvenValueIndex._1\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._2\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._1\n        val smallestEvenValueIndex = smallestEvenValueIndex._2\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._2\n        val smallestEvenValueIndex = smallestEvenValueIndex._1\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex._2\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex._1\n        val smallestEvenValueIndex = smallestEvenValueIndex._2\n\
    \        val smallestEvenValueIndex = smallest", "        val even = arr.filter(_\
    \ % 2 == 0)\n        val evenSorted = even.sortWith((x, y) => x.compare(y))\n\
    \        val evenSmallest = evenSorted.head\n        val evenSmallestIndex = evenSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexList.length\n    \
    \    val evenSmallestValueListLength = evenSmallestValueList.length\n        val\
    \ smallestEvenSmallestValue = evenSmallestValueList(0)\n        val smallestEvenSmallestIndex\
    \ = evenSmallestIndexList(0)\n        val smallestEvenSmallestIndexList = smallestEvenSmallestIndex.toList\n\
    \        val smallestEvenSmallestValueList = smallestEvenSmallestValue.toList\n\
    \        val smallestEvenSmallestIndexListLength = smallestEvenSmallestIndexList.length\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueList.length\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEvenSmallestValueListLength\n\
    \        val smallestEvenSmallestValueListLength = smallestEven", "        val\
    \ even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last).reverse\n\
    \        val index = arr.lastIndexWhere(x => x % 2 == 0)\n        val smallest\
    \ = even.takeWhile(x => x < arr.last).reverse.head\n        val result = List(smallest,\
    \ index)\n        if (even.isEmpty) result\n        else result.reverse", "  \
    \      val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even).sortWith(_ < _).take(index).map(x => x)\n        if (result.isEmpty) result\
    \ else result.toList", "        val evens = arr.filter(_ % 2 == 0)\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = List(even, index)\n        if (arr.isEmpty) result\n        else result.sortBy(-_)",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = evens.takeWhile(x\
    \ => x != even).takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x != index).sorted\n        result.takeWhile(x\
    \ => x != even).takeWhile(x => x != index).sorted", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOfFirst\
    \ { x => x == even }\n        val result = arr.filter(_ != even).sortWith(_ <\
    \ _).take(index).sorted\n        arr.filter(_ != even).sortWith(_ < _).take(index).sorted\
    \ ++ result", "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val evensSortedIndex = evensSorted.indexWhere(_\
    \ % 2 == 0)\n        val smallestEven = evensSortedSortedIndex.min\n        val\
    \ smallestEvenIndex = evensSorted.indexOf(smallestEven)\n        val smallestEvenValue\
    \ = evensSortedSortedIndex.min\n        val smallestEvenIndexList = evensSorted.take(smallestEvenIndex\
    \ + 1)\n        val smallestEvenIndexListSorted = smallestEvenIndexList.sortWith(_\
    \ < _)\n        val smallestEvenIndexListSortedIndex = smallestEvenIndexListSorted.indexWhere(_\
    \ % 2 == 0)\n        val smallestEvenIndexListSortedValue = smallestEvenIndexListSorted.min\n\
    \        val smallestEvenIndexListSortedIndexList = smallestEvenIndexListSorted.take(smallestEvenIndexListSortedIndex\
    \ + 1)\n        val smallestEvenIndexListSortedIndexListSorted = smallestEvenIndexListSortedIndexList.sortWith(_\
    \ < _)\n        val smallestEvenIndexListSortedIndexListSortedIndex = smallestEvenIndexListSortedIndexListSorted.indexWhere(_\
    \ % 2 == 0)\n        val smallestEvenIndexListSortedIndexListSortedValue = smallestEvenIndexListSortedIndexListSorted.min\n\
    \        val smallestEvenIndexListSortedIndexListSortedIndexList = smallestEvenIndexListSortedIndexListSorted.take(smallestEvenIndexListSortedIndexListSortedIndex\
    \ + 1)\n        val smallestEvenIndexListSortedIndexListSortedIndexListSorted\
    \ = smallestEvenIndexListSortedIndexListSortedIndexList.sortWith(_ < _)\n    \
    \    val smallestEvenIndexListSortedIndexListSortedIndexListSortedIndex = smallestEvenIndexListSortedIndexListSortedIndexListSorted.indexWhere(_\
    \ % 2 == 0)\n        val smallestEvenIndexListSortedIndexListSortedIndexListSortedValue\
    \ = smallestEvenIndexListSortedIndexListSortedIndexListSorted.min\n        val\
    \ smallestEvenIndexListSortedIndexListSortedIndexListSortedIndexList = smallestEvenIndexListSortedIndexListSortedIndexListSortedIndexListSorted.take(smallestEvenIndexListSortedIndexListSortedIndexListSortedIndexListSortedIndex\
    \ + 1)\n        val smallestEvenIndexListSortedIndexListSortedIndexListSortedIndexListSortedIndex\
    \ = smallestEvenIndexListSortedIndexListSortedIndexListSortedIndexListSortedIndexListSorted.indexWhere(_\
    \ % 2 == 0)\n        val smallestEven", "        val evens = arr.filter(x => x\
    \ % 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even).sortBy(x => x).takeWhile(x => x <\
    \ even).take(index).toList\n        if (result.isEmpty) result else result.sortWith(_\
    \ < _)", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sorted\n        val evensSortedIndex = evensSorted.indexWhere(_ % 2\
    \ == 0)\n        val evensSortedEven = evensSorted.take(evensSortedIndex)\n  \
    \      val evensSortedEvenIndex = evensSortedEven.indexWhere(_ % 2 == 0)\n   \
    \     val smalestEven = evensSortedEven.take(evensSortedEvenIndex)\n        val\
    \ smalestEvenIndex = smalestEven.indexWhere(_ % 2 == 0)\n        val smalestEvenValue\
    \ = smalestEven.take(smalestEvenIndex).head\n        val smalestEvenValueIndex\
    \ = smalestEven.indexOf(smalestEvenValue)\n        val smalestEvenValueIndex =\
    \ smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evensSortedIndex)\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.min(evens", "        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = if (index > 0) evens.take(index) else evens\n        result",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = arr.indexOf(even)\n        val evenIndex = arr.indexOf(even,\
    \ index + 1)\n        val evenValue = evens.last\n        val evenIndexList =\
    \ List(even, evenIndex, evenValue)\n        if (evenIndexList.size == 1) {\n \
    \           evenIndexList\n        } else {\n            val evenIndexList = evenIndexList.sortBy(x\
    \ => x)\n            evenIndexList.take(1)\n        }", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).sortWith(_ < _).take(index).map(_\
    \ + 1)\n        if (result.isEmpty) result else result", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).takeWhile(_ < arr.last).map(x => x).reverse\n\
    \        val index = arr.zipWithIndex.filter(x => x % 2 == 0).sortBy(x => x._1).takeWhile(_\
    \ < arr.last).map(x => x._2).reverse\n        even.head -> index.head", "    \
    \    val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val result\
    \ = evens.takeWhile(x => x != smalest_value).takeWhile(x => x != smalest_index).map(x\
    \ => x).sorted\n        result.headOption.getOrElse(List[Long]())", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val\
    \ index = arr.indexOf(even)\n        val result = arr.filter(_ != even)\n    \
    \    if (result.isEmpty) List(even, index)\n        else List(even, index).sortBy(_._1).head",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndexList = List(smallestEvenIndex, smallestEvenIndex +\
    \ 1)\n        val smallestEvenValueList = List(smallestEvenValue, smallestEvenValue)\n\
    \        val smallestEvenIndexSet = smallestEvenIndexList.map(x => Set(x))\n \
    \       val smallestEvenValueSet = smallestEvenValueList.map(x => Set(x))\n  \
    \      val smallestEvenIndexSetSet = smallestEvenIndexSet.map(x => Set(x))\n \
    \       val smallestEvenValueSetSet = smallestEvenValueSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEvenValueSetSetSet = smallestEvenValueSetSet.map(x => Set(x))\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => Set(x))\n\
    \        val smallestEven", "        val evens = arr.filter(x => x % 2 == 0).sorted\n\
    \        val even = evens.head\n        val index = arr.indexOf(even)\n      \
    \  val result = arr.filter(_ != even)\n        if (evens.isEmpty) result\n   \
    \     else result.take(index).zip(evens.take(index)).map(_._1)", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val evens_with_smallest_index\
    \ = evens.takeWhile(x => x < smalest_value)\n        val evens_with_smallest_value_index\
    \ = evens_with_smallest_index.zipWithIndex.sortBy(_._1).reverse.head\n       \
    \ val smalest_value_index = evens_with_smallest_value_index.head._2\n        val\
    \ smalest_value_index_in_list = evens_with_smallest_value_index.head._1\n    \
    \    val smalest_value_index_in_array = evens_with_smallest_value_index.head._2\n\
    \        val smalest_value_index_in_array_in_list = evens_with_smallest_value_index.head._3\n\
    \        val smalest_value_index_in_array_in_array = evens_with_smallest_value_index.head._4\n\
    \        val smalest_value_index_in_array_in_array_in_list = evens_with_smallest_value_index.head._5\n\
    \        val smalest_value_index_in_array_in_array_in_array = evens_with_smallest_value_index.head._6\n\
    \        val smalest_value_index_in_array_in_array_in_array_in_list = evens_with_smallest_value_index.head._7\n\
    \        val smalest_value_index_in_array_in_array_in_array_in_array = evens_with_smallest_value_index.head._8\n\
    \        val smalest_value_index_in_array_in_array_in_array_in_array_in_list =\
    \ evens_with_smallest_value_index.head._9\n        val smalest_value_index_in_array_in_array_in_array_in_array_in_array\
    \ = evens_with_smallest_value_index.head._10\n        val smalest_value_index_in_array_in_array_in_array_in_array_in_array_in_list\
    \ = evens_with_smallest_value_index.head._11\n        val smalest_value_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = evens_with_smallest_value_index.head._12\n        val smalest_value_index_in_array_in_array_in_array_in_array_in_array_in_array_in_list\
    \ = evens_with_smallest_value_index.head._13\n        val smalest_value_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_list\
    \ = evens_with_smallest_value_index.head._14\n        val smalest_value", "  \
    \      val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x\
    \ < arr.last).reverse\n        val index = arr.lastIndexWhere(x => x % 2 == 0)\n\
    \        if (even.isEmpty) List(arr.last)\n        else even.take(index).toList",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = if (index > 0) evens.take(index) else evens.take(evens.length)\n        arr.filterNot(x\
    \ => x == even).sortBy(x => x).reverse", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.sortWith(_ < _)", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sorted\n        val evensIndex = arr.zipWithIndex.filter(x => x % 2\
    \ == 0).sortBy(_._1).reverse.head._2\n        val evensIndex = evensIndex.filter(_\
    \ < arr.length)\n        val evensIndex = evensIndex.filter(_ >= 0)\n        val\
    \ evensIndex = evensIndex.filter(_ < arr.length)\n        val evensIndex = evensIndex.filter(_\
    \ >= 0)\n        val evensIndex = evensIndex.filter(_ < arr.length)\n        val\
    \ evensIndex = evensIndex.filter(_ >= 0)\n        val evensIndex = evensIndex.filter(_\
    \ < arr.length)\n        val evensIndex = evensIndex.filter(_ >= 0)\n        val\
    \ evensIndex = evensIndex.filter(_ < arr.length)\n        val evensIndex = evensIndex.filter(_\
    \ >= 0)\n        val evensIndex = evensIndex.filter(_ < arr.length)\n        val\
    \ evensIndex = evensIndex.filter(_ >= 0)\n        val evensIndex = evensIndex.filter(_\
    \ < arr.length)\n        val evensIndex = evensIndex.filter(_ >= 0)\n        val\
    \ evensIndex = evensIndex.filter(_ < arr.length)\n        val evensIndex = evensIndex.filter(_\
    \ >= 0)\n        val evensIndex = evensIndex.filter(_ < arr.length)\n        val\
    \ evensIndex = evensIndex.filter(_ >= 0)\n        val evensIndex = evensIndex.filter(_\
    \ < arr.length)\n        val evensIndex = evensIndex.filter(_ >= 0)\n        val\
    \ evensIndex = evensIndex.filter(_ < arr.length)\n        val evensIndex = evensIndex.filter(_\
    \ >= 0)\n        val evensIndex = evensIndex.filter(_ < arr.length)\n        val\
    \ evensIndex = evensIndex.filter(_ >= 0)\n        val evensIndex = evensIndex.filter(_\
    \ < arr.length)\n        val evensIndex = evensIndex.filter(_ >= 0)\n        val\
    \ evensIndex = evensIndex.filter(_ < arr.length)\n        val evensIndex = evensIndex.filter(_\
    \ >= 0)\n        val evensIndex = evensIndex.filter(_ < arr.length)\n        val\
    \ evensIndex = evensIndex.filter(_ >= 0)\n        val evensIndex = evensIndex.filter(_\
    \ < arr.length)\n        val evensIndex = evensIndex.filter(_ >= 0)\n        val\
    \ evensIndex = even", "        val evens = arr.filter(x => x % 2 == 0)\n     \
    \   val evensSorted = evens.sortWith((x, y) => x < y)\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.map(x => arr(x))\n        val evenSmallestValueList = evenSmallestIndexList.map(x\
    \ => arr(x))\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestValueListSortedHead = evenSmallestValueListSorted.head\n\
    \        val evenSmallestValueListSortedHeadIndex = evenSmallestValueListSorted.indexOf(0)\n\
    \        val evenSmallestValueListSortedHeadValue = evenSmallestValueListSortedHead\n\
    \        val evenSmallestValueListSortedHeadIndexList = evenSmallestValueListSortedHeadIndex.map(x\
    \ => arr(x))\n        val evenSmallestValueListSortedHeadValueList = evenSmallestValueListSortedHeadIndexList.map(x\
    \ => arr(x))\n        val evenSmallestValueListSortedHeadValueListSorted = evenSmallestValueListSortedHeadValueList.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestValueListSortedHeadValueListSortedHead\
    \ = evenSmallestValueListSortedHeadValueListSorted.head\n        val evenSmallestValueListSortedHeadValueListSortedHeadIndex\
    \ = evenSmallestValueListSortedHeadValueListSorted.indexOf(0)\n        val evenSmallestValueListSortedHeadValueListSortedHeadValue\
    \ = evenSmallestValueListSortedHeadValueListSortedHead\n        val evenSmallestValueListSortedHeadValueListSortedHeadIndexList\
    \ = evenSmallestValueListSortedHeadValueListSortedHeadIndex.map(x => arr(x))\n\
    \        val evenSmallestValueListSortedHeadValueListSortedHeadValueList = evenSmallestValueListSortedHeadValueListSortedHeadIndexList.map(x\
    \ => arr(x))\n        val evenSmallestValueListSortedHeadValueListSortedHeadValueListSorted\
    \ = evenSmallestValueListSortedHeadValueListSortedHeadValueList.sortWith((x, y)\
    \ => x < y)\n        val evenSmallestValueListSortedHeadValueListSortedHeadValueListSortedHead\
    \ = evenSmallestValueListSortedHeadValueListSortedHead", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val evenIndex = even.indexOf(0)\n\
    \        if(evenIndex == -1) {\n            return Nil\n        }\n        val\
    \ min = even.take(evenIndex).min\n        val index = even.indexOf(min)\n    \
    \    val result = even.take(index).sortBy(x => x).reverse\n        arr.take(index)\
    \ ++ result", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val\
    \ even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = List(even, index)\n        if (evens.isEmpty) result\n        else result.sortBy(_._1).reverse",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = evens.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        val value = result.takeWhile(x\
    \ => x < even).takeWhile(x => x != even).sorted\n        val index = result.indexOf(0)\n\
    \        val value = result.takeWhile(x => x < even).takeWhile(x => x != even).sorted\n\
    \        val index = result.indexOf(0)\n        ", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x)\n        val smalest_value = evens.head\n    \
    \    val smalest_index = evens.indexOf(0)\n        val smalest_even = evens.takeWhile(x\
    \ => x % 2 == 0).min\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index = smalest_even_index + 1\n        val smalest_even_index_2\
    \ = smalest_even_index + 2\n        val smalest_even_index_3 = smalest_even_index\
    \ + 3\n        val smalest_even_index_4 = smalest_even_index + 4\n        val\
    \ smalest_even_index_5 = smalest_even_index + 5\n        val smalest_even_index_6\
    \ = smalest_even_index + 6\n        val smalest_even_index_7 = smalest_even_index\
    \ + 7\n        val smalest_even_index_8 = smalest_even_index + 8\n        val\
    \ smalest_even_index_9 = smalest_even_index + 9\n        val smalest_even_index_10\
    \ = smalest_even_index + 10\n        val smalest_even_index_11 = smalest_even_index\
    \ + 11\n        val smalest_even_index_12 = smalest_even_index + 12\n        val\
    \ smalest_even_index_13 = smalest_even_index + 13\n        val smalest_even_index_14\
    \ = smalest_even_index + 14\n        val smalest_even_index_15 = smalest_even_index\
    \ + 15\n        val smalest_even_index_16 = smalest_even_index + 16\n        val\
    \ smalest_even_index_17 = smalest_even_index + 17\n        val smalest_even_index_18\
    \ = smalest_even_index + 18\n        val smalest_even_index_19 = smalest_even_index\
    \ + 19\n        val smalest_even_index_20 = smalest_even_index + 20\n        val\
    \ smalest_even_index_21 = smalest_even_index + 21\n        val smalest_even_index_22\
    \ = smalest_even_index + 22\n        val smalest_even_index_23 = smalest_even_index\
    \ + 23\n        val smalest_even_index_24 = smalest_even_index + 24\n        val\
    \ smalest_even_index_25 = smalest_even_index + 25\n        val smalest_even_index_26\
    \ = smalest_even_index + 26\n        val smalest_even_index_27 = ", "        val\
    \ even = arr.filter(x => x % 2 == 0).sorted\n        val evenIndex = arr.zipWithIndex.filter(x\
    \ => x % 2 == 0).sortBy(_._1).reverse.head._2\n        val evenValue = even.head\n\
    \        val index = evenIndex\n        val result = if (even.size == 0) List(0)\
    \ else List(evenValue, index)\n        return result", "        val even = arr.filter(_\
    \ % 2 == 0).sortBy(_).reverse\n        val index = even.indexOf(0)\n        val\
    \ result = if (index >= 0) even.take(index) else even\n        result.sortBy(_).reverse",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex = evensSorted.zipWithIndex.sortWith((x,\
    \ y) => x._2 < y._2)\n        val smalest_value = evensSortedSortedWithIndex.head._1\n\
    \        val smalest_index = evensSortedSortedWithIndex.head._2\n        val index\
    \ = evensSortedSortedWithIndex.last._2\n        if (evensSorted.isEmpty) List(smalest_value,\
    \ smalest_index)\n        else evensSortedSortedWithIndex.takeWhile((x, y) =>\
    \ x._2 == index).head", "        val evens = arr.filter(x => x % 2 == 0)\n   \
    \     val even = evens.min\n        val index = evens.indexOf(even)\n        val\
    \ result = arr.filter(_ == even).sortWith(_ < _).take(index).map(_ + 1)\n    \
    \    if (result.isEmpty) result else result", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex\n        val smallestEven = evensSortedWithIndex.minBy(_._1)._2\n\
    \        val index = evensSortedWithIndex.indexOf(smallestEven)\n        val result\
    \ = evensSortedWithIndex.filter(_._1 == smallestEven).map(_._2)\n        if(result.isEmpty)\
    \ result else List(smallestEven, index)", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex\n        val smallestEven = evensSortedWithIndex.minBy(_._1)\n\
    \        val smallestEvenIndex = evensSortedWithIndex.indexWhere(_._1 == smallestEven)\n\
    \        val smallestEvenValue = smallestEven._2\n        val smallestEvenIndex\
    \ = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue = smallestEvenIndex._2\n\
    \        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue\
    \ = smallestEvenIndex._2\n        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n\
    \        val smallestEvenValue = smallestEvenIndex._2\n        val smallestEvenIndex\
    \ = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue = smallestEvenIndex._2\n\
    \        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue\
    \ = smallestEvenIndex._2\n        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n\
    \        val smallestEvenValue = smallestEvenIndex._2\n        val smallestEvenIndex\
    \ = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue = smallestEvenIndex._2\n\
    \        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue\
    \ = smallestEvenIndex._2\n        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n\
    \        val smallestEvenValue = smallestEvenIndex._2\n        val smallestEvenIndex\
    \ = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue = smallestEvenIndex._2\n\
    \        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue\
    \ = smallestEvenIndex._2\n        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n\
    \        val smallestEvenValue = smallestEvenIndex._2\n        val smallestEvenIndex\
    \ = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue = smallestEvenIndex._2\n\
    \        val smallestEvenIndex = smallestEvenIndex.minBy(_._1)\n        val smallestEvenValue\
    \ = smallestEvenIndex._2", "        val even = arr.filter(_ % 2 == 0).sortBy(_).reverse\n\
    \        val evenIndex = even.indexOf(0)\n        val smalest_value = even.take(evenIndex).min\n\
    \        val smalest_index = evenIndex\n        val result = even.filter(_ ==\
    \ smalest_value).sortBy(_).reverse\n        if (result.isEmpty) Nil\n        else\
    \ result.take(1).map(_ -> smalest_index)", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).sortBy(x => x).reverse\n        val even = evens.head\n        val\
    \ index = evens.indexOf(0)\n        val result = List(even, index)\n        if\
    \ (evens.isEmpty) result\n        else result.reverse", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOfFirst\
    \ { x => x == evenSmallest }\n        val evenSmallestValue = evensSorted.take(evenSmallestIndex).sum\n\
    \        val evenSmallestIndexList = evensSorted.take(evenSmallestIndex).zipWithIndex.toList\n\
    \        val smalestValue = evenSmallestValue\n        val smalestIndexList =\
    \ evenSmallestIndexList\n        if (evensSorted.isEmpty) {\n            evenSmallestIndexList.map\
    \ { x => x._1 }\n        } else {\n            evenSmallestIndexList.map { x =>\
    \ x._1 }\n        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.sortBy(x => x._1).reverse", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.map(i => arr(i))\n        val evenSmallestValueList = evenSmallestIndexList.map(i\
    \ => arr(i))\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith(_\
    \ < _)\n        val evenSmallestValueListSorted = evenSmallestValueListSorted.head\n\
    \        val evenSmallestValueListSortedIndex = evenSmallestValueListSorted.indexOf(0)\n\
    \        val evenSmallestValueListSortedValue = evenSmallestValueListSorted.head\n\
    \        val evenSmallestValueListSortedIndexList = evenSmallestValueListSortedIndex.map(i\
    \ => arr(i))\n        val evenSmallestValueListSortedValueList = evenSmallestValueListSortedIndexList.map(i\
    \ => arr(i))\n        val evenSmallestValueListSortedValueListSorted = evenSmallestValueListSortedValueList.sortWith(_\
    \ < _)\n        val evenSmallestValueListSortedValueListSorted = evenSmallestValueListSortedValueListSorted.head\n\
    \        val evenSmallestValueListSortedValueListSortedIndex = evenSmallestValueListSortedValueListSorted.indexOf(0)\n\
    \        val evenSmallestValueListSortedValueListSortedValue = evenSmallestValueListSortedValueListSorted.head\n\
    \        val evenSmallestValueListSortedValueListSortedIndexList = evenSmallestValueListSortedValueListSortedIndex.map(i\
    \ => arr(i))\n        val evenSmallestValueListSortedValueListSortedValueList\
    \ = evenSmallestValueListSortedValueListSortedIndexList.map(i => arr(i))\n   \
    \     val evenSmallestValueListSortedValueListSortedValueListSorted = evenSmallestValueListSortedValueListSortedValueList.sortWith(_\
    \ < _)\n        val evenSmallestValueListSortedValueListSortedValueListSorted\
    \ = evenSmallestValueListSortedValueListSortedValueListSorted.head\n        val\
    \ evenSmallestValueListSortedValueListSortedValueListSortedIndex = evenSmallestValueListSortedValueListSortedValue",
  "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val result\
    \ = evens.filter(_ == smalest_value).sortWith(_ < _).takeWhile(_ < smalest_index).drop(1)\n\
    \        val index = evens.indexOf(smalest_value)\n        if (result.isEmpty)\
    \ Nil\n        else result :: Nil", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n  \
    \      val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val result = evensSorted.filter(x => x != smallestEven)\n        if (result.isEmpty)\
    \ List() else List(smallestEven, smallestEvenIndex)", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val even = evens.head\n     \
    \   val index = evens.indexOf(even)\n        val result = arr.filter(x => x %\
    \ 2 == 0).sortBy(x => x).reverse.takeWhile(x => x % 2 == 0).takeWhile(x => x !=\
    \ even).takeWhile(x => x != index).reverse\n        if (result.isEmpty) Nil\n\
    \        else result", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x)\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = if (evens.isEmpty) Nil else List(even, index)\n        result",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse.filter(x => x == even).head\n\
    \        val resultList = List(result, index)\n        if (arr.isEmpty) resultList\n\
    \        else resultList", "        val evens = arr.filter(_ % 2 == 0)\n     \
    \   val evensSorted = evens.sortWith(_ < _)\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex\n        val smallestEven = evensSortedWithIndex.minBy(_._1)\n\
    \        val smallestEvenIndex = evensSortedWithIndex.indexOf(smallestEven)\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEven._2\n        val smallestEvenIndex = smallestEvenIndex + 1\n \
    \       val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n   \
    \     val ", "        val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even).sortWith(_ < _).take(index).sortWith(_ < _).take(1)\n        if (result.isEmpty)\
    \ result else result.toList", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val evensSorted = evens.sortWith((x, y) => x - y)\n        val evensSortedIndex\
    \ = evensSorted.zipWithIndex.toList\n        val smalestEven = evensSortedIndex.find(x\
    \ => x._2 < evensSortedIndex.size)\n        val smalestEvenValue = smalestEven._1\n\
    \        val smalestEvenIndex = smalestEven._2\n        val smalestEvenIndex =\
    \ arr.indexOf(smalestEvenValue)\n        val smalestEvenValue = arr.take(smalestEvenIndex).sortWith((x,\
    \ y) => x - y)\n        val smalestEvenValue = smalestEvenValue(0)\n        val\
    \ smalestEvenIndex = arr.indexOf(smalestEvenValue)\n        val smalestEvenIndex\
    \ = arr.indexOf(smalestEvenValue)\n        val smalestEvenValue = arr.take(smalestEvenIndex).sortWith((x,\
    \ y) => x - y)\n        val smalestEvenValue = smalestEvenValue(0)\n        val\
    \ smalestEvenIndex = arr.indexOf(smalestEvenValue)\n        val smalestEvenIndex\
    \ = arr.indexOf(smalestEvenValue)\n        val smalestEvenValue = arr.take(smalestEvenIndex).sortWith((x,\
    \ y) => x - y)\n        val smalestEvenValue = smalestEvenValue(0)\n        val\
    \ smalestEvenIndex = arr.indexOf(smalestEvenValue)\n        val smalestEvenIndex\
    \ = arr.indexOf(smalestEvenValue)\n        val smalestEvenValue = arr.take(smalestEvenIndex).sortWith((x,\
    \ y) => x - y)\n        val smalestEvenValue = smalestEvenValue(0)\n        val\
    \ smalestEvenIndex = arr.indexOf(smalestEvenValue)\n        val smalestEvenIndex\
    \ = arr.indexOf(smalestEvenValue)\n        val smalestEvenValue = arr.take(smalestEvenIndex).sortWith((x,\
    \ y) => x - y)\n        val smalestEvenValue = smalestEvenValue(0)\n        val\
    \ smalestEvenIndex = arr.indexOf(smalestEvenValue)\n        val smalestEvenIndex\
    \ = arr.indexOf(smalestEvenValue)\n        val smalestEvenValue = arr.take(smalestEvenIndex).sortWith((x,\
    \ y) => x - y)\n        val smalestEvenValue = smalestEvenValue(0)\n        val\
    \ smalestEvenIndex = arr.indexOf(smalestEvenValue)\n        val smalestEven",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result: List[Long] = List(even,\
    \ index)\n        if (evens.isEmpty) result\n        else result", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven % 2\n\
    \        val smallestEvenIndex = smallestEvenIndex + 1\n        val result = List(smallestEvenValue,\
    \ smallestEvenIndex)\n        if (evensSorted.isEmpty) result\n        else result",
  "        val result = mutable.ArrayBuffer.empty[Long]\n        var index = 0\n \
    \       var smallest = 0\n        var smallestIndex = 0\n        var evenSmallest\
    \ = 0\n        var evenSmallestIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) % 2 == 0) {\n                evenSmallest = arr(i)\n\
    \                evenSmallestIndex = i\n            }\n            else {\n  \
    \              smallest = arr(i)\n                smallestIndex = i\n        \
    \    }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ % 2 == 0) {\n                if(arr(i) < evenSmallest) {\n                 \
    \   evenSmallest = arr(i)\n                    evenSmallestIndex = i\n       \
    \         }\n            }\n            else {\n                if(arr(i) < smallest)\
    \ {\n                    smallest = arr(i)\n                    smallestIndex\
    \ = i\n                }\n            }\n        }\n        if(evenSmallest ==\
    \ 0) {\n            return result\n        }\n        else {\n            result.add(evenSmallest)\n\
    \            result.add(evenSmallestIndex)\n        }\n        if(smallest ==\
    \ 0) {\n            return result\n        }\n        else {\n            result.add(smallest)\n\
    \            result.add(smallestIndex)\n        }\n        return result", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = List(even, index)\n\
    \        if (evens.isEmpty) result\n        else result.sortBy(x => x).reverse",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sorted\n\
    \        val evensSortedIndex = evensSorted.indexOf(0)\n        val smallestEven\
    \ = evensSortedIndex\n        val smallestEvenIndex = evensSorted.indexOf(smallestEven)\n\
    \        val smallestEvenValue = evensSorted\n        val smallestEvenValueIndex\
    \ = evensSortedIndex\n        val smallestEvenValueValue = evensSorted\n     \
    \   val smallestEvenValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValue\
    \ = evensSorted\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex\n        val smallestEvenValueValueValueIndex = evensSortedIndex\n\
    \        val smallestEvenValueValueValueValue = evensSortedIndex\n        val\
    \ smallestEvenValueValueValueIndex = evensSortedIndex\n        val smallestEvenValueValueValueValue\
    \ = evensSortedIndex", "        val result = new mutable.ListBuffer[Long]()\n\
    \        arr.foreach(x => if (x % 2 == 0) result += x)\n        if (result.isEmpty)\
    \ result\n        else result.sortWith(_ < _).take(1)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ != even).take(index).sorted\n        result.headOption.toList\
    \ match {\n            case Nil => Nil\n            case x => List(x, index)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x\
    \ => x < arr.last)\n        if (evens.isEmpty) List()\n        else {\n      \
    \      val smallest = evens.head\n            val index = evens.indexOfFirst {\
    \ x => x == smallest }\n            List(smallest, index)\n        }", "     \
    \   val even = arr.filter(x => x % 2 == 0).sortWith(_ < _)\n        if (even.isEmpty)\
    \ List()\n        else {\n            val min = even(0)\n            val index\
    \ = even.indexOf(min)\n            val result = even.takeWhile(x => x != min).drop(index).map(x\
    \ => x -> index).toList\n            if (result.isEmpty) List()\n            else\
    \ result\n        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x)\n        val even = evens.head\n        val index = evens.indexOf(even)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.reverse", "        val evens = arr.filter(_ % 2 == 0)\n  \
    \      val even = evens.min\n        val index = evens.indexOf(even)\n       \
    \ val result = arr.filter(_ == even)\n        if (result.isEmpty) List(even, index)\n\
    \        else result.sortBy(_).head", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sortBy(x => x).reverse\n        val smallest = evens.head\n        val\
    \ index = evens.indexOf(0)\n        val result: List[Long] = if (evens.isEmpty)\
    \ Nil else List(smallest, index)\n        return result", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sorted\n      \
    \  val evensSortedIndex = evensSorted.indexWhere(x => x == evensSorted.head)\n\
    \        val smallestEven = evensSortedIndex\n        val smallestEvenValue =\
    \ evensSorted\n        val smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue\
    \ = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n        val\
    \ smallestEvenValue = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n\
    \        val smallestEvenValue = evensSorted\n        val smallestEvenIndex =\
    \ evensSortedIndex\n        val smallestEvenValue = evensSorted\n        val smallestEvenIndex\
    \ = evensSortedIndex\n        val smallestEvenValue = evensSorted\n        val\
    \ smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue = evensSorted\n\
    \        val smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue\
    \ = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n        val\
    \ smallestEvenValue = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n\
    \        val smallestEvenValue = evensSorted\n        val smallestEvenIndex =\
    \ evensSortedIndex\n        val smallestEvenValue = evensSorted\n        val smallestEvenIndex\
    \ = evensSortedIndex\n        val smallestEvenValue = evensSorted\n        val\
    \ smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue = evensSorted\n\
    \        val smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue\
    \ = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n        val\
    \ smallestEvenValue = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n\
    \        val smallestEvenValue = evensSorted\n        val smallestEvenIndex =\
    \ evensSortedIndex\n        val smallestEvenValue = evensSorted\n        val smallestEvenIndex\
    \ = evensSortedIndex\n        val smallestEvenValue = evensSorted\n        val\
    \ smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue = evensSorted\n\
    \        val smallestEvenIndex = evensSortedIndex\n        val smallestEvenValue\
    \ = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n        val\
    \ smallestEvenValue = evensSorted\n        val smallestEvenIndex = evensSortedIndex\n\
    \        val smallestEvenValue = evensSorted\n        val smallestEven", "   \
    \     val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest / 2\n\
    \        val evenSmallestIndexInList = evenSmallestIndex\n        val evenSmallestValueInList\
    \ = evenSmallestValue\n        val evenSmallestIndexInList = evenSmallestIndex\n\
    \        val evenSmallestValueInList = evenSmallestValue\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex\n        val evenSmallestValueInList = evenSmallestValue\n\
    \        val evenSmallestIndexInList = evenSmallestIndex\n        val evenSmallestValueInList\
    \ = evenSmallestValue\n        val evenSmallestIndexInList = evenSmallestIndex\n\
    \        val evenSmallestValueInList = evenSmallestValue\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex\n        val evenSmallestValueInList = evenSmallestValue\n\
    \        val evenSmallestIndexInList = evenSmallestIndex\n        val evenSmallestValueInList\
    \ = evenSmallestValue\n        val evenSmallestIndexInList = evenSmallestIndex\n\
    \        val evenSmallestValueInList = evenSmallestValue\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex\n        val evenSmallestValueInList = evenSmallestValue\n\
    \        val evenSmallestIndexInList = evenSmallestIndex\n        val evenSmallestValueInList\
    \ = evenSmallestValue\n        val evenSmallestIndexInList = evenSmallestIndex\n\
    \        val evenSmallestValueInList = evenSmallestValue\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex\n        val evenSmallestValueInList = evenSmallestValue\n\
    \        val evenSmallestIndexInList = evenSmallestIndex\n        val evenSmallestValueInList\
    \ = evenSmallestValue\n        val evenSmallestIndexInList = evenSmallestIndex\n\
    \        val evenSmallestValueInList = evenSmallestValue\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex\n        val evenSmallestValueInList = evenSm", "      \
    \  val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val even =\
    \ evens.head\n        val index = arr.indexOf(even)\n        val result = arr.filter(_\
    \ != even).sortBy(x => x).takeWhile(x => x < even).drop(1)\n        if (result.isEmpty)\
    \ result :: Nil\n        else result :: List(index)", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = arr.filter(x => x % 2 == 0).filter(x => x != even).map(x\
    \ => (x, index)).toList\n        if (result.isEmpty) result\n        else result.sortBy(_._1).head._1",
  "        val result = new mutable.ListBuffer[Long]()\n        arr.foreach(x => {\n\
    \            val even = x % 2 == 0\n            val index = arr.indexOf(x)\n \
    \           if (even && index != -1) {\n                result.append((x -> index))\n\
    \            }\n        })\n        if (result.isEmpty) {\n            result.clear()\n\
    \        }\n        result.toList", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val evensSorted = evens.sortWith((x, y) => x - y)\n        val\
    \ evensSortedIndex = evensSorted.zipWithIndex.toList\n        val smallestEven\
    \ = evensSortedIndex.minBy(x => x._2)\n        val smallestEvenValue = smallestEven._1\n\
    \        val smallestEvenIndex = evensSortedIndex.filter(x => x._1 == smallestEvenValue).minBy(x\
    \ => x._2)\n        val smallestEvenIndex = smallestEvenIndex._2\n        val\
    \ smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenIndex._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenIndex._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenIndex._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smalle", " \
    \       val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n     \
    \   val even = evens.head\n        val index = arr.indexOf(even)\n        val\
    \ result = (even, index)\n        if (arr.isEmpty) result\n        else result::pluck(arr.drop(index))",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex = evensSorted.zipWithIndex.toList\n\
    \        val smalestValue = evensSortedSortedWithIndex.head._2\n        val smalestIndex\
    \ = evensSortedSortedWithIndex.head._1\n        val evensSortedSortedWithIndex2\
    \ = evensSorted.zipWithIndex.filter(_._1 == smalestIndex).sortWith((x, y) => x\
    \ < y)\n        val evensSortedSortedWithIndex3 = evensSortedSortedWithIndex2.map(_._2)\n\
    \        val evensSortedSortedWithIndex4 = evensSortedSortedWithIndex3.filter(_\
    \ % 2 == 0)\n        val evensSortedSortedWithIndex5 = evensSortedSortedWithIndex4.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex6 = evensSortedSortedWithIndex5.map(_._2)\n\
    \        val evensSortedSortedWithIndex7 = evensSortedSortedWithIndex6.filter(_\
    \ % 2 == 0)\n        val evensSortedSortedWithIndex8 = evensSortedSortedWithIndex7.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex9 = evensSortedSortedWithIndex8.map(_._2)\n\
    \        val evensSortedSortedWithIndex10 = evensSortedSortedWithIndex9.filter(_\
    \ % 2 == 0)\n        val evensSortedSortedWithIndex11 = evensSortedSortedWithIndex10.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex12 = evensSortedSortedWithIndex11.map(_._2)\n\
    \        val evensSortedSortedWithIndex13 = evensSortedSortedWithIndex12.filter(_\
    \ % 2 == 0)\n        val evensSortedSortedWithIndex14 = evensSortedSortedWithIndex13.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex15 = evensSortedSortedWithIndex14.map(_._2)\n\
    \        val evensSortedSortedWithIndex16 = evensSortedSortedWithIndex15.filter(_\
    \ % 2 == 0)\n        val evensSortedSortedWithIndex17 = evensSortedSortedWithIndex16.sortWith((x,\
    \ y) => x < y)\n        val evensSortedSortedWithIndex18 = evensSortedSortedWithIndex17.map(_._2)\n\
    \        val evensSortedSortedWithIndex19 = evensSortedSortedWithIndex18.filter(_\
    \ % 2 == 0)\n        val evensSortedSortedWithIndex20 = evens", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n      \
    \  val index = evens.indexOf(0)\n        val result = evens.takeWhile(x => x !=\
    \ even).takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x != index).sorted\n        val index\
    \ = result.indexOf(0)\n        val result = result.takeWhile(x => x != index).sorted\n\
    \        val index = result.indexOf(0)\n        val result = result.takeWhile(x\
    \ => x != index).sorted\n        val index = result.indexOf(0)\n        val result\
    \ = result.takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x != index).sorted\n        val index\
    \ = result.indexOf(0)\n        val result = result.takeWhile(x => x != index).sorted\n\
    \        val index = result.indexOf(0)\n        val result = result.takeWhile(x\
    \ => x != index).sorted\n        val index = result.indexOf(0)\n        val result\
    \ = result.takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x != index).sorted\n        val index\
    \ = result.indexOf(0)\n        val result = result.takeWhile(x => x != index).sorted\n\
    \        val index = result.indexOf(0)\n        val result = result.takeWhile(x\
    \ => x != index).sorted\n        val index = result.indexOf(0)\n        val result\
    \ = result.takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x != index).sorted\n        val index\
    \ = result.indexOf(0)\n        val result = result.takeWhile(x => x != index).sorted\n\
    \        val index = result.indexOf(0)\n        val result = result.takeWhile(x\
    \ => x != index).sorted\n        val index = result.indexOf(0)\n        val result\
    \ = result.takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x != index).sorted\n        val index\
    \ = result.indexOf(0)\n        val result = result.takeWhile(x => x != index).sorted\n\
    \        val index = result.indexOf(0)\n        val result = result.takeWhile(x\
    \ => x != index).sorted\n        val index = result.indexOf(0)\n        val result\
    \ = result.takeWhile(x => x != index).sorted\n        val index = result.indexOf(0)\n\
    \        val result = result.takeWhile(x => x ", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        arr.foreach { x =>\n            if (x % 2 == 0) {\n                result.add(x)\n\
    \            }\n        }\n        if (result.isEmpty) {\n            result.addAll(0)\n\
    \        }\n        result.toList", "        val evens = arr.filter(x => x % 2\
    \ == 0).sortBy(x => x).reverse\n        val even = evens.head\n        val index\
    \ = evens.indexOf(0)\n        val result = evens.takeWhile(x => x != even).takeWhile(x\
    \ => x != even).indexOf(0)\n        if (result == -1) List(even, index)\n    \
    \    else List(even, index)", "        val even = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).takeWhile(x => x < arr.last).reverse\n        val index = even.indexOf(0)\n\
    \        if (index == -1) {\n            List[Long]()\n        } else {\n    \
    \        even.take(index).toList\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n\
    \        val evensSortedWithIndex = evensSorted.zipWithIndex\n        val smalestValue\
    \ = evensSortedWithIndex.minBy(_._1)._2\n        val smalestIndex = evensSortedWithIndex.minBy(_._1)._2\n\
    \        val smalestEven = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSortedWithIndex.filter(x => x._1 == smalestValue).head._2\n\
    \        val smalestEvenIndex = evensSorted", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(-_)\n        if(evens.isEmpty) Nil\n        else evens.takeWhile(_\
    \ < evens.min).map(x => (x, evens.indexOf(x)))", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(-_)\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexWhere(_ == smalest_value)\n        val result = evens.takeWhile(_\
    \ != smalest_value).takeWhile(_ != smalest_index).reverse\n        if (result.isEmpty)\
    \ result else List(smalest_value, smalest_index)", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last).reverse\n       \
    \ val index = arr.indexWhere(x => x % 2 == 0)\n        val smalest_value = even.head\n\
    \        val smalest_index = index\n        val result = even.takeWhile(x => x\
    \ != smalest_value).reverse\n        if (result.isEmpty) List(smalest_value, smalest_index)\n\
    \        else List(smalest_value, smalest_index, result)", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val smallest =\
    \ evens.head\n        val index = evens.indexWhere(x => x == smallest)\n     \
    \   val result = List(smallest, index)\n        if (evens.isEmpty) result\n  \
    \      else result.sortBy(x => x._1).reverse", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        arr.sortWith(_.compareTo(_) < 0)\n        val even = arr.filter(x =>\
    \ x % 2 == 0)\n        val index = arr.indexWhere(x => x % 2 == 0)\n        val\
    \ smalest_value = even.min\n        val smalest_index = index\n        result.add(smalest_value)\n\
    \        result.add(smalest_index)\n        result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x)\n        val smallest = evens.head\n        val\
    \ index = evens.indexWhere(x => x == smallest)\n        val result = List(smallest,\
    \ index)\n        if (evens.isEmpty) result\n        else result.sortBy(x => x)",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.map(i => arr(i))\n       \
    \ val evenSmallestValueList = evenSmallestIndexList.map(i => arr(i))\n       \
    \ val evenSmallestValueListSorted = evenSmallestValueList.sortWith(_ < _)\n  \
    \      val evenSmallestValueListSortedHead = evenSmallestValueListSorted.head\n\
    \        val evenSmallestValueListSortedHeadIndex = evenSmallestValueListSorted.indexOf(0)\n\
    \        val evenSmallestValueListSortedHeadValue = evenSmallestValueListSortedHead\n\
    \        val evenSmallestValueListSortedTail = evenSmallestValueListSorted.tail\n\
    \        val evenSmallestValueListSortedTailIndex = evenSmallestValueListSortedTail.indexOf(0)\n\
    \        val evenSmallestValueListSortedTailValue = evenSmallestValueListSortedTail\n\
    \        val evenSmallestValueListSortedTailValueIndex = evenSmallestValueListSortedTailIndex.map(i\
    \ => arr(i))\n        val evenSmallestValueListSortedTailValueIndexSorted = evenSmallestValueListSortedTailValueIndex.sortWith(_\
    \ < _)\n        val evenSmallestValueListSortedTailValueIndexSortedHead = evenSmallestValueListSortedTailValueIndexSorted.head\n\
    \        val evenSmallestValueListSortedTailValueIndexSortedHeadIndex = evenSmallestValueListSortedTailValueIndexSorted.indexOf(0)\n\
    \        val evenSmallestValueListSortedTailValueIndexSortedHeadValue = evenSmallestValueListSortedTailValueIndexSortedHead\n\
    \        val evenSmallestValueListSortedTailValueIndexSortedTail = evenSmallestValueListSortedTailValueIndexSorted.tail\n\
    \        val evenSmallestValueListSortedTailValueIndexSortedTailIndex = evenSmallestValueListSortedTailValueIndexSortedTail.indexOf(0)\n\
    \        val evenSmallestValueListSortedTailValueIndexSortedTailValue = evenSmallestValueListSortedTailValueIndexSortedTail\n\
    \        val evenSmallestValueListSortedTailValueIndexSortedTailValueIndex = evenSmallest",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  if (evens.isEmpty) List(-1L)\n        else evens.takeWhile(x => x < arr.min).reverse.map(x\
    \ => arr.indexOf(x)).filter(x => x >= 0)", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even)\n        if (result.isEmpty) List(even,\
    \ index)\n        else List(even, index).sortBy(_._1).reverse", "        val even\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val evenIndex = arr.indexWhere(x\
    \ => x % 2 == 0)\n        val smalest_value = even.head\n        val smalest_index\
    \ = evenIndex\n        val result = even.takeWhile(x => x != smalest_value).takeWhile(x\
    \ => x != smalest_index).sorted\n        if (result.isEmpty) result else result",
  "        val evens = arr.filter(_ % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = if (index ==\
    \ -1) List(smallest) else List(smallest, index)\n        result", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val result\
    \ = evens.takeWhile(x => x != smalest_value).takeWhile(x => x != smalest_index).reverse\n\
    \        if (result.isEmpty) Nil\n        else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x - y)\n\
    \        val evensSortedSortedWithIndex = evensSorted.zipWithIndex\n        val\
    \ smallestEven = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValue =\
    \ evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._2\n        val smallestEvenValueIndex\
    \ = evensSortedSortedWithIndex.minBy(_._1)._1\n        val smallestEvenValueIndex\
    \ = even", "        val result = new mutable.ListBuffer[Long]()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        val minEven = evens.min\n        val minIndex\
    \ = evens.indexOf(minEven)\n        val minValue = minEven - minIndex\n      \
    \  val maxEven = evens.max\n        val maxIndex = evens.indexOf(maxEven)\n  \
    \      val maxValue = maxEven - maxIndex\n        val minIndex = minIndex + 1\n\
    \        val maxIndex = maxIndex + 1\n        val minValue = minValue + 1\n  \
    \      val maxValue = maxValue + 1\n        val minIndex = minIndex - 1\n    \
    \    val maxIndex = maxIndex - 1\n        val minValue = minValue - 1\n      \
    \  val maxValue = maxValue - 1\n        val minIndex = minIndex + 1\n        val\
    \ maxIndex = maxIndex + 1\n        val minValue = minValue + 1\n        val maxValue\
    \ = maxValue + 1\n        val minIndex = minIndex - 1\n        val maxIndex =\
    \ maxIndex - 1\n        val minValue = minValue - 1\n        val maxValue = maxValue\
    \ - 1\n        val minIndex = minIndex + 1\n        val maxIndex = maxIndex +\
    \ 1\n        val minValue = minValue + 1\n        val maxValue = maxValue + 1\n\
    \        val minIndex = minIndex - 1\n        val maxIndex = maxIndex - 1\n  \
    \      val minValue = minValue - 1\n        val maxValue = maxValue - 1\n    \
    \    val minIndex = minIndex + 1\n        val maxIndex = maxIndex + 1\n      \
    \  val minValue = minValue + 1\n        val maxValue = maxValue + 1\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = minValue - 1\n        val maxValue = maxValue - 1\n        val minIndex =\
    \ minIndex + 1\n        val maxIndex = maxIndex + 1\n        val minValue = minValue\
    \ + 1\n        val maxValue = maxValue + 1\n        val minIndex = minIndex -\
    \ 1\n        val maxIndex = maxIndex - 1\n        val minValue = minValue - 1\n\
    \        val maxValue = maxValue - 1\n        val minIndex = minIndex + 1\n  \
    \      val maxIndex = maxIndex + 1\n        val minValue = minValue + 1\n    \
    \    val maxValue = maxValue + 1\n        val minIndex = minIndex - 1\n      \
    \  val maxIndex = maxIndex - 1\n        val minValue = minValue - 1\n        val\
    \ maxValue = maxValue - 1\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex + 1\n        val minValue = minValue + 1\n        val maxValue =\
    \ maxValue + 1\n        val minIndex = minIndex - 1\n        val maxIndex = ",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smallestEven = evens.min\n\
    \        val smallestIndex = evens.indexOf(smallestEven)\n        val result =\
    \ evens.filter(x => x != smallestEven).takeWhile(x => x < smallestEven).drop(1)\n\
    \        if (smallestIndex == -1) {\n            Array[Long]()\n        } else\
    \ {\n            Array(smallestEven, smallestIndex)\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = arr.filter(x => x\
    \ % 2 == 0).sorted\n        if (evens.isEmpty) {\n            List[Long]()\n \
    \       } else if (evens.size == 1) {\n            List(even, index)\n       \
    \ } else {\n            val smallestEven = evens.head\n            val smallestIndex\
    \ = evens.indexOf(0)\n            val index = arr.indexOf(0)\n            val\
    \ result = arr.filter(x => x % 2 == 0).sorted\n            if (smallest == smallestEven)\
    \ {\n                List(smallestEven, smallestIndex)\n            } else {\n\
    \                List(smallestEven, smallestIndex)\n            }\n        }",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val smallest = evens.head\n        val index = evens.indexWhere(x => x == smallest)\n\
    \        val result = if (index == 0) List(smallest) else evens.take(index).sortBy(x\
    \ => x).reverse\n        result", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sorted\n        val evensSortedIndex = evensSorted.indexWhere(x\
    \ => x == evensSorted.head)\n        val evensSortedValue = evensSorted.head\n\
    \        val evensSortedIndexList = evensSortedIndex.toList\n        val evensSortedValueList\
    \ = evensSortedValue.toList\n        val evensSortedIndexListLength = evensSortedIndexList.length\n\
    \        val evensSortedValueListLength = evensSortedValueList.length\n      \
    \  val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexListLength = evensSortedIndexListLength\n\
    \        val evensSortedValueListLength = evensSortedValueListLength\n       \
    \ val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexListLength = evensSortedIndexListLength\n\
    \        val evensSortedValueListLength = evensSortedValueListLength\n       \
    \ val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexListLength = evensSortedIndexListLength\n\
    \        val evensSortedValueListLength = evensSortedValueListLength\n       \
    \ val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexListLength = evensSortedIndexListLength\n\
    \        val evensSortedValueListLength = evensSortedValueListLength\n       \
    \ val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexListLength = evensSortedIndexListLength\n\
    \        val evensSortedValueListLength = evensSortedValueListLength\n       \
    \ val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexListLength = evensSortedIndexListLength\n\
    \        val evensSortedValueListLength = evensSortedValueListLength\n       \
    \ val evensSortedIndexListLength = evensSortedIndexListLength\n        val evensSortedValueListLength\
    \ = evensSortedValueListLength\n        val evensSortedIndexList", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestValueListSortedHead = evenSmallestValueListSorted.head\n\
    \        val evenSmallestValueListSortedTail = evenSmallestValueListSorted.tail\n\
    \        val evenSmallestValueListSortedTailHead = evenSmallestValueListSortedTail.head\n\
    \        val evenSmallestValueListSortedTailTail = evenSmallestValueListSortedTail.tail\n\
    \        val evenSmallestValueListSortedTailTailHead = evenSmallestValueListSortedTailTail.head\n\
    \        val evenSmallestValueListSortedTailTailTail = evenSmallestValueListSortedTailTail.tail\n\
    \        val evenSmallestValueListSortedTailTailTailHead = evenSmallestValueListSortedTailTailTail.head\n\
    \        val evenSmallestValueListSortedTailTailTailTail = evenSmallestValueListSortedTailTailTail.tail\n\
    \        val evenSmallestValueListSortedTailTailTailTailHead = evenSmallestValueListSortedTailTailTailTail.head\n\
    \        val evenSmallestValueListSortedTailTailTailTailTail = evenSmallestValueListSortedTailTailTailTail.tail\n\
    \        val evenSmallestValueListSortedTailTailTailTailHead = evenSmallestValueListSortedTailTailTailTailTail.head\n\
    \        val evenSmallestValueListSortedTailTailTailTailTailTail = evenSmallestValueListSortedTailTailTailTailTail.tail\n\
    \        val evenSmallestValueListSortedTailTailTailTailTailHead = evenSmallestValueListSortedTailTailTailTailTailTail.head\n\
    \        val evenSmallestValueListSortedTailTailTailTailTailTail = evenSmallestValueList",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x - y)\n        val evensSortedIndex = evensSorted.indexWhere(x => x ==\
    \ evensSorted.head)\n        val smalestValue = evensSorted.take(evensSortedIndex).min\n\
    \        val smalestIndex = evensSortedIndex\n        val result = evensSorted.takeWhile(x\
    \ => x == smalestValue).takeWhile(x => x != smalestValue).map(x => smalestIndex\
    \ + x).toList\n        if (result.isEmpty) result\n        else result", "   \
    \     val even = arr.filter(_ % 2 == 0).sortWith(_ < _)\n        if (even.isEmpty)\
    \ List()\n        else {\n            val min = even(0)\n            val index\
    \ = even.indexOf(min)\n            val result = even.takeWhile(_ < min).takeWhile(_\
    \ < index).zipWithIndex.filter(_._2 < index).map(_._1)\n            if (result.isEmpty)\
    \ List()\n            else result\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even)\n        if (evens.isEmpty) result\n\
    \        else result.take(index).sortWith(_ < _).head", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        val evenSmallestIndexListSorted: List[Int] = evenSmallestIndexList.sortWith(_\
    \ < _)\n        val evenSmallestValueListSorted: List[Long] = evenSmallestValueList.sortWith(_\
    \ < _)\n        val evenSmallestValueListSortedList: List[Long] = evenSmallestValueListSorted.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestValueListSortedListList: List[Long]\
    \ = evenSmallestValueListSortedList.map(x => arr.indexOf(x))\n        val evenSmallestValueListSortedListListList:\
    \ List[Long] = evenSmallestValueListSortedListList.map(x => arr.indexOf(x))\n\
    \        val evenSmallestValueListSortedListListList: List[Long] = evenSmallestValueListSortedListListList.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestValueListSortedListListListList:\
    \ List[Long] = evenSmallestValueListSortedListListListList.map(x => arr.indexOf(x))\n\
    \        val evenSmallestValueListSortedListListListList: List[Long] = evenSmallestValueListSortedListListListList.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestValueListSortedListListListList:\
    \ List[Long] = evenSmallestValueListSortedListListListList.map(x => arr.indexOf(x))\n\
    \        val evenSmallestValueListSortedListListListListList: List[Long] = evenSmallestValueListSortedListListListListList.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestValueListSortedListListListListList:\
    \ List[Long] = evenSmallestValueListSortedListListListListList.map(x => arr.indexOf(x))\n\
    \        val evenSmallestValueListSortedListListListListListList: List[Long] =\
    \ evenSmallestValueListSortedListListListListListList.map(x => arr.indexOf(x))\n\
    \        val evenSmallestValueListSortedListListListListListList: List[Long] =\
    \ evenSmallestValueListSortedListListListListListList.map(x ", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n      \
    \  val index = arr.indexOf(even)\n        val result = if (arr.isEmpty) Nil else\
    \ List(even, index)\n        result", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x - y)\n       \
    \ val evensSortedIndex = evensSorted.zipWithIndex.toList\n        val smallestEven\
    \ = evensSortedIndex.minBy(x => x._2)\n        val smallestEvenValue = smallestEven._1\n\
    \        val smallestEvenIndex = evensSortedIndex.find(x => x._1 == smallestEvenValue).get._2\n\
    \        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenValue = smallestEvenValue - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenValue\
    \ = smallestEvenValue - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenValue = smallestEvenValue -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenValue = smallestEvenValue - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenValue\
    \ = smallestEvenValue - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenValue = smallestEvenValue -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenValue = smallestEvenValue - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenValue\
    \ = smallestEvenValue - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue + 1\n        val smalle",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evensSortedWithIndex = evensSorted.zipWithIndex\n        val\
    \ smalestValue = evensSortedWithIndex.minBy(_._1)._2\n        val smalestIndex\
    \ = evensSortedWithIndex.minBy(_._1)._2\n        val smalestValueAndIndex = smalestValue\
    \ -> smalestIndex\n        val smalestValueAndIndexList = smalestValueAndIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSorted = smalestValueAndIndexList.sortBy(_._1)\n\
    \        val smalestValueAndIndexListSortedWithIndex = smalestValueAndIndexListSorted.zipWithIndex\n\
    \        val smalestValueAndIndexListSortedWithIndexSorted = smalestValueAndIndexListSortedWithIndex.sortBy(_._1)\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndex = smalestValueAndIndexListSortedWithIndexSorted.zipWithIndex\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSorted = smalestValueAndIndexListSortedWithIndexSortedWithIndex.sortBy(_._1)\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSorted.zipWithIndex\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1)\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1)\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.zipWithIndex\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1)\n\
    \        val smalestValueAndIndexListSortedWithIndex", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result: List[Long] = if (index == -1) Nil else List(even, index)\n\
    \        result", "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val evensSortedSortedWithIndex = evensSorted.zipWithIndex\n\
    \        val smallestEven = evensSortedSortedWithIndex.minBy(_._1)\n        val\
    \ smallestEvenIndex = evensSortedSortedWithIndex.minBy(_._2)\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n       \
    \ val index = smallestEvenIndex\n        val value = smallestEvenValue\n     \
    \   val result: List[Long] = List(value, index)\n        return result", "   \
    \     val evens = arr.filter(_ % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = arr.indexOf(even)\n        val evenIndex = arr.indexOf(even,\
    \ index + 1)\n        val evenValue = evens.take(evenIndex).sum\n        val evenIndexList\
    \ = evens.take(evenIndex).zipWithIndex.sortBy(_._1).map(_._2)\n        val evenIndexList\
    \ = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_\
    \ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n\
    \        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n       \
    \ val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList\
    \ = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_\
    \ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n\
    \        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n       \
    \ val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList\
    \ = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_\
    \ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n\
    \        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n       \
    \ val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList\
    \ = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_\
    \ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n\
    \        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n       \
    \ val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList\
    \ = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_\
    \ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n\
    \        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n       \
    \ val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList\
    \ = evenIndexList.takeWhile(_ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_\
    \ < arr.length)\n        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)\n\
    \        val evenIndexList = evenIndexList.takeWhile(_ < arr.length)", "     \
    \   val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val evens_without_smalest_value\
    \ = evens.filterNot(x => x == smalest_value)\n        if (evens_without_smalest_value.isEmpty)\
    \ List(smalest_value, smalest_index)\n        else evens_without_smalest_value.takeWhile(x\
    \ => x < smalest_value).sortBy(x => x).takeWhile(x => x < smalest_value).map(x\
    \ => smalest_value + x).takeWhile(x => x < smalest_value).map(x => smalest_index\
    \ + x)", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n\
    \        val even = evens.head\n        val index = arr.indexOf(even)\n      \
    \  val result = arr.takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => x != even).takeWhile(x\
    \ => x != even).takeWhile(x => x != even).takeWhile(x => ", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n      \
    \  val index = arr.indexOf(even)\n        val result = if (index == 0) List(even)\
    \ else List(even, index)\n        result", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val evensSorted = evens.sorted\n        val evensSortedIndex\
    \ = evens.zipWithIndex.sortBy(_._1).reverse.head._2\n        val evensSortedIndexList\
    \ = evensSortedIndex.map(x => arr.indexOf(x)).filter(x => x >= 0)\n        val\
    \ smallestEven = evensSortedIndexList.head\n        val smallestEvenIndex = arr.indexOf(smallestEven)\n\
    \        val smallestEvenValue = evensSortedIndexList.head\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n       \
    \ val smallestEvenValueIndex = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smalle", "        val evens = arr.filter(x => x % 2 == 0)\n  \
    \      val smallestEven = evens.min\n        val smallestIndex = evens.indexOf(smallestEven)\n\
    \        val result = evens.filterNot(x => x == smallestEven)\n        if (smallestIndex\
    \ == -1) {\n            List()\n        } else {\n            List(smallestEven,\
    \ smallestIndex)\n        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x)\n        if (evens.isEmpty) Nil\n        else evens.takeWhile(x => x <\
    \ evens.min).zipWithIndex.filter(_._2 % 2 == 0).map(_._1).reverse", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = evens.takeWhile(x\
    \ => x != even).takeWhile(x => x != index).sorted\n        even.takeWhile(x =>\
    \ x != result).takeWhile(x => x != index).sorted", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedSortedWithIndex\
    \ = evensSorted.zipWithIndex.toList\n        val smallestEven = evensSortedSortedWithIndex.minBy(_._1)\n\
    \        val smallestEvenIndex = evensSortedSortedWithIndex.indexOf(smallestEven)\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEven._2\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex", "   \
    \     val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n   \
    \     val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n", "        val evens = arr.filter(x => x % 2 == 0)\n \
    \       val evensSorted = evens.sortWith((x, y) => x < y)\n        val evensSortedIndex\
    \ = evensSorted.zipWithIndex.toList\n        val smallestEven = evensSortedIndex.head._2\n\
    \        val smallestEvenIndex = evensSortedIndex.head._1\n        val evensSortedWithoutSmallestEven\
    \ = evensSorted.filterNot(x => x == smallestEven)\n        val evensSortedWithoutSmallestEvenIndex\
    \ = evensSortedWithoutSmallestEven.zipWithIndex.toList\n        val smallestEvenIndex\
    \ = evensSortedWithoutSmallestEvenIndex.head._1\n        val smallestEvenValue\
    \ = evensSortedWithoutSmallestEvenIndex.head._2\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._1\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._2\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._3\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._4\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._5\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._6\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._7\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._8\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._9\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._10\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._11\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._12\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._13\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._14\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._15\n        val smallestEvenValueIndex\
    \ = evensSortedWithoutSmallestEvenIndex.last._16\n        val smallestEvenValueIndex\
    \ = evens", "        val result = new mutable.ListBuffer[Long]()\n        arr.foreach(x\
    \ => if (x % 2 == 0) result += x)\n        if (result.isEmpty) result\n      \
    \  else result.sortWith((x, y) => x < y).take(1)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smalest_value = evensSorted.head\n        val smalest_index = evensSorted.indexOf(0)\n\
    \        val result = evensSorted.takeWhile(x => x != smalest_value).takeWhile(x\
    \ => x != smalest_index).reverse\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestValue = evensSorted.head\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex\n        val evenSmallestIndexInList = evenSmallestIndexInList.next\n\
    \        val evenSmallestIndexInList = evenSmallestIndexInList.next\n        val\
    \ evenSmallestIndexInList = evenSmallestIndexInList.next\n        val evenSmallestIndexInList\
    \ = evenSmallestIndexInList.next\n        val evenSmallestIndexInList = evenSmallestIndexInList.next\n\
    \        val evenSmallestIndexInList = evenSmallestIndexInList.next\n        val\
    \ evenSmallestIndexInList = evenSmallestIndexInList.next\n        val evenSmallestIndexInList\
    \ = evenSmallestIndexInList.next\n        val evenSmallestIndexInList = evenSmallestIndexInList.next\n\
    \        val evenSmallestIndexInList = evenSmallestIndexInList.next\n        val\
    \ evenSmallestIndexInList = evenSmallestIndexInList.next\n        val evenSmallestIndexInList\
    \ = evenSmallestIndexInList.next\n        val evenSmallestIndexInList = evenSmallestIndexInList.next\n\
    \        val evenSmallestIndexInList = evenSmallestIndexInList.next\n        val\
    \ evenSmallestIndexInList = evenSmallestIndexInList.next\n        val evenSmallestIndexInList\
    \ = evenSmallestIndexInList.next\n        val evenSmallestIndexInList = evenSmallestIndexInList.next\n\
    \        val evenSmallestIndexInList = evenSmallestIndexInList.next\n        val\
    \ evenSmallestIndexInList = evenSmallestIndexInList.next\n        val evenSmallestIndexInList\
    \ = evenSmallestIndexInList.next\n        val evenSmallestIndexInList = evenSmallestIndexInList.next\n\
    \        val evenSmallestIndexInList = evenSmallestIndexInList.next\n        val\
    \ evenSmallestIndexInList = evenSmallestIndexInList.next\n        val evenSmallestIndexInList\
    \ = evenSmallestIndex", "        val evens = arr.filter(x => x % 2 == 0).sorted\n\
    \        val even = evens.head\n        val index = arr.indexOf(even)\n      \
    \  val result = if (index == -1) Nil else List(even, index)\n        result",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_).reverse\n        val even\
    \ = evens.head\n        val index = evens.indexOf(0)\n        val result: List[Long]\
    \ = if (index > 0) evens.take(index) else evens.take(evens.length)\n        result",
  "        val even = arr.filter(x => x % 2 == 0).sortWith(_ < _)\n        if (even.isEmpty)\
    \ List()\n        else {\n            val index = even.indexOf(0)\n          \
    \  if (index == 0) List()\n            else {\n                val smalest_value\
    \ = even.take(index).min\n                val smalest_index = even.indexOf(smalest_value)\n\
    \                List(smalest_value, smalest_index)\n            }\n        }",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = arr.filter(x => x\
    \ % 2 == 0).filter(x => x != even).sortBy(x => x).takeWhile(x => x < even).take(1)\n\
    \        if (result.isEmpty) result else List(even, index)", "        val even\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last).reverse\n\
    \        val index = arr.lastIndexWhere(x => x % 2 == 0)\n        val result =\
    \ even.takeWhile(x => x < arr.last).reverse.takeWhile(x => x < arr.last).reverse\n\
    \        if (result.isEmpty) List(arr.last)\n        else List(arr.last, index)",
  "        val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n    \
    \    val index = evens.indexOf(even)\n        val result = arr.filter(_ == even).sortWith(_\
    \ < _).take(index).reverse\n        result.isEmpty() match {\n            case\
    \ true => List()\n            case false => result\n        }", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOfFirst { x => x == evenSmallest }\n        val evenSmallestValue\
    \ = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex :: Nil\n\
    \        val evenSmallestValueList = evenSmallestValue :: Nil\n        if (evensSorted.isEmpty)\
    \ {\n            Nil\n        } else {\n            evenSmallestValueList :: evenSmallestIndexList\n\
    \        }", "        val even = arr.filter(_ % 2 == 0).sortBy(-_)\n        val\
    \ evenIndex = even.indexWhere(_ % 2 == 0)\n        val smallestEven = even.take(evenIndex).min\n\
    \        val smallestEvenIndex = even.indexOf(smallestEven)\n        val result\
    \ = if (smallestEvenIndex == -1) Nil else List(smallestEven, smallestEvenIndex)\n\
    \        result", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   var index = 0\n        arr.foreach(x => {\n            if (x % 2 == 0) {\n\
    \                index += 1\n                result += x\n            }\n    \
    \    })\n        if (result.isEmpty) {\n            return result\n        }\n\
    \        val smallestEvenValue = result.min\n        val smallestEvenIndex = result.indexWhere(_\
    \ == smallestEvenValue)\n        val smallestEvenIndexList = result.take(smallestEvenIndex).toList\n\
    \        if (smallestEvenIndexList.length == 1) {\n            smallestEvenIndexList\
    \ :+ smallestEvenIndex\n        } else {\n            smallestEvenIndexList\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n\
    \        val even = evens.head\n        val index = arr.indexOf(even)\n      \
    \  val result = List(even, index)\n        if (arr.isEmpty) result\n        else\
    \ result.sortBy(x => x._1).reverse", "        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even_value = evens(smalest_index)\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value_index = smalest_index\n    \
    \    val smalest_even_value_index2 = smalest_index\n        val smalest_even_value_index3\
    \ = smalest_index\n        val smalest_even_value_index4 = smalest_index\n   \
    \     val smalest_even_value_index5 = smalest_index\n        val smalest_even_value_index6\
    \ = smalest_index\n        val smalest_even_value_index7 = smalest_index\n   \
    \     val smalest_even_value_index8 = smalest_index\n        val smalest_even_value_index9\
    \ = smalest_index\n        val smalest_even_value_index10 = smalest_index\n  \
    \      val smalest_even_value_index11 = smalest_index\n        val smalest_even_value_index12\
    \ = smalest_index\n        val smalest_even_value_index13 = smalest_index\n  \
    \      val smalest_even_value_index14 = smalest_index\n        val smalest_even_value_index15\
    \ = smalest_index\n        val smalest_even_value_index16 = smalest_index\n  \
    \      val smalest_even_value_index17 = smalest_index\n        val smalest_even_value_index18\
    \ = smalest_index\n        val smalest_even_value_index19 = smalest_index\n  \
    \      val smalest_even_value_index20 = smalest_index\n        val smalest_even_value_index21\
    \ = smalest_index\n        val smalest_even_value_index22 = smalest_index\n  \
    \      val smalest_even_value_index23 = smalest_index\n        val smalest_even_value_index24\
    \ = smalest_index\n        val smalest_even_value_index25 = smalest_index\n  \
    \      val smalest_even_value_index26 = smalest_index\n        val smalest_even_value_index27\
    \ = smalest_index\n        val smalest_even_value_index28 = smalest_index\n  \
    \      val smalest_even_value_index29 = smalest_index\n        val smalest_even_value_index30\
    \ = smalest_index\n        val smalest_even_value_index31 = smalest_index", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val index = smallestEvenIndex\n        val\
    \ result: List[Long] = List(smallestEven, index)\n        if (evensSorted.isEmpty)\
    \ result\n        else result.sortWith(_ < _)", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last)\n        if (even.isEmpty)\
    \ Nil\n        else even.takeWhile(x => x < arr.last).sortBy(x => x).take(1)",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n       \
    \ val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted =\
    \ evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.filter(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.filter(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = even", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x)\n        val smallest = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = List(smallest, index)\n        if (evens.isEmpty) result\n\
    \        else evens.take(1).foldLeft(result)((x, y) => if (x._2 < y._2) x else\
    \ y)", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x - y)\n        val smallestEven = evensSorted.head\n\
    \        val smallestIndex = evensSorted.indexOf(0)\n        val result: List[Long]\
    \ = if (smallestEven == 0) List(smallestIndex) else List(smallestEven, smallestIndex)\n\
    \        result", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x < y)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenIndex\
    \ = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n        val result\
    \ = if (smallestEvenIndex == arr.length) arr.toList else arr.take(smallestEvenIndex).zip(smallestEven).toList\n\
    \        result", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even_value = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even_value)\n        val smalest_even_value_index =\
    \ smalest_even_index\n        val smalest_even_value_index_plus_1 = smalest_even_index\
    \ + 1\n        val smalest_even_value_index_plus_2 = smalest_even_index + 2\n\
    \        val smalest_even_value_index_plus_3 = smalest_even_index + 3\n      \
    \  val smalest_even_value_index_plus_4 = smalest_even_index + 4\n        val smalest_even_value_index_plus_5\
    \ = smalest_even_index + 5\n        val smalest_even_value_index_plus_6 = smalest_even_index\
    \ + 6\n        val smalest_even_value_index_plus_7 = smalest_even_index + 7\n\
    \        val smalest_even_value_index_plus_8 = smalest_even_index + 8\n      \
    \  val smalest_even_value_index_plus_9 = smalest_even_index + 9\n        val smalest_even_value_index_plus_10\
    \ = smalest_even_index + 10\n        val smalest_even_value_index_plus_11 = smalest_even_index\
    \ + 11\n        val smalest_even_value_index_plus_12 = smalest_even_index + 12\n\
    \        val smalest_even_value_index_plus_13 = smalest_even_index + 13\n    \
    \    val smalest_even_value_index_plus_14 = smalest_even_index + 14\n        val\
    \ smalest_even_value_index_plus_15 = smalest_even_index + 15\n        val smalest_even_value_index_plus_16\
    \ = smalest_even_index + 16\n        val smalest_even_value_index_plus_17 = smalest_even_index\
    \ + 17\n        val smalest_even_value_index_plus_18 = smalest_even_index + 18\n\
    \        val smalest_even_value_index_plus_19 = smalest_even_index + 19\n    \
    \    val smalest_even_value_index_plus_20 = smalest_even_index + 20\n        val\
    \ smalest_even_value_index_plus_21 = smalest_even_index + 21\n        val smalest_even_value_index_plus_22\
    \ = smalest_even_index + 22\n        val smalest_even_value_index_plus_23 = smalest_even_index\
    \ + 23\n        val smalest_even_value_index_plus_", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).sortBy(_).take(index)\n        result.headOption.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var index = 0\n  \
    \      var smallest = 0\n        var smallestIndex = 0\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0) {\n                if (smallest\
    \ == 0) {\n                    smallest = arr(i)\n                    smallestIndex\
    \ = i\n                } else {\n                    if (arr(i) < smallest) {\n\
    \                        smallest = arr(i)\n                        smallestIndex\
    \ = i\n                    }\n                }\n            }\n        }\n  \
    \      result.add(smallest)\n        result.add(smallestIndex)\n        return\
    \ result.toList", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = if (index == -1) List(even) else List(even, index)\n        return result",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_).reverse\n        val smallest\
    \ = evens.head\n        val index = evens.indexOfFirst { _ == smallest }\n   \
    \     if (index >= 0) {\n            List(smallest, index)\n        } else {\n\
    \            List()\n        }", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = arr.takeWhile(x => x != even).takeWhile(x => x % 2 == 0).sorted\n\
    \        if (result.isEmpty) List(even, index)\n        else List(even, index,\
    \ result)", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n\
    \        val smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n\
    \        if (evens.isEmpty) List(smalest_value, smalest_index)\n        else evens.takeWhile(x\
    \ => x < smalest_value).sortBy(x => x).takeWhile(x => x < smalest_value).map(x\
    \ => smalest_value + x).takeWhile(x => x < smalest_value).map(x => smalest_index).takeWhile(x\
    \ => x < smalest_index).map(x => smalest_value + x).takeWhile(x => x < smalest_index).map(x\
    \ => smalest_index)", "        val evens = arr.filter(x => x % 2 == 0)\n     \
    \   val evensSorted = evens.sortWith((x, y) => x.compare(y))\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOfFirst\
    \ { x => x == evenSmallest }\n        val evenSmallestValue = evenSmallest\n \
    \       val evenSmallestIndexList = evenSmallestIndex.toList\n        val smalestValue\
    \ = evenSmallestValue\n        val smalestIndexList = evenSmallestIndexList.toList\n\
    \        if (evenSmallestIndexList.isEmpty) {\n            List[Long]()\n    \
    \    } else {\n            val smalestIndexListWithSmallestIndex = smalestIndexList.zip(smalestValue).sortWith((x,\
    \ y) => x.compare(y))\n            val smalestIndexWithSmallestValue = smalestIndexListWithSmallestIndex.head\n\
    \            val smalestIndexWithSmallestIndex = smalestIndexListWithSmallestIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestIndex.zip(smalestValue).sortWith((x,\
    \ y) => x.compare(y))\n            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val smalestIndexWithSmallestValueIndex = smalestIndexWithSmallestValueIndex.last\n\
    \            val ", "        val even = arr.filter(x => x % 2 == 0).sortBy(x =>\
    \ x).takeWhile(x => x < arr.last).map(x => x).reverse\n        val index = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last).map(x => arr.lastIndexOf(x)).map(x\
    \ => x).reverse\n        val result = even.zip(index).filter(_._1 < _._1).map(_._2)\n\
    \        if (result.isEmpty) result\n        else result", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n      \
    \  val index = evens.indexOf(0)\n        val result = List(even, index)\n    \
    \    if (evens.isEmpty) result\n        else result.sortWith((x, y) => x < y)",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val even = evens.head\n\
    \        val index = evens.indexOfFirst { x => x == even }\n        val result\
    \ = arr.filter(_ % 2 == 0).sortBy(_).takeWhile(_ != even).take(index).map(_ /\
    \ 2)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        result.add(even)\n        result.add(index)\n\
    \        return result.toList", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x)\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.reverse", "        val evens = arr.filter(_ % 2 == 0)\n  \
    \      val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex.asInstanceOf[List[Long]]\n\
    \        val evenSmallestValueList = evenSmallestValue.asInstanceOf[List[Long]]\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexList.length\n    \
    \    val evenSmallestValueListLength = evenSmallestValueList.length\n        if\
    \ (evenSmallestIndexListLength == 0 || evenSmallestValueListLength == 0) {\n \
    \           List[Long]()\n        } else {\n            val evenSmallestIndexListLength\
    \ = evenSmallestIndexList.length\n            val evenSmallestValueListLength\
    \ = evenSmallestValueList.length\n            val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n            val evenSmallestValueListLength =\
    \ evenSmallestValueListLength\n            val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \            val evenSmallestValueListLength = evenSmallestValueListLength\n \
    \           val evenSmallestIndexListLength = evenSmallestIndexListLength\n  \
    \          val evenSmallestValueListLength = evenSmallestValueListLength\n   \
    \         val evenSmallestIndexListLength = evenSmallestIndexListLength\n    \
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \       val evenSmallestIndexListLength = evenSmallestIndexListLength\n      \
    \      val evenSmallestValueListLength = evenSmallestValueListLength\n       \
    \     val evenSmallestIndexListLength = evenSmallestIndexListLength\n        \
    \    val evenSmallestValueListLength = evenSmallestValueListLength\n         \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n          \
    \  val evenSmallestValueListLength = evenSmallestValueListLength\n           \
    \ val evenSmallestIndexListLength = evenSmallestIndexListLength\n            val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n            val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n            val evenSmallestValueListLength =\
    \ evenSmallestValueListLength\n            val evenSm", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) Nil else List(smallest, index)\n      \
    \  result", "        val result = mutable.ListBuffer[Long]()\n        arr.foreach(x\
    \ => if (x % 2 == 0) result += x)\n        arr.sortWith(_ < _)\n        result.takeWhile(_\
    \ % 2 == 0).headOption", "        val evens = arr.filter(x => x % 2 == 0)\n  \
    \      val evensSorted = evens.sortWith((x, y) => x.compare(y))\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOfFirst\
    \ { x => x == evenSmallest }\n        val evenSmallestValue = evenSmallest\n \
    \       val evenSmallestIndexList = evenSmallestIndex.asInstanceOf[List[Int]]\n\
    \        val evenSmallestValueList = evenSmallestValue.asInstanceOf[List[Long]]\n\
    \        val evenSmallestValueListLength = evenSmallestValueList.length\n    \
    \    val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n      \
    \  val index = evens.indexOf(0)\n        val result = arr.filter(x => x % 2 ==\
    \ 0 && x != even).sorted\n        if (result.isEmpty) List()\n        else List(even,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        val smallest =\
    \ evens.min\n        val index = evens.indexOf(smallest)\n        val result:\
    \ List[Long] = List(smallest, index)\n        if (evens.isEmpty) result\n    \
    \    else result.sortWith((a, b) => a.compareTo(b) < 0)", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y)\
    \ => x.compare(y))\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val result = List(smallestEvenValue,\
    \ smallestEvenIndex)\n        return result", "        val evens = arr.filter(_\
    \ % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOfFirst\
    \ { x => x == even }\n        val result = arr.filter(_ % 2 == 0).filter(_ ==\
    \ even).sorted\n        if (result.isEmpty) Nil\n        else result.take(1).map(_\
    \ - index).toList", "        val evens = arr.filter(x => x % 2 == 0)\n       \
    \ val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x => x).distinct\n        val\
    \ smallest = evens.head\n        val index = evens.indexOf(smallest)\n       \
    \ val result = if (index == 0) List(smallest) else evens.take(index).zip(evens.drop(index)).map(_._1)\n\
    \        result", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val smalest_value\
    \ = evens.filter(x => x % 2 == 0).min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val result = if (smalest_index == -1) Array(smalest_value) else Array(smalest_value,\
    \ smalest_index)\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var index = 0\n        var smallest = 0\n        var smallestIndex =\
    \ 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0)\
    \ {\n                if (smallest == 0) {\n                    smallest = arr(i)\n\
    \                    smallestIndex = i\n                } else {\n           \
    \         if (arr(i) < smallest) {\n                        smallest = arr(i)\n\
    \                        smallestIndex = i\n                    }\n          \
    \      }\n            }\n        }\n        result.add(smallest)\n        result.add(smallestIndex)\n\
    \        return result.toList", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x)\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.sortBy(x => x).reverse", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = arr.filter(x => x % 2 == 0).filter(x => x != even).sorted\n\
    \        if (result.isEmpty) List()\n        else if (result.size == 1) List(result(0))\n\
    \        else List(result(0), index)", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedIndex\
    \ = evensSorted.zipWithIndex.toList\n        val smallestEven = evensSortedIndex.find(x\
    \ => x._2 == 0)\n        val smallestEvenValue = smallestEven._1\n        val\
    \ smallestEvenIndex = smallestEven._2\n        val smallestEvenIndex = smallestEvenIndex\
    \ + 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEven",
  "        val result = new mutable.ListBuffer[Long]()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        result += (even -> index)\n        evens.filter(_ != even).foreach(x\
    \ => result += (x -> arr.indexOf(x)))\n        result.toList", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        val even = evens.min\n        val index =\
    \ arr.indexOf(even)\n        val result = arr.filter(_ != even).filter(_ % 2 ==\
    \ 0).minBy(_ % 2 == 0)\n        val resultList = List(result._1, result._2)\n\
    \        if (arr.isEmpty) {\n            resultList.filter(_ != 0)\n        }\
    \ else {\n            resultList\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x)\n        val even = evens.head\n        val index\
    \ = evens.indexOf(even)\n        val result = if (index == 0) even :: Nil else\
    \ even :: index\n        result", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val even = evens.head\n        val index = arr.indexOf(even)\n      \
    \  val result = if (index == -1) Nil else List(even, index)\n        result"]
stop_tokens:
- "\n    }\n"
