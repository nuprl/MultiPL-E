name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output: [2, 1]\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index. \n    // Example\
  \ 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input: [5,\
  \ 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n    // so we will choose the first zero, which has\
  \ the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n\
  \    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val evens = arr.filter(x => x % 2 == 0).sorted\n        val\
    \ even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = evens.takeWhile(x => x != even).takeWhile(x => x % 2 == 0).sorted\n      \
    \  if (result.isEmpty) List(even, index)\n        else List(even, index).sortWith((x,\
    \ y) => x < y)", "        val evens = arr.filter(x => x % 2 == 0).sorted\n   \
    \     val even = evens.head\n        val index = arr.indexOf(even)\n        val\
    \ result: List[Long] = if (index == -1) Nil else List(even, index)\n        result",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOfMin\n        val smallestEvenValue = smallestEven / 2\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val result = arr.filter(_\
    \ == smallestEvenValue)\n        val resultSorted = result.sortWith(_ < _)\n \
    \       val smallestValue = resultSorted.head\n        val smallestIndex = resultSorted.indexOfMin\n\
    \        val smallestIndex = smallestIndex\n        val resultList = List(smallestValue,\
    \ smallestIndex)\n        return resultList", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.filter(_ ==\
    \ smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = smalest_evens_index + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_index = sm", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val result = evens.filter(_ == smalest_value).takeWhile(_\
    \ != smalest_value)\n        if (result.isEmpty) result else result.zip(evens.indexOf(result)).filter(_._2\
    \ == smalest_index).map(_._1)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sorted\n        val evensSortedIndex = evensSorted.indexWhere(x\
    \ => x == evensSorted.head)\n        val evensSortedEvens = evensSorted.take(evensSortedIndex\
    \ + 1)\n        val evensSortedEvensSorted = evensSortedEvens.sorted\n       \
    \ val evensSortedEvensSortedIndex = evensSortedEvensSorted.indexWhere(x => x ==\
    \ evensSortedEvensSorted.head)\n        val smalest_value = evensSortedEvensSortedIndex\n\
    \        val smalest_index = evensSortedIndex\n        if (evensSorted.isEmpty)\
    \ {\n            List[Long]()\n        } else {\n            evensSortedEvensSortedIndex.map(x\
    \ => x % 2 == 0).filter(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x\
    \ => x).map(x => x).takeWhile(x => x).map(x => x).takeWhile(x => x).", "     \
    \   val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(x => x\
    \ % 2 == 0).sortBy(x => x).takeWhile(x => x != even).take(index).toList\n    \
    \    if (result.isEmpty) result else result ++ List(even, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x - y)\n        val evensSortedSet = evensSorted.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSortedSet = evensSortedSortedSet.toSet\n        val evensSortedSortedSet\
    \ = evensSortedSortedSet.toSet\n        val evensSortedSortedSet = evensSortedSortedSet.toSet\n\
    \        val evensSortedSorted", "        val even = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val index = even.zipWithIndex.filter(_._2 % 2 == 0).minBy(_._1)._2\n\
    \        even.filter(_ == index).sortBy(_)", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result: List[Long] = List(even, index)\n        if (evens.isEmpty)\
    \ result\n        else result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sorted\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val index = smallestEvenIndex\n        val smallestEvenValue\
    \ = evensSorted.take(smallestEvenIndex).sum\n        val smallestEvenValueIndex\
    \ = evensSorted.indexOf(smallestEvenValue)\n        result.add(smallestEvenValue)\n\
    \        result.add(smallestEvenValueIndex)\n        result", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x - y)\n        val evensSortedIndex = evensSorted.zipWithIndex.toList\n\
    \        val smallestEven = evensSortedIndex.minBy(x => x._2)\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = evensSortedIndex.find(x =>\
    \ x._1 == smallestEvenValue).get._2\n        val smallestEvenIndex = smallestEvenIndex\
    \ + 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex - 1\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenIndex = smallestEvenIndex - 1\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenIndex = smallestEvenIndex -\
    \ 1\n        val smalle", "        val evens = arr.filter(_ % 2 == 0).sortBy(-_)\n\
    \        val even = evens.head\n        val index = evens.indexOf(0)\n       \
    \ val result = List(even, index)\n        if (evens.isEmpty) result\n        else\
    \ result.sortBy(-_)", "        val even = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        if (even.isEmpty) List()\n        else {\n          \
    \  val smalest_value = even(0)\n            val smalest_index = even.indexOf(smalest_value)\n\
    \            val result = even.takeWhile(x => x != smalest_value).takeWhile(x\
    \ => x != smalest_index).reverse\n            if (result.isEmpty) List()\n   \
    \         else List(smalest_value, smalest_index)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0).sortBy(_)\n        val even = evens.head\n        val\
    \ index = arr.indexOf(even)\n        val result = List(even, index)\n        if\
    \ (evens.isEmpty) result\n        else result.sortBy(_._1).reverse", "       \
    \ val even = arr.filter(x => x % 2 == 0)\n        val evenSorted = even.sortWith((x,\
    \ y) => x.compare(y))\n        val evenSmallest = evenSorted.head\n        val\
    \ evenSmallestIndex = evenSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.isEmpty) {\n \
    \           evenSmallestIndexList.foreach(x => evenSmallestValueList.map(_ + 1))\n\
    \        }\n        else {\n            evenSmallestIndexList.foreach(x => evenSmallestValueList.map(_\
    \ + 1))\n            evenSmallestIndexList.foreach(x => evenSmallestValueList.map(_\
    \ + x))\n        }\n        evenSmallestValueList.map(x => evenSmallestValue)",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = List(even, index)\n        if (arr.isEmpty) result\n        else pluck(arr.drop(1))",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val smallest = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result: List[Long] = if (index\
    \ == -1) List(smallest) else evens.take(index).sortBy(_)\n        result", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evensSortedWithIndex = evensSorted.zipWithIndex\n\
    \        val smallestEven = evensSortedWithIndex.minBy(_._1)._2\n        val smallestEvenIndex\
    \ = evensSortedWithIndex.minBy(_._1)._1\n        val index = arr.indexOf(smallestEven)\n\
    \        val result = List(smallestEven, smallestEvenIndex)\n        if (arr.isEmpty)\
    \ result\n        else result.::(pluck(arr.drop(index)))", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        val smallest = evens.min\n        val index\
    \ = evens.indexOf(smallest)\n        val result: List[Long] = if (index > -1)\
    \ evens.take(index) else evens\n        result"]
stop_tokens:
- "\n    }\n"
