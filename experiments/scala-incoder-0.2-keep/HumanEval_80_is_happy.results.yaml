language: scala
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3 || len % 3 != 0) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until len) {\n            if (set.contains(s(i)))\n     \
    \           return false\n            set += s(i)\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pjarqem.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s.toCharArray)\n\
    \        val len = chars.length\n        val happy = mutable.ArrayBuffer(s.toCharArray)\n\
    \        val happyLen = happy.length\n        val distinctChars = mutable.Set[Char]()\n\
    \        val distinctCharsLen = distinctChars.length\n        val happyDistinctChars\
    \ = mutable.Set[Char]()\n        val happyDistinctCharsLen = happyDistinctChars.length\n\
    \        for(i <- 0 until len) {\n            val c = chars(i)\n            distinctChars\
    \ += c\n            happyDistinctChars += c\n            happyDistinctCharsLen\
    \ += 1\n        }\n        happyLen >= 3 && distinctCharsLen >= 3 && happyDistinctCharsLen\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1x0bh7o.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj1x0bh7o.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj1x0bh7o.scala:19:28 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1x0bh7o.scala:21:33 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhappyDistinctChars\e[0m\
    \ = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == s.length && chars.distinct.length >= 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lq_1rym.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).forall { case (c, n) => n >= 3 && c.distinct().size\
    \ == 3 }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfem0n61.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3) false\n        else {\n            var i = 0\n         \
    \   var j = 1\n            var k = 0\n            var happy = true\n         \
    \   while (i < len) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(i)\
    \ != s.charAt(k)) {\n                    happy = false\n                }\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      }\n            happy\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 4\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.isHappy(tmpjmhyqx3t.scala:23)\n\tat Problem$.main(tmpjmhyqx3t.scala:36)\n\
    \tat Problem.main(tmpjmhyqx3t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if(n < 3) return false\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for(i <- 0 until n) {\n            val c = s.charAt(i)\n            if(!counts.contains(c))\
    \ {\n                counts += c -> 1\n            } else {\n                counts(c)\
    \ += 1\n            }\n        }\n        for(i <- 0 until n) {\n            val\
    \ c = s.charAt(i)\n            if(counts(c) != 3) return false\n        }\n  \
    \      true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqsl1opsl.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) return false\n        val\
    \ set = mutable.HashSet[Char]()\n        for (i <- 0 until len) {\n          \
    \  val c = chars(i)\n            if (!set(c)) {\n                set += c\n  \
    \          }\n        }\n        return len >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90l7v7ua.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val distinctChars = chars.distinct\n        val distinctCharsCount =\
    \ distinctChars.size\n        val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.init)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvee079mi.scala:18:82\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.init)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                       Found:    Array[Char]\n\e[31m   |\e[0m               \
    \                                Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.distinct.size == s.length && chars.toList.distinct.size == 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kb80lsc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.size == s.length && chars.toList.distinct.size == 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0v2u0fl.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).forall(c => c.length >= 3 && c.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzo9wu5t.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(c => chars.toList.count(_\
    \ == c) == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph6aeenh6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumqwwd86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val len = chars.length\n        val distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpph_w9zh2.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpph_w9zh2.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlen\e[0m = chars.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlen is already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpph_w9zh2.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdistinctChars\
    \ is already defined as \e[33mvalue\e[0m \e[35mdistinctChars\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpph_w9zh2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlen\e[0m = chars.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlen is already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpph_w9zh2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdistinctChars\
    \ is already defined as \e[33mvalue\e[0m \e[35mdistinctChars\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpph_w9zh2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlen\e[0m = chars.length\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1659800398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.distinct.length\
    \ == v.length }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfhawuhh.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val l = s.length\n\
    \        if(l < 3) return false\n        val set = mutable.HashSet[Char]()\n \
    \       for(i <- 0 until l) set += s.charAt(i)\n        l == set.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6pk28u_r.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumqwwd86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val l = s.length\n\
    \        if(l < 3) return false\n        val set = mutable.HashSet[Char]()\n \
    \       for(i <- 0 until l) {\n            if(set.contains(s(i)))\n          \
    \      return false\n            set += s(i)\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7e_4jzw3.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.length >= 3 && chars.toList.distinct.length == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcghdcygf.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3) return false\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until len) {\n            chars += s.charAt(i)\n        }\n\
    \        chars.distinct.size == len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcpy1sou_.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.length).filter(_._2 >= 3).forall(x => x._1.distinct().size\
    \ == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9tp08v7w.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n\
    \        val len = s.length\n        val happy = len >= 3\n        val distinctChars\
    \ = chars.toSet.diff(charsSet)\n        val distinctCharsSet = distinctChars.toSet\n\
    \        val isHappy = happy.forall(x => distinctCharsSet.contains(x))\n     \
    \   isHappy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp77cel4op.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misHappy\e[0m = happy.forall(\e\
    [36mx\e[0m => distinctCharsSet.contains(x))\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value forall\
    \ is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val n = chars.length\n        val distinctChars = chars.distinct\n  \
    \      val happy = if (n >= 3) true\n        else false\n        val happyCount\
    \ = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount2 = chars.takeWhile(_\
    \ != 'a').count(_ == 'a')\n        val happyCount3 = chars.takeWhile(_ != 'a').count(_\
    \ == 'a')\n        val happyCount4 = chars.takeWhile(_ != 'a').count(_ == 'a')\n\
    \        val happyCount5 = chars.takeWhile(_ != 'a').count(_ == 'a')\n       \
    \ val happyCount6 = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount7\
    \ = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount8 = chars.takeWhile(_\
    \ != 'a').count(_ == 'a')\n        val happyCount9 = chars.takeWhile(_ != 'a').count(_\
    \ == 'a')\n        val happyCount10 = chars.takeWhile(_ != 'a').count(_ == 'a')\n\
    \        val happyCount11 = chars.takeWhile(_ != 'a').count(_ == 'a')\n      \
    \  val happyCount12 = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount13\
    \ = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount14 = chars.takeWhile(_\
    \ != 'a').count(_ == 'a')\n        val happyCount15 = chars.takeWhile(_ != 'a').count(_\
    \ == 'a')\n        val happyCount16 = chars.takeWhile(_ != 'a').count(_ == 'a')\n\
    \        val happyCount17 = chars.takeWhile(_ != 'a').count(_ == 'a')\n      \
    \  val happyCount18 = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount19\
    \ = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount20 = chars.takeWhile(_\
    \ != 'a').count(_ == 'a')\n        val happyCount21 = chars.takeWhile(_ != 'a').count(_\
    \ == 'a')\n        val happyCount22 = chars.takeWhile(_ != 'a').count(_ == 'a')\n\
    \        val happyCount23 = chars.takeWhile(_ != 'a').count(_ == 'a')\n      \
    \  val happyCount24 = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount25\
    \ = chars.takeWhile(_ != 'a').count(_ == 'a')\n        val happyCount26 = chars.takeWhile(_\
    \ != 'a').\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwk_0u13x.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwk_0u13x.scala:46:5 ---------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.distinct.length\
    \ == v.length }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfhawuhh.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until len) {\n            val c = chars(i)\n            val\
    \ prev = chars(i-1)\n            val next = chars(i+1)\n            val prev2\
    \ = chars(i-1)\n            val next2 = chars(i+2)\n            if(prev != prev2\
    \ && next != next2 && c != prev && c != next) {\n                happy.add(c)\n\
    \            }\n        }\n        happy.size == 3 && happy.distinct.size == len\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptg1rkq5i.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).forall(x => x._2.length >= 3) && (chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3) && (chars.toList.groupBy(x => x).forall(x\
    \ => x._2.length >= 3)))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlx_0ijf.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until len) {\n            if(!set.contains(s.charAt(i))) {\n\
    \                set += s.charAt(i)\n            }\n        }\n        return\
    \ len >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpded_4lyf.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.groupBy(_).map(_._2.size).forall(_.toLong >= 3) &&\
    \ (chars.toList.groupBy(_).map(_._2.size).forall(_.toLong == 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgxluee_j.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpgxluee_j.scala:19:29 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        chars.toList.groupBy(_).map(_._2.size).forall(_.toLong\
    \ >= \e[31m3\e[0m) && (chars.toList.groupBy(_).map(_._2.size).forall(_.toLong\
    \ == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => \n\e[31m   |\e[0m     chars.toList.groupBy(_$1).map(_$2 =>\
    \ _$2._2.size).forall(\n\e[31m   |\e[0m       _$3 => _$3.toLong >= 3\n\e[31m \
    \  |\e[0m     ) && \n\e[31m   |\e[0m       (\n\e[31m   |\e[0m         _$4 => \n\
    \e[31m   |\e[0m           chars.toList.groupBy(_$4).map(_$5 => _$5._2.size).forall(\n\
    \e[31m   |\e[0m             _$6 => _$6.toLong == 1\n\e[31m   |\e[0m          \
    \ )\n\e[31m   |\e[0m       ).\n2 errors found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5qq5p1y9.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val distinctChars = chars.distinct\n        val distinctCharsCount =\
    \ distinctChars.length\n        val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.init)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps02ewk17.scala:18:82\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.init)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                       Found:    Array[Char]\n\e[31m   |\e[0m               \
    \                                Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(c => c).forall(c => c.length >= 3) && (chars.toList.groupBy(c\
    \ => c).forall(c => c.length >= 3) && (chars.toList.groupBy(c => c).forall(c =>\
    \ c.length >= 3)))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbm5eeow.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3 && distinctChars.forall(x => chars.take(3).forall(y\
    \ => x != y))\n        happy\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1tgbe7l.scala:24)\n\tat Problem.main(tmpk1tgbe7l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall(x => x._2.length >= 3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoz6lwcqj.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) return false\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        while (i < len) {\n   \
    \         if (chars(i) == chars(j) && chars(i) == chars(k)) {\n              \
    \  i += 1\n                j += 1\n                k += 1\n            } else\
    \ if (chars(i) == chars(j)) {\n                i += 1\n                j += 1\n\
    \            } else if (chars(i) == chars(k)) {\n                i += 1\n    \
    \            k += 1\n            } else {\n                return false\n    \
    \        }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzvj4ssk.scala:42)\n\tat Problem.main(tmpnzvj4ssk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        var i = 0\n        var j = 0\n     \
    \   var k = 0\n        while (i < n) {\n            if (s.charAt(i) == s.charAt(j)\
    \ && s.charAt(i) == s.charAt(k)) {\n                i += 1\n                j\
    \ += 1\n                k += 1\n            } else if (s.charAt(i) != s.charAt(j)\
    \ && s.charAt(i) != s.charAt(k)) {\n                return false\n           \
    \ } else {\n                i += 1\n                j += 1\n                k\
    \ += 1\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv78uvzrr.scala:39)\n\tat Problem.main(tmpv78uvzrr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumqwwd86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.ListBuffer[Char]()\n\
    \        val distinctChars = mutable.Set[Char]()\n        for(i <- 0 until len)\
    \ {\n            val c = chars(i)\n            happy.append(c)\n            distinctChars.add(c)\n\
    \        }\n        val happyLen = happy.length\n        if(happyLen < 3) {\n\
    \            return false\n        }\n        for(i <- 0 until happyLen) {\n \
    \           val c = happy(i)\n            if(!distinctChars.contains(c)) {\n \
    \               return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpli3jpt3n.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpli3jpt3n.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val l = s.length\n\
    \        val d = new mutable.HashSet[Char]()\n        for(i <- 0 until l)\n  \
    \          if(!d.contains(s(i)))\n                d.add(s(i))\n        l >= 3\
    \ && d.size == l\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqj32gq5c.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).forall(c => c.length >= 3) && (chars.toList.groupBy(c\
    \ => c).forall(c => c.length >= 3))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprc0b5alc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) false\n        else {\n\
    \            val counts = mutable.HashMap[Char, Int]()\n            for (i <-\
    \ 0 until len) {\n                val c = chars(i)\n                if (counts.contains(c))\
    \ counts(c) += 1\n                else counts.put(c, 1); counts(c)\n         \
    \   }\n            val distinctCounts = counts.toSeq.distinct\n            val\
    \ distinctCountLen = distinctCounts.length\n            if (distinctCountLen <\
    \ 3) false\n            else {\n                val counts3 = mutable.HashMap[Char,\
    \ Int]()\n                for (i <- 0 until len) {\n                    val c\
    \ = chars(i)\n                    if (counts3.contains(c)) counts3(c) += 1\n \
    \                   else counts3.put(c, 1); counts3(c)\n                }\n  \
    \              val distinctCountLen3 = counts3.toSeq.distinct\n              \
    \  if (distinctCountLen3 != distinctCountLen) false\n                else true\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_pj1hw4.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_pj1hw4.scala:29:30\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e\
    [0m \e[36mcounts3\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3) false\n        else {\n            val counts = mutable.HashMap[Char,\
    \ Int]()\n            for (i <- 0 until len) {\n                val c = s.charAt(i)\n\
    \                if (!counts.contains(c)) counts += c -> 1\n                else\
    \ counts(c) += 1\n            }\n            if (counts.length < 3) false\n  \
    \          else counts.length >= 3 && counts.length % 3 == 0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpte6ohe9j.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) false\n        val set =\
    \ new mutable.HashSet[Char]\n        for (i <- 0 until len) {\n            val\
    \ c = chars(i)\n            if (set.contains(c)) false\n            set += c\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4qv73ph.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpz4qv73ph.scala:17:21 ----------------\e\
    [0m\e[0m\n\e[33m17 |\e[0m        \e[33mif\e[0m (len < \e[31m3\e[0m) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                     ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpz4qv73ph.scala:21:33\
    \ ----------------\e[0m\e[0m\n\e[33m21 |\e[0m            \e[33mif\e[0m (set.contains(c))\
    \ \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                                 ^^^^^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 warnings found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalc0ey3v.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.distinct.length >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0tms_ed.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(_).map(_._2.length).forall(_.toInt == 3)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyt9iovq.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpwyt9iovq.scala:18:29 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        chars.toList.groupBy(_).map(_._2.length).forall(_.toInt\
    \ == \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => \n\e[31m   |\e[0m     chars.toList.groupBy(_$1).map(_$2 =>\
    \ _$2._2.length).forall(\n\e[31m   |\e[0m       _$3 => _$3.toInt == 3\n\e[31m\
    \   |\e[0m     ).\n2 errors found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(_).map(_._2).forall(_.size == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04f53ooa.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp04f53ooa.scala:18:29 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        chars.toList.groupBy(_).map(_._2).forall(_.size\
    \ == \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m_$1 => chars.toList.groupBy(_$1).map(_$2 => _$2._2).forall(_$3 => _$3.size\
    \ == 3).\n2 errors found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_6hcej4.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.Set[Char]()\n   \
    \     for(i <- 0 until len) {\n            val c = chars(i)\n            if(happy.contains(c))\
    \ {\n                return false\n            }\n            happy.add(c)\n \
    \       }\n        return happy.size == len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7qjgovy.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.Set[Char]()\n   \
    \     for(i <- 0 until len) {\n            val c = chars(i)\n            happy.add(c)\n\
    \        }\n        len >= 3 && happy.forall(c => happy.count(_ == c) == 3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyoh2xh64.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s)\n\
    \        val len = s.length\n        val isHappy = len >= 3\n        if(isHappy)\
    \ {\n            for(i <- 0 until len) {\n                val c = chars(i)\n \
    \               if(chars.exists(c != c)) {\n                    chars(i) = chars(i)\
    \ + c\n                    if(chars.exists(c != c)) {\n                      \
    \  chars(i) = chars(i) + c\n                        if(chars.exists(c != c)) {\n\
    \                            chars(i) = chars(i) + c\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    isHappy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhdzzhtr.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until len) {\n            val c = chars(i)\n            if\
    \ (counts.getOrElse(c, 0) == 0) {\n                counts += c -> 1\n        \
    \    } else {\n                counts(c) += 1\n            }\n        }\n    \
    \    len >= 3 && counts.forall(c => counts.getOrElse(c, 0) == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxauwj_76.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.distinct.length\
    \ == v.length }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfktmu7hb.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.distinct.size == s.length && chars.toList.distinct.size == 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kb80lsc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi8v62no.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dktf3ph.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi8v62no.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val counts = mutable.HashMap[Char,\
    \ Int]()\n        for(i <- 0 until len) {\n            val c = s.charAt(i)\n \
    \           if(!counts.contains(c)) {\n                counts += c -> 1\n    \
    \        } else {\n                counts(c) += 1\n            }\n        }\n\
    \        val distinctCount = counts.values.toSet.size\n        return distinctCount\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprl10e_88.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val counts = mutable.HashMap[Char,\
    \ Int]()\n        for(i <- 0 until len) {\n            val c = s.charAt(i)\n \
    \           if(!counts.contains(c)) {\n                counts += c -> 1\n    \
    \        } else {\n                counts(c) += 1\n            }\n        }\n\
    \        for(i <- 0 until len) {\n            val c = s.charAt(i)\n          \
    \  if(counts(c) != 3) {\n                return false\n            }\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptd1nna5f.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until n) {\n            val c = s.charAt(i)\n           \
    \ if (counts.contains(c)) {\n                counts(c) += 1\n            } else\
    \ {\n                counts.put(c, 1L)\n            }\n        }\n        counts.values.toList.forall(_.toLong\
    \ > 1L)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud2rh3w1.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val n = chars.length\n        val distinctChars = chars.distinct\n  \
    \      val happy = if (n < 3) false else true\n        val happyChars = chars.takeWhile(_\
    \ != '\\0')\n        val happyCharsSet = happyChars.toSet\n        val happyCharsSetSize\
    \ = happyCharsSet.size\n        val happyCharsSetIsHappy = happyCharsSetSize >=\
    \ 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy2 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy3 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy4 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy5 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy6 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy7 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy8 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy9 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy10 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy11 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy12 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy13 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy14 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy15 = happyCharsSetSize\
    \ >= 3 && happyCharsSetIsHappy\n        val happyCharsSetIsHappy16 = happyChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpukelj67m.scala:19:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhappyChars\e[0m = chars.takeWhile(_\
    \ != \e[31m'\\0'\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m               octal escape literals are\
    \ unsupported: use \\u0000 instead\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpukelj67m.scala:22:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhappyCharsSetIsHappy\e[0m = happyCharsSetSize >= \e[31m3\e[0m && happyCharsSetIsHappy\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mhappyCharsSetIsHappy\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpukelj67m.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val count = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until len) {\n            val c = chars(i)\n   \
    \         if (count.contains(c)) {\n                count(c) += 1\n          \
    \  } else {\n                count(c) = 1\n            }\n        }\n        val\
    \ happy = len >= 3\n        if (happy) {\n            for (i <- 0 until len) {\n\
    \                val c = chars(i)\n                if (count.contains(c)) {\n\
    \                    val count = count(c)\n                    if (count != 3)\
    \ {\n                        happy = false\n                        break\n  \
    \                  }\n                }\n            }\n        }\n        happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qjffwda.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2qjffwda.scala:33:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                   \
    \     happy = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Reassignment to val happy\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qjffwda.scala:34:24 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val hashSet = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until len) {\n            val c = s.charAt(i)\n          \
    \  if(!hashSet.contains(c)) {\n                hashSet.add(c)\n            }\n\
    \        }\n        return hashSet.size() >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ey8zjft.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if(n < 3) return false\n        val set = mutable.HashSet[Char]()\n \
    \       for(i <- 0 until n){\n            if(!set.contains(s.charAt(i))){\n  \
    \              set += s.charAt(i)\n            }\n        }\n        return n\
    \ == set.size\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4c3lcw2q.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val l = s.length\n\
    \        if(l < 3) return false\n        val arr = s.toCharArray\n        val\
    \ set = mutable.HashSet[Char]()\n        for(i <- 0 until l) {\n            if(arr(i)\
    \ == arr(i+1)) set.add((arr(i)))\n        }\n        return set.size == l\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyn2q0l3.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val hashSet = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until n) {\n            hashSet += s.charAt(i)\n        }\n\
    \        return hashSet.length >= 3 && hashSet.forall(x => hashSet.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy1sc63h.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = len >= 3 && chars.forall(x\
    \ => chars.take(3).distinct.contains(x))\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7bk428t5.scala:23)\n\tat Problem.main(tmp7bk428t5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        val arr = new Array[String](n)\n        for(i <- 0 until n) {\n     \
    \       arr(i) = s.substring(i,i+3)\n        }\n        val distinct = new mutable.HashSet[String]()\n\
    \        for(i <- 0 until n) {\n            if(!distinct.contains(arr(i))) {\n\
    \                distinct.add(arr(i))\n            }\n        }\n        arr.length\
    \ >= 3 && distinct.size == n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2ya5yyj.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdistinct\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi8v62no.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if(len < 3) return false\n        val\
    \ set = new mutable.HashSet[Char]\n        for(i <- 0 until len) {\n         \
    \   if(set.contains(chars(i))) {\n                return false\n            }\n\
    \            else {\n                set.add(chars(i))\n            }\n      \
    \  }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuhfc44nk.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.distinct.length >= 3 && chars.distinct.forall(c => chars.distinct.indexOf(c)\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpllwxwz_r.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.distinct.size\
    \ == s.length && chars.toList.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoctbabuf.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == s.length && chars.forall(c => chars.count(_ == c) == 3)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6hj1lnop.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        val counts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until\
    \ n) {\n            val c = s.charAt(i)\n            counts.put(c, counts.getOrElse(c,\
    \ 0) + 1)\n        }\n        val happy = counts.values.forall(c => c >= 3)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8pf1j1r.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3\n        val happyChars = chars.takeWhile(_ != '\\\
    0')\n        val happyDistinctChars = happyChars.distinct\n        val happyDistinctCharsCount\
    \ = happyDistinctChars.size\n        val happyDistinctCharsCount2 = happyDistinctCharsCount.toInt\n\
    \        val happyDistinctCharsCount3 = happyDistinctCharsCount2.toInt\n     \
    \   val happyDistinctCharsCount4 = happyDistinctCharsCount3.toInt\n        val\
    \ happyDistinctCharsCount5 = happyDistinctCharsCount4.toInt\n        val happyDistinctCharsCount6\
    \ = happyDistinctCharsCount5.toInt\n        val happyDistinctCharsCount7 = happyDistinctCharsCount6.toInt\n\
    \        val happyDistinctCharsCount8 = happyDistinctCharsCount7.toInt\n     \
    \   val happyDistinctCharsCount9 = happyDistinctCharsCount8.toInt\n        val\
    \ happyDistinctCharsCount10 = happyDistinctCharsCount9.toInt\n        val happyDistinctCharsCount11\
    \ = happyDistinctCharsCount10.toInt\n        val happyDistinctCharsCount12 = happyDistinctCharsCount11.toInt\n\
    \        val happyDistinctCharsCount13 = happyDistinctCharsCount12.toInt\n   \
    \     val happyDistinctCharsCount14 = happyDistinctCharsCount13.toInt\n      \
    \  val happyDistinctCharsCount15 = happyDistinctCharsCount14.toInt\n        val\
    \ happyDistinctCharsCount16 = happyDistinctCharsCount15.toInt\n        val happyDistinctCharsCount17\
    \ = happyDistinctCharsCount16.toInt\n        val happyDistinctCharsCount18 = happyDistinctCharsCount17.toInt\n\
    \        val happyDistinctCharsCount19 = happyDistinctCharsCount18.toInt\n   \
    \     val happyDistinctCharsCount20 = happyDistinctCharsCount19.toInt\n      \
    \  val happyDistinctCharsCount21 = happyDistinctCharsCount20.toInt\n        val\
    \ happyDistinctCharsCount22\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpudsxd517.scala:19:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhappyChars\e[0m = chars.takeWhile(_\
    \ != \e[31m'\\0'\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m               octal escape literals are\
    \ unsupported: use \\u0000 instead\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpudsxd517.scala:43:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpudsxd517.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumqwwd86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val counts = mutable.HashMap[Char,\
    \ Int]()\n        for(i <- 0 until len) {\n            val c = s.charAt(i)\n \
    \           if(!counts.contains(c)) {\n                counts += c -> 1\n    \
    \        } else {\n                counts(c) += 1\n            }\n        }\n\
    \        for(i <- 0 until len) {\n            val c = s.charAt(i)\n          \
    \  if(!counts.contains(c)) {\n                return false\n            }\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhw24c_s.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(x => chars.toList.distinct.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rsyx64o.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until len) {\n            val c = chars(i)\n            counts(c)\
    \ match {\n                case None => counts(c) = 1\n                case Some(count)\
    \ => counts(c) = count + 1\n            }\n        }\n        val happy = len\
    \ >= 3 && counts.forall(c => c == 1)\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lf1shxo.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800418
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3 && distinctChars.forall(x => chars.drop(3).forall(y\
    \ => x == y))\n        happy\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4iqqy5d.scala:24)\n\tat Problem.main(tmpb4iqqy5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   if (s.length < 3 || chars.distinct.length != s.length)\n            return\
    \ false\n        for (i <- 0 until s.length - 2)\n            if (chars.distinct.contains(s.charAt(i)\
    \ + s.charAt(i + 1) + s.charAt(i + 2)))\n                return false\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwwnkshm.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until len) {\n            if(!set.contains(s(i))) {\n    \
    \            set += s(i)\n            }\n        }\n        return len >= 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtp2818v.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if(len < 3) return false\n        val\
    \ distinct = new mutable.HashSet[Char]()\n        for(i <- 0 until len) {\n  \
    \          val c = chars(i)\n            if(!distinct.contains(c)) {\n       \
    \         distinct.add(c)\n                if(distinct.size == 3) return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkik4prcq.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdistinct\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall(x => x._2.length >= 3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoz6lwcqj.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.length >= 3 && chars.toList.distinct.length == chars.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiagkqmba.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(x => chars.toList.distinct.indexOf(x)\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppxyjwr82.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalc0ey3v.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.ArrayBuffer(chars.take(3))\n\
    \        val distinctChars = mutable.Set[Char]()\n        for(i <- 0 until len)\
    \ {\n            val c = chars(i)\n            if(!distinctChars.contains(c))\
    \ {\n                happy.push(c)\n                distinctChars += c\n     \
    \       }\n        }\n        len >= 3 && happy.forall(distinctChars.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39m1tjrp.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ArrayBuffer(chars.take(\e\
    [31m3\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp39m1tjrp.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(_).map(_._2.length).forall(_.toLong >= 3)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8g122t8.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpt8g122t8.scala:18:29 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        chars.toList.groupBy(_).map(_._2.length).forall(_.toLong\
    \ >= \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => \n\e[31m   |\e[0m     chars.toList.groupBy(_$1).map(_$2 =>\
    \ _$2._2.length).forall(\n\e[31m   |\e[0m       _$3 => _$3.toLong >= 3\n\e[31m\
    \   |\e[0m     ).\n2 errors found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3) false\n        else {\n            val counts = mutable.HashMap[Char,\
    \ Int]()\n            for (i <- 0 until len) {\n                val c = s.charAt(i)\n\
    \                if (counts.getOrElse(c, 0) == 0) counts += (c -> 1)\n       \
    \         else counts += (c -> counts.getOrElse(c, 0) + 1)\n            }\n  \
    \          counts.forall { case (c, count) => count >= 3 && counts.getOrElse(c,\
    \ 0) == 1 }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3lz5qfre.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).forall(c => c.length >= 3 && c.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzo9wu5t.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(_).map(_._2.length).sum >= 3 && chars.toList.distinct.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeupiz_i5.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpeupiz_i5.scala:18:29 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        chars.toList.groupBy(_).map(_._2.length).sum\
    \ >= \e[31m3\e[0m && chars.toList.distinct.length >= \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => \n\e[31m   |\e[0m     chars.toList.groupBy(_$1).map(_$2\
    \ => _$2._2.length).sum >= 3 && \n\e[31m   |\e[0m       chars.toList.distinct.length\
    \ >= 3.\n2 errors found\n"
  stdout: ''
  timestamp: 1659800419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3 || len % 3 != 0) return false\n        val arr = s.toList\n\
    \        val set = new mutable.HashSet[String]()\n        for(i <- 0 until arr.length)\n\
    \            if(!set.contains(arr(i)))\n                set.add(arr(i))\n    \
    \    len >= 3 && set.size == len\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvmb6m_fn.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3 && distinctChars.forall(x => chars(0) == x && chars(1)\
    \ == x && chars(2) == x)\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7go0bkit.scala:24)\n\tat Problem.main(tmp7go0bkit.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalc0ey3v.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall(c => c.length >= 3).forall(c => c.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj8y883md.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.size == s.length && chars.toList.distinct.size == 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0v2u0fl.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.length).filter(_._3 >= 3).forall(x => x._1 == x._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxermw6yu.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ != 'a')\n                chars += s.charAt(i)\n            else\n          \
    \      count += 1\n        if (count < 3 || chars.distinct().length != 3)\n  \
    \          return false\n        for (i <- 0 until s.length - 3)\n           \
    \ if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i)\
    \ != s.charAt(i + 3))\n                return false\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxcc6dkp8.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(x => chars.toList.distinct.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rsyx64o.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3\n        if (happy) {\n            for (i <- 0 until\
    \ len) {\n                if (i + 3 > len) break\n                if (chars(i)\
    \ != chars(i + 1) && chars(i) != chars(i + 2) && chars(i) != chars(i + 3)) {\n\
    \                    happy = false\n                    break\n              \
    \  }\n            }\n        }\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpku4vuxzi.scala:21:33 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (i + \e[31m3\e[0m > len)\
    \ break\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpku4vuxzi.scala:23:26 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    happy = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Reassignment to val happy\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpku4vuxzi.scala:24:20 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.distinct.size == s.length && chars.toList.distinct.size == 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kb80lsc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.length >= 3 && chars.toList.distinct.length == chars.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnuuffr3.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s)\n\
    \        val len = chars.length\n        val happy = mutable.ArrayBuffer(s)\n\
    \        val distinctChars = mutable.Set[Char]()\n        for(i <- 0 until len)\
    \ {\n            val c = chars(i)\n            if(!distinctChars.contains(c))\
    \ {\n                distinctChars += c\n                if(happy.length >= 3\
    \ && happy.distinct.length == happy.length) {\n                    happy.remove(0)\n\
    \                    distinctChars -= c\n                }\n            }\n  \
    \      }\n        happy.length >= 3 && happy.distinct.length == happy.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpej1xjoss.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpej1xjoss.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ArrayBuffer(s)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpej1xjoss.scala:18:28 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        val counts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until\
    \ len) {\n            val c = s.charAt(i)\n            if (counts.getOrElse(c,\
    \ 0) == 0) {\n                counts.put(c, counts.getOrElse(c, 0) + 1)\n    \
    \        }\n        }\n        len >= 3 && counts.forall(x => x == 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6o_2x8j0.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi8v62no.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        val counts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until\
    \ n) {\n            val c = s.charAt(i)\n            counts.put(c, counts.getOrElse(c,\
    \ 0) + 1)\n        }\n        val happy = counts.values.forall(n => n > 1 && n\
    \ % 3 == 0)\n        happy\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkwz6rkz.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3)\n            return false\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until len) {\n            val c = s.charAt(i)\n          \
    \  if(!chars.contains(c))\n                chars += c\n        }\n        chars.toList.length\
    \ >= 3 && chars.distinct.length == chars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_ys5ksw.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.ArrayBuffer(chars(0),\
    \ chars(1), chars(2))\n        val distinctChars = mutable.Set[Char]()\n     \
    \   for(i <- 3 to len - 2) {\n            val c = chars(i)\n            distinctChars\
    \ += c\n            happy.append(c)\n        }\n        distinctChars.size ==\
    \ happy.length && happy.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78ro9h08.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ArrayBuffer(chars(\e\
    [31m0\e[0m), chars(\e[31m1\e[0m), chars(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78ro9h08.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdistinctChars\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        val distinctLetters = mutable.Set[Char]()\n        val happy = mutable.Set[Char]()\n\
    \        for(i <- 0 until n){\n            val c = s.charAt(i)\n            if(distinctLetters.contains(c)){\n\
    \                happy.add(c)\n            }else{\n                distinctLetters.add(c)\n\
    \            }\n        }\n        return happy.size == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpepdmz0p7.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdistinctLetters\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpepdmz0p7.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until n) {\n            val c = s.charAt(i)\n           \
    \ counts(c) match {\n                case Some(count) => counts(c) += 1\n    \
    \            case None => counts(c) = 1\n            }\n        }\n        counts.forall\
    \ { case (k, v) => v >= 3 }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_tugq6z.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val l = s.length\n\
    \        if(l < 3) return false\n        val set = mutable.HashSet[Char]()\n \
    \       for(i <- 0 until l) {\n            if(!set.contains(s(i))) {\n       \
    \         set += s(i)\n            }\n        }\n        return l == set.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_le_hare.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val distinctChars = chars.distinct\n\
    \        val happy = s.length >= 3 && distinctChars.forall(x => s.substring(x,\
    \ x + 3) == x)\n        happy\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzxunu8gk.scala:17:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = s.length >=\
    \ \e[31m3\e[0m && distinctChars.forall(\e[36mx\e[0m => s.substring(x, x + \e[31m3\e\
    [0m) == x)\n\e[31m\e[31m   |\e[0m                                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).forall(c => c.length >= 3 && c.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzo9wu5t.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val distinctChars = chars.distinct\n\
    \        val happy = s.length >= 3 && distinctChars.forall(x => s.substring(x,\
    \ x+3).distinct)\n        happy\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxtzeefn0.scala:17:83\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = s.length >= \e[31m3\e[0m && distinctChars.forall(\e[36mx\e[0m => s.substring(x,\
    \ x+\e[31m3\e[0m).distinct)\n\e[31m\e[31m   |\e[0m                           \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    String\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val n = chars.length\n        val happy = mutable.ArrayBuffer.empty[String]\n\
    \        for(i <- 0 until n){\n            val cur = chars(i)\n            val\
    \ next = chars(i+1)\n            val prevChar = chars(i-1)\n            val prevNext\
    \ = chars(i-1)\n            val prevPrev = chars(i-1)\n            if(cur != next){\n\
    \                happy.append(prevChar)\n                happy.append(cur)\n \
    \               happy.append(next)\n                happy.append(prevNext)\n \
    \               happy.append(prevPrev)\n            }\n        }\n        happy.length\
    \ >= 3 && happy.distinct.length == happy.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd6_wrbgs.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_6hcej4.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val set = mutable.Set[Char]()\n    \
    \    for (i <- 0 until n) {\n            val c = s.charAt(i)\n            if (set.contains(c))\
    \ {\n                return false\n            }\n            set += c\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6thbi872.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until n) {\n            val c = s.charAt(i)\n           \
    \ if (set.contains(c)) false\n            else set += c\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3z2g3ns.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) false\n        else {\n            val arr = s.toList\n \
    \           val distincts = arr.distinct\n            val isHappy = distincts.forall(x\
    \ => arr.count(_ == x) == 3)\n            isHappy\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtwodue8.scala:27)\n\tat Problem.main(tmpwtwodue8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.length >= 3 && chars.toList.distinct.length == 3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0bq_y1e.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val set = mutable.Set[Char]()\n    \
    \    for (i <- 0 until n) {\n            val c = s.charAt(i)\n            if (set.contains(c))\
    \ {\n                return false\n            }\n            set += c\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6thbi872.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dktf3ph.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3ldk2fu.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).values.toList.forall(c => c.length >= 3 && c.distinct.length == 3)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpflky_ohx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.distinct.length >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppm3nwfqu.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) false\n        else {\n\
    \            val counts = mutable.HashMap[Char, Int]()\n            for (i <-\
    \ 0 until len) {\n                val c = chars(i)\n                if (counts.contains(c))\
    \ {\n                    counts(c) += 1\n                } else {\n          \
    \          counts.put(c.toInt, 1)\n                }\n            }\n        \
    \    for (i <- 0 until len) {\n                val c = chars(i)\n            \
    \    if (counts(c) != 3) false\n            }\n            true\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezwwvuaf.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpezwwvuaf.scala:30:36\
    \ ----------------\e[0m\e[0m\n\e[33m30 |\e[0m                \e[33mif\e[0m (counts(c)\
    \ != \e[31m3\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                   \
    \                 ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in\
    \ statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659800428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val charsCount = chars.length\n\
    \        val charsSet = chars.toSet\n        val charsSetCount = charsSet.length\n\
    \        val charsSetSet = charsSet.toSet\n        val charsSetSetCount = charsSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = charsSetSetSet.length\n        val charsSetSetSetCount\
    \ = charsSetSetSet.length\n        val charsSetSetSetCount = charsSetSetSet.length\n\
    \        val charsSetSetSetCount = chars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp798q2tuz.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSetSetCount\e[0m\
    \ = charsSetSetSet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetSetSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharsSetSetSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp798q2tuz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSetSetCount\e[0m\
    \ = charsSetSetSet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetSetSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharsSetSetSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp798q2tuz.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSetSetCount\e[0m\
    \ = charsSetSetSet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetSetSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharsSetSetSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp798q2tuz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSetSetCount\e[0m\
    \ = charsSetSetSet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetSetSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharsSetSetSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp798q2tuz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659800431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toSeq.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.distinct.length\
    \ == 3 }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkul9hes1.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        if(s.length < 3 || chars.distinct.length != s.length){\n      \
    \      return false\n        }\n        for(i <- 0 until s.length - 2){\n    \
    \        if(chars.exists(c => c != s.charAt(i) && c != s.charAt(i + 1) && c !=\
    \ s.charAt(i + 2))){\n                return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7o9v2snx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until len) {\n            val c = chars(i)\n            counts(c)\
    \ match {\n                case Some(count) => counts(c) = count + 1\n       \
    \         case None => counts(c) = 1\n            }\n        }\n        len >=\
    \ 3 && counts.forall(count => count >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkltxygvj.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(x => chars.toList.distinct.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyvix0ykc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val distinctChars = chars.distinct\n\
    \        val charsCount = chars.count\n        val charsLen = s.length\n     \
    \   val happy = charsLen >= 3 && charsCount == charsLen && distinctChars.forall(x\
    \ => chars.count(y => x == y) == 3)\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppd1ku76l.scala:19:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = charsLen >=\
    \ \e[31m3\e[0m && charsCount == charsLen && distinctChars.forall(\e[36mx\e[0m\
    \ => chars.count(\e[36my\e[0m => x == y) == \e[31m3\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mValues of types (Char => Boolean) => Int and Int cannot be compared with\
    \ == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val chars = mutable.ListBuffer[Char](s.head)\n\
    \        for(i <- 1 to len - 2) {\n            if(chars.contains(s.charAt(i)))\
    \ {\n                chars += s.charAt(i)\n            } else {\n            \
    \    return false\n            }\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4iprk4hi.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s.head)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).mapValues(_.length).filter(_._2 >= 3).forall(x\
    \ => x._1.distinct().length == 3)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6oic7fs6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1kjtjxa3.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until n) {\n            val c = s.charAt(i)\n           \
    \ if (set.contains(c)) {\n                return false\n            }\n      \
    \      set += c\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2qftom2.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3 && distinctChars.size == len\n        val happy2\
    \ = distinctChars.forall(distinctChars.diff(_).isEmpty)\n        happy || happy2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn23n_qu5.scala:19:61\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhappy2\e\
    [0m = distinctChars.forall(distinctChars.diff(_).isEmpty)\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    (_$1 : Char)\n\e[31m \
    \  |\e[0m                                    Required: scala.collection.Seq[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.length >= 3\n            && chars.toList.distinct.size == chars.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcw0ppr03.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if (n < 3) return false\n        val set = mutable.HashSet[String]()\n\
    \        for (i <- 0 until n) {\n            val c = s.charAt(i)\n           \
    \ if (set.contains(c)) false\n            else set += c\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzaoaw16w.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalc0ey3v.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(_.isLetter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bhyr3vj.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) return false\n        val\
    \ set = mutable.HashSet[Char]()\n        for (i <- 0 until len) {\n          \
    \  val c = chars(i)\n            if (set(c)) {\n                return false\n\
    \            }\n            set += c\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgslgxzd.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3) return false\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var count = 0\n        while (i < len) {\n          \
    \  if (s.charAt(i) == s.charAt(j)) {\n                count += 1\n           \
    \     i += 1\n                j += 1\n                k += 1\n            } else\
    \ {\n                if (count == 3) {\n                    return true\n    \
    \            }\n                count = 0\n                i += 1\n          \
    \      j += 1\n                k += 1\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8jgr1am.scala:42)\n\tat Problem.main(tmpu8jgr1am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(c => c).mapValues(_.size).forall(_.size >= 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8r2ipgdd.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val isHappy = len >= 3\n        if(isHappy) {\n            val isConsecutiveDistinctChars\
    \ = distinctChars.forall(distinctChars.diff(_).isEmpty)\n            if(isConsecutiveDistinctChars)\
    \ {\n                true\n            } else {\n                false\n     \
    \       }\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrp3eu8g.scala:20:85\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36misConsecutiveDistinctChars\e[0m = distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \            Found:    (_$1 : Char)\n\e[31m   |\e[0m                         \
    \           Required: scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(x => chars.toList.distinct.indexOf(x)\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppxyjwr82.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        if(n < 3) return false\n        val set = mutable.HashSet[String]()\n\
    \        for(i <- 0 until n){\n            if(!set.contains(s.substring(i, i+3))){\n\
    \                set += s.substring(i, i+3)\n            }\n        }\n      \
    \  return set.size == n\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0h8u7zsh.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s)\n\
    \        val happy = mutable.ArrayBuffer(s)\n        val happyCount = 0\n    \
    \    val happyCount2 = 0\n        val happyCount3 = 0\n        val happyCount4\
    \ = 0\n        val happyCount5 = 0\n        val happyCount6 = 0\n        val happyCount7\
    \ = 0\n        val happyCount8 = 0\n        val happyCount9 = 0\n        val happyCount10\
    \ = 0\n        val happyCount11 = 0\n        val happyCount12 = 0\n        val\
    \ happyCount13 = 0\n        val happyCount14 = 0\n        val happyCount15 = 0\n\
    \        val happyCount16 = 0\n        val happyCount17 = 0\n        val happyCount18\
    \ = 0\n        val happyCount19 = 0\n        val happyCount20 = 0\n        val\
    \ happyCount21 = 0\n        val happyCount22 = 0\n        val happyCount23 = 0\n\
    \        val happyCount24 = 0\n        val happyCount25 = 0\n        val happyCount26\
    \ = 0\n        val happyCount27 = 0\n        val happyCount28 = 0\n        val\
    \ happyCount29 = 0\n        val happyCount30 = 0\n        val happyCount31 = 0\n\
    \        val happyCount32 = 0\n        val happyCount33 = 0\n        val happyCount34\
    \ = 0\n        val happyCount35 = 0\n        val happyCount36 = 0\n        val\
    \ happyCount37 = 0\n        val happyCount38 = 0\n        val happyCount39 = 0\n\
    \        val happyCount40 = 0\n        val happyCount41 = 0\n        val happyCount42\
    \ = 0\n        val happyCount43 = 0\n        val happyCount44 = 0\n        val\
    \ happyCount45 = 0\n        val happyCount46 = 0\n        val happyCount47 = 0\n\
    \        val happyCount48 = 0\n        val happyCount49 = 0\n        val happyCount50\
    \ = 0\n        val happyCount51 = 0\n        val happyCount52 = 0\n        val\
    \ happyCount53 = 0\n        val happyCount54 = 0\n        val happyCount55 = 0\n\
    \        val happyCount56 = 0\n        val happyCount57 = 0\n        val happyCount58\
    \ = 0\n        val happyCount59 = 0\n        val happyCount60 = 0\n        val\
    \ happyCount61 = 0\n        val happyCount62 = 0\n        val happyCount63 = 0\n\
    \        val happyCount64 = 0\n        val happyCount65 = 0\n        val happyCount66\
    \ = 0\n        val happyCount67 = 0\n        val happyCount68 = 0\n        val\
    \ happyCount69 = 0\n        val happyCount70 = 0\n        val happy\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcki25ark.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcki25ark.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mchars\e[0m = mutable.ArrayBuffer(s)\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcki25ark.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mhappy\e[0m = mutable.ArrayBuffer(s)\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcki25ark.scala:88:5\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ != 'x')\n                chars += s.charAt(i)\n            else\n          \
    \      count += 1\n        chars.toList match {\n            case Nil => true\n\
    \            case head :: tail => tail.length >= 3 && tail.distinct.length >=\
    \ 3 && count >= 3\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe1_bxbd2.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe1_bxbd2.scala:24:33 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m head :: tail => tail.length\
    \ >= \e[31m3\e[0m && tail.distinct.length >= \e[31m3\e[0m && count >= \e[31m3\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Not found: tail\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(identity).mapValues(_.length).forall(_.length >= 3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkpirhdhq.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumqwwd86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        if(s.length < 3 || chars.distinct.length != s.length){\n      \
    \      return false\n        }\n        for(i <- 0 until s.length - 2){\n    \
    \        if(chars.contains(s.charAt(i)) && chars.contains(s.charAt(i + 1))\n \
    \               && chars.contains(s.charAt(i + 2))){\n                return false\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxg5kuhy.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        val distinctLetters = mutable.Set[Char]()\n        for(i <- 0 until n){\n\
    \            val c = s.charAt(i)\n            if(distinctLetters.contains(c)){\n\
    \                distinctLetters.remove(c)\n            } else {\n           \
    \     distinctLetters += c\n            }\n        }\n        return n > 3 &&\
    \ distinctLetters.size == n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_yfts71.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdistinctLetters\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val happy = mutable.Set[Char]()\n   \
    \     for (i <- 0 until len) {\n            happy = happy.union(Set(chars(i)))\n\
    \        }\n        return happy.size == len && happy.size == happy.distinct.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv6sq7mrs.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpv6sq7mrs.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            happy = happy.union(Set(chars(i)))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val happy\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).mapValues(_.length).filter(_._2 >= 3).forall(x\
    \ => x._1 == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj8xwxur.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalc0ey3v.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall(x => x._2.length >= 3 && x._2.forall(y\
    \ => !chars.exists(y != x._1)))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifc6gt_7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(x => chars.toList.distinct.indexOf(x)\
    \ == chars.toList.distinct.lastIndexOf(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypksg_0s.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        if (len < 3) return false\n        val\
    \ set = new mutable.HashSet[Char]\n        for (i <- 0 until len) {\n        \
    \    val c = chars(i)\n            if (!set(c)) {\n                set.add(c)\n\
    \                if (set.size == 3) return true\n            }\n        }\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvlawry4.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val l = s.length\n\
    \        if(l < 3) return false\n        val set = mutable.HashSet[Char]()\n \
    \       for(i <- 0 until l) {\n            if(!set(i)) {\n                set.add(s(i))\n\
    \            }\n        }\n        return l == set.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvpwhmhol.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == s.length && chars.forall(c => chars.contains(c))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk17gig10.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800439
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val distinctChars = chars.distinct\n        val happy = chars.length\
    \ >= 3 && distinctChars.forall(x => chars.take(3).forall(y => y != x))\n     \
    \   happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ofkwooi.scala:23)\n\tat Problem.main(tmp0ofkwooi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n\
    \        val len = s.length\n        val happy = len >= 3 && charsSet.subsetOf(s.take(3))\n\
    \        val distinctChars = chars.toSet.diff(s.take(3))\n        distinct happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpui9mokgr.scala:20:22 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        distinct happy\n\e[31m\e[31m   |\e[0m       \
    \               ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpui9mokgr.scala:18:56 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = len >= \e[31m3\e[0m && charsSet.subsetOf(s.take(\e\
    [31m3\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    String\n\e[31m   |\e[0m                                    Required: scala.collection.Set[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui9mokgr.scala:19:51\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e\
    [0m = chars.toSet.diff(s.take(\e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                          Found:    String\n\e[31m   |\e[0m                 \
    \                   Required: scala.collection.Set[Char]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpui9mokgr.scala:20:8 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        distinct happy\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: distinct\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if (len < 3) false\n        else (len == 3) && (s.distinct.toList.size\
    \ == len)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj073is1g.scala:22)\n\tat Problem.main(tmpj073is1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == s.length && chars.forall(c => chars.contains(c))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk17gig10.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s)\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val isHappy = len >= 3\n        val isDistinctChars = distinctChars.forall(distinctChar\
    \ => chars.count(_ == distinctChar) == 3)\n        isHappy && isDistinctChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqds_y62t.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        val chars = mutable.ArrayBuffer(s.toCharArray)\n        val distinctChars\
    \ = mutable.Set[Char]()\n        for(i <- 0 until len) {\n            val c =\
    \ chars(i)\n            if(!distinctChars.contains(c)) {\n                distinctChars\
    \ += c\n            }\n        }\n        len >= 3 && distinctChars.size == len\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zib18sw.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8zib18sw.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumqwwd86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val n = chars.length\n        val distinctChars = chars.distinct\n  \
    \      val happy = if (n >= 3) true\n        else false\n        if (happy) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2lpmmyq.scala:27)\n\tat Problem.main(tmpa2lpmmyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        var count = 0\n        for (c <- s) {\n            if (chars.contains(c))\
    \ {\n                count += 1\n            } else {\n                chars +=\
    \ c\n                count += 1\n            }\n            if (count == 3) {\n\
    \                return true\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvu7dhdk.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val charsCount = s.toCharArray().length\n        val distinctChars =\
    \ chars.distinct\n        val distinctCharsCount = distinctChars.length\n    \
    \    val happy = charsCount >= 3 && distinctCharsCount >= 3\n        return happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppxazl1nu.scala:26)\n\tat Problem.main(tmppxazl1nu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall {\n            case (k, v) => v.length\
    \ >= 3 && v.forall(x => !chars.contains(x))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyb_g3o6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val n = chars.length\n        val happy = mutable.ArrayBuffer.empty[String]\n\
    \        var i = 0\n        while (i < n) {\n            if (chars(i) == chars(i\
    \ + 1)) {\n                happy.push(chars(i))\n                i += 1\n    \
    \        } else {\n                happy.push(chars(i))\n                i +=\
    \ 1\n                happy.push(chars(i))\n                i += 1\n          \
    \  }\n        }\n        happy.length >= 3 && happy.forall(x => happy.count(_\
    \ == x) == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmaz22gf0.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.size).filter(_._2 >= 3).forall(c => chars.count(_ == c) ==\
    \ 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7424lkbh.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.size ==\
    \ s.length && chars.distinct.size == s.length / 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6roshab9.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n\
    \        val len = s.length\n        if (len < 3 || len > 3) return false\n  \
    \      val charsSetLen = charsSet.size\n        val charsSetSubSet = charsSet.subsetOf(charsSet)\n\
    \        val charsSetSubSetLen = charsSetSubSet.size\n        val charsSetSubSetSubSet\
    \ = charsSetSubSet.subsetOf(charsSetSubSet)\n        val charsSetSubSetSubSetLen\
    \ = charsSetSubSetSubSet.size\n        val charsSetSubSetSubSetSubSet = charsSetSubSetSubSet.subsetOf(charsSetSubSetSubSet)\n\
    \        val charsSetSubSetSubSetSubSetLen = charsSetSubSetSubSetSubSet.size\n\
    \        val charsSetSubSetSubSetSubSetSubSet = charsSetSubSetSubSetSubSet.subsetOf(charsSetSubSetSubSetSubSet)\n\
    \        val charsSetSubSetSubSetSubSetSubSetLen = charsSetSubSetSubSetSubSetSubSet.size\n\
    \        val charsSetSubSetSubSetSubSetSubSetSubSet = charsSetSubSetSubSetSubSetSubSet.subsetOf(charsSetSubSetSubSetSubSetSubSet)\n\
    \        val charsSetSubSetSubSetSubSetSubSetSubSetLen = charsSetSubSetSubSetSubSetSubSetSubSet.size\n\
    \        val charsSetSubSetSubSetSubSetSubSetSubSetSubSet = charsSetSubSetSubSetSubSetSubSetSubSet.subsetOf(charsSetSubSetSubSetSubSetSubSetSubSet)\n\
    \        val charsSetSubSetSubSetSubSetSubSetSubSetSubSetLen = charsSetSubSetSubSetSubSetSubSetSubSetSubSet.size\n\
    \        val charsSetSubSetSubSetSubSetSubSetSubSetSubSetSubSet = charsSetSubSetSubSetSubSetSubSetSubSetSubSet.subsetOf(charsSetSubSetSubSetSubSetSubSetSubSetSubSet)\n\
    \        val charsSetSubSetSubSetSubSetSubSetSubSetSubSetSubSetLen = charsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphsa_88hd.scala:21:47 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSubSetLen\e[0m =\
    \ charsSetSubSet.size\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value size is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphsa_88hd.scala:22:50\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcharsSetSubSetSubSet\e[0m = charsSetSubSet.subsetOf(charsSetSubSet)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value subsetOf is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphsa_88hd.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(identity).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55frw1db.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val n = chars.length\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for(i <- 0 until n) {\n            val c = chars(i)\n            if(!counts.contains(c))\
    \ {\n                counts += c -> 1\n            } else {\n                counts(c)\
    \ += 1\n            }\n        }\n        (n>=3) && (counts.forall(c => counts(c)\
    \ == 3))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphoxcue2a.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).filter(_._2.length >= 3 && _._2.forall(x => !chars.exists(y\
    \ => x == y)))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpof5se0z5.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.distinct.length >= 3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtz1wgqv.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until len) {\n            chars += s.charAt(i)\n        }\n\
    \        chars.size == len && chars.distinct.length == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqk_4f1hz.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3\n        val happyConsecutiveDistinctChars = distinctChars.sliding(3).forall(x\
    \ => x.distinct.size == 3)\n        happy && happyConsecutiveDistinctChars\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwquo6zx.scala:30)\n\tat Problem.main(tmpnwquo6zx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.length >= 3\n        chars.toList.forall(c => chars.toList.count(_\
    \ == c) == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqueflrx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi8v62no.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n\
    \        val arr = new Array[String](n)\n        for(i <- 0 until n) {\n     \
    \       arr(i) = s.substring(i)\n        }\n        val set = new mutable.HashSet[String]()\n\
    \        for(i <- 0 until n) {\n            if(arr(i).length >= 3 && !set.contains(arr(i).substring(0,3)))\
    \ {\n                set.add(arr(i).substring(0,3))\n            }\n        }\n\
    \        return arr.length >= 3 && set.size == n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1m73i5j.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.length >= 3 && chars.toList.distinct.length == chars.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnuuffr3.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dktf3ph.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3\n        val happyConsecutiveDistinctChars = distinctChars.sliding(3).forall(distinctChars\
    \ => distinctChars.distinct.length == 3)\n        happy && happyConsecutiveDistinctChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2ptjpsq.scala:30)\n\tat Problem.main(tmph2ptjpsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall {\n            case (k, v) => v.length\
    \ >= 3 && v.forall(x => !chars.contains(x))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyb_g3o6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val distinctChars = chars.distinct\n\
    \        val happy = len >= 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg42g60a2.scala:24)\n\tat Problem.main(tmpg42g60a2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5qq5p1y9.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => !chars.contains(x)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalc0ey3v.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 && v.forall(x\
    \ => chars.indexOf(x) == k) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ce1buwc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val len = s.length\n\
    \        if(len < 3) return false\n        val counts = mutable.HashMap[Char,\
    \ Int]()\n        for(i <- 0 until len) {\n            val c = s.charAt(i)\n \
    \           if(!counts.contains(c)) {\n                counts += c -> 1\n    \
    \        } else {\n                counts(c) += 1\n            }\n        }\n\
    \        for(i <- 0 until len) {\n            val c = s.charAt(i)\n          \
    \  if(!counts.contains(c)) {\n                return false\n            }\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhw24c_s.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_6hcej4.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        if(s.length < 3 || chars.distinct.length != s.length){\n      \
    \      return false\n        }\n        for(i <- 0 until s.length - 2){\n    \
    \        if(chars.contains(s.charAt(i)) && chars.contains(s.charAt(i + 1))){\n\
    \                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55yiu5ej.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = s.toCharArray\n\
    \        val distinctChars = chars.distinct\n        val distinctCharsCount =\
    \ distinctChars.length\n        val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.init)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps02ewk17.scala:18:82\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.init)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                       Found:    Array[Char]\n\e[31m   |\e[0m               \
    \                                Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = Array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val charsSet = chars.toSet\n        val len = s.length\n        val happy\
    \ = len >= 3 && charsSet.forall(x => s.indexOf(x) == len)\n        happy\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51e9992o.scala:24)\n\tat Problem.main(tmp51e9992o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.size == s.length && chars.distinct.length >= 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lq_1rym.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
    \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
    \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy)\
    \ => False\n    def isHappy(s : String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.length >= 3 &&\n            chars.toList.distinct.length == chars.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb0kexf6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800447
