name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n\
  \    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5,\
  \ 7]\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        val factors = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSum = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountSums = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSumsSumsSums",
  "        val factorization = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountSum\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSum = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumsSums = mutable.ListBuffer[Long]()\n        val factorizationCountSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSize2 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationListSizeSize3 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize4 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize5\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize6 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize7 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val factorizationListSizeSize8 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationListSizeSize9 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize10 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize11\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize12 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize13 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize14 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationListSizeSize15 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSize16 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationListSizeSize17 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize18 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize19\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize20 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize22 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationListSizeSize23 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSize24 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationListSizeSize25 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize26 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize27\
    \ = mutable.ArrayBuffer.empty", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        var i = 2\n        while(i <= n) {\n            val f = math.gcd(i, n)\n\
    \            if(f == 1) {\n                factors += i\n            }\n     \
    \       i += f\n        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        var i = 2L\n       \
    \ while (i <= n) {\n            if (n % i == 0) {\n                factors +=\
    \ i\n                primes += i\n                i += 1\n            }\n    \
    \    }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactor",
  "        val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountPairs = mutable.ListBuffer.empty[(Long, Long)]\n        val\
    \ factorizationCountPairsSorted = mutable.ListBuffer.empty[(Long, Long)]\n   \
    \     val factorizationCountPairsSortedByCount = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSorted = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCount = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            val p = i\n            for(j <- 2 to n by 2){\n        \
    \        if(p * j == n){\n                    factors += p\n                 \
    \   break\n                }\n            }\n        }\n        factors.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.Array", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n) \n        factorization.foreach(f\
    \ => factors += f)\n        factors.toList", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = factorization(n) \n        factorization foreach\
    \ { f =>\n            factors += f\n        }\n        factors", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2L\n        while(i <= n) {\n            val p = i\n        \
    \    while(p % i == 0) {\n                p /= i\n                factors += p\n\
    \                primes += i\n            }\n            i += 1\n        }\n \
    \       factors.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMax =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxs =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMin", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer", "        val factors = mutable.ListBuffer[Long]()\n \
    \       val factorization = factorization(n) //factorization is list of factors\
    \ of given number\n        factorization foreach { f =>\n            factors +=\
    \ f\n        }\n        factors", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSizeSize = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = ", "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorsCount2 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsCount3 = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationFactorsCount4 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount5 = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount7 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount9 = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount10 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorsCount11 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount12 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsCount13 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount14 = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationFactorsCount15 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount16 = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount18 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount19 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount20 = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationFactorsCount21 = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount22 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorsCount23 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount24 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsCount25 = mut", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorsCount = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimeFactorsCountSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumOfSquaresOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumOfSquaresOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOf =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquares"]
stop_tokens:
- "\n    }\n"
