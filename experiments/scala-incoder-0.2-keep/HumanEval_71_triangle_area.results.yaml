language: scala
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val\
    \ bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bca =\
    \ math.abs(bc - ab)\n        val abcb = math.abs(abc + bc)\n        val abcca\
    \ = math.abs(abc + ac)\n        val abccaa = math.abs(abc + abc)\n        val\
    \ abccaab = math.abs(abc + abc)\n        val abccaabc = math.abs(abc + abc)\n\
    \        val abccaabcb = math.abs(abc + abc)\n        val abccaabcca = math.abs(abc\
    \ + abc)\n        val abccaabccaa = math.abs(abc + abc)\n        val abccaabccaab\
    \ = math.abs(abc + abc)\n        val abccaabccaabc = math.abs(abc + abc)\n   \
    \     val abccaabccaabcb = math.abs(abc + abc)\n        val abccaabccaabcca =\
    \ math.abs(abc + abc)\n        val abccaabccaabccaa = math.abs(abc + abc)\n  \
    \      val abccaabccaabccaab = math.abs(abc + abc)\n        val abccaabccaabccaabc\
    \ = math.abs(abc + abc)\n        val abccaabccaabccaabcb = math.abs(abc + abc)\n\
    \        val abccaabccaabccaabcca = math.abs(abc + abc)\n        val abccaabccaabccaabccaa\
    \ = math.abs(abc + abc)\n        val abccaabccaabccaabccaab = math.abs(abc + abc)\n\
    \        val abccaabccaabccaabccaabc = math.abs(abc + abc)\n        val abccaabccaabccaabccaabcb\
    \ = math.abs(abc + abc)\n        val abccaabccaabccaabccaabcca = math.abs(abc\
    \ + abc)\n        val abccaabccaabccaabccaabccaa = math.abs(abc + abc)\n     \
    \   val abccaabccaabccaabccaabccaab = math.abs(abc + abc)\n        val abccaabccaabccaabccaabccaabc\
    \ = math.abs(abc + abc)\n        val abccaabccaabccaabccaabccaabcb = math.abs(abc\
    \ + abc)\n        val abccaabccaabccaabccaabccaabcca = math.abs(abc + abc)\n \
    \       val abccaabccaabccaabccaabcca\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcm8kgstq.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcm8kgstq.scala:46:5 ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val d = math.abs(a\
    \ - b - c)\n            val e = math.abs(a + b - c)\n            val f = math.abs(a\
    \ - b + c)\n            val g = math.abs(a + b + c)\n            val area = if\
    \ (d < e && d < f && d < g) d else -1\n            area\n        } else {\n  \
    \          -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph041m5hf.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph041m5hf.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph041m5hf.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.sqrt((b\
    \ * b) - (a * c))\n            area / 2\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5pw7hstq.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5pw7hstq.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5pw7hstq.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5pw7hstq.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n\
    \            val area = s * (s - a) * (s - b) * (s - c)\n            val rounded\
    \ = area.toString.split(\"\\\\.\").map(_.toInt).map(_ * 100).sum\n           \
    \ rounded.toFloat\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpunzn5nuc.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpunzn5nuc.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpunzn5nuc.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sides = List(a1, b1, c1)\n        val sum = sides.sum\n\
    \        if (sum > a1 + b1 + c1) return -1\n        val a2 = a1 - sum\n      \
    \  val b2 = b1 - sum\n        val c2 = c1 - sum\n        val a3 = a1 + b1 + c1\
    \ - sum\n        val b3 = b1 + a1 + c1 - sum\n        val c3 = c1 + a1 + b1 -\
    \ sum\n        val a4 = a2 + b2 + c2 - sum\n        val b4 = b2 + a2 + c2 - sum\n\
    \        val c4 = c2 + a2 + b2 - sum\n        val a5 = a3 + b3 + c3 - sum\n  \
    \      val b5 = b3 + a3 + c3 - sum\n        val c5 = c3 + a3 + b5 - sum\n    \
    \    val a6 = a4 + b4 + c5 - sum\n        val b6 = b4 + a4 + c5 - sum\n      \
    \  val c6 = c5 + a4 + b6 - sum\n        val a7 = a5 + b5 + c6 - sum\n        val\
    \ b7 = b5 + a5 + c6 - sum\n        val c7 = c6 + a5 + b7 - sum\n        val a8\
    \ = a7 + b7 + c7 - sum\n        val b8 = b7 + a7 + c7 - sum\n        val c8 =\
    \ c7 + a7 + b8 - sum\n        val a9 = a8 + b8 + c8 - sum\n        val b9 = b8\
    \ + a8 + c8 - sum\n        val c9 = c8 + a8 + b9 - sum\n        val a10 = a9 +\
    \ b9 + c9 - sum\n        val b10 = b9 + a9 + c9 - sum\n        val c10 = c9 +\
    \ a9 + b10 - sum\n        val a11 = a10 + b10 + c10 - sum\n        val b11 = b10\
    \ + a10 + c10 - sum\n        val c11 = c10 + a10 + b11 - sum\n        val a12\
    \ = a11 + b11 + c11 - sum\n        val b12 = b11 + a11 + c11 - sum\n        val\
    \ c12 = c11 + a11 + b12 - sum\n        val a13 = a12 + b12 + c12 - sum\n     \
    \   val b13 = b12 + a12 + c12 - sum\n        val c13 = c12 + a12 + b13 - sum\n\
    \        val a14 = a13 + b13 + c13 - sum\n        val b14\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoidz6t4m.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoidz6t4m.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = a\
    \ / Math.sqrt(b * b + c * c)\n            val rounded = area * 100\n         \
    \   rounded.toFloat\n        } else {\n            -1.0\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa8ccj_xg.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa8ccj_xg.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa8ccj_xg.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c).sorted\n        val sum = sides.sum\n     \
    \   if (sum > sides(2)) sides(2).toFloat else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcacrk3_z.scala:18)\n\tat Problem.main(tmpcacrk3_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val s = (a + b + c) / 2\n        val area = if (s > a) s * (b - c) /\
    \ 2 else if (s > b) s * (c - a) / 2 else if (s > c) s * (a - b) / 2 else -1\n\
    \        area\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpixd37lto.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpixd37lto.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpixd37lto.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = a\
    \ / sum * b / sum * c / sum\n            if (area > 0)\n                area.toFloat\n\
    \            else\n                -1\n        } else {\n            -1\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi4mw_092.scala:25)\n\tat Problem.main(tmpi4mw_092.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > a * a\
    \ + b * b + c * c) {\n            val d = Math.sqrt(a * a + b * b)\n         \
    \   val e = Math.sqrt(c * c + d * d)\n            val f = Math.sqrt(a * a + c\
    \ * c)\n            val g = Math.sqrt(b * b + d * d)\n            val h = Math.sqrt(c\
    \ * c + e * e)\n            val area = f * g / h\n            area\n        }\
    \ else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj517eikn.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj517eikn.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj517eikn.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj517eikn.scala:24:12 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = (a\
    \ + b + c) / 2.0\n            val area2 = (a * b * c) / 4.0\n            val area3\
    \ = (a * b * c * sum) / 6.0\n            val area4 = (a * b * c * sum * sum) /\
    \ 24.0\n            val area5 = (a * b * c * sum * sum * sum) / 120.0\n      \
    \      val area6 = (a * b * c * sum * sum * sum * sum) / 720.0\n            val\
    \ area7 = (a * b * c * sum * sum * sum * sum * sum) / 5040.0\n            val\
    \ area8 = (a * b * c * sum * sum * sum * sum * sum * sum) / 40320.0\n        \
    \    val area9 = (a * b * c * sum * sum * sum * sum * sum * sum * sum) / 362880.0\n\
    \            val area10 = (a * b * c * sum * sum * sum * sum * sum * sum * sum\
    \ * sum) / 3628800.0\n            val area11 = (a * b * c * sum * sum * sum *\
    \ sum * sum * sum * sum * sum * sum * sum) / 39916800.0\n            val area12\
    \ = (a * b * c * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum)\
    \ / 479001600.0\n            val area13 = (a * b * c * sum * sum * sum * sum *\
    \ sum * sum * sum * sum * sum * sum * sum * sum) / 6227020800.0\n            val\
    \ area14 = (a * b * c * sum * sum * sum * sum * sum * sum * sum * sum * sum *\
    \ sum * sum * sum * sum * sum) / 7256448000.0\n            val area15 = (a * b\
    \ * c * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum) / 8000000000.0\n            val area16 = (a * b * c * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum) / 9223372036854775808.0\n            val area17 = (a * b * c *\
    \ sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum) / 1000000000000.0\n            val area18 = (a\
    \ * b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp586unmtu.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp586unmtu.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp586unmtu.scala:46:1 ---------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp586unmtu.scala:34:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = math.abs(a) + math.abs(b) + math.abs(c)\n        val a2 = math.abs(a)\
    \ + math.abs(b) - math.abs(c)\n        val a3 = math.abs(a) - math.abs(b) + math.abs(c)\n\
    \        val a4 = math.abs(a) - math.abs(b) - math.abs(c)\n        val a5 = math.abs(a)\
    \ + math.abs(b) - math.abs(c)\n        val a6 = math.abs(a) - math.abs(b) + math.abs(c)\n\
    \        val a7 = math.abs(a) - math.abs(b) - math.abs(c)\n        val a8 = math.abs(a)\
    \ + math.abs(b) - math.abs(c)\n        val a9 = math.abs(a) - math.abs(b) + math.abs(c)\n\
    \        val a10 = math.abs(a) + math.abs(b) + math.abs(c)\n        val a11 =\
    \ math.abs(a) - math.abs(b) + math.abs(c)\n        val a12 = math.abs(a) - math.abs(b)\
    \ - math.abs(c)\n        val a13 = math.abs(a) + math.abs(b) - math.abs(c)\n \
    \       val a14 = math.abs(a) - math.abs(b) + math.abs(c)\n        val a15 = math.abs(a)\
    \ - math.abs(b) - math.abs(c)\n        val a16 = math.abs(a) + math.abs(b) + math.abs(c)\n\
    \        val a17 = math.abs(a) - math.abs(b) + math.abs(c)\n        val a18 =\
    \ math.abs(a) - math.abs(b) - math.abs(c)\n        val a19 = math.abs(a) + math.abs(b)\
    \ - math.abs(c)\n        val a20 = math.abs(a) - math.abs(b) + math.abs(c)\n \
    \       val a21 = math.abs(a) - math.abs(b) - math.abs(c)\n        val a22 = math.abs(a)\
    \ + math.abs(b) - math.abs(c)\n        val a23 = math.abs(a) - math.abs(b) + math.abs(c)\n\
    \        val a24 = math.abs(a) - math.abs(b) - math.abs(c)\n        val a25 =\
    \ math.abs(a) + math.abs(b) + math.abs(c)\n        val a26 = math.abs(a) - math.abs(b)\
    \ + math.abs(c)\n        val a27 = math.abs(a) - math.abs(b) - math.abs(c)\n \
    \       val a28 = math.abs(a) + math.abs(b) - math.abs(c)\n        val a29 = math.abs(a)\
    \ - math.abs(b) + math.abs(c)\n        val a30 = math.abs(a) - math.abs(b) - math.abs(c)\n\
    \        val a31 = math.abs(a) + math.abs(b) - math.abs(c)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphbqakffp.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a + b\n        val a2 = a + c\n        val b1 = b + c\n    \
    \    val b2 = b + a\n        val c1 = c + a\n        val c2 = c + b\n        val\
    \ d1 = b2 - b1\n        val d2 = c2 - c1\n        val d3 = a2 - a1\n        if\
    \ (d1 < 0 && d2 < 0 && d3 < 0) return -1\n        if (d1 < 0 && d2 < 0 && d3 >\
    \ 0) return -1\n        if (d1 < 0 && d2 > 0 && d3 < 0) return -1\n        if\
    \ (d1 < 0 && d2 > 0 && d3 > 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 <\
    \ 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 > 0) return -1\n        if\
    \ (d1 > 0 && d2 > 0 && d3 < 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 >\
    \ 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 < 0) return -1\n        if\
    \ (d1 > 0 && d2 < 0 && d3 > 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 <\
    \ 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 > 0) return -1\n        if\
    \ (d1 > 0 && d2 < 0 && d3 < 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 >\
    \ 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 < 0) return -1\n        if\
    \ (d1 > 0 && d2 > 0 && d3 > 0) return -1\n        if (d1 < 0 && d2 < 0 && d3 <\
    \ 0) return -1\n        if (d1 < 0 && d2 < 0 && d3 > 0) return -1\n        if\
    \ (d1 < 0 && d2 > 0 && d3 < 0) return -1\n        if (d1 < 0 && d2 > 0 && d3 >\
    \ 0) return -1\n        if (d1 < 0 && d2 > 0 && d3 < 0) return -1\n        if\
    \ (d1 < 0 && d2 > 0 && d3 > 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 <\
    \ 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 > 0) return -1\n        if\
    \ (d1 > 0 && d2 > 0 && d3 < 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 >\
    \ 0) return -1\n        if (d1 > 0 && d2 < 0 && d3 < 0) return -1\n        if\
    \ (d1 > 0 && d2 < 0 && d3 > 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 <\
    \ 0) return -1\n        if (d1 > 0 && d2 > 0 && d3 > 0) return -1\n        if\
    \ (d1 < 0 && d2 < 0 && d3 < 0) return -1\n        if (d1 < 0 && d2 < 0 && d3 >\
    \ 0) return -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxdbc9q74.scala:53:8\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mif\e[0m (d1 <\
    \ \e[31m0\e[0m && d2 < \e[31m0\e[0m && d3 > \e[31m0\e[0m) \e[33mreturn\e[0m -\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Float\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4)\
    \ * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7) * (a8 + b8 + c8) * (a9 +\
    \ b9 + c9) * (a10 + b10 + c10)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplongunun.scala:43:8\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m        (a1 + b1 + c1) * (a2\
    \ + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\
    \ * (a7 + b7 + c7) * (a8 + b8 + c8) * (a9 + b9 + c9) * (a10 + b10 + c10)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        val isValid\
    \ = sides.forall(s => s > 0)\n        val area = if (isValid) sides.sum * sides.sum\
    \ / 2 else -1\n        val rounded = if (isValid) area.toString.toDouble / 2 else\
    \ -1\n        rounded\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn0onq_cy.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        rounded\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (rounded : Double)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val b1 = (a + c) / 2\n        val b2 = (c + b) / 2\n  \
    \      val b3 = (b + a) / 2\n        val c1 = (a + b) / 2\n        val c2 = (b\
    \ + c) / 2\n        val c3 = (c + a) / 2\n        val d1 = (a + c) / 2\n     \
    \   val d2 = (c + b) / 2\n        val d3 = (b + a) / 2\n        val e1 = (a +\
    \ b) / 2\n        val e2 = (b + c) / 2\n        val e3 = (c + a) / 2\n       \
    \ val f1 = (a + c) / 2\n        val f2 = (b + c) / 2\n        val f3 = (c + a)\
    \ / 2\n        val g1 = (a + b) / 2\n        val g2 = (b + c) / 2\n        val\
    \ g3 = (c + a) / 2\n        val h1 = (a + b) / 2\n        val h2 = (b + c) / 2\n\
    \        val h3 = (c + a) / 2\n        val i1 = (a + c) / 2\n        val i2 =\
    \ (b + c) / 2\n        val i3 = (c + a) / 2\n        val j1 = (a + b) / 2\n  \
    \      val j2 = (b + c) / 2\n        val j3 = (c + a) / 2\n        val k1 = (a\
    \ + c) / 2\n        val k2 = (b + c) / 2\n        val k3 = (c + a) / 2\n     \
    \   val l1 = (a + b) / 2\n        val l2 = (b + c) / 2\n        val l3 = (c +\
    \ a) / 2\n        val m1 = (a + c) / 2\n        val m2 = (b + c) / 2\n       \
    \ val m3 = (c + a) / 2\n        val n1 = (a + b) / 2\n        val n2 = (b + c)\
    \ / 2\n        val n3 = (c + a) / 2\n        val o1 = (a + c) / 2\n        val\
    \ o2 = (b + c) / 2\n        val o3 = (c + a) / 2\n        val p1 = (a + b) / 2\n\
    \        val p2 = (b + c) / 2\n        val p3 = (c + a) / 2\n        val q1 =\
    \ (a + c) / 2\n        val q2 = (b + c) / 2\n        val q3 = (c + a) / 2\n  \
    \      val r1 = (a + b) / 2\n        val r2 = (b + c) / 2\n        val r3 = (c\
    \ + a) / 2\n        val s1 = (a + c) / 2\n        val s2 = (b + c) / 2\n     \
    \   val s3 = (c + a) / 2\n        val t1 = (a + b) / 2\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_b8w3b57.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c).sorted\n        val sum = sides.sum\n     \
    \   if (sum > sides.last) sides.last else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnnh_130x.scala:18)\n\tat Problem.main(tmpnnh_130x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a + b\n        val a2 = a + c\n        val b2 = b + c\n    \
    \    val a3 = a1 + a2\n        val b3 = b1 + b2\n        val c3 = b2 + c1\n  \
    \      val a4 = a1 + a3\n        val b4 = b1 + b4\n        val c4 = b2 + c4\n\
    \        val a5 = a3 + a4\n        val b5 = b3 + b4\n        val c5 = c3 + c4\n\
    \        val a6 = a3 + a5\n        val b6 = b3 + b5\n        val c6 = c3 + c6\n\
    \        val a7 = a5 + a6\n        val b7 = b5 + b6\n        val c7 = c6 + c7\n\
    \        val a8 = a7 + a8\n        val b8 = b7 + b8\n        val c8 = c7 + c8\n\
    \        val a9 = a8 + a9\n        val b9 = b8 + b9\n        val c9 = c8 + c9\n\
    \        val a10 = a9 + a10\n        val b10 = b9 + b10\n        val c10 = c9\
    \ + c10\n        val a11 = a10 + a11\n        val b11 = b10 + b11\n        val\
    \ c11 = c10 + c11\n        val a12 = a11 + a12\n        val b12 = b11 + b12\n\
    \        val c12 = c11 + c12\n        val a13 = a12 + a13\n        val b13 = b12\
    \ + b13\n        val c13 = c12 + c13\n        val a14 = a13 + a14\n        val\
    \ b14 = b13 + b14\n        val c14 = c13 + c14\n        val a15 = a14 + a15\n\
    \        val b15 = b14 + b15\n        val c15 = c14 + c15\n        val a16 = a15\
    \ + a16\n        val b16 = b15 + b16\n        val c16 = c15 + c16\n        val\
    \ a17 = a16 + a17\n        val b17 = b16 + b17\n        val c17 = c16 + c17\n\
    \        val a18 = a17 + a18\n        val b18 = b17 + b18\n        val c18 = c17\
    \ + c18\n        val a19 = a18 + a19\n        val b19 = b18 + b19\n        val\
    \ c19 = c18 + c19\n        val a20 = a19 + a20\n        val b20 = b19 + b20\n\
    \        val c20 = c19 + c20\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpno4zuyse.scala:70:11 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpno4zuyse.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpno4zuyse.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mc3\e[0m = b2 + c1\n\e[31m\e[31m   |\e[0m                      ^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: c1\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpno4zuyse.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b1 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpno4zuyse.scala:21:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc4\e[0m = b2 + c4\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mc4\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpno4zuyse.scala:31:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma8\e[0m = a7 + a8\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35ma8\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659805138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sides = List(a1, b1, c1)\n        val sum = sides.sum\n\
    \        if (sum > sides.last) sides.last\n        else sides.sum.toFloat\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9njgw3ys.scala:22)\n\tat Problem.main(tmp9njgw3ys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            return sum.toFloat\n\
    \        } else {\n            return -1.0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7uws24th.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7uws24th.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7uws24th.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val a = math.abs(a)\n\
    \            val b = math.abs(b)\n            val c = math.abs(c)\n          \
    \  val sum = a + b + c\n            if (sum > c) {\n                val a = math.abs(a)\n\
    \                val b = math.abs(b)\n                val c = math.abs(c)\n  \
    \              val sum = a + b + c\n                if (sum > c) {\n         \
    \           val a = math.abs(a)\n                    val b = math.abs(b)\n   \
    \                 val c = math.abs(c)\n                    val sum = a + b + c\n\
    \                    if (sum > c) {\n                        val a = math.abs(a)\n\
    \                        val b = math.abs(b)\n                        val c =\
    \ math.abs(c)\n                        val sum = a + b + c\n                 \
    \       if (sum > c) {\n                            val a = math.abs(a)\n    \
    \                        val b = math.abs(b)\n                            val\
    \ c = math.abs(c)\n                            val sum = a + b + c\n         \
    \                   if (sum > c) {\n                                val a = math.abs(a)\n\
    \                                val b = math.abs(b)\n                       \
    \         val c = math.abs(c)\n                                val sum = a + b\
    \ + c\n                                if (sum > c) {\n                      \
    \              val a = math.abs(a)\n                                    val b\
    \ = math.abs(b)\n                                    val c = math.abs(c)\n   \
    \                                 val sum = a + b + c\n                      \
    \              if (sum > c) {\n                                        val a =\
    \ math.abs(a)\n                                        val b = math.abs(b)\n \
    \                                       val c = math.abs(c)\n                \
    \                        val sum = a + b + c\n                               \
    \         if (sum > c) {\n                                            val a =\
    \ math.abs(a)\n                                            val b = math.abs(b)\n\
    \                                            val c = math.abs(c)\n           \
    \                                 val sum = a + b + c\n                      \
    \                      if (sum > c) {\n                                      \
    \          val a = math.abs(a)\n                                             \
    \   val b = math.abs(b)\n                                                val c\
    \ = math.abs(c)\n                                                val sum = a +\
    \ b + c\n                                                if (sum > c) {\n    \
    \                                                val a = math.abs(a)\n       \
    \                                             val b = math.abs(b)\n          \
    \                                          val c = math.abs(c)\n             \
    \                                       val sum = a + b + c\n                \
    \                                    if (sum > c) {\n                        \
    \                                val a = math.abs(a)\n                       \
    \                                 val b = math.abs(b)\n                      \
    \                                  val c = math.abs(c)\n                     \
    \                                   val sum = a + b + c\n                    \
    \                                    if (sum > c) {\n                        \
    \                                    val a = math.abs(a)\n                   \
    \                                         val b = math.abs(b)\n              \
    \                                              val c = math.abs(c)\n         \
    \                                                   val sum = a + b + c\n    \
    \                                                        if (sum > c) {\n    \
    \                                                            val a = math.abs(a)\n\
    \                                                                val b = math.abs(b)\n\
    \                                                                val c = math.abs(c)\n\
    \                                                                val sum = a +\
    \ b + \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk1fcx7ah.scala:86:81 ---------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m                                                    \
    \            \e[33mval\e[0m \e[36msum\e[0m = a + b + \n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpk1fcx7ah.scala:101:0 ---------------------------\e[0m\e[0m\n\e[31m101\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk1fcx7ah.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk1fcx7ah.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk1fcx7ah.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk1fcx7ah.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val a4 = (a1 + a2 + a3) / 2\n        val a5 = (a2 + a3\
    \ + a4) / 2\n        val a6 = (a3 + a4 + a5) / 2\n        val a7 = (a4 + a5 +\
    \ a6) / 2\n        val a8 = (a5 + a6 + a7) / 2\n        val a9 = (a6 + a7 + a8)\
    \ / 2\n        val a10 = (a7 + a8 + a9) / 2\n        val a11 = (a8 + a9 + a10)\
    \ / 2\n        val a12 = (a9 + a10 + a11) / 2\n        val a13 = (a10 + a11 +\
    \ a12) / 2\n        val a14 = (a11 + a12 + a13) / 2\n        val a15 = (a12 +\
    \ a13 + a14) / 2\n        val a16 = (a13 + a14 + a15) / 2\n        val a17 = (a14\
    \ + a15 + a16) / 2\n        val a18 = (a15 + a16 + a17) / 2\n        val a19 =\
    \ (a16 + a17 + a18) / 2\n        val a20 = (a17 + a18 + a19) / 2\n        val\
    \ a21 = (a18 + a19 + a20) / 2\n        val a22 = (a19 + a20 + a21) / 2\n     \
    \   val a23 = (a20 + a21 + a22) / 2\n        val a24 = (a21 + a22 + a23) / 2\n\
    \        val a25 = (a22 + a23 + a24) / 2\n        val a26 = (a23 + a24 + a25)\
    \ / 2\n        val a27 = (a24 + a25 + a26) / 2\n        val a28 = (a25 + a26 +\
    \ a27) / 2\n        val a29 = (a26 + a27 + a28) / 2\n        val a30 = (a27 +\
    \ a28 + a29) / 2\n        val a31 = (a28 + a29 + a30) / 2\n        val a32 = (a29\
    \ + a30 + a31) / 2\n        val a33 = (a30 + a31 + a32) / 2\n        val a34 =\
    \ (a31 + a32 + a33) / 2\n        val a35 = (a32 + a33 + a34) / 2\n        val\
    \ a36 = (a33 + a34 + a35) / 2\n        val a37 = (a34 + a35 + a36) / 2\n     \
    \   val a38 = (a35 + a36 + a37) / 2\n        val a39 = (a36 + a37 + a38) / 2\n\
    \        val a40 = (a37 + a38 + a39) / 2\n        val a41 = (a38 + a39 + a40)\
    \ / 2\n        val a42 = (a39 + a40 + a41) / 2\n        val a43 = (a40 + a41 +\
    \ a42) / 2\n        val a44 = (a4\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkpw_pkw9.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkpw_pkw9.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4)\
    \ * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7) * (a8 + b8 + c8) * (a9 +\
    \ b9 + c9)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5p0t2gff.scala:46)\n\tat Problem.main(tmp5p0t2gff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c) {\n            val d = b - c\n            val e = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2))\n            val f = Math.sqrt(Math.pow(a, 2) + Math.pow(c,\
    \ 2))\n            val g = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2))\n      \
    \      val area = f * g\n            val rounded = (area / Math.pow(10, 2)).toFloat\n\
    \            rounded\n        } else {\n            -1.0\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptpl725h0.scala:26)\n\tat Problem.main(tmptpl725h0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.pow(a\
    \ * b * c, 0.5)\n            val rounded = math.round(area * 100) / 100\n    \
    \        rounded\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgllba4gg.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgllba4gg.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgllba4gg.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b + c) / 2.0\n        val b1 = (a + b - c) / 2.0\n    \
    \    val c1 = (a - b - c) / 2.0\n        val a2 = (b + c + a) / 2.0\n        val\
    \ b2 = (b + c - a) / 2.0\n        val c2 = (b - c - a) / 2.0\n        val a3 =\
    \ (a1 + b2 + c) / 2.0\n        val b3 = (a1 + b2 - c) / 2.0\n        val c3 =\
    \ (a1 - b2 - c) / 2.0\n        val a4 = (a2 + b3 + c) / 2.0\n        val b4 =\
    \ (a2 + b3 - c) / 2.0\n        val c4 = (a2 - b3 - c) / 2.0\n        val a5 =\
    \ (a3 + b4 + c) / 2.0\n        val b5 = (a3 + b4 - c) / 2.0\n        val c5 =\
    \ (a3 - b4 - c) / 2.0\n        val a6 = (a4 + b5 + c) / 2.0\n        val b6 =\
    \ (a4 + b5 - c) / 2.0\n        val c6 = (a5 - b5 - c) / 2.0\n        val a7 =\
    \ (a6 + b6 + c) / 2.0\n        val b7 = (a6 + b6 - c) / 2.0\n        val c8 =\
    \ (a6 - b6 - c) / 2.0\n        (a1 + b2 + c1 + a2 + b3 + c2 + a3 + b4 + c3 + a4\
    \ + b5 + c4 + a5 + b6 + c7 + a6 + b7 + c8) / 8.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpadms07qp.scala:34:79 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        (a1 + b2 + c1 + a2 + b3 + c2 + a3 + b4 + c3 +\
    \ a4 + b5 + c4 + a5 + b6 + c7 + a6 + b7 + c8) / \e[31m8.0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \           ^^\e[0m\n\e[31m   |\e[0m                                         \
    \                  Not found: c7\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val d = math.sqrt((a\
    \ + b) * (b + c) * (c + a))\n            val area = d * (b * c - a * b) / 2.0\n\
    \            area\n        } else {\n            -1.0\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3gnto_jh.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3gnto_jh.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3gnto_jh.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + c * c)\n \
    \       val side3 = math.sqrt(side2 * side2 + a * a + b * b)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjexdisn1.scala:25)\n\tat Problem.main(tmpjexdisn1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = b - c\n        val a2 = c - a\n        val a3 = b - a\n    \
    \    val a4 = a - b\n        val a5 = b - a\n        val a6 = b - a\n        val\
    \ a7 = a - b\n        val a8 = a - b\n        val a9 = a - b\n        val a10\
    \ = a - b\n        val a11 = a - b\n        val a12 = a - b\n        val a13 =\
    \ a - b\n        val a14 = a - b\n        val a15 = a - b\n        val a16 = a\
    \ - b\n        val a17 = a - b\n        val a18 = a - b\n        val a19 = a -\
    \ b\n        val a20 = a - b\n        val a21 = a - b\n        val a22 = a - b\n\
    \        val a23 = a - b\n        val a24 = a - b\n        val a25 = a - b\n \
    \       val a26 = a - b\n        val a27 = a - b\n        val a28 = a - b\n  \
    \      val a29 = a - b\n        val a30 = a - b\n        val a31 = a - b\n   \
    \     val a32 = a - b\n        val a33 = a - b\n        val a34 = a - b\n    \
    \    val a35 = a - b\n        val a36 = a - b\n        val a37 = a - b\n     \
    \   val a38 = a - b\n        val a39 = a - b\n        val a40 = a - b\n      \
    \  val a41 = a - b\n        val a42 = a - b\n        val a43 = a - b\n       \
    \ val a44 = a - b\n        val a45 = a - b\n        val a46 = a - b\n        val\
    \ a47 = a - b\n        val a48 = a - b\n        val a49 = a - b\n        val a50\
    \ = a - b\n        val a51 = a - b\n        val a52 = a - b\n        val a53 =\
    \ a - b\n        val a54 = a - b\n        val a55 = a - b\n        val a56 = a\
    \ - b\n        val a57 = a - b\n        val a58 = a - b\n        val a59 = a -\
    \ b\n        val a60 = a - b\n        val a61 = a - b\n        val a62 = a - b\n\
    \        val a63 = a - b\n        val a64 = a - b\n        val a65 = a - b\n \
    \       val a66 = a - b\n        val a67 = a - b\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp75272hl3.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a6\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4\
    \ + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow9434ss.scala:37)\n\tat Problem.main(tmpow9434ss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum < 0) -1\n        else if (sum ==\
    \ 0) 0\n        else (sum / 2) * Math.sqrt(Math.pow((a + b), 2) + Math.pow((a\
    \ + c), 2) + Math.pow((b + c), 2))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6rwe8i2v.scala:16:13\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (sum\
    \ / \e[31m2\e[0m) * Math.sqrt(Math.pow((a + b), \e[31m2\e[0m) + Math.pow((a +\
    \ c), \e[31m2\e[0m) + Math.pow((b + c), \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0)\n            a / sum\n    \
    \    else\n            -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmf1_059s.scala:20)\n\tat Problem.main(tmpmf1_059s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        val isValid\
    \ = sides.forall(side => side > 0)\n        if (isValid) {\n            val area\
    \ = sides.product\n            val rounded = area.toString.replaceAll(\"\\\\.[0-9]*$\"\
    , \"\")\n            val float = rounded.toFloat\n            float\n        }\
    \ else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmv0e0rx.scala:26)\n\tat Problem.main(tmpcmv0e0rx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 +\
    \ c6 >\n            a5 + b6 + c7 >\n            a6 + b7 + c8 >\n            a7\
    \ + b8 + c9)\n            ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n \
    \               a4 + b5 + c6 >\n                a5 + b6 + c7 >\n             \
    \   a6 + b7 + c8 >\n                a7 + b8 + c9)\n                ? ((a1 + b2\
    \ + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                    a4 + b5 + c6 >\n \
    \                   a5 + b6 + c7 >\n                    a6 + b7 + c8 >\n     \
    \               a7 + b8 + c9)\n                    ? ((a1 + b2 + c3 > a2 + b3\
    \ + c4 > a3 + b4 + c5 >\n                        a4 + b5 + c6 >\n            \
    \            a5 + b6 + c7 >\n                        a6 + b7 + c8 >\n        \
    \                a7 + b8 + c9)\n                        ? ((a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 >\n                            a4 + b5 + c6 >\n   \
    \                         a5 + b6 + c7 >\n                            a6 + b7\
    \ + c8 >\n                            a7 + b8 + c9)\n                        \
    \    ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                      \
    \          a4 + \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_22y0nrw.scala:63:36 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m                                a4 + \n\e[31m\e[31m \
    \  |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m         \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_22y0nrw.scala:37:39 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    Long\n\e[31m \
    \  |\e[0m                                       Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_22y0nrw.scala:38:12 --------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            a4 + b5 + c6 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_22y0nrw.scala:39:12 --------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_22y0nrw.scala:40:12 --------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_22y0nrw.scala:41:22\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m          "
  stdout: ''
  timestamp: 1659805152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val sum = a1 + b1 + c1\n        val a2 = a1 - b1 - c1\n        val b2\
    \ = a1 - b1 + c1\n        val c2 = a1 + b1 - c1\n        val a3 = a1 - b2 - c2\n\
    \        val b3 = a1 + b2 - c2\n        val c3 = a1 + b2 + c1\n        val a4\
    \ = a1 - b3 - c3\n        val b4 = a1 + b3 - c3\n        val c4 = a1 + b3 + c1\n\
    \        val a5 = a1 - b4 - c4\n        val b5 = a1 + b4 - c4\n        val c5\
    \ = a1 + b4 + c1\n        val a6 = a1 - b5 - c5\n        val b6 = a1 + b5 - c5\n\
    \        val c6 = a1 + b5 + c1\n        val a7 = a1 - b6 - c6\n        val b7\
    \ = a1 + b6 - c6\n        val c7 = a1 + b6 + c1\n        val a8 = a1 - b7 - c7\n\
    \        val b8 = a1 + b7 - c7\n        val c8 = a1 + b7 + c1\n        val a9\
    \ = a1 - b8 - c8\n        val b9 = a1 + b8 - c8\n        val c9 = a1 + b8 + c1\n\
    \        val a10 = a1 - b9 - c9\n        val b10 = a1 + b9 - c9\n        val c10\
    \ = a1 + b9 + c1\n        val a11 = a1 - b10 - c10\n        val b11 = a1 + b10\
    \ - c10\n        val c11 = a1 + b10 + c1\n        val a12 = a1 - b11 - c11\n \
    \       val b12 = a1 + b11 - c11\n        val c12 = a1 + b11 + c1\n        val\
    \ a13 = a1 - b12 - c12\n        val b13 = a1 + b12 - c12\n        val c13 = a1\
    \ + b12 + c1\n        val a14 = a1 - b13 - c13\n        val b14 = a1 + b13 - c13\n\
    \        val c14 = a1 + b13 + c1\n        val a15 = a1 - b14 - c14\n        val\
    \ b15 = a1 + b14 - c14\n        val c15 = a1 + b14 + c1\n        val a16 = a1\
    \ - b15 - c15\n        val b16 = a1 + b15 - c15\n        val c16 = a1 + b15 +\
    \ c1\n        val a17 = a1 - b\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxzj89zz.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4\
    \ + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpan1f5e3d.scala:34)\n\tat Problem.main(tmpan1f5e3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            return -1\n\
    \        }\n        val area = math.sqrt((a + b) * (a + c) * (b + c))\n      \
    \  val rounded = math.round(area * 100) / 100\n        if (rounded == area) {\n\
    \            return rounded\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1dvevda0.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1dvevda0.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1dvevda0.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b + c) / 2.0\n        val b1 = (b + c + a) / 2.0\n    \
    \    val c1 = (c + a + b) / 2.0\n        val abc = (a1 + b1 + c1)\n        val\
    \ ab = (a1 + b1)\n        val ac = (a1)\n        val bc = (b1)\n        val ca\
    \ = (c1)\n        val abc = (a1 + b1 + c1)\n        val ab = (a1 + b1)\n     \
    \   val ac = (a1)\n        val bc = (b1)\n        val ca = (c1)\n        val abc\
    \ = (a1 + b1 + c1)\n        val ab = (a1 + b1)\n        val ac = (a1)\n      \
    \  val bc = (b1)\n        val ca = (c1)\n        val abc = (a1 + b1 + c1)\n  \
    \      val ab = (a1 + b1)\n        val ac = (a1)\n        val bc = (b1)\n    \
    \    val ca = (c1)\n        val abc = (a1 + b1 + c1)\n        val ab = (a1 + b1)\n\
    \        val ac = (a1)\n        val bc = (b1)\n        val ca = (c1)\n       \
    \ val abc = (a1 + b1 + c1)\n        val ab = (a1 + b1)\n        val ac = (a1)\n\
    \        val bc = (b1)\n        val ca = (c1)\n        val abc = (a1 + b1 + c1)\n\
    \        val ab = (a1 + b1)\n        val ac = (a1)\n        val bc = (b1)\n  \
    \      val ca = (c1)\n        val abc = (a1 + b1 + c1)\n        val ab = (a1 +\
    \ b1)\n        val ac = (a1)\n        val bc = (b1)\n        val ca = (c1)\n \
    \       val abc = (a1 + b1 + c1)\n        val ab = (a1 + b1)\n        val ac =\
    \ (a1)\n        val bc = (b1)\n        val ca = (c1)\n        val abc = (a1 +\
    \ b1 + c1)\n        val ab = (a1 + b1)\n        val ac = (a1)\n        val bc\
    \ = (b1)\n        val ca = (c1)\n        val abc = (a1 + b1 + c1)\n        val\
    \ ab = (a1 + b1)\n        val ac = (a1)\n        val bc = (b1)\n        val ca\
    \ = (c1)\n        val abc = (a1 + b1 + c1)\n        val ab = (a1 + b1)\n     \
    \   val ac = (a1)\n        val bc = (b1)\n        val ca = (c1)\n        val abc\
    \ = (a1 + b1 + c1)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7oxaakcw.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = (a1 + b1 + c1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mabc\
    \ is already defined as \e[33mvalue\e[0m \e[35mabc\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7oxaakcw.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mab\e[0m = (a1 + b1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mab is already defined as \e[33mvalue\e[0m \e[35mab\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7oxaakcw.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mac\e[0m = (a1)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mac is already defined as \e[33mvalue\e\
    [0m \e[35mac\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7oxaakcw.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbc\e[0m = (b1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbc is already defined\
    \ as \e[33mvalue\e[0m \e[35mbc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7oxaakcw.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mca\e[0m = (c1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mca is already defined\
    \ as \e[33mvalue\e[0m \e[35mca\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7oxaakcw.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m       "
  stdout: ''
  timestamp: 1659805149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val triangleArea = (a * b * c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2) + Math.pow(c, 2))\n        val roundedArea = triangleArea.toString.replaceAll(\"\
    \\\\.\", \"\").replaceAll(\"\\\\,\", \"\").replaceAll(\"\\\\s\", \"\").replaceAll(\"\
    \\\\(\", \"\").replaceAll(\"\\\\)\", \"\")\n        val areaFloat = roundedAref.toFloat\n\
    \        areaFloat\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjt_362xu.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mareaFloat\e[0m = roundedAref.toFloat\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: roundedAref\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (a1 + c) / 2\n        val b1 =\
    \ (b + c) / 2\n        val b2 = (b1 + a) / 2\n        val c1 = (a + b) / 2\n \
    \       val c2 = (c1 + b) / 2\n        val d1 = (b + c) / 2\n        val d2 =\
    \ (d1 + c) / 2\n        val area1 = (a1 + b1 + c1)\n        val area2 = (a2 +\
    \ b2 + c2)\n        val area3 = (b1 + c1 + d1)\n        val area4 = (b2 + c2 +\
    \ d2)\n        val area5 = (d1 + c1 + a1)\n        val area6 = (d2 + c2 + a2)\n\
    \        val area7 = (a1 + b2 + c2)\n        val area8 = (a2 + b2 + c1)\n    \
    \    val area9 = (b1 + c2 + d2)\n        val area10 = (b2 + c2 + d1)\n       \
    \ val area11 = (d1 + c2 + a2)\n        val area12 = (d2 + c2 + a1)\n        val\
    \ area13 = (a1 + b2 + c1)\n        val area14 = (a2 + b2 + c2)\n        val area15\
    \ = (b1 + c2 + d1)\n        val area16 = (b2 + c2 + d2)\n        val area17 =\
    \ (d1 + c2 + a1)\n        val area18 = (d2 + c2 + a2)\n        val area19 = (a1\
    \ + b2 + c1)\n        val area20 = (a2 + b2 + c2)\n        val area21 = (ab1 +\
    \ c2 + d2)\n        val area22 = (ab2 + c2 + d1)\n        val area23 = (b1 + c2\
    \ + a2)\n        val area24 = (b2 + c2 + a1)\n        val area25 = (d1 + c2 +\
    \ b2)\n        val area26 = (d2 + c2 + b1)\n        val area27 = (a1 + b2 + c1)\n\
    \        val area28 = (a2 + b2 + c2)\n        val area29 = (b1 + c2 + d1)\n  \
    \      val area30 = (b2 + c2 + d2)\n        val area31 = (ab1 + c2 + a2)\n   \
    \     val area32 = (ab2 + c2 + a1)\n        val area33 = (b1 + c2 + b2)\n    \
    \    val area34 = (b2 + c2 + b1)\n        val area35 = (d1 + c2 + c2)\n      \
    \  val area36 = (d2 + c2 + c1)\n        val area37 = (a1 + b2 + c1)\n        val\
    \ area38 = (a2 + b2 + c\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdub3jpsz.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdub3jpsz.scala:41:22\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36marea21\e[0m = (ab1 + c2 + d2)\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^\e[0m\n\e[31m   |\e[0m                      Not found: ab1\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdub3jpsz.scala:42:22 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36marea22\e[0m = (ab2 + c2\
    \ + d1)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: ab2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdub3jpsz.scala:51:22 ------------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36marea31\e[0m = (ab1 + c2 + a2)\n\
    \e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m         \
    \             Not found: ab1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdub3jpsz.scala:52:22 ------------------------\e[0m\e[0m\n\e[31m52 |\e\
    [0m        \e[33mval\e[0m \e[36marea32\e[0m = (ab2 + c2 + a1)\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: ab2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdub3jpsz.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659805149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 = math.sqrt(a\
    \ * a + c * c)\n        if (side1 + side2 > side3) {\n            area\n     \
    \   } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjixou1n2.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1 + a2 + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5\
    \ + c5 + a6 + b6 + c6 +a7 + b7 + c7) / 6\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt5qdrs1o.scala:37)\n\tat Problem.main(tmpt5qdrs1o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = (a, b, c) match {\n \
    \           case (a, b, c) => a + b + c\n            case (a, b, c) => a + b +\
    \ c\n            case (a, b, c) => a + b + c\n        }\n        if (sides ==\
    \ 0) area\n        else if (sides == 1) area\n        else if (sides == 2) area\n\
    \        else if (sides > 2) area\n        else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhwy0are.scala:27)\n\tat Problem.main(tmpnhwy0are.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val a = math.abs(a)\n\
    \            val b = math.abs(b)\n            val c = math.abs(c)\n          \
    \  val sum = a + b + c\n            val area = math.sqrt(sum * (sum - c) * (sum\
    \ - b) * (sum - a))\n            area\n        } else {\n            -1.0\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_v6hcvjd.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_v6hcvjd.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_v6hcvjd.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_v6hcvjd.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_v6hcvjd.scala:19:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mb\e[0m = math.abs(b)\n\e[31m\e[31m   |\e[0m                        \
    \     ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp_v6hcvjd.scala:20:29 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            "
  stdout: ''
  timestamp: 1659805149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = (a, b, c) match {\n \
    \           case (a, b, c) => a + b + c\n            case (a, b) => a + b\n  \
    \          case _ => -1\n        }\n        if (sides == 0) -1\n        else if\
    \ (sides == a + b) area\n        else if (sides == a + c) area + b\n        else\
    \ if (sides == b + c) area + a\n        else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqsr3baz.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (a, b) => a + b\n\e[31m\e\
    [31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659805153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sum = a1 + b1 + c1\n        if (sum > 0) {\n      \
    \      val a2 = a1 / sum\n            val b2 = b1 / sum\n            val c2 =\
    \ c1 / sum\n            val area = a2 * b2 * c2\n            area\n        } else\
    \ {\n            -1.0\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozgn7mf5.scala:28)\n\tat Problem.main(tmpozgn7mf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 =\
    \ math.abs(c)\n        val a2 = math.abs(a1 + b1)\n        val b2 = math.abs(b1\
    \ + c1)\n        val c2 = math.abs(c1 + a1)\n        val a3 = math.abs(a2 + b2)\n\
    \        val b3 = math.abs(b2 + c2)\n        val c3 = math.abs(c2 + a2)\n    \
    \    val a4 = math.abs(a3 + b3)\n        val b4 = math.abs(b3 + c3)\n        val\
    \ c4 = math.abs(c3 + a3)\n        val a5 = math.abs(a4 + b4)\n        val b5 =\
    \ math.abs(b4 + c4)\n        val c5 = math.abs(c4 + a4)\n        val a6 = math.abs(a5\
    \ + b5)\n        val b6 = math.abs(b5 + c5)\n        val c6 = math.abs(c5 + a5)\n\
    \        val a7 = math.abs(a6 + b6)\n        val b7 = math.abs(b6 + c6)\n    \
    \    val c7 = math.abs(c6 + a6)\n        val a8 = math.abs(a7 + b7)\n        val\
    \ b8 = math.abs(b7 + c7)\n        val c8 = math.abs(c7 + a7)\n        val a9 =\
    \ math.abs(a8 + b8)\n        val b9 = math.abs(b8 + c8)\n        val c9 = math.abs(c8\
    \ + a8)\n        val a10 = math.abs(a9 + b9)\n        val b10 = math.abs(b9 +\
    \ c9)\n        val c10 = math.abs(c9 + a9)\n        val a11 = math.abs(a10 + b10)\n\
    \        val b11 = math.abs(b10 + c10)\n        val c11 = math.abs(c10 + a10)\n\
    \        val a12 = math.abs(a11 + b11)\n        val b12 = math.abs(b11 + c11)\n\
    \        val c12 = math.abs(c11 + a11)\n        val a13 = math.abs(a12 + b12)\n\
    \        val b13 = math.abs(b12 + c12)\n        val c13 = math.abs(c12 + a12)\n\
    \        val a14 = math.abs(a13 + b13)\n        val b14 = math.abs(b13 + c13)\n\
    \        val c14 = math.abs(c13 + a13)\n        val a15 = math.abs(a14 + b14)\n\
    \        val b15 = math.abs(b14 + c14)\n        val c15 = math.abs(c14 + a14)\n\
    \        val a16 = math.abs(a15 + b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxz99wfnd.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxz99wfnd.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.pow(a, 2)\n        val b = math.pow(b, 2)\n        val c\
    \ = math.pow(c, 2)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n  \
    \          val area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n           \
    \ area\n        } else {\n            -1.0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps70ft_zv.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.pow(a, \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps70ft_zv.scala:14:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = math.pow(b, \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \             ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps70ft_zv.scala:15:25 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.pow(c, \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps70ft_zv.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val a = math.abs(a\
    \ - b)\n            val b = math.abs(b - c)\n            val c = math.abs(c -\
    \ sum)\n            val sum = a + b + c\n            val area = sum / 3\n    \
    \        val rounded = math.round(area * 100) / 100\n            return rounded\n\
    \        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpulk3ynlx.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpulk3ynlx.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpulk3ynlx.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpulk3ynlx.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = math.abs(a\
    \ - b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpulk3ynlx.scala:19:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mb\e[0m = math.abs(b - c)\n\e[31m\e[31m   |\e[0m                    \
    \         ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpulk3ynlx.scala:20:29 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    "
  stdout: ''
  timestamp: 1659805153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n\
    \            val area = s * (s - a) * (s - b) * (s - c)\n            val rounded\
    \ = area.toString.split(\"\\\\.\").takeRight(2).mkString.toFloat\n           \
    \ if (rounded > 0) rounded else -1\n        } else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdcfhl_ag.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdcfhl_ag.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdcfhl_ag.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        val a11 = a10 + b10\n        val b11 = b10 + c10\n        val c11\
    \ = c110 + a10\n        val a12 = a11 + b11\n        val b12 = b11 + c11\n   \
    \     val c12 = c11 + a11\n        val a13 = a12 + b12\n        val b13 = b12\
    \ + c12\n        val c13 = c12 + a12\n        val a14 = a13 + b13\n        val\
    \ b14 = b13 + c13\n        val c14 = c13 + a13\n        val a15 = a14 + b14\n\
    \        val b15 = b14 + c14\n        val c15 = c14 + a14\n        val a16 = a15\
    \ + b15\n        val b16 = b15 + c15\n        val c16 = c15 + a15\n        val\
    \ a17 = a16 + b16\n        val b17 = b16 + c16\n        val c17 = c16 + a16\n\
    \        val a18 = a17 + b17\n        val b18 = b17 + c17\n        val c18 = c17\
    \ + a17\n        val a19 = a18 + b18\n        val b19 = b18 + c18\n        val\
    \ c19 = c18 + a18\n        val a20 = a19 + b19\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_az24gu.scala:45:18 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mc11\e[0m = c110 + a10\n\e\
    [31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Not found: c110\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_az24gu.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val triangleArea = if (a + b > c) \n            (a * b) / Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) \n        else -1\n        val roundedArea = Math.round(triangleArea\
    \ * 100) / 100\n        return roundedArea\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73k50vet.scala:20)\n\tat Problem.main(tmp73k50vet.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a6\n        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4\
    \ + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6 && a1 + b2\
    \ + c2 > a7 + b7 + c7 && a1 + b2 + c2 > a8 && b1 + c1 + a1 > b3 + c1 + a3 && b1\
    \ + c1 + a1 > b4 + c1 + a4 && b1 + c1 + a1 > b5 + c1 + a5 && b1 + c1 + a1 > b6\
    \ + c1 + a6 && b1 + c1 + a1 > b7 + c1 + a7 && b1 + c1 + a1 > b8 && c1 + a1 + b1\
    \ > c3 + a1 + b3 && c1 + a1 + b1 > c4 + a1 + b4 && c1 + a1 + b1 > c5 + a1 + b5\
    \ && c1 + a1 + b1 > c6 + a1 + b6 && c1 + a1 + b1 > c7 + a1 + b7 && c1 + a1 + b1\
    \ > c8 && a1 + b1 + c1 > c3 + a1 + b3 && a1 + b1 + c1 > c4 + a1 + b4 && a1 + b1\
    \ + c1 > c5 + a1 + b5 && a1 + b1 + c1 > c6 + a1 + b6 && a1 + b1 + c1 > c7 + a1\
    \ + b7 && a1 + b1 + c1 > c8 && a1 + b2 + c2 > c3 + a2 + b3 + c3 && a1 + b2 + c2\
    \ > c4 + a2 + b4 + c4 && a1 + b2 + c2 > c5 + a2 + b5 + c5 && a1 + b2 + c2 > c6\
    \ + a2 + b6 + c6 && a1 + b2 + c2 > c7 + a2 + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpin2mw90q.scala:34:881 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2\
    \ > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6\
    \ && a1 + b2 + c2 > a7 + b7 + c7 && a1 + b2 + c2 > a8 && b1 + c1 + a1 > b3 + c1\
    \ + a3 && b1 + c1 + a1 > b4 + c1 + a4 && b1 + c1 + a1 > b5 + c1 + a5 && b1 + c1\
    \ + a1 > b6 + c1 + a6 && b1 + c1 + a1 > b7 + c1 + a7 && b1 + c1 + a1 > b8 && c1\
    \ + a1 + b1 > c3 + a1 + b3 && c1 + a1 + b1 > c4 + a1 + b4 && c1 + a1 + b1 > c5\
    \ + a1 + b5 && c1 + a1 + b1 > c6 + a1 + b6 && c1 + a1 + b1 > c7 + a1 + b7 && c1\
    \ + a1 + b1 > c8 && a1 + b1 + c1 > c3 + a1 + b3 && a1 + b1 + c1 > c4 + a1 + b4\
    \ && a1 + b1 + c1 > c5 + a1 + b5 && a1 + b1 + c1 > c6 + a1 + b6 && a1 + b1 + c1\
    \ > c7 + a1 + b7 && a1 + b1 + c1 > c8 && a1 + b2 + c2 > c3 + a2 + b3 + c3 && a1\
    \ + b2 + c2 > c4 + a2 + b4 + c4 && a1 + b2 + c2 > c5 + a2 + b5 + c5 && a1 + b2\
    \ + c2 > c6 + a2 + b6 + c6 && a1 + b2 + c2 > c7 + a2 + \n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation availa"
  stdout: ''
  timestamp: 1659805156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.pow(a\
    \ * b, 2) / math.pow(c, 2)\n            val rounded = math.round(area * 100) /\
    \ 100\n            return rounded\n        }\n        -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8y07fqyw.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8y07fqyw.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8y07fqyw.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7) - (a9 * b6) + (a9 * b5)\
    \ - (a9 * b4) + (a9 * b3) - (a9 * b2) + (a9 * b1) - (a9 * b0) + (a9 * c9)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0caidu2s.scala:40:134 -----------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7)\
    \ - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) + (a9 * b1) - (a9\
    \ * b0) + (a9 * c9)\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                       ^^\e[0m\n\e[31m   |\e[0m                             \
    \                              Not found: b0\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = (a, b, c) match {\n \
    \           case (a, b, c) => a + b + c\n            case _ => -1\n        }\n\
    \        if (sides > 0) {\n            val sum = sides match {\n             \
    \   case a if a > b => b - a\n                case b if b > c => c - b\n     \
    \           case c if c > a => a - c\n            }\n            if (sum > 0)\
    \ {\n                area / sum\n            } else {\n                -1\n  \
    \          }\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1abzqw5l.scala:34)\n\tat Problem.main(tmp1abzqw5l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b + c) / 2.0\n        val a2 = Math.sqrt(a1 * a1 + a *\
    \ a)\n        val b2 = Math.sqrt(b * b + b * b)\n        val c2 = Math.sqrt(c\
    \ * c + c * c)\n        val a3 = a2 / b2\n        val b3 = b2 / c2\n        val\
    \ c3 = c2 / a2\n        val a4 = a3 / b3\n        val b4 = b3 / c3\n        val\
    \ c4 = c3 / a3\n        val a5 = a4 / b4\n        val b5 = b4 / c4\n        val\
    \ c5 = c4 / a4\n        val a6 = a5 / b5\n        val b6 = b5 / c5\n        val\
    \ c6 = c5 / a5\n        (a1 + a2 + a3) / 2.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ttxkdon.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        (a1 + a2 + a3) / \e\
    [31m2.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = (a, b, c) match {\n \
    \           case (a, b, c) => a + b + c\n            case _ => -1\n        }\n\
    \        if (sides == 0) area\n        else if (sides == 1) area\n        else\
    \ if (sides == 2) area\n        else if (sides > 2) area\n        else -1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_61uh1v.scala:26)\n\tat Problem.main(tmp9_61uh1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val a = math.abs(a\
    \ - b)\n            val b = math.abs(b - c)\n            val c = math.abs(c -\
    \ sum)\n            val area = a / b\n            area\n        } else {\n   \
    \         -1.0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc__s1e9v.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc__s1e9v.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc__s1e9v.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc__s1e9v.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = math.abs(a\
    \ - b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc__s1e9v.scala:19:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mb\e[0m = math.abs(b - c)\n\e[31m\e[31m   |\e[0m                    \
    \         ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpc__s1e9v.scala:20:29 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    "
  stdout: ''
  timestamp: 1659805156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val sum = a1 + a2 + a3\n        if (sum > a3)\n       \
    \     sum - a3\n        else\n            -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7181dcb.scala:23)\n\tat Problem.main(tmpt7181dcb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805159
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + b * a + c\
    \ * c)\n        val side3 = math.sqrt(side2 * side2 + a * a + b * b + c * c)\n\
    \        if (side1 + side2 + side3 > side1 * side2 * side3) {\n            area\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcduy6ym.scala:24)\n\tat Problem.main(tmptcduy6ym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805159
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7) * (a8 + b8 + c8)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90z5_wle.scala:40)\n\tat Problem.main(tmp90z5_wle.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805160
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c).sorted\n        val sum = sides.sum\n     \
    \   if (sum > sides(2)) sides(2) * sides(2) * sides(2) else -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2e1x3ww.scala:18)\n\tat Problem.main(tmpc2e1x3ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805162
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(a * a + b * b + c * c)\n        val\
    \ side3 = math.sqrt(a * a + b * b + c * c)\n        if (side1 + side2 > side3)\
    \ {\n            area\n        } else {\n            -1\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyd4a_gb9.scala:25)\n\tat Problem.main(tmpyd4a_gb9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 = math.sqrt(a\
    \ * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n        val side5\
    \ = math.sqrt(a * a + b * b)\n        val side6 = math.sqrt(c * c + d * d)\n \
    \       val side7 = math.sqrt(a * a + c * c)\n        val side8 = math.sqrt(b\
    \ * b + d * d)\n        val side9 = math.sqrt(a * a + b * b)\n        val side10\
    \ = math.sqrt(c * c + d * d)\n        val side11 = math.sqrt(a * a + c * c)\n\
    \        val side12 = math.sqrt(b * b + d * d)\n        val side13 = math.sqrt(a\
    \ * a + c * c)\n        val side14 = math.sqrt(b * b + d * d)\n        val side15\
    \ = math.sqrt(a * a + b * b)\n        val side16 = math.sqrt(c * c + d * d)\n\
    \        val side17 = math.sqrt(a * a + c * c)\n        val side18 = math.sqrt(b\
    \ * b + d * d)\n        val side19 = math.sqrt(a * a + b * b)\n        val side20\
    \ = math.sqrt(c * c + d * d)\n        val side21 = math.sqrt(a * a + c * c)\n\
    \        val side22 = math.sqrt(b * b + d * d)\n        val side23 = math.sqrt(a\
    \ * a + c * c)\n        val side24 = math.sqrt(b * b + d * d)\n        val side25\
    \ = math.sqrt(a * a + b * b)\n        val side26 = math.sqrt(c * c + d * d)\n\
    \        val side27 = math.sqrt(a * a + c * c)\n        val side28 = math.sqrt(b\
    \ * b + d * d)\n        val side29 = math.sqrt(a * a + b * b)\n        val side30\
    \ = math.sqrt(c * c + d * d)\n        val side31 = math.sqrt(a * a + c * c)\n\
    \        val side32 = math.sqrt(b * b + d * d)\n        val side33 = math.sqrt(a\
    \ * a + c * c)\n        val side34 = math.sqrt(b * b + d * d)\n        val side35\
    \ = math.sqrt(a * a + b * b)\n        val side36 = math.sqrt(c * c + d * d)\n\
    \        val side37 = math.sqrt(a * a + c * c)\n        val side38 = math.sqrt(b\
    \ * b + d * d)\n        val side39 = math.sqrt(a * a + c * c)\n        val side40\
    \ = math.sqrt(b * b + d * d)\n        val side41 = math.sqrt(a * a + b * b)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iiksm1m.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iiksm1m.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iiksm1m.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside6\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iiksm1m.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mside8\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iiksm1m.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mside10\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iiksm1m.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        val a11 = a10 + b10\n        val b11 = b10 + c10\n        val c11\
    \ = c110 + a10\n        val a12 = a11 + b11\n        val b12 = b11 + c11\n   \
    \     val c12 = c11 + a11\n        val a13 = a12 + b12\n        val b13 = b12\
    \ + c12\n        val c13 = c12 + a12\n        val a14 = a13 + b13\n        val\
    \ b14 = b13 + c13\n        val c14 = c13 + a13\n        val a15 = a14 + b14\n\
    \        val b15 = b14 + c14\n        val c15 = c14 + a14\n        val a16 = a15\
    \ + b15\n        val b16 = b15 + c15\n        val c16 = c15 + a15\n        val\
    \ a17 = a16 + b16\n        val b17 = b16 + c16\n        val c17 = c16 + a16\n\
    \        val a18 = a17 + b17\n        val b18 = b17 + c17\n        val c18 = c17\
    \ + a17\n        val a19 = a18 + b18\n        val b19 = b18 + c18\n        val\
    \ c19 = c18 + a18\n        val a20 = a19 + b19\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_az24gu.scala:45:18 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mc11\e[0m = c110 + a10\n\e\
    [31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Not found: c110\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_az24gu.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.round(a\
    \ * c / sum * 100) / 100\n            if (area == 0) {\n                area\n\
    \            } else {\n                area\n            }\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbr649aru.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbr649aru.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbr649aru.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * a * a + sum * b * b + sum * c * c)\n            (area / 2).toFloat\n     \
    \   } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5itnvel.scala:22)\n\tat Problem.main(tmpp5itnvel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c).sorted\n        val sum = sides.sum\n     \
    \   if (sum > sides.last) sides.last else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnnh_130x.scala:18)\n\tat Problem.main(tmpnnh_130x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        (a1 + b2 + c3 > a2 + b3 + c1) ? ((a1 + b2 + c3 > a3 + b2 + c1) ?\
    \ ((a1 + b2 + c3 > a4 + b3 + c1) ? ((a1 + b2 + c3 > a5 + b2 + c1) ? ((a1 + b2\
    \ + c3 > a6 + b2 + c1) ? ((a1 + b2 + c3 > a7 + b2 + c1) ? ((a1 + b2 + c3 > a8\
    \ + b2 + c1) ? ((a1 + b2 + c3 > a9 + b2 + c1) ? ((a1 + b2 + c3 > a10 + b2 + c1)\
    \ ? ((a1 + b2 + c3 > b1 + c1 + b1) ? ((a1 + b2 + c3 > b2 + c1 + b1) ? ((a1 + b2\
    \ + c3 > b3 + c1 + b1) ? ((a1 + b2 + c3 > b4 + c1 + b1) ? ((a1 + b2 + c3 > b5\
    \ + c1 + b1) ? ((a1 + b2 + c3 > b6 + c1 + b1) ? ((a1 + b2 + c3 > b7 + c1 + b1)\
    \ ? ((a1 + b2 + c3 > b8 + c1 + b1) ? ((a1 + b2 + c3 > c9 + c1 + b1) ? ((a1 + b2\
    \ + c3 > c10 + c1 + b1) ? (\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph732noy0.scala:43:637 --------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        (a1 + b2 + c3 > a2 + b3 + c1) ? ((a1 + b2 + c3\
    \ > a3 + b2 + c1) ? ((a1 + b2 + c3 > a4 + b3 + c1) ? ((a1 + b2 + c3 > a5 + b2\
    \ + c1) ? ((a1 + b2 + c3 > a6 + b2 + c1) ? ((a1 + b2 + c3 > a7 + b2 + c1) ? ((a1\
    \ + b2 + c3 > a8 + b2 + c1) ? ((a1 + b2 + c3 > a9 + b2 + c1) ? ((a1 + b2 + c3\
    \ > a10 + b2 + c1) ? ((a1 + b2 + c3 > b1 + c1 + b1) ? ((a1 + b2 + c3 > b2 + c1\
    \ + b1) ? ((a1 + b2 + c3 > b3 + c1 + b1) ? ((a1 + b2 + c3 > b4 + c1 + b1) ? ((a1\
    \ + b2 + c3 > b5 + c1 + b1) ? ((a1 + b2 + c3 > b6 + c1 + b1) ? ((a1 + b2 + c3\
    \ > b7 + c1 + b1) ? ((a1 + b2 + c3 > b8 + c1 + b1) ? ((a1 + b2 + c3 > c9 + c1\
    \ + b1) ? ((a1 + b2 + c3 > c10 + c1 + b1) ? (\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph732noy0.scala:43:38 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        (a1 + b2 + c3 > a2 + b3 + c1) ? ((a1 + b2 + c3\
    \ > a3 + b2 + c1) ? ((a1 + b2 + c3 > a4 + b3 + c1) ? ((a1 + b2 + c3 > a5 + b2\
    \ + c1) ? ((a1 + b2 + c3 > a6 + b2 + c1) ? ((a1 + b2 + c3 > a7 + b2 + c1) ? ((a1\
    \ + b2 + c3 > a8 + b2 + c1) ? ((a1 + b2 + c3 > a9 + b2 + c1) ? ((a1 + b2 + c3\
    \ > a10 + b2 + c1) ? ((a1 + b2 + c3 > b1 + c1 + b1) ? ((a1"
  stdout: ''
  timestamp: 1659805166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val\
    \ c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val\
    \ c9 = c8 + a8\n        val a10 = a9 + b9\n        val b10 = b9 + c9\n       \
    \ val c10 = c9 + a9\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3)\
    \ * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7) * (a8 +\
    \ b8 + c8) * (a9 + b9 + c9) * (a10 + b10 + c10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxsxfy47.scala:46)\n\tat Problem.main(tmpwxsxfy47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val\
    \ c8 = c7 + a7\n        (a1 + b2 + c2 > a3 && b2 + c2 + a3 > b3 && c2 + a3 + b3\
    \ > c3 && a2 + b2 + c2 > a4 && b2 + c2 + a4 > b4 && c2 + a4 + b4 > c4 && a2 +\
    \ b2 + c2 > a5 && b2 + c2 + a5 > b5 && c2 + a5 + b5 > c5 && a2 + b2 + c2 > a6\
    \ && b2 + c2 + a6 > b6 && c2 + a6 + b6 > c6 && a2 + b2 + c2 > a7 && b2 + c2 +\
    \ a7 > b7 && c2 + a7 + b7 > c7 && a2 + b2 + c2 > a8 && b2 + c2 + a8 > b8 && c2\
    \ + a8 + b8 > c8)\n            ? Math.sqrt(a1 * a5 + b1 * b5 + c1 * c5)\n    \
    \        : -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjos1jyjm.scala:38:12 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        (a1 + b2 + c2 > a3 && b2 + c2 + a3 > b3 && c2\
    \ + a3 + b3 > c3 && a2 + b2 + c2 > a4 && b2 + c2 + a4 > b4 && c2 + a4 + b4 > c4\
    \ && a2 + b2 + c2 > a5 && b2 + c2 + a5 > b5 && c2 + a5 + b5 > c5 && a2 + b2 +\
    \ c2 > a6 && b2 + c2 + a6 > b6 && c2 + a6 + b6 > c6 && a2 + b2 + c2 > a7 && b2\
    \ + c2 + a7 > b7 && c2 + a7 + b7 > c7 && a2 + b2 + c2 > a8 && b2 + c2 + a8 > b8\
    \ && c2 + a8 + b8 > c8)\n\e[31m38 |\e[0m            ? Math.sqrt(a1 * a5 + b1 *\
    \ b5 + c1 * c5)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        value\
    \ ? is not a member of Boolean.\n\e[31m   |\e[0m        Note that `?` is treated\
    \ as an infix operator in Scala 3.\n\e[31m   |\e[0m        If you do not want\
    \ that, insert a `;` or empty line in front\n\e[31m   |\e[0m        or drop any\
    \ spaces behind the operator.\n1 error found\n"
  stdout: ''
  timestamp: 1659805161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = sum\
    \ * 0.5\n            area.toFloat\n        } else {\n            -1.0\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl7t9oxh4.scala:23)\n\tat Problem.main(tmpl7t9oxh4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val triangleArea = (a * b * c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2) + Math.pow(c, 2))\n        val roundedArea = triangleArea.toString.split(\"\
    \\\\.\").map(_.toInt).map(x => x.toFloat).sum\n        roundedArea.toFloat\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"48528137423857\"\n\
    \tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpzsso7cr5.scala:14)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.triangleArea(tmpzsso7cr5.scala:14)\n\
    \tat Problem$.main(tmpzsso7cr5.scala:18)\n\tat Problem.main(tmpzsso7cr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val a4 = (a1 + a2 + a3) / 2\n        val a5 = (a2 + a3\
    \ + a4) / 2\n        val a6 = (a3 + a4 + a5) / 2\n        val a7 = (a4 + a5 +\
    \ a6) / 2\n        val a8 = (a5 + a6 + a7) / 2\n        val a9 = (a6 + a7 + a8)\
    \ / 2\n        val a10 = (a7 + a8 + a9) / 2\n        val a11 = (a8 + a9 + a10)\
    \ / 2\n        val a12 = (a9 + a10 + a11) / 2\n        val a13 = (a10 + a11 +\
    \ a12) / 2\n        val a14 = (a11 + a12 + a13) / 2\n        val a15 = (a12 +\
    \ a13 + a14) / 2\n        val a16 = (a13 + a14 + a15) / 2\n        val a17 = (a14\
    \ + a15 + a16) / 2\n        val a18 = (a15 + a16 + a17) / 2\n        val a19 =\
    \ (a16 + a17 + a18) / 2\n        val a20 = (a17 + a18 + a19) / 2\n        val\
    \ a21 = (a18 + a19 + a20) / 2\n        val a22 = (a19 + a20 + a21) / 2\n     \
    \   val a23 = (a20 + a21 + a22) / 2\n        val a24 = (a21 + a22 + a23) / 2\n\
    \        val a25 = (a22 + a23 + a24) / 2\n        val a26 = (a23 + a24 + a25)\
    \ / 2\n        val a27 = (a24 + a25 + a26) / 2\n        val a28 = (a25 + a26 +\
    \ a27) / 2\n        val a29 = (a26 + a27 + a28) / 2\n        val a30 = (a27 +\
    \ a28 + a29) / 2\n        val a31 = (a28 + a29 + a30) / 2\n        val a32 = (a29\
    \ + a30 + a31) / 2\n        val a33 = (a30 + a31 + a32) / 2\n        val a34 =\
    \ (a31 + a32 + a33) / 2\n        val a35 = (a32 + a33 + a34) / 2\n        val\
    \ a36 = (a33 + a34 + a35) / 2\n        val a37 = (a34 + a35 + a36) / 2\n     \
    \   val a38 = (a35 + a36 + a37) / 2\n        val a39 = (a36 + a37 + a38) / 2\n\
    \        val a40 = (a37 + a38 + a39) / 2\n        val a41 = (a38 + a39 + a40)\
    \ / 2\n        val a42 = (a39 + a40 + a41) / 2\n        val a43 = (a40 + a41 +\
    \ a42) / 2\n        val a44 = (a41 + a42 + a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyfw7ga78.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyfw7ga78.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = a + b + c\n        if (s > 0) {\n    \
    \        val area = s * (s - a) * (s - b) * (s - c)\n            area / Math.pow(a,\
    \ 2)\n        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph8gwm3dx.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph8gwm3dx.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph8gwm3dx.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph8gwm3dx.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area / Math.pow(a, \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n\
    \            val area = s * (s - a) * (s - b) * (s - c)\n            area\n  \
    \      } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2oh90f6t.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2oh90f6t.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2oh90f6t.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2oh90f6t.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        if (a + b > c) {\n            val d = b * b - 4 * a * c\n           \
    \ if (d > 0) {\n                val x = -b + Math.sqrt(d)\n                val\
    \ y = -b - Math.sqrt(d)\n                val area = Math.sqrt(x * x + y * y)\n\
    \                val rounded = area / 2\n                rounded.toFloat\n   \
    \         } else {\n                -1\n            }\n        } else {\n    \
    \        -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfaq2bl94.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfaq2bl94.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfaq2bl94.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n\
    \            val area = s * (s - a) * (s - b) * (s - c)\n            area / Math.PI\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcylhn2n.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcylhn2n.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcylhn2n.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcylhn2n.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area / Math.PI\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e\
    [31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sides = List(a1, b1, c1)\n        val sum = sides.sum\n\
    \        val side = sides.max\n        if (sum > side) {\n            return side.toFloat\
    \ * side.toFloat\n        } else {\n            return -1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg26j2xl3.scala:26)\n\tat Problem.main(tmpg26j2xl3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * a * a + sum * b * b + sum * c * c)\n            area / 2\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbmy5zq7c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            area / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.round(a\
    \ * b / (a + b + c))\n            if (area == 0) area else area\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2_87547k.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2_87547k.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2_87547k.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val s = (a + b + c) / 2\n        val area = (math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c)) * (b - a) * (c - a)).toFloat\n        area\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfrjh_fix.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfrjh_fix.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfrjh_fix.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 +\
    \ c6 >\n            a5 + b6 + c7 >\n            a6 + b7 + c8)\n            ? Math.sqrt(a1\
    \ * b2 - a2 * b1 + a3 * b3 - a3 * b2 + a4 * b3 - a4 * b2 + a5 * b3 - a5 * b2 +\
    \ a6 * b3 - a6 * b2 + a7 * b3 - a7 * b2)\n            : -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppl7quzgl.scala:34:39\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppl7quzgl.scala:35:12\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppl7quzgl.scala:36:12 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppl7quzgl.scala:37:22 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m            a6 + b7 + c8)\n\e[31m\e[31m   |\e[0m         \
    \             ^^\e[0m\n\e[31m   |\e[0m                      Not found: c8\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val isValid = a > 0 && b > 0 && c\
    \ > 0\n        if (isValid) {\n            val isValidSide = a > b && b > c\n\
    \            if (isValidSide) {\n                val isValidArea = area > a\n\
    \                if (isValidArea) {\n                    area\n              \
    \  } else {\n                    -1\n                }\n            } else {\n\
    \                -1\n            }\n        } else {\n            -1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj66te9cx.scala:32)\n\tat Problem.main(tmpj66te9cx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        val a11 = a10 + b10\n        val b11 = b10 + c10\n        val c11\
    \ = c110 + a10\n        val a12 = a11 + b11\n        val b12 = b11 + c11\n   \
    \     val c12 = c11 + a11\n        val a13 = a12 + b12\n        val b13 = b12\
    \ + c12\n        val c13 = c12 + a12\n        val a14 = a13 + b13\n        val\
    \ b14 = b13 + c13\n        val c14 = c13 + a13\n        val a15 = a14 + b14\n\
    \        val b15 = b14 + c14\n        val c15 = c14 + a14\n        val a16 = a15\
    \ + b15\n        val b16 = b15 + c15\n        val c16 = c15 + a15\n        val\
    \ a17 = a16 + b16\n        val b17 = b16 + c16\n        val c17 = c16 + a16\n\
    \        val a18 = a17 + b17\n        val b18 = b17 + c17\n        val c18 = c17\
    \ + a17\n        val a19 = a18 + b18\n        val b19 = b18 + c18\n        val\
    \ c19 = c18 + a18\n        val a20 = a19 + b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6153hbop.scala:45:18 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mc11\e[0m = c110 + a10\n\e\
    [31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Not found: c110\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6153hbop.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 = math.sqrt(a\
    \ * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4s1e7s7.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4s1e7s7.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sum = a1 + b1 + c1\n        if (sum > a1 && sum > b1\
    \ && sum > c1) {\n            val area = (a + b + c) / 2\n            (area /\
    \ Math.sqrt(a1 * a1 + b1 * b1 + c1 * c1)).toFloat\n        } else {\n        \
    \    -1.0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4957a81.scala:25)\n\tat Problem.main(tmpp4957a81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sum = a1 + b1 + c1\n        if (sum > 0) {\n      \
    \      val a2 = a1 * a1\n            val b2 = b1 * b1\n            val c2 = c1\
    \ * c1\n            val a3 = a1 * a2\n            val b3 = b1 * b2\n         \
    \   val c3 = c1 * c2\n            val a4 = a1 * a3\n            val b4 = b1 *\
    \ b3\n            val c4 = c1 * c3\n            val a5 = a1 * a4\n           \
    \ val b5 = b1 * b4\n            val c5 = c1 * c5\n            val a6 = a1 * a5\n\
    \            val b6 = b1 * b5\n            val c6 = c1 * c6\n            val a7\
    \ = a1 * a6\n            val b7 = b1 * b6\n            val c7 = c1 * c7\n    \
    \        val a8 = a1 * a7\n            val b8 = b1 * b7\n            val c8 =\
    \ c1 * c8\n            val a9 = a1 * a8\n            val b9 = b1 * b8\n      \
    \      val c9 = c1 * c9\n            val a10 = a1 * a9\n            val b10 =\
    \ b1 * b9\n            val c10 = c1 * c10\n            val a11 = a1 * a10\n  \
    \          val b11 = b1 * b10\n            val c11 = c1 * c11\n            val\
    \ a12 = a1 * a11\n            val b12 = b1 * b11\n            val c12 = c1 * c12\n\
    \            val a13 = a1 * a12\n            val b13 = b1 * b12\n            val\
    \ c13 = c1 * c13\n            val a14 = a1 * a13\n            val b14 = b1 * b13\n\
    \            val c14 = c1 * c14\n            val a15 = a1 * a14\n            val\
    \ b15 = b1 * b14\n            val c15 = c1 * c15\n            val a16 = a1 * a15\n\
    \            val b16 = b1 * b15\n            val c16 = c1 * c16\n            val\
    \ a17 = a1 * a16\n            val b17 = b1 * b16\n            val c17 = c1 * c17\n\
    \            val a18 = a1 * a17\n            val b18 = b1 * b17\n            val\
    \ c18 = c1 * c18\n            val a19 = a1 * a18\n            val b19 = b1 * b18\n\
    \            val c19 = c1 * c19\n            val a20 = a1 * a19\n            val\
    \ b20 = b1 * b19\n            val c20 = c1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuh94rz1h.scala:89:0 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuh94rz1h.scala:29:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mc5\e[0m = c1 * c5\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc5\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuh94rz1h.scala:32:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e\
    [0m \e[36mc6\e[0m = c1 * c6\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc6\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuh94rz1h.scala:35:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36mc7\e[0m = c1 * c7\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc7\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuh94rz1h.scala:38:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e\
    [0m \e[36mc8\e[0m = c1 * c8\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc8\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuh94rz1h.scala:41:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e\
    [0m \e[36mc9\e[0m = c1 * c9\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc9\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer exp"
  stdout: ''
  timestamp: 1659805173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        val isTriangle\
    \ = (sum > sides.last)\n        if (isTriangle) {\n            val area = sides.reduce((a,b)\
    \ => a*b)\n            (area / sides.last).toFloat\n        } else {\n       \
    \     -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1dnsxn8q.scala:24)\n\tat Problem.main(tmp1dnsxn8q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b + c) / 2.0\n        val a2 = Math.sqrt((Math.pow(a, 2.0)\
    \ + Math.pow(b, 2.0) + Math.pow(c, 2.0))) / 2.0\n        val a3 = Math.sqrt((Math.pow(a,\
    \ 2.0) + Math.pow(b, 2.0) + Math.pow(c, 2.0))) / 2.0\n        val b1 = (a + b\
    \ + c) / 2.0\n        val b2 = Math.sqrt((Math.pow(a, 2.0) + Math.pow(b, 2.0)\
    \ + Math.pow(c, 2.0))) / 2.0\n        val b3 = Math.sqrt((Math.pow(a, 2.0) + Math.pow(b,\
    \ 2.0) + Math.pow(c, 2.0))) / 2.0\n        val c1 = (a + b + c) / 2.0\n      \
    \  val c2 = Math.sqrt((Math.pow(a, 2.0) + Math.pow(b, 2.0) + Math.pow(c, 2.0)))\
    \ / 2.0\n        val c3 = Math.sqrt((Math.pow(a, 2.0) + Math.pow(b, 2.0) + Math.pow(c,\
    \ 2.0))) / 2.0\n        val area1 = a1 * a1 + b1 * b1 + c1 * c1\n        val area2\
    \ = a2 * a2 + b2 * b2 + c2 * c2\n        val area3 = a3 * a3 + b3 * b3 + c3 *\
    \ c3\n        if (area1 + area2 + area3 > 0)\n            area1.toFloat / Math.sqrt(area1\
    \ + area2 + area3)\n        else\n            -1.0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wfd6nk1.scala:26:12\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            area1.toFloat / Math.sqrt(area1\
    \ + area2 + area3)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m   |\e[0m            Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a * a)\n        val b = Math.sqrt(b * b * b)\n\
    \        val c = Math.sqrt(c * c * c)\n        val s = (a + b + c) / 2\n     \
    \   if (s > 0) {\n            val area = s * (s - a) * (s - b) * (s - c)\n   \
    \         area\n        } else {\n            -1.0\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu_zp0g8_.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a\
    \ * a)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m\
    \                          Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu_zp0g8_.scala:14:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = Math.sqrt(b * b * b)\n\e[31m\e[31m   |\e[0m                 \
    \         ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpu_zp0g8_.scala:15:26 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c * c)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu_zp0g8_.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val d = math.abs(b\
    \ - c)\n            val area = math.pow(a, d) / 2\n            area\n        }\
    \ else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdksgqwm1.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdksgqwm1.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdksgqwm1.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdksgqwm1.scala:20:12 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n\
    \            val area = s * (s - a) * (s - b) * (s - c)\n            area / 2\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp16t_gvvg.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp16t_gvvg.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp16t_gvvg.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp16t_gvvg.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805174
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + b * c)\n \
    \       val side3 = math.sqrt(side1 * side1 + a * a + b * b)\n        val isValid\
    \ = side1 + side2 > side3\n        val rounded = if (isValid) area * 100f / side3\
    \ else -1\n        rounded.toFloat\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnnvtzgsr.scala:22)\n\tat Problem.main(tmpnnvtzgsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7) - (a9 * b6) + (a9 * b5)\
    \ - (a9 * b4) + (a9 * b3) - (a9 * b2) - (a9 * b1) - (a9 * b0) - (a9 * c0) + (a9\
    \ * c1) + (a9 * c2) + (a9 * c3) + (a9 * c4) + (a9 * c5) + (a9 * c6) + (a9 * c7)\
    \ + (a9 * c8) + (a9 * c9) == 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo58e1vy4.scala:40:134 -----------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7)\
    \ - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) - (a9 * b1) - (a9\
    \ * b0) - (a9 * c0) + (a9 * c1) + (a9 * c2) + (a9 * c3) + (a9 * c4) + (a9 * c5)\
    \ + (a9 * c6) + (a9 * c7) + (a9 * c8) + (a9 * c9) == \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                   ^^\e[0m\n\e\
    [31m   |\e[0m                                                           Not found:\
    \ b0\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * a * a + sum * b * b + sum * c * c)\n            (area / 2).toFloat\n     \
    \   } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5itnvel.scala:22)\n\tat Problem.main(tmpp5itnvel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * sum / 2)\n            area\n        } else {\n            -1.0\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydrxymrp.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val isValid = a > 0 && b > 0 && c\
    \ > 0\n        if (isValid) {\n            val side1 = math.sqrt(a * a + b * b)\n\
    \            val side2 = math.sqrt(c * c + d * d)\n            val side3 = math.sqrt(a\
    \ * a + c * c)\n            val side4 = math.sqrt(b * b + d * d)\n           \
    \ val area1 = side1 * side1\n            val area2 = side2 * side2\n         \
    \   val area3 = side3 * side3\n            val area4 = side4 * side4\n       \
    \     val areaSum = area1 + area2 + area3 + area4\n            val roundedArea\
    \ = areaSum.toFloat / 2\n            val roundedAreaFloat = roundedArea.toFloat\n\
    \            if (roundedAreaFloat == areaSum) {\n                roundedAreaFloat\n\
    \            } else {\n                -1\n            }\n        } else {\n \
    \           -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzhxiror.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          Not found:\
    \ d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzhxiror.scala:19:42\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mside4\e[0m = math.sqrt(b * b + d * d)\n\e[31m\e[31m   |\e[0m         \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                      Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c) \n            -1\n        else \n            (a * b) /\
    \ Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1gc9jv_.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            (a * b) / Math.sqrt(Math.pow(a,\
    \ \e[31m2\e[0m) + Math.pow(b, \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 =\
    \ math.abs(c)\n        val sum = math.abs(a1 + b1 + c1)\n        if (sum > c1)\
    \ {\n            return -1\n        }\n        val a2 = math.abs(a1 - b1)\n  \
    \      val b2 = math.abs(b1 - c1)\n        val c2 = math.abs(c1 - a1)\n      \
    \  val sum = math.abs(a2 + b2 + c2)\n        if (sum > b2) {\n            return\
    \ -1\n        }\n        val a3 = math.abs(a2 - b2)\n        val b3 = math.abs(b2\
    \ - c2)\n        val c3 = math.abs(c2 - a2)\n        val sum = math.abs(a3 + b3\
    \ + c3)\n        if (sum > a3) {\n            return -1\n        }\n        val\
    \ a4 = math.abs(a3 - b3)\n        val b4 = math.abs(b3 - c3)\n        val c4 =\
    \ math.abs(c3 - a3)\n        val sum = math.abs(a4 + b4 + c4)\n        if (sum\
    \ > a4) {\n            return -1\n        }\n        val a5 = math.abs(a4 - b4)\n\
    \        val b5 = math.abs(b4 - c4)\n        val c5 = math.abs(c4 - a4)\n    \
    \    val sum = math.abs(a5 + b5 + c5)\n        if (sum > a5) {\n            return\
    \ -1\n        }\n        val a6 = math.abs(a5 - b5)\n        val b6 = math.abs(b5\
    \ - c5)\n        val c6 = math.abs(c5 - a5)\n        val sum = math.abs(a6 + b6\
    \ + c6)\n        if (sum > a6) {\n            return -1\n        }\n        val\
    \ a7 = math.abs(a6 - b6)\n        val b7 = math.abs(b6 - c6)\n        val c7 =\
    \ math.abs(c6 - a6)\n        val sum = math.abs(a7 + b7 + c7)\n        if (sum\
    \ > a7) {\n            return -1\n        }\n        val a8 = math.abs(a7 - b7)\n\
    \        val b8 = math.abs(b7 - c7)\n        val c8 = math.abs(c7 - a7)\n    \
    \    val sum = math.abs(a8 + b8 + c8)\n        if (sum > a8) {\n            return\
    \ -1\n        }\n        val a9 = math.abs(a8 - b8)\n        val b9 = math.abs(b8\
    \ - c8)\n        val c9 = math.abs(c8 - a8)\n        val sum = math.abs(a9 + b9\
    \ + c9)\n        if (sum > a9) {\n            return -1\n        }\n        val\
    \ a10 = math.abs(a9 - b9)\n        val b10 = math.abs(b9 - \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprf1i15r5.scala:77:31 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        \e[33mval\e[0m \e[36mb10\e[0m = math.abs(b9 -\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprf1i15r5.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msum\e[0m = math.abs(a2 + b2 + c2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprf1i15r5.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = math.abs(a3 + b3 + c3)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprf1i15r5.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36msum\e[0m = math.abs(a4 + b4 + c4)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprf1i15r5.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = math.abs(a5 + b5 + c5)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of "
  stdout: ''
  timestamp: 1659805177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a + b\n        val a2 = a + c\n        val b2 = b + c\n    \
    \    val a3 = a1 + a2\n        val b3 = b1 + b2\n        val c3 = c1 + c2\n  \
    \      val a4 = a1 + b2 + c3\n        val b4 = b1 + c2 + a3\n        val c4 =\
    \ c1 + a2 + b3\n        val a5 = a1 + b2 + c2 + a3\n        val b5 = b1 + c2 +\
    \ a3 + b4\n        val c5 = c1 + a2 + b3 + c4\n        val a6 = a1 + b2 + c2 +\
    \ a3 + b4 + c5\n        val b6 = b1 + c2 + a3 + b4 + c5 + a6\n        val c6 =\
    \ c1 + a2 + b3 + c4 + a5 + b6\n        val a7 = a1 + b2 + c2 + a3 + b4 + c5 +\
    \ a6 + a7\n        val b7 = b1 + c2 + a3 + b4 + c5 + a6 + a7 + b7\n        val\
    \ c7 = c1 + a2 + b3 + c4 + a5 + b6 + a7 + b7\n        val a8 = a + b + c\n   \
    \     val b8 = b + c + a\n        val c8 = c + a + b\n        val a9 = a1 + b2\
    \ + c3\n        val b9 = b1 + c2 + a3\n        val c9 = c1 + a2 + b3\n       \
    \ val a10 = a1 + b2 + c3 + a4\n        val b10 = b1 + c2 + a3 + b4\n        val\
    \ c10 = c1 + a2 + b3 + c4\n        val a11 = a1 + b2 + c3 + a4 + a5\n        val\
    \ b11 = b1 + c2 + a3 + b4 + b5\n        val c11 = c1 + a2 + b3 + c4 + c6\n   \
    \     val a12 = a1 + b2 + c3 + a4 + a5 + a6\n        val b12 = b1 + c2 + a3 +\
    \ b4 + b5 + b7\n        val c12 = c1 + a2 + b3 + c4 + c5 + c6\n        val a13\
    \ = a1 + b2 + c3 + a4 + a5 + a6 + a7\n        val b13 = b1 + c2 + a3 + b4 + b5\
    \ + b7 + b8\n        val c13 = c1 + a2 + b3 + c4 + c5 + c6 + c7\n        val a14\
    \ = a1 + b2 + c3 + a4 + a5 + a6 + a7 + a8\n        val b14 = b1 + c2 + a3 + b4\
    \ + b5 + b7 + b8 + b9\n        val c14 = c1 + a2 + b3 + c4 + c5 + c6 + c7 + c8\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_vhq_af.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_vhq_af.scala:18:17\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mc3\e[0m = c1 + c2\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf_vhq_af.scala:20:17 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b1 + c2 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_vhq_af.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mc4\e[0m = c1 + a2 + b3\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e\
    [31m   |\e[0m                 Not found: c1\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf_vhq_af.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36ma5\e[0m = a1 + b2 + c2 +\
    \ a3\n\e[31m\e[31m   |\e[0m                           ^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf_vhq_af.scala:23:17 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b1 + c2 + a3 + b4\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not "
  stdout: ''
  timestamp: 1659805177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        val a11 = a10 + b10\n        val b11 = b10 + c10\n        val c11\
    \ = c10 + a10\n        val a12 = a11 + b11\n        val b12 = b11 + c11\n    \
    \    val c12 = c11 + a11\n        val a13 = a12 + b12\n        val b13 = b12 +\
    \ c12\n        val c13 = c12 + a12\n        val a14 = a13 + b13\n        val b14\
    \ = b13 + c13\n        val c14 = c13 + a13\n        val a15 = a14 + b14\n    \
    \    val b15 = b14 + c14\n        val c15 = c14 + a14\n        val a16 = a15 +\
    \ b15\n        val b16 = b15 + c15\n        val c16 = c15 + a15\n        val a17\
    \ = a16 + b16\n        val b17 = b16 + c16\n        val c17 = c16 + a16\n    \
    \    val a18 = a17 + b17\n        val b18 = b17 + c17\n        val c18 = c17 +\
    \ a17\n        val a19 = a18 + b18\n        val b19 = b18 + c18\n        val c19\
    \ = c18 + a18\n        val a20 = a19 + b19\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp_ds91sh.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b2 + c3 >= a2 + b3 + c4 && a1 + b2 + c3 >= a3 + b2 + c5 && a1 +\
    \ b2 + c3 >= a4 + b3 + c5 && a1 + b2 + c3 >= a5 + b2 + c6 && a1 + b2 + c3 >= a6\
    \ + b2 + c7 && a1 + b2 + c3 >= a7 + b2 + c7 && a1 + b2 + c3 >= a2 + b3 + c4 &&\
    \ a1 + b2 + c3 >= a3 + b3 + c5 && a1 + b2 + c3 >= a4 + b3 + c5 && a1 + b2 + c3\
    \ >= a5 + b3 + c6 && a1 + b2 + c3 >= a6 + b3 + c7 && a1 + b2 + c3 >= a7 + b3 +\
    \ c7 && a1 + b2 + c3 >= a2 + b3 + c4 && a1 + b2 + c3 >= a3 + b3 + c5 && a1 + b2\
    \ + c3 >= a4 + b3 + c5 && a1 + b2 + c3 >= a5 + b3 + c6 && a1 + b2 + c3 >= a6 +\
    \ b3 + c7 && a1 + b2 + c3 >= a7 + b3 + c7 && a1 + b2 + c3 >= a2 + b3 + c4 && a1\
    \ + b2 + c3 >= a3 + b3 + c5 && a1 + b2 + c3 >= a4 + b3 + c5 && a1 + b2 + c3 >=\
    \ a5 + b3 + c6 && a1 + b2 + c3 >= a6 + b3 + c7 && a1 + b2 + c3 >= a7 + b3 + c7\
    \ && a1 + b2 + c3 >= a2 + b3 + c4 && a1 + b2 + c3 >= a3 + b3 + c5 && a1 + b2 +\
    \ c\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsl52h83b.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsl52h83b.scala:34:841 -------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \        (a1 + b2 + c3 >= a2 + b3 + c4 && a1 + b2 + c3 >= a3 + b2 + c5 && a1 +\
    \ b2 + c3 >= a4 + b3 + c5 && a1 + b2 + c3 >= a5 + b2 + c6 && a1 + b2 + c3 >= a6\
    \ + b2 + c7 && a1 + b2 + c3 >= a7 + b2 + c7 && a1 + b2 + c3 >= a2 + b3 + c4 &&\
    \ a1 + b2 + c3 >= a3 + b3 + c5 && a1 + b2 + c3 >= a4 + b3 + c5 && a1 + b2 + c3\
    \ >= a5 + b3 + c6 && a1 + b2 + c3 >= a6 + b3 + c7 && a1 + b2 + c3 >= a7 + b3 +\
    \ c7 && a1 + b2 + c3 >= a2 + b3 + c4 && a1 + b2 + c3 >= a3 + b3 + c5 && a1 + b2\
    \ + c3 >= a4 + b3 + c5 && a1 + b2 + c3 >= a5 + b3 + c6 && a1 + b2 + c3 >= a6 +\
    \ b3 + c7 && a1 + b2 + c3 >= a7 + b3 + c7 && a1 + b2 + c3 >= a2 + b3 + c4 && a1\
    \ + b2 + c3 >= a3 + b3 + c5 && a1 + b2 + c3 >= a4 + b3 + c5 && a1 + b2 + c3 >=\
    \ a5 + b3 + c6 && a1 + b2 + c3 >= a6 + b3 + c7 && a1 + b2 + c3 >= a7 + b3 + c7\
    \ && a1 + b2 + c3 >= a2 + b3 + c4 && a1 + b2 + c3 >= a3 + b3 + c5 && a1 + b2 +\
    \ c\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659805176
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a + b\n        val a2 = a + c\n        val b1 = b + c\n    \
    \    val b2 = b + a\n        val c1 = c + a\n        val c2 = c + b\n        val\
    \ d1 = b2 - b1\n        val d2 = c2 - c1\n        val d3 = a2 - a1\n        val\
    \ area = if (d1 > 0 && d2 > 0 && d3 > 0) (d1 + d2 + d3) / 2 else -1\n        area\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeb0forau.scala:26)\n\tat Problem.main(tmpeb0forau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a1 + c1\n        val b3 = b1 + a2\n        val c3 = c1 + b1\n\
    \        val a4 = a2 + b2\n        val b4 = b2 + c3\n        val c4 = c2 + b2\n\
    \        val a5 = a2 + c3\n        val b5 = b2 + a4\n        val c5 = c2 + b3\n\
    \        val a6 = a3 + b4\n        val b6 = b3 + c5\n        val c6 = c3 + b6\n\
    \        val a7 = a3 + c5\n        val b7 = b3 + a6\n        val c7 = c3 + b5\n\
    \        val a8 = a4 + b6\n        val b8 = b4 + c7\n        val c8 = c4 + b6\n\
    \        val a9 = a4 + c7\n        val b9 = b4 + a9\n        val c9 = c4 + b5\n\
    \        val a10 = a5 + b6\n        val b10 = b5 + c9\n        val c10 = c5 +\
    \ b6\n        val a11 = a5 + c9\n        val b11 = b5 + a11\n        val c11 =\
    \ c5 + b5\n        val a12 = a6 + b6\n        val b12 = b6 + c11\n        val\
    \ c12 = c6 + b6\n        val a13 = a6 + c11\n        val b13 = b6 + a13\n    \
    \    val c13 = c6 + b6\n        val a14 = a7 + b7\n        val b14 = b7 + c13\n\
    \        val c14 = c7 + b7\n        val a15 = a7 + c13\n        val b15 = b7 +\
    \ a15\n        val c15 = c7 + b7\n        val a16 = a8 + b8\n        val b16 =\
    \ b8 + c14\n        val c16 = c8 + b8\n        val a17 = a8 + c14\n        val\
    \ b17 = b8 + a17\n        val c17 = c8 + b8\n        val a18 = a9 + b9\n     \
    \   val b18 = b9 + c15\n        val c18 = c9 + b9\n        val a19 = a9 + c15\n\
    \        val b19 = b9 + a19\n        val c19 = c9 + b9\n        val a20 = a10\
    \ + b10\n        val b20 = b10 + c16\n        val c20 = c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ze7v6ym.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + c * c)\n \
    \       val side3 = math.sqrt(side2 * side2 + a * a + b * b)\n        val isValid\
    \ = side1 + side2 > side3\n        val rounded = if (isValid) area / side3 else\
    \ -1\n        rounded.toFloat\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97eie1ot.scala:22)\n\tat Problem.main(tmp97eie1ot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 =\
    \ math.abs(c)\n        val sum = a1 + b1 + c1\n        if (sum > c1) {\n     \
    \       val a2 = math.abs(a1 - b1)\n            val b2 = math.abs(b1 - c1)\n \
    \           val c2 = math.abs(c1 - a1)\n            val sum = a2 + b2 + c2\n \
    \           if (sum > b2) {\n                val a3 = math.abs(a1 - b1 - c1)\n\
    \                val b3 = math.abs(b1 - c1 - a1)\n                val c3 = math.abs(c1\
    \ - a1 - b1)\n                val sum = a3 + b3 + c3\n                if (sum\
    \ > a2) {\n                    val a4 = math.abs(a1 - b1 - c1 - a1)\n        \
    \            val b4 = math.abs(b1 - c1 - a1 - b1)\n                    val c4\
    \ = math.abs(c1 - a1 - b1 - c1)\n                    val sum = a4 + b4 + c4\n\
    \                    if (sum > 0) {\n                        val a5 = math.abs(a1\
    \ - b1 - c1 - a1 - b1 - c1 - a1)\n                        val b5 = math.abs(b1\
    \ - c1 - a1 - b1 - c1 - a1 - b1)\n                        val c5 = math.abs(c1\
    \ - a1 - b1 - c1 - a1 - b1 - c1)\n                        val sum = a5 + b5 +\
    \ c5\n                        if (sum > 0) {\n                            val\
    \ a6 = math.abs(a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1)\n           \
    \                 val b6 = math.abs(b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1\
    \ - b1)\n                            val c6 = math.abs(c1 - a1 - b1 - c1 - a1\
    \ - b1 - c1 - a1 - b1 - c1 - a1)\n                            val sum = a6 + b6\
    \ + c6\n                            if (sum > 0) {\n                         \
    \       val a7 = math.abs(a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1\
    \ - c1 - a1 - b1 - c1 - a1)\n                                val b7 = math.abs(b1\
    \ - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 -\
    \ c1 - a1)\n                                val c7 = math.abs(c1 - a1 - b1 - c1\
    \ - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 - a1 - b1 - c1 -\
    \ a1 - b1 - c1 - a1 - b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptlkmickj.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptlkmickj.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmptlkmickj.scala:47:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        (a9 * b9) - (a8 * b8) - (a7 * b7) + (a6 * b6) + (a5 * b5) + (a4 * b4)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzl2n0z6.scala:40:8\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m        (a9 * b9) - (a8 * b8)\
    \ - (a7 * b7) + (a6 * b6) + (a5 * b5) + (a4 * b4)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val ab = b - a\n        val ac = c - a\n        val bc = b - c\n    \
    \    val abc = ab + ac\n        if (abc > 0) abc else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyf6clj3x.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyf6clj3x.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyf6clj3x.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805177
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + c * c)\n \
    \       val side3 = math.sqrt(side2 * side2 + a * a + b * b)\n        val area2\
    \ = side1 * side2 * side3\n        area2 match {\n            case x if x < 0.001\
    \ => area\n            case x if x > 1 => -1\n            case _ => area\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp609pjejr.scala:25)\n\tat Problem.main(tmp609pjejr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805182
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val a4 = (a1 + a2 + a3) / 2\n        val b1 = (b + c) /\
    \ 2\n        val b2 = (b + a) / 2\n        val b3 = (c + a) / 2\n        val b4\
    \ = (b1 + b2 + b3) / 2\n        val c1 = (c + b) / 2\n        val c2 = (b + c)\
    \ / 2\n        val c3 = (a + c) / 2\n        val c4 = (a1 + a2 + a3) / 2\n   \
    \     val d1 = (b1 + c) / 2\n        val d2 = (b2 + a) / 2\n        val d3 = (b3\
    \ + a) / 2\n        val d4 = (b1 + b2 + b3) / 2\n        val e1 = (b1 + b2 + b3)\
    \ / 2\n        val e2 = (b1 + b2 + c1) / 2\n        val e3 = (b1 + b2 + c2) /\
    \ 2\n        val e4 = (b1 + b2 + c3) / 2\n        val f1 = (b1 + b2 + c3) / 2\n\
    \        val f2 = (b1 + b2 + c4) / 2\n        val f3 = (b1 + b2 + c4) / 2\n  \
    \      val f4 = (b1 + b3 + c4) / 2\n        val g1 = (b1 + b3 + c4) / 2\n    \
    \    val g2 = (b1 + b3 + d1) / 2\n        val g3 = (b1 + b3 + d2) / 2\n      \
    \  val g4 = (b1 + b3 + d3) / 2\n        val h1 = (b1 + b3 + d3) / 2\n        val\
    \ h2 = (b1 + b3 + d4) / 2\n        val h3 = (b1 + b3 + e4) / 2\n        val h4\
    \ = (b1 + b3 + f4) / 2\n        val i1 = (b1 + b3 + f4) / 2\n        val i2 =\
    \ (b1 + b3 + g4) / 2\n        val i3 = (b1 + b3 + h4) / 2\n        val i4 = (b1\
    \ + b3 + i4) / 2\n        val j1 = (b1 + b3 + i4) / 2\n        val j2 = (b1 +\
    \ b3 + h4) / 2\n        val j3 = (b1 + b3 + g4) / 2\n        val j4 = (b1 + b3\
    \ + f4) / 2\n        val k1 = (b1 + b3 + f4) / 2\n        val k2 = (b1 + b3 +\
    \ e3) / 2\n        val k3 = (b1 + b3 + e2) / 2\n        val k4 = (b1 + b3 + d1)\
    \ / 2\n        val l1 = (b1 + b3 + d1) / 2\n        val l2 = (b1 + b3 + c2) /\
    \ 2\n        val l3 = (b1 + b3 + c3) / 2\n        val l4 = (b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpevrups9d.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpevrups9d.scala:48:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mi4\e[0m = (b1 + b3 + i4) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                     ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35mi4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpevrups9d.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805182
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sumSides = sides.sum\n       \
    \ val isValid = sumSides > sides.last\n        if (isValid) {\n            val\
    \ area = sides.map(x => x * x).sum\n            val rounded = area.toString.replaceAll(\"\
    \\\\.[0-9]*$\", \"\")\n            val roundedFloat = rounded.toFloat\n      \
    \      roundedFloat\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00mzl6lp.scala:26)\n\tat Problem.main(tmp00mzl6lp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val a4 = (a1 + a2 + a3) / 2\n        val a5 = (a2 + a3\
    \ + a4) / 2\n        val a6 = (a3 + a4 + a5) / 2\n        val a7 = (a4 + a5 +\
    \ a6) / 2\n        val a8 = (a5 + a6 + a7) / 2\n        val a9 = (a6 + a7 + a8)\
    \ / 2\n        val a10 = (a7 + a8 + a9) / 2\n        val a11 = (a8 + a9 + a10)\
    \ / 2\n        val a12 = (a9 + a10 + a11) / 2\n        val a13 = (a10 + a11 +\
    \ a12) / 2\n        val a14 = (a11 + a12 + a13) / 2\n        val a15 = (a12 +\
    \ a13 + a14) / 2\n        val a16 = (a13 + a14 + a15) / 2\n        val a17 = (a14\
    \ + a15 + a16) / 2\n        val a18 = (a15 + a16 + a17) / 2\n        val a19 =\
    \ (a16 + a17 + a18) / 2\n        val a20 = (a17 + a18 + a19) / 2\n        val\
    \ a21 = (a18 + a19 + a20) / 2\n        val a22 = (a19 + a20 + a21) / 2\n     \
    \   val a23 = (a20 + a21 + a22) / 2\n        val a24 = (a21 + a22 + a23) / 2\n\
    \        val a25 = (a22 + a23 + a24) / 2\n        val a26 = (a23 + a24 + a25)\
    \ / 2\n        val a27 = (a24 + a25 + a26) / 2\n        val a28 = (a25 + a26 +\
    \ a27) / 2\n        val a29 = (a26 + a27 + a28) / 2\n        val a30 = (a27 +\
    \ a28 + a29) / 2\n        val a31 = (a28 + a29 + a30) / 2\n        val a32 = (a29\
    \ + a30 + a31) / 2\n        val a33 = (a30 + a31 + a32) / 2\n        val a34 =\
    \ (a31 + a32 + a33) / 2\n        val a35 = (a32 + a33 + a34) / 2\n        val\
    \ a36 = (a33 + a34 + a35) / 2\n        val a37 = (a34 + a35 + a36) / 2\n     \
    \   val a38 = (a35 + a36 + a37) / 2\n        val a39 = (a36 + a37 + a38) / 2\n\
    \        val a40 = (a37 + a38 + a39) / 2\n        val a41 = (a38 + a39 + a40)\
    \ / 2\n        val a42 = (a39 + a40 + a41) / 2\n        val a43 = (a40 + a41 +\
    \ a42) / 2\n        val a44 = (a41 + a42 + a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyfw7ga78.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyfw7ga78.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val triangleArea = a*b*c\n        val validTriangleSides = a + b + c\
    \ > 0\n        if (validTriangleSides) {\n            val validTriangleArea =\
    \ triangleArea/3\n            val roundedTriangleArea = Math.round(validTriangleArea*100)/100\n\
    \            if (roundedTriangleArea == validTriangleArea) {\n               \
    \ roundedTriangleArea\n            } else {\n                -1\n            }\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuglbrbcv.scala:28)\n\tat Problem.main(tmpuglbrbcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a + b * b + c * c)\n        val b = Math.sqrt(a\
    \ * a + b * b + c * c)\n        val c = Math.sqrt(a * a + b * b + c * c)\n   \
    \     val d = Math.sqrt(a * a + b * b + c * c)\n        val area = (a + b + c)\
    \ / 2.0\n        val area1 = (a + b + d) / 2.0\n        val area2 = (a + c + d)\
    \ / 2.0\n        val area3 = (a + b + c) / 2.0\n        val area4 = (a + c + d)\
    \ / 2.0\n        val area5 = (a + b + d) / 2.0\n        val area6 = (a + c + d)\
    \ / 2.0\n        val area7 = (a + b + c) / 2.0\n        val area8 = (a + c + d)\
    \ / 2.0\n        val area9 = (a + b + d) / 2.0\n        val area10 = (a + c +\
    \ d) / 2.0\n        val area11 = (a + b + c) / 2.0\n        val area12 = (a +\
    \ c + d) / 2.0\n        val area13 = (a + b + d) / 2.0\n        val area14 = (a\
    \ + c + d) / 2.0\n        val area15 = (a + b + c) / 2.0\n        val area16 =\
    \ (a + c + d) / 2.0\n        val area17 = (a + b + d) / 2.0\n        val area18\
    \ = (a + c + d) / 2.0\n        val area19 = (a + b + c) / 2.0\n        val area20\
    \ = (a + c + d) / 2.0\n        val area21 = (a + b + d) / 2.0\n        val area22\
    \ = (a + c + d) / 2.0\n        val area23 = (a + b + c) / 2.0\n        val area24\
    \ = (a + c + d) / 2.0\n        val area25 = (a + b + d) / 2.0\n        val area26\
    \ = (a + c + d) / 2.0\n        val area27 = (a + b + c) / 2.0\n        val area28\
    \ = (a + c + d) / 2.0\n        val area29 = (a + b + d) / 2.0\n        val area30\
    \ = (a + c + d) / 2.0\n        val area31 = (a + b + c) / 2.0\n        val area32\
    \ = (a + c + d) / 2.0\n        val area33 = (a + b + d) / 2.0\n        val area34\
    \ = (a + c + d) / 2.0\n        val area35 = (a + b + c) / 2.0\n        val area36\
    \ = (a + c + d) / 2.0\n        val area37 = (a + b + d) / 2.0\n        val area38\
    \ = (a + c + d) / 2.0\n        val area\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsbux5oj7.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsbux5oj7.scala:13:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma\e[0m = Math.sqrt(a * a + b * b + c * c)\n\e[31m\e[31m   |\e[0m     \
    \                     ^\e[0m\n\e[31m   |\e[0m                          Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpsbux5oj7.scala:14:34 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(a * a + b\
    \ * b + c * c)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\
    \e[31m   |\e[0m                                  Recursive \e[33mvalue\e[0m \e\
    [35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsbux5oj7.scala:15:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc\e[0m = Math.sqrt(a * a + b * b + c * c)\n\e[31m\e[31m   |\e[0m     \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                          Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbux5oj7.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659805184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.round(a\
    \ * c / sum * 100) / 100\n            return area\n        } else {\n        \
    \    return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvgrbh12g.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvgrbh12g.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvgrbh12g.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val ab = a + b\n        val bc = b + c\n        val ac = a + c\n    \
    \    if (ab > bc && ab > ac) {\n            val sum = ab\n            val a1 =\
    \ a - b\n            val a2 = a - c\n            val a3 = a + c\n            val\
    \ b1 = b - c\n            val b2 = b - a\n            val b3 = b + a\n       \
    \     val c1 = c - a\n            val c2 = c - b\n            val c3 = c + b\n\
    \            val a4 = a * b\n            val b4 = b * c\n            val c4 =\
    \ c * a\n            val a5 = a * c\n            val b5 = b * c\n            val\
    \ c5 = c * a\n            val a6 = a * b\n            val b6 = b * c\n       \
    \     val c6 = c * a\n            val a7 = a * c\n            val b7 = b * c\n\
    \            val c7 = c * a\n            val a8 = a * b\n            val b8 =\
    \ b * c\n            val c8 = c * a\n            val a9 = a * c\n            val\
    \ b9 = b * c\n            val c9 = c * a\n            val a10 = a * b\n      \
    \      val b10 = b * c\n            val c10 = c * a\n            val a11 = a *\
    \ c\n            val b11 = b * c\n            val c11 = c * a\n            val\
    \ a12 = a * b\n            val b12 = b * c\n            val c12 = c * a\n    \
    \        val a13 = a * c\n            val b13 = b * c\n            val c13 = c\
    \ * a\n            val a14 = a * b\n            val b14 = b * c\n            val\
    \ c14 = c * a\n            val a15 = a * c\n            val b15 = b * c\n    \
    \        val c15 = c * a\n            val a16 = a * b\n            val b16 = b\
    \ * c\n            val c16 = c * a\n            val a17 = a * c\n            val\
    \ b17 = b * c\n            val c17 = c * a\n            val a18 = a * b\n    \
    \        val b18 = b * c\n            val c18 = c * a\n            val a19 = a\
    \ * c\n            val b19 = b * c\n            val c19 = c * a\n            val\
    \ a20 = a * b\n            val b20 = b * c\n            val c20 = c * a\n    \
    \        val a21 = a * c\n            val b21 = b * c\n            val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjwa99bel.scala:83:15 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjwa99bel.scala:98:0 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjwa99bel.scala:13:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma\e[0m = Math.abs(a)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35ma\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjwa99bel.scala:14:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = Math.abs(b)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mb\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjwa99bel.scala:15:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc\e[0m = Math.abs(c)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mc\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjwa99bel.scala:97:1\
    \ ---------------------\e[0m\e[0m\n\e[31m97 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpjwa99bel.scala:85:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m85 |\e[0m    \e[33mdef\e[0m \e[36m"
  stdout: ''
  timestamp: 1659805185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val\
    \ bc = math.abs(b - c)\n        val abc = math.min(ab, ac, bc)\n        val abc_ab\
    \ = math.abs(abc - ab)\n        val abc_ac = math.abs(abc - ac)\n        val abc_bc\
    \ = math.abs(abc - bc)\n        val abc_abc = math.min(abc_ab, abc_ac, abc_bc)\n\
    \        val abc_abc_ab = math.abs(abc_abc - abc_ab)\n        val abc_abc_ac =\
    \ math.abs(abc_abc - abc_ac)\n        val abc_abc_bc = math.abs(abc_abc - abc_bc)\n\
    \        val abc_abc_abc = math.min(abc_abc_ab, abc_abc_ac, abc_abc_bc)\n    \
    \    val abc_abc_abc_ab = math.abs(abc_abc_abc - abc_abc_ab)\n        val abc_abc_abc_ac\
    \ = math.abs(abc_abc_abc - abc_abc_ac)\n        val abc_abc_abc_bc = math.abs(abc_abc_abc\
    \ - abc_abc_bc)\n        val abc_abc_abc_abc = math.min(abc_abc_abc_ab, abc_abc_abc_ac,\
    \ abc_abc_abc_bc)\n        val abc_abc_abc_abc_ab = math.abs(abc_abc_abc_abc -\
    \ abc_abc_abc_ab)\n        val abc_abc_abc_abc_ac = math.abs(abc_abc_abc_abc -\
    \ abc_abc_abc_ac)\n        val abc_abc_abc_abc_bc = math.abs(abc_abc_abc_abc -\
    \ abc_abc_abc_bc)\n        val abc_abc_abc_abc_abc = math.min(abc_abc_abc_abc_ab,\
    \ abc_abc_abc_abc_ac, abc_abc_abc_abc_bc)\n        val abc_abc_abc_abc_abc_ab\
    \ = math.abs(abc_abc_abc_abc_abc - abc_abc_abc_abc_ab)\n        val abc_abc_abc_abc_abc_ac\
    \ = math.abs(abc_abc_abc_abc_abc - abc_abc_abc_abc_ac)\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_de9uk76.scala:16:23 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = math.min(ab,\
    \ ac, bc)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in\
    \ \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double,\
    \ y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e\
    [0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m  \
    \ |\e[0mmatch arguments ((ab : Long), (ac : Long), (bc : Long))\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_de9uk76.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val side1 = math.sqrt(a * a + b * b + c * c)\n        val side2 = math.sqrt(a\
    \ * a + b * b + c * c)\n        val side3 = math.sqrt(a * a + b * b + c * c)\n\
    \        if (side1 + side2 > side3) {\n            val area = side1 * side2 *\
    \ side3\n            val rounded = area.toString.replaceAll(\"\\\\.\\\\d+$\",\
    \ \"\")\n            val rounded2 = rounded.toDouble\n            val rounded3\
    \ = rounded2.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded4\
    \ = rounded3.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded5\
    \ = rounded4.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded6\
    \ = rounded5.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded7\
    \ = rounded6.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded8\
    \ = rounded7.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded9\
    \ = rounded8.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded10\
    \ = rounded9.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded11\
    \ = rounded10.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded12\
    \ = rounded11.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded13\
    \ = rounded12.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded14\
    \ = rounded13.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded15\
    \ = rounded14.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded16\
    \ = rounded15.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded17\
    \ = rounded16.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded18\
    \ = rounded17.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded19\
    \ = rounded18.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded20\
    \ = rounded19.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded21\
    \ = rounded20.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded22\
    \ = rounded21.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded23\
    \ = rounded22.toString.replaceAll(\"\\\\.\\\\d+$\", \"\")\n            val rounded24\
    \ = rounded23.toString.\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjgkf1n1a.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpjgkf1n1a.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgkf1n1a.scala:55:1 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpjgkf1n1a.scala:43:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = a + b + c\n        if (s > 0) {\n    \
    \        val area = s * (s - a) * (s - b) * (s - c)\n            (area / Math.PI).round(2)\n\
    \        } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfvsgb8zj.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfvsgb8zj.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfvsgb8zj.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpfvsgb8zj.scala:19:29 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            (area / Math.PI).round(\e[31m2\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mclass\e[0m \e[35mRichDouble\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a4\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a5\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a6\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a7\n        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val\
    \ c8 = c7 + a8\n        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val\
    \ c9 = c8 + a9\n        val a10 = a9 + b9\n        val b10 = b9 + c9\n       \
    \ val c10 = c9 + a10\n        val a11 = a10 + b10\n        val b11 = b10 + c10\n\
    \        val c11 = c110 + a11\n        val a12 = a11 + b11\n        val b12 =\
    \ b11 + c11\n        val c12 = c11 + a12\n        val a13 = a12 + b12\n      \
    \  val b13 = b12 + c12\n        val c13 = c12 + a13\n        val a14 = a13 + b13\n\
    \        val b14 = b13 + c13\n        val c14 = c13 + a14\n        val a15 = a14\
    \ + b14\n        val b15 = b14 + c14\n        val c15 = c14 + a15\n        val\
    \ a16 = a15 + b15\n        val b16 = b15 + c15\n        val c16 = c15 + a16\n\
    \        val a17 = a16 + b16\n        val b17 = b16 + c16\n        val c17 = c16\
    \ + a17\n        val a18 = a17 + b17\n        val b18 = b17 + c17\n        val\
    \ c18 = c17 + a18\n        val a19 = a18 + b18\n        val b19 = b18 + c18\n\
    \        val c19 = c18 + a19\n        val a20 = a19 + b19\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxjcxzb7s.scala:71:11 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjcxzb7s.scala:45:18 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mc11\e[0m = c110 + a11\n\e\
    [31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Not found: c110\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjcxzb7s.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805186
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch2dxabl.scala:37)\n\tat Problem.main(tmpch2dxabl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * a * a + sum * b * b + sum * c * c)\n            area / 2\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbmy5zq7c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            area / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + c * c)\n \
    \       val side3 = math.sqrt(side1 * side1 + b * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3x2nwzkc.scala:25)\n\tat Problem.main(tmp3x2nwzkc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (a2 + c) / 2\n        val b1 = (a + c) / 2\n        val b2 = (c + a) / 2\n \
    \       val b3 = (b2 + a) / 2\n        val c1 = (a + b) / 2\n        val c2 =\
    \ (b + a) / 2\n        val c3 = (c + a) / 2\n        val area1 = (a1 + b1 + c1)\n\
    \        val area2 = (a2 + b2 + c2)\n        val area3 = (a3 + b3 + c3)\n    \
    \    val area4 = (a1 + b2 + c3)\n        val area5 = (a2 + b3 + c1)\n        val\
    \ area6 = (b1 + c2 + a3)\n        val area7 = (b2 + c3 + a1)\n        val area8\
    \ = (b3 + c1 + a2)\n        val area9 = (c1 + a3 + b2)\n        val area10 = (c2\
    \ + a1 + b3)\n        val area11 = (c3 + a2 + b1)\n        val area12 = (b2 +\
    \ a3 + c1)\n        val area13 = (b3 + c1 + a2)\n        val area14 = (c1 + a3\
    \ + b2)\n        val area15 = (c2 + a1 + b3)\n        val area16 = (c3 + a2 +\
    \ b1)\n        val area17 = (b2 + a3 + c1)\n        val area18 = (b3 + c1 + a2)\n\
    \        val area19 = (c1 + a3 + b2)\n        val area20 = (c2 + a1 + b3)\n  \
    \      val area21 = (b2 + a3 + c1)\n        val area22 = (b3 + c1 + a2)\n    \
    \    val area23 = (c1 + a3 + b2)\n        val area24 = (c2 + a1 + b3)\n      \
    \  val area25 = (c3 + a2 + b1)\n        val area26 = (b2 + a3 + c1)\n        val\
    \ area27 = (b3 + c1 + a2)\n        val area28 = (c1 + a3 + b2)\n        val area29\
    \ = (c2 + a1 + b3)\n        val area30 = (c3 + a2 + b1)\n        val area31 =\
    \ (b2 + a3 + c1)\n        val area32 = (b3 + c1 + a2)\n        val area33 = (c1\
    \ + a3 + b2)\n        val area34 = (c2 + a1 + b3)\n        val area35 = (c3 +\
    \ a2 + b1)\n        val area36 = (b2 + a3 + c1)\n        val area37 = (b3 + c1\
    \ + a2)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s8pm_65.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = if (a + b > c) (a, b,\
    \ c) else (c, a, b)\n        val sum = sides.reduce((a, b) => a + b)\n       \
    \ if (sum > sides(2)) area else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxooy23cj.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sides.reduce((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value reduce is not a member of (Long, Long,\
    \ Long)\n1 error found\n"
  stdout: ''
  timestamp: 1659805187
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1)\n        val side3\
    \ = math.sqrt(side2 * side2)\n        val isValid = side1 + side2 > side3\n  \
    \      val rounded = if (isValid) area * 100f / side3 else -1\n        rounded.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnltwl4g6.scala:22)\n\tat Problem.main(tmpnltwl4g6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c).sorted\n        val sum = sides.sum\n     \
    \   val isTriangle = (sum > sides(2))\n        if (isTriangle) {\n           \
    \ val area = sides.sum * sides.sum / 2\n            (area / Math.PI).toFloat\n\
    \        } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplob8msvh.scala:24)\n\tat Problem.main(tmplob8msvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805190
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = a + b + c\n        if\
    \ (sides > 0) {\n            if (sides % 2 == 0) {\n                val s = sides\
    \ / 2\n                val area = s * s\n                area\n            } else\
    \ {\n                -1\n            }\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4goykdl2.scala:28)\n\tat Problem.main(tmp4goykdl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val isTriangle = (a + b > c) && (a\
    \ + c > b) && (b + c > a)\n        if (isTriangle) {\n            area\n     \
    \   } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpot69a784.scala:24)\n\tat Problem.main(tmpot69a784.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a + b * b + c * c)\n        val b = 2 * a + b\n\
    \        val c = 2 * a + c\n        val d = Math.sqrt(a * a + b * b + c * c)\n\
    \        val area = if (a > 0 && b > 0 && c > 0 && d > 0) (a * b * c) / d else\
    \ -1\n        area\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp99lj2clo.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a\
    \ + b * b + c * c)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e\
    [31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35ma\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp99lj2clo.scala:14:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = \e[31m2\e[0m * a + b\n\e[31m\e[31m   |\e[0m                 \
    \       ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp99lj2clo.scala:15:24 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = \e[31m2\e[0m * a + c\n\e[31m\e[31m\
    \   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                    \
    \    Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c) {\n            return -1\n        }\n        val area\
    \ = (a * b) / c\n        val rounded = math.round(area * 100) / 100\n        if\
    \ (rounded == area) {\n            return rounded\n        } else {\n        \
    \    return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpimjz6rm8.scala:25)\n\tat Problem.main(tmpimjz6rm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(side1 * side1 + side2 * side2)\n\
    \        if (side1 + side2 > side3) {\n            val area = side1 * side2 *\
    \ 0.5\n            area.toFloat\n        } else {\n            -1.0\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxod8gwn4.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805186
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        val isTriangle\
    \ = (sum > sides(2))\n        if (isTriangle) {\n            val area = sides.map(x\
    \ => x * x).sum\n            (area / sides(3).toFloat).toInt\n        } else {\n\
    \            -1.0\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triangleArea(tmpoi0v5yok.scala:18)\n\tat Problem$.main(tmpoi0v5yok.scala:24)\n\
    \tat Problem.main(tmpoi0v5yok.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        (a1 + b2 + c3 > a2 + b3 + c1) ? a8 * b6 + (a1 * b2 + a2 * b3 + a3 * b1)\
    \ * (a8 * b6 + b8 * a7) + (a1 * b3 + a2 * b1 + a3 * b2) * (a8 * b7 + b8 * a1)\
    \ : -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw8xo7t7r.scala:37:38 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        (a1 + b2 + c3 > a2 + b3 + c1) ? a8 * b6 + (a1\
    \ * b2 + a2 * b3 + a3 * b1) * (a8 * b6 + b8 * a7) + (a1 * b3 + a2 * b1 + a3 *\
    \ b2) * (a8 * b7 + b8 * a1) : -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value ? is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c3\n        val c3 = c2 + a3\n\
    \        val a4 = a3 + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4\n\
    \        val a5 = a4 + b4\n        val b5 = b5 + c4\n        val c5 = c5 + a5\n\
    \        val a6 = a5 + b5\n        val b6 = b6 + c5\n        val c6 = c6 + a6\n\
    \        val a7 = a6 + b6\n        val b7 = b7 + c6\n        val c7 = c7 + a7\n\
    \        val a8 = a7 + b7\n        val b8 = b8 + c7\n        val c8 = c8 + a8\n\
    \        val a9 = a8 + b8\n        val b9 = b9 + c8\n        val c9 = c9 + a9\n\
    \        val a10 = a9 + b9\n        val b10 = b10 + c9\n        val c10 = c10\
    \ + a10\n        val a11 = a10 + b10\n        val b11 = b11 + c10\n        val\
    \ c11 = c11 + a11\n        val a12 = a11 + b11\n        val b12 = b12 + c11\n\
    \        val c12 = c12 + a12\n        val a13 = a12 + b12\n        val b13 = b13\
    \ + c12\n        val c13 = c13 + a13\n        val a14 = a13 + b13\n        val\
    \ b14 = b14 + c13\n        val c14 = c14 + a14\n        val a15 = a14 + b14\n\
    \        val b15 = b15 + c14\n        val c15 = c15 + a15\n        val a16 = a15\
    \ + b15\n        val b16 = b16 + c15\n        val c16 = c16 + a16\n        val\
    \ a17 = a16 + b16\n        val b17 = b17 + c16\n        val c17 = c17 + a17\n\
    \        val a18 = a17 + b17\n        val b18 = b18 + c17\n        val c18 = c18\
    \ + a18\n        val a19 = a18 + b18\n        val b19 = b19 + c18\n        val\
    \ c19 = c19 + a19\n        val a20 = a19 + b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxgony7to.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpxgony7to.scala:24:17 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpxgony7to.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpxgony7to.scala:27:17 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpxgony7to.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpxgony7to.scala:30:17 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b1 + c1 + a2 + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5\
    \ + c5 + a6 + b6 + c6 +a7 + b7 + c7) / 8.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjghecd9a.scala:34:8\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m        (a1 + b1 + c1 + a2 +\
    \ b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +a7 + b7\
    \ + c7) / \e[31m8.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b + c) / 2.0\n        val a2 = Math.sqrt(a1 * a1 + b *\
    \ b + c * c)\n        val a3 = Math.sqrt(a1 * a1 + a2 * a + b * b + c * c)\n \
    \       val a4 = Math.sqrt(a1 * a1 + a2 * a + a3 * a + c * c)\n        val a5\
    \ = Math.sqrt(a1 * a1 + a2 * a + a3 * a + a4 * a + c * c)\n        val a6 = Math.sqrt(a1\
    \ * a1 + a2 * a + a3 * a + a4 * a + a5 * a + c * c)\n        val a7 = Math.sqrt(a1\
    \ * a1 + a2 * a + a3 * a + a4 * a + a5 * a + a6 * a + c * c)\n        val a8 =\
    \ Math.sqrt(a1 * a1 + a2 * a + a3 * a + a4 * a + a5 * a + a6 * a + a7 * a + c\
    \ * c)\n        val a9 = Math.sqrt(a1 * a1 + a2 * a + a3 * a + a4 * a + a5 * a\
    \ + a6 * a + a7 * a + a8 * a + c * c)\n        val a10 = Math.sqrt(a1 * a1 + a2\
    \ * a + a3 * a + a4 * a + a5 * a + a6 * a + a7 * a + a8 * a + a9 * a + c * c)\n\
    \        val a11 = Math.sqrt(a1 * a1 + a2 * a + a3 * a + a4 * a + a5 * a + a6\
    \ * a + a7 * a + a8 * a + a9 * a + a10 * a + c * c)\n        val a12 = Math.sqrt(a1\
    \ * a1 + a2 * a + a3 * a + a4 * a + a5 * a + a6 * a + a7 * a + a8 * a + a9 * a\
    \ + a10 * a + a11 * a + c * c)\n        val a13 = Math.sqrt(a1 * a1 + a2 * a +\
    \ a3 * a + a4 * a + a5 * a + a6 * a + a7 * a + a8 * a + a9 * a + a10 * a + a11\
    \ * a + a12 * a + c * c)\n        val a14 = Math.sqrt(a1 * a1 + a2 * a + a3 *\
    \ a + a4 * a + a5 * a + a6 * a + a7 * a + a8 * a + a9 * a + a10 * a + a11 * a\
    \ + a12 * a + a13 * a + c * c)\n        val a15 = Math.sqrt(a1 * a1 + a2 * a +\
    \ a3 * a + a4 * a + a5 * a + a6 * a + a7 * a + a8 * a + a9 * a + a10 * a + a11\
    \ * a + a12 * a + a13 * a + a14 * a + c * c)\n        val a16 = Math.sqrt(a1 *\
    \ a1 + a2 * a + a3 * a + a4 * a + a5 * a + a6 * a + a7 * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf582ejqu.scala:28:87 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36ma16\e[0m = Math.sqrt(a1\
    \ * a1 + a2 * a + a3 * a + a4 * a + a5 * a + a6 * a + a7 * \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf582ejqu.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * a * a + sum * b * b + sum * c * c)\n            (area / 2).toFloat\n     \
    \   } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5itnvel.scala:22)\n\tat Problem.main(tmpp5itnvel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3 = b2 + c3\n        val\
    \ c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4 = b3 + c4\n        val\
    \ c4 = c4 + a4\n        val a5 = a4 + b4\n        val b5 = b5 + c4\n        val\
    \ c5 = c5 + a5\n        val a6 = a5 + b5\n        val b6 = b6 + c5\n        val\
    \ c6 = c6 + a6\n        val a7 = a6 + b6\n        val b7 = b7 + c6\n        val\
    \ c7 = c7 + a7\n        val a8 = a7 + b7\n        val b8 = b8 + c7\n        val\
    \ c8 = c8 + a8\n        val a9 = a8 + b8\n        val b9 = b9 + c8\n        val\
    \ c9 = c9 + a9\n        val a10 = a9 + b9\n        val b10 = b10 + c9\n      \
    \  val c10 = c10 + a10\n        val a11 = a10 + b10\n        val b11 = b11 + c10\n\
    \        val c11 = c11 + a11\n        val a12 = a11 + b11\n        val b12 = b12\
    \ + c11\n        val c12 = c12 + a12\n        val a13 = a12 + b12\n        val\
    \ b13 = b13 + c12\n        val c13 = c13 + a13\n        val a14 = a13 + b13\n\
    \        val b14 = b14 + c13\n        val c14 = c14 + a14\n        val a15 = a14\
    \ + b14\n        val b15 = b15 + c14\n        val c15 = c15 + a15\n        val\
    \ a16 = a15 + b15\n        val b16 = b16 + c15\n        val c16 = c16 + a16\n\
    \        val a17 = a16 + b16\n        val b17 = b17 + c16\n        val c17 = c17\
    \ + a17\n        val a18 = a17 + b17\n        val b18 = b18 + c17\n        val\
    \ c18 = c18 + a18\n        val a19 = a18 + b18\n        val b19 = b19 + c18\n\
    \        val c19 = c19 + a19\n        val a20 = a19 + b19\n        \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9ac8nt7g.scala:24:17 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9ac8nt7g.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9ac8nt7g.scala:27:17 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9ac8nt7g.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9ac8nt7g.scala:30:17 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9ac8nt7g.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mb7\e[0m = b7 + c6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805193
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val isTriangle = (a + b > c) && (a\
    \ + c > b) && (b + c > a)\n        if (isTriangle) {\n            area\n     \
    \   } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpot69a784.scala:24)\n\tat Problem.main(tmpot69a784.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.pow(a, 2)\n        val b = math.pow(b, 2)\n        val c\
    \ = math.pow(c, 2)\n        val s = (a + b + c) / 2\n        if (s > 0) {\n  \
    \          val area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n           \
    \ area\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc7oy_a5l.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.pow(a, \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc7oy_a5l.scala:14:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = math.pow(b, \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \             ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpc7oy_a5l.scala:15:25 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.pow(c, \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7oy_a5l.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val side1 = math.sqrt(a * a + b *\
    \ b + c * c)\n        val side2 = math.sqrt(side1 * side1 + a * b + b * c)\n \
    \       val side3 = math.sqrt(side1 * side1 + a * a + b * b)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg2nxq5vi.scala:25)\n\tat Problem.main(tmpg2nxq5vi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805195
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * a * a + sum * b * b + sum * c * c)\n            (area / 2).toFloat\n     \
    \   } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5itnvel.scala:22)\n\tat Problem.main(tmpp5itnvel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        (a9 * b9) - (a8 * b8) - (a9 * b7) + (a8 * b7) - (a9 * b6) + (a8 * b6)\
    \ - (a9 * b5) + (a8 * b5) - (a9 * b4) + (a8 * b4) - (a9 * b3) + (a8 * b3) - (a9\
    \ * b2) + (a8 * b2) - (a9 * b1) + (a8 * b1) - (a8 * c1) + (a8 * c1) - (a8 * c2)\
    \ + (a8 * c2) - (a8 * c3) + (a8 * c3) - (a8 * c4) + (a8 * c4) - (a8 * c5) + (a8\
    \ * c5) - (a8 * c6) + (a8 * c6) - (a8 * c7) + (a8 * c7) - (a8 * c8) + (a8 * c8)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqipmzmqn.scala:43)\n\tat Problem.main(tmpqipmzmqn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > a) \n\
    \            -1\n        else if (s > b) \n            -1\n        else if (s\
    \ > c) \n            -1\n        else \n            Math.round((s * s) / 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7kvgd0g7.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7kvgd0g7.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7kvgd0g7.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = a\
    \ / sum\n            val area2 = b / sum\n            val area3 = c / sum\n  \
    \          val area4 = area + area2 + area3\n            area4.toFloat\n     \
    \   } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomhb4drl.scala:25)\n\tat Problem.main(tmpomhb4drl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum > 0) {\n            val area = math.sqrt(sum\
    \ * (sum - a) * (sum - b) * (sum - c))\n            area / 100\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9_tq7ur.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            area / \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805195
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sum = a1 + b1 + c1\n        if (sum > a1 && sum > b1\
    \ && sum > c1) {\n            val area = (a + b + c) / 2\n            (area /\
    \ Math.sqrt(a1 * a1 + b1 * b1 + c1 * c1)).toFloat\n        } else {\n        \
    \    -1.0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4957a81.scala:25)\n\tat Problem.main(tmpp4957a81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        val area = if\
    \ (s > a) s * (s - a) * (s - b) * (s - c) / 6\n        else -1\n        area\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvbb0trie.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvbb0trie.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvbb0trie.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvbb0trie.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        area\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (area : Double)\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a + b * b + c * c)\n        val b = 2 * a \n  \
    \      val c = Math.sqrt(a * a + b * b + c * c)\n        val d = Math.sqrt(a *\
    \ a + b * b + c * c)\n        val e = Math.sqrt(a * a + b * b + c * c)\n     \
    \   val f = Math.sqrt(a * a + b * b + c * c)\n        val g = Math.sqrt(a * a\
    \ + b * b + c * c)\n        val h = Math.sqrt(a * a + b * b + c * c)\n       \
    \ val i = Math.sqrt(a * a + b * b + c * c)\n        val j = Math.sqrt(a * a +\
    \ b * b + c * c)\n        val k = Math.sqrt(a * a + b * b + c * c)\n        val\
    \ l = Math.sqrt(a * a + b * b + c * c)\n        val m = Math.sqrt(a * a + b *\
    \ b + c * c)\n        val n = Math.sqrt(a * a + b * b + c * c)\n        val o\
    \ = Math.sqrt(a * a + b * b + c * c)\n        val p = Math.sqrt(a * a + b * b\
    \ + c * c)\n        val q = Math.sqrt(a * a + b * b + c * c)\n        val r =\
    \ Math.sqrt(a * a + b * b + c * c)\n        val s = Math.sqrt(a * a + b * b +\
    \ c * c)\n        val t = Math.sqrt(a * a + b * b + c * c)\n        val u = Math.sqrt(a\
    \ * a + b * b + c * c)\n        val v = Math.sqrt(a * a + b * b + c * c)\n   \
    \     val w = Math.sqrt(a * a + b * b + c * c)\n        val x = Math.sqrt(a *\
    \ a + b * b + c * c)\n        val y = Math.sqrt(a * a + b * b + c * c)\n     \
    \   val z = Math.sqrt(a * a + b * b + c * c)\n        val a = Math.sqrt(a * a\
    \ + b * b + c * c)\n        val b = Math.sqrt(a * a + b * b + c * c)\n       \
    \ val c = Math.sqrt(a * a + b * b + c * c)\n        val d = Math.sqrt(a * a +\
    \ b * b + c * c)\n        val e = Math.sqrt(a * a + b * b + c * c)\n        val\
    \ f = Math.sqrt(a * a + b * b + c * c)\n        val g = Math.sqrt(a * a + b *\
    \ b + c * c)\n        val h = Math.sqrt(a * a + b * b + c * c)\n        val i\
    \ = Math.sqrt(a * a + b * b + \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpibbhva_b.scala:47:41 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = Math.sqrt(a * a\
    \ + b * b + \n\e[31m\e[31m   |\e[0m                                         ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpibbhva_b.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a + b * b + c * c)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0ma is already defined as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpibbhva_b.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = Math.sqrt(a * a + b * b + c * c)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already\
    \ defined as \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpibbhva_b.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(a * a\
    \ + b * b + c * c)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpibbhva_b.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = Math.sqrt(a * a + b * b + c * c)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1659805197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val sum = a1 + a2 + a3\n        if (sum > a3)\n       \
    \     sum - a3\n        else\n            -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7181dcb.scala:23)\n\tat Problem.main(tmpt7181dcb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805159
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val sum = a1 + b1 + c1\n        if (sum > 0) {\n      \
    \      val a2 = a1 / sum\n            val b2 = b1 / sum\n            val c2 =\
    \ c1 / sum\n            val area = a2 * b2 * c2\n            area\n        } else\
    \ {\n            -1.0\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozgn7mf5.scala:28)\n\tat Problem.main(tmpozgn7mf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val ab = a + b\n        val bc = b + c\n        val ac = a + c\n    \
    \    val abc = ab + bc\n        val acb = ac + ab\n        val abcb = abc+ acb\n\
    \        val abcc = abc + abc\n        val abcc = abc + abcc\n        val abccc\
    \ = abcc+ abcc\n        val abcccb = abccc+ abccc\n        val abcccba = abcccba+\
    \ abcccba\n        val abcccbac = abcccbac+ abcccbac\n        val abcccbaca =\
    \ abcccbaca+ abcccbaca\n        val abcccbacab = abcccbacab+ abcccbacab\n    \
    \    val abcccbacabc = abcccbacabc+ abcccbacabc\n        val abcccbacabca = abcccbacabca+\
    \ abcccbacabca\n        val abcccbacabcab = abcccbacabcab+ abcccbacabcab\n   \
    \     val abcccbacabcabc = abcccbacabcabc+ abcccbacabcabc\n        val abcccbacabcabca\
    \ = abcccbacabcabca+ abcccbacabcabca\n        val abcccbacabcabcab = abcccbacabcabcab+\
    \ abcccbacabcabcab\n        val abcccbacabcabcabc = abcccbacabcabcabc+ abcccbacabcabcabc\n\
    \        val abcccbacabcabcabca = abcccbacabcabcabca+ abcccbacabcabcabca\n   \
    \     val abcccbacabcabcabcab = abcccbacabcabcabcab+ abcccbacabcabcabcab\n   \
    \     val abcccbacabcabcabcabc = abcccbacabcabcabcabc+ abcccbacabcabcabcabc\n\
    \        val abcccbacabcabcabcabca = abcccbacabcabcabcabca+ abcccbacabcabcabcabca\n\
    \        val abcccbacabcabcabcabcab = abcccbacabcabcabcabcab+ abcccbacabcabcabcabcab\n\
    \        val ab\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5zhezanm.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5zhezanm.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabcc\e[0m = abc + abcc\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabcc is already defined as \e[33mvalue\e[0m \e[35mabcc\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5zhezanm.scala:13:25 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.abs(a)\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5zhezanm.scala:14:25 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.abs(b)\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5zhezanm.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5zhezanm.scala:26:22 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mabcccba\e[0m = abcccba+\
    \ abcccba\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m\
    \                      Recursive \e[33mvalue\e[0m \e[35mabcccba\e[0m needs type\n\
    \e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c3\n        val c3 = c2 + a3\n\
    \        val a4 = a3 + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4\n\
    \        val a5 = a4 + b4\n        val b5 = b5 + c4\n        val c5 = c5 + a5\n\
    \        val a6 = a5 + b5\n        val b6 = b6 + c5\n        val c6 = c6 + a6\n\
    \        val a7 = a6 + b6\n        val b7 = b7 + c6\n        val c7 = c7 + a7\n\
    \        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5\
    \ + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvzit5qr9.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvzit5qr9.scala:24:17 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvzit5qr9.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvzit5qr9.scala:27:17 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvzit5qr9.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvzit5qr9.scala:30:17 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val\
    \ c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val\
    \ c9 = c8 + a8\n        val a10 = a9 + b9\n        val b10 = b9 + c9\n       \
    \ val c10 = c9 + a9\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3)\
    \ * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7) * (a8 +\
    \ b8 + c8) * (a9 + b9 + c9) * (a10 + b10 + c10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxsxfy47.scala:46)\n\tat Problem.main(tmpwxsxfy47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (c + a) / 2\n        val b1 = (a + c) / 2\n        val b2 = (c + b) / 2\n  \
    \      val b3 = (b + a) / 2\n        val c1 = (a + b) / 2\n        val c2 = (b\
    \ + c) / 2\n        val c3 = (c + a) / 2\n        val d1 = (a + c) / 2\n     \
    \   val d2 = (c + b) / 2\n        val d3 = (b + a) / 2\n        val e1 = (a +\
    \ b) / 2\n        val e2 = (b + c) / 2\n        val e3 = (c + a) / 2\n       \
    \ val f1 = (a + c) / 2\n        val f2 = (b + c) / 2\n        val f3 = (c + a)\
    \ / 2\n        val g1 = (a + b) / 2\n        val g2 = (b + c) / 2\n        val\
    \ g3 = (c + a) / 2\n        val h1 = (a + b) / 2\n        val h2 = (b + c) / 2\n\
    \        val h3 = (c + a) / 2\n        val i1 = (a + c) / 2\n        val i2 =\
    \ (b + c) / 2\n        val i3 = (c + a) / 2\n        val j1 = (a + b) / 2\n  \
    \      val j2 = (b + c) / 2\n        val j3 = (c + a) / 2\n        val k1 = (a\
    \ + c) / 2\n        val k2 = (b + c) / 2\n        val k3 = (c + a) / 2\n     \
    \   val l1 = (a + b) / 2\n        val l2 = (b + c) / 2\n        val l3 = (c +\
    \ a) / 2\n        val m1 = (a + c) / 2\n        val m2 = (b + c) / 2\n       \
    \ val m3 = (c + a) / 2\n        val n1 = (a + b) / 2\n        val n2 = (b + c)\
    \ / 2\n        val n3 = (c + a) / 2\n        val o1 = (a + c) / 2\n        val\
    \ o2 = (b + c) / 2\n        val o3 = (c + a) / 2\n        val p1 = (a + b) / 2\n\
    \        val p2 = (b + c) / 2\n        val p3 = (c + a) / 2\n        val q1 =\
    \ (a + c) / 2\n        val q2 = (b + c) / 2\n        val q3 = (c + a) / 2\n  \
    \      val r1 = (a + b) / 2\n        val r2 = (b + c) / 2\n        val r3 = (c\
    \ + a) / 2\n        val s1 = (a + c) / 2\n        val s2 = (b + c) / 2\n     \
    \   val s3 = (c + a) / 2\n        val t1 = (a + b) / 2\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_b8w3b57.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c).sorted\n        val sum = sides.sum\n     \
    \   if (sum > sides(2)) sides(2) * sides(2) * sides(2) else -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2e1x3ww.scala:18)\n\tat Problem.main(tmpc2e1x3ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a4\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a5\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a6\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a7\n        (a1 + b2 + c3 <= a2 + b3 + c4 && a3 + b4 + c5 <= a2 +\
    \ b2 + c3 && a4 + b5 + c6 <= a2 + b2 + c3 && a5 + b6 + c7 <= a2 + b2 + c3 && a6\
    \ + b7 + c8 <= a2 + b2 + c3 && a7 + b8 + c9 <= a2 + b2 + c3)\n            ? ((a1\
    \ + b2 + c3 <= a2 + b3 + c4 && a3 + b4 + c5 <= a2 + b2 + c3 && a4 + b5 + c6 <=\
    \ a2 + b2 + c3 && a5 + b6 + c7 <= a2 + b2 + c3 && a6 + b7 + c8 <= a2 + b2 + c3\
    \ && a7 + b8 + c9 <= a2 + b2 + c3)\n                ? ((a1 + b2 + c3 <= a2 + b3\
    \ + c4 && a3 + b4 + c5 <= a2 + b2 + c3 && a4 + b5 + c6 <= a2 + b2 + c3 && a5 +\
    \ b6 + c7 <= a2 + b2 + c3 && a6 + b7 + c8 <= a2 + b2 + c3 && a7 + b8 + c9 <= a2\
    \ + b2 + c3)\n                    ? ((a1 + b2 + c3 <= a2 + b3 + c4 && a3 + b4\
    \ + c5 <= a2 + b2 + c3 && a4 + b5 + c6 <= a2 + b2 + c3 && a5 + b6 + c7 <= a2 +\
    \ b2 + c3 && a6 + b7 + c8 <= a2 + b2 + c3 && a7 + b8 + c9 <= a2 + b2 + c3)\n \
    \                       ? ((a1 + b2 + c3 <= a2 + b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpch19rul9.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch19rul9.scala:34:147\
    \ -----------------------\e[0m\e[0m\n\e[31m34 |\e[0m        (a1 + b2 + c3 <= a2\
    \ + b3 + c4 && a3 + b4 + c5 <= a2 + b2 + c3 && a4 + b5 + c6 <= a2 + b2 + c3 &&\
    \ a5 + b6 + c7 <= a2 + b2 + c3 && a6 + b7 + c8 <= a2 + b2 + c3 && a7 + b8 + c9\
    \ <= a2 + b2 + c3)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                                   ^^\e[0m\n\e[31m   |\e[0m                 \
    \                                          Not found: c8\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpch19rul9.scala:34:174 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        (a1 + b2 + c3 <= a2 + b3 + c4 && a3 + b4 + c5\
    \ <= a2 + b2 + c3 && a4 + b5 + c6 <= a2 + b2 + c3 && a5 + b6 + c7 <= a2 + b2 +\
    \ c3 && a6 + b7 + c8 <= a2 + b2 + c3 && a7 + b8 + c9 <= a2 + b2 + c3)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                  ^^\e[0m\n\e[31m   |\e[0m                  \
    \                                         Not found: b8\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpch19rul9.scala:35:154 -----------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            ? ((a1 + b2 + c3 <= a2 + b3 + c4 && a3 +\
    \ b4 + c5 <= a2 + b2 + c3 && a4 + b5 + c6 <= a2 + b2 + c3 && a5 + b6 + c7 <= a2\
    \ + b2 + c3 && a6 + b7 + c8 <= a2 + b2 + c3 && a7 + b8 + c9 <= a2 + b2 + c3)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                      ^^\e[0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659805195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            return -1\n\
    \        }\n        val area = math.sqrt(a * a + b * b + c * c)\n        val rounded\
    \ = math.round(area * 100) / 100\n        return rounded\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0x_d5_f9.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0x_d5_f9.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0x_d5_f9.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = (a, b, c) match {\n \
    \           case (a, b, c) => a + b + c\n            case (a, b, c) => b + c +\
    \ a\n            case (a, b, c) => c + a + b\n        }\n        if (sides ==\
    \ 0) area\n        else if (sides == 1) area\n        else if (sides == 2) area\n\
    \        else if (sides > 2) area\n        else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36pcfc0b.scala:27)\n\tat Problem.main(tmp36pcfc0b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a * a)\n        val b = Math.sqrt(b * b * b)\n\
    \        val c = Math.sqrt(c * c * c)\n        val s = (a + b + c) / 2\n     \
    \   if (s > 0) {\n            val area = s * (s - a) * (s - b) * (s - c)\n   \
    \         val rounded = area * 100f / Math.pow(s, 2)\n            rounded.toFloat\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnlhkf2d6.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a\
    \ * a)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m\
    \                          Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnlhkf2d6.scala:14:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = Math.sqrt(b * b * b)\n\e[31m\e[31m   |\e[0m                 \
    \         ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpnlhkf2d6.scala:15:26 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c * c)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(side1 * side1 + side2 * side2)\n\
    \        if (side1 + side2 > side3) {\n            val area = side1 * side2 *\
    \ 0.5\n            val rounded = area.toString.split(\"\\\\.\").takeRight(2).mkString(\"\
    .\")\n            rounded.toFloat\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpquqowe23.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum < 0) -1\n        else (sum * sum)\
    \ / 2.0\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp33o8rwp9.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (sum\
    \ * sum) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805199
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4)\
    \ * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7) * (a8 + b8 + c8) * (a9 +\
    \ b9 + c9) * (a10 + b10 + c10)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdg5_vmdf.scala:46)\n\tat Problem.main(tmpdg5_vmdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val isValid = a > 0 && b > 0 && c\
    \ > 0\n        if (isValid) {\n            val area1 = (a + b) / 2\n         \
    \   val area2 = (a + c) / 2\n            val area3 = (b + c) / 2\n           \
    \ val area4 = (a * b) / 2\n            val area5 = (a * c) / 2\n            val\
    \ area6 = (b * c) / 2\n            val area7 = area1 + area2 + area3\n       \
    \     val area8 = area4 + area5 + area6\n            val area9 = area7 + area8\n\
    \            val area10 = area9 + area1\n            val area11 = area10 + area2\n\
    \            val area12 = area11 + area3\n            val area13 = area12 + area4\n\
    \            val area14 = area13 + area5\n            val area15 = area14 + area6\n\
    \            val area16 = area15 + area7\n            val area17 = area16 + area8\n\
    \            val area18 = area17 + area9\n            val area19 = area18 + area10\n\
    \            val area20 = area19 + area11\n            val area21 = area20 + area12\n\
    \            val area22 = area21 + area13\n            val area23 = area22 + area14\n\
    \            val area24 = area23 + area15\n            val area25 = area24 + area16\n\
    \            val area26 = area25 + area17\n            val area27 = area26 + area18\n\
    \            val area28 = area27 + area19\n            val area29 = area28 + area20\n\
    \            val area30 = area29 + area21\n            val area31 = area30 + area22\n\
    \            val area32 = area31 + area23\n            val area33 = area32 + area24\n\
    \            val area34 = area33 + area25\n            val area35 = area34 + area26\n\
    \            val area36 = area35 + area27\n            val area37 = area36 + area28\n\
    \            val area38 = area37 + area29\n            val area39 = area38 + area30\n\
    \            val area40 = area39 + area31\n            val area41 = area40 + area32\n\
    \            val area42 = area41 + area33\n            val area43 = area42 + area34\n\
    \            val area44 = area43 + area35\n            val area45 = area44 + area36\n\
    \            val area46 = area\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmxsqg2me.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmxsqg2me.scala:75:1\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpmxsqg2me.scala:63:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m63 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 =\
    \ (a2 + c) / 2\n        val a4 = (a1 + a3)\n        val a5 = (a1 + a2)\n     \
    \   val a6 = (a2 + a3)\n        val a7 = (a3 + a4)\n        val a8 = (a4 + a5)\n\
    \        val a9 = (a5 + a6)\n        val a10 = (a6 + a7)\n        val a11 = (a7\
    \ + a8)\n        val a12 = (a8 + a9)\n        val a13 = (a9 + a10)\n        val\
    \ a14 = (a10 + a11)\n        val a15 = (a11 + a12)\n        val a16 = (a12 + a13)\n\
    \        val a17 = (a13 + a14)\n        val a18 = (a14 + a15)\n        val a19\
    \ = (a15 + a16)\n        val a20 = (a16 + a17)\n        val a21 = (a17 + a18)\n\
    \        val a22 = (a18 + a19)\n        val a23 = (a19 + a20)\n        val a24\
    \ = (a20 + a21)\n        val a25 = (a21 + a22)\n        val a26 = (a22 + a23)\n\
    \        val a27 = (a23 + a24)\n        val a28 = (a24 + a25)\n        val a29\
    \ = (a25 + a26)\n        val a30 = (a26 + a27)\n        val a31 = (a27 + a28)\n\
    \        val a32 = (a28 + a29)\n        val a33 = (a29 + a30)\n        val a34\
    \ = (a30 + a31)\n        val a35 = (a31 + a32)\n        val a36 = (a32 + a33)\n\
    \        val a37 = (a33 + a34)\n        val a38 = (a34 + a35)\n        val a39\
    \ = (a35 + a36)\n        val a40 = (a36 + a37)\n        val a41 = (a37 + a38)\n\
    \        val a42 = (a38 + a39)\n        val a43 = (a39 + a40)\n        val a44\
    \ = (a40 + a41)\n        val a45 = (a41 + a42)\n        val a46 = (a42 + a43)\n\
    \        val a47 = (a43 + a44)\n        val a48 = (a44 + a45)\n        val a49\
    \ = (a45 + a46)\n        val a50 = (a46 + a47)\n        val a51 = (a47 + a48)\n\
    \        val a52 = (a48 + a49)\n        val a53 = (a49 + a50)\n        val a54\
    \ = (a50 + a51)\n        val a55 = (a51 + a5\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah7z3kro.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah7z3kro.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else sides.last * sides.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0x4l8jp.scala:18)\n\tat Problem.main(tmpp0x4l8jp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 +\
    \ c6 >\n            a5 + b6 + c7 >\n            a6 + b7 + c8)\n            ? Float(a1\
    \ + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                a4 + b5 + c6 >\n\
    \                a5 + b6 + c7 >\n                a6 + b7 + c8)\n            :\
    \ Float(-1)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2tmyumc7.scala:42:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            : Float(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                   ^\e[0m\n\e[31m   |\e[0m                   end of statement\
    \ expected but '(' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2tmyumc7.scala:34:39\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2tmyumc7.scala:35:12\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2tmyumc7.scala:36:12 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2tmyumc7.scala:37:22 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m            a6 + b7 + c8)\n\e[31m\e[31m   |\e[0m         \
    \             ^^\e[0m\n\e[31m   |\e[0m                      Not found: c8\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2tmyumc7.scala:38:14 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            ? Float(a1 + b2 + c3 > a2 + b3 + c4 > a3\
    \ + b4 + c5 >\n\e[31m\e[31m   |\e[0m              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \              \e[33mobject\e[0m \e[35mFloat\e[0m in \e[33mpa"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val side1 = math.sqrt(a * a + b * b + c * c)\n        val side2 = math.sqrt(a\
    \ * a + b * b - c * c)\n        val side3 = math.sqrt(a * a - b * b + c * c)\n\
    \        val side4 = math.sqrt(a * a - b * b - c * c)\n        val side5 = math.sqrt(a\
    \ * a + b * b - c * c)\n        val side6 = math.sqrt(a * a + b * b + c * c -\
    \ side1)\n        val side7 = math.sqrt(a * a - b * b + c * c - side1)\n     \
    \   val side8 = math.sqrt(a * a - b * b - c * c - side1)\n        val side9 =\
    \ math.sqrt(a * a + b * b - c * c - side1)\n        val side10 = math.sqrt(a *\
    \ a + b * b + c * c - side1)\n        val side11 = math.sqrt(a * a - b * b + c\
    \ * c - side1)\n        val side12 = math.sqrt(a * a - b * b - c * c - side1)\n\
    \        val side13 = math.sqrt(a * a + b * b - c * c - side1)\n        val side14\
    \ = math.sqrt(a * a + b * b + c * c - side1)\n        val side15 = math.sqrt(a\
    \ * a - b * b + c * c - side1)\n        val side16 = math.sqrt(a * a - b * b -\
    \ c * c - side1)\n        val side17 = math.sqrt(a * a + b * b - c * c - side1)\n\
    \        val side18 = math.sqrt(a * a + b * b + c * c - side1)\n        val side19\
    \ = math.sqrt(a * a - b * b + c * c - side1)\n        val side20 = math.sqrt(a\
    \ * a - b * b - c * c - side1)\n        val side21 = math.sqrt(a * a + b * b -\
    \ c * c - side1)\n        val side22 = math.sqrt(a * a + b * b + c * c - side1)\n\
    \        val side23 = math.sqrt(a * a - b * b + c * c - side1)\n        val side24\
    \ = math.sqrt(a * a - b * b - c * c - side1)\n        val side25 = math.sqrt(a\
    \ * a + b * b - c * c - side1)\n        val side26 = math.sqrt(a * a + b * b +\
    \ c * c - side1)\n        val side27 = math.sqrt(a * a - b * b + c * c - side1)\n\
    \        val side28 = math.sqrt(a * a - b * b - c * c - side1)\n        val side29\
    \ = math.sqrt(a * a + b * b - c * c - side1)\n        val side30 = math.sqrt(a\
    \ * a + b * b + \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpni6t2si_.scala:42:46 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mside30\e[0m = math.sqrt(a\
    \ * a + b * b + \n\e[31m\e[31m   |\e[0m                                      \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpni6t2si_.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val isTriangle = (a + b > c) && (a\
    \ + c > b) && (b + c > a)\n        if (isTriangle) {\n            area\n     \
    \   } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpot69a784.scala:24)\n\tat Problem.main(tmpot69a784.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2.0\n        val b1 = b / 2.0\n        val c1 = c / 2.0\n\
    \        val side1 = math.sqrt(a1 * a1 + b1 * b1 + c1 * c1)\n        val side2\
    \ = math.sqrt(a1 * a1 + b1 * b1)\n        val side3 = math.sqrt(a1 * a1 + c1 *\
    \ c1)\n        val area1 = side1 * side2\n        val area2 = side1 * side3\n\
    \        val area3 = side2 * side3\n        if (area1 + area2 + area3 == side1)\
    \ {\n            return area1\n        } else if (area1 + area2 + area3 == side2)\
    \ {\n            return area2\n        } else if (area1 + area2 + area3 == side3)\
    \ {\n            return area3\n        } else {\n            return -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hu01rsg.scala:23:19\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mreturn\e[0m\
    \ area1\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                  Found:    (area1 : Double)\n\e[31m   |\e[0m               \
    \    Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hu01rsg.scala:25:19\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mreturn\e[0m\
    \ area2\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                  Found:    (area2 : Double)\n\e[31m   |\e[0m               \
    \    Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hu01rsg.scala:27:19\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mreturn\e[0m\
    \ area3\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                  Found:    (area3 : Double)\n\e[31m   |\e[0m               \
    \    Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val ab = a + b\n        val bc = b + c\n        val ac = a + c\n    \
    \    val area = if (ab > bc && ab > ac) ab / (a + b + c) else -1\n        area.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphodxsvn5.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphodxsvn5.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphodxsvn5.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = Math.sqrt(a * a)\n        val b = Math.sqrt(b * b)\n        val\
    \ c = Math.sqrt(c * c)\n        val s = (a + b + c) / 2\n        if (s > a * c\
    \ + b * d) -1\n        else s * (s - a) * (s - b) * (s - c) / 6\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcbwe9nei.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcbwe9nei.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcbwe9nei.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcbwe9nei.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (s > a * c + b * d) -\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcbwe9nei.scala:18:13 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33melse\e[0m s * (s - a) * (s - b) * (s - c) /\
    \ \e[31m6\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c) {\n            return -1\n        }\n        val area\
    \ = a + (b * 2) + (c * 2)\n        val rounded = math.round(area * 100) / 100\n\
    \        if (rounded == area) {\n            return rounded\n        } else {\n\
    \            return -1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxungjfe.scala:25)\n\tat Problem.main(tmpsxungjfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        (a9 * b9) - (a8 * b8)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpszu12xqe.scala:43)\n\tat Problem.main(tmpszu12xqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val ab = b - a\n        val ac = c - a\n        val bc\
    \ = b - c\n        val ad = a - d\n        val bd = b - d\n        val cd = c\
    \ - d\n        val abc = ab * ac\n        val bcd = bc * bd\n        val abcd\
    \ = abc * bcd\n        val abdc = ab * cd\n        val acbd = ac * bd\n      \
    \  val acdbc = ac * bc\n        val adbc = ad * bc\n        val adcb = ad * cb\n\
    \        val bcda = bc * da\n        val bcdc = bd * cd\n        val bcdaa = bd\
    \ * daa\n        val bcdca = bd * dca\n        val acbda = ac * bda\n        val\
    \ acdbb = ac * dbb\n        val adbcb = ad * bcb\n        val adcbc = ad * cbc\n\
    \        val bcdaa = bc * daa\n        val bcdca = bd * dca\n        val bcdaab\
    \ = bd * daab\n        val bcdcab = bd * dcab\n        val acbda = ac * bda\n\
    \        val acdbb = ac * dbb\n        val adbcb = ad * bcb\n        val adcbc\
    \ = ad * cbc\n        val bcdaab = bd * daab\n        val bcdcab = bd * dcab\n\
    \        val acbda = ac * bda\n        val acdbb = ac * dbb\n        val adbcb\
    \ = ad * bcb\n        val adcbc = ad * cbc\n        val bcdaab = bd * daab\n \
    \       val bcdcab = bd * dcab\n        val acbda = ac * bda\n        val acdbb\
    \ = ac * dbb\n        val adbcb = ad * bcb\n        val adcbc = ad * cbc\n   \
    \     val bcdaab = bd * daab\n        val bcdcab = bd * dcab\n        val acbda\
    \ = ac * bda\n        val acdbb = ac * dbb\n        val adbcb = ad * bcb\n   \
    \     val adcbc = ad * cbc\n        val bcdaab = bd * daab\n        val bcdcab\
    \ = bd * dcab\n        val acbda = ac * bda\n        val acdb\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptau6yaqp.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptau6yaqp.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbcdaa\e[0m = bc * daa\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbcdaa is already defined as \e[33mvalue\e[0m \e[35mbcdaa\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptau6yaqp.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mbcdca\e[0m = bd * dca\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbcdca is already defined\
    \ as \e[33mvalue\e[0m \e[35mbcdca\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptau6yaqp.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36macbda\e[0m = ac * bda\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0macbda is\
    \ already defined as \e[33mvalue\e[0m \e[35macbda\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptau6yaqp.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36macdbb\e[0m = ac * dbb\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0macdbb is already defined as \e[33mvalue\e[0m \e[35macdbb\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptau6yaqp.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36madbcb\e[0m = ad * bcb\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0madbcb is already defined\
    \ as \e[33mvalue"
  stdout: ''
  timestamp: 1659805204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sum = sides.sum\n        if (sum\
    \ > sides.last) sides.last else -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6frldxhy.scala:18)\n\tat Problem.main(tmp6frldxhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c) -1\n        else (a + b + c) / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9qaxx7pd.scala:17)\n\tat Problem.main(tmp9qaxx7pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val x = math.min(math.min(a,\
    \ b), c)\n            val y = math.max(math.max(a, b), c)\n            val area\
    \ = x * y / 2\n            val rounded = math.round(area * 100) / 100\n      \
    \      return rounded\n        }\n        -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp57lyx_zs.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp57lyx_zs.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp57lyx_zs.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n    \
    \    val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n  \
    \      val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n\
    \        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n\
    \        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n\
    \        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n\
    \        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n\
    \        val a8 = a7 + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n\
    \        val a9 = a8 + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n\
    \        val a10 = a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 +\
    \ a9\n        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1\
    \ + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6 && a1 + b2 + c2 > a7\
    \ + b7 + c7 && a1 + b2 + c2 > a8 + b8 + c8 && a1 + b2 + c2 > a9 + b9 + c9 ? a10\
    \ : -1)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprh6gy4s9.scala:43:223 -----------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2\
    \ > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6\
    \ && a1 + b2 + c2 > a7 + b7 + c7 && a1 + b2 + c2 > a8 + b8 + c8 && a1 + b2 + c2\
    \ > a9 + b9 + c9 ? a10 : -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \                                                                            \
    \                                                     ^^^^\e[0m\n\e[31m   |\e\
    [0m                                         value ? is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sides = List(a, b, c)\n        val sumSides = sides.sum\n       \
    \ val isValid = sumSides > sides(2)\n        val area = if (isValid) sides.sum\
    \ * sides.sum / 2 else -1\n        area\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7khzzny.scala:20)\n\tat Problem.main(tmpb7khzzny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805205
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a1 = Math.abs(a)\n        val b1 = Math.abs(b)\n        val c1 =\
    \ Math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val\
    \ c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val\
    \ c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val\
    \ c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val\
    \ c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6 = b5 + c5\n        val\
    \ c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7 = b6 + c6\n        val\
    \ c7 = c6 + a6\n        (a1 + b1 + c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4\
    \ + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 + b7 + c7)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow9434ss.scala:37)\n\tat Problem.main(tmpow9434ss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n\
    \        val sum = a + b + c\n        if (sum > c) {\n            val area = math.sqrt(sum\
    \ * (b * b - c * c))\n            (area / 100).round\n        } else {\n     \
    \       -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprm13q9ny.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprm13q9ny.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprm13q9ny.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val sum = a + b + c\n        if (sum < 0)\n            -1\n        else\
    \ if (sum == 0)\n            0\n        else\n            val area = a / Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(c, 2))\n            area\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjnsdhswt.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805205
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val area = (a + b + c) / 2\n        val sides = (a, b, c) match {\n \
    \           case (l, r, _) => l + r\n            case (_, l, r) => l + r\n   \
    \     }\n        if (sides > 0) {\n            area / sides\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmom0v_yt.scala:25)\n\tat Problem.main(tmpmom0v_yt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805205
