language: scala
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            val start = i\n            while (i < string.length && string.charAt(i)\
    \ == substring.charAt(i)) {\n                i += 1\n            }\n         \
    \   val end = i\n            count += end - start\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmppuop5fc7.scala:16)\n\tat Problem$.main(tmppuop5fc7.scala:26)\n\
    \tat Problem.main(tmppuop5fc7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ stringArray = string.split(substring)\n        val substringArray = substring.split(string)\n\
    \        val stringArrayLength = stringArray.length\n        val substringArrayLength\
    \ = substringArray.length\n        var i = 0\n        var j = 0\n        while\
    \ (i < stringArrayLength && j < substringArrayLength) {\n            if (stringArray(i)\
    \ == substringArray(j)) {\n                count.put(stringArray(i), count.getOrElse(stringArray(i),\
    \ 0L) + 1)\n                i += 1\n                j += 1\n            } else\
    \ {\n                i += 1\n            }\n        }\n        count.size\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2uwn6riy.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            for(j <- 0 until substring.length){\n                if(string.charAt(i)\
    \ == substring.charAt(j)){\n                    count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprsoc_mj0.scala:25)\n\tat Problem.main(tmprsoc_mj0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val index = string.indexOf(substring,\
    \ i)\n            if (index >= 0) {\n                val substringIndex = string.indexOf(substring,\
    \ index + 1)\n                if (substringIndex >= 0) {\n                   \
    \ val substringLength = substring.length\n                    val substringIndex\
    \ = substringIndex + substringLength\n                    val substringLength\
    \ = substringIndex - index\n                    count.put(substring, substringLength)\n\
    \                }\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjb7hxx6i.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjb7hxx6i.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mval\e[0m \e[36msubstringLength\e\
    [0m = substringIndex - index\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            if (start < string.length && end < string.length\
    \ && string.substring(start, end) == substring) {\n                val value =\
    \ count.get(string.substring(start, end)).getOrElse(0)\n                count.put(string.substring(start,\
    \ end), value + 1)\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wu2q88i.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        val chars = string.split(substring).toList\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       val j = i + 1\n            while(j < chars.length && chars(j) == c){\n\
    \                count += 1\n                j += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnjo3hq7f.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val startIndex\
    \ = string.indexOf(substring)\n        val endIndex = startIndex + substring.length\n\
    \        while(startIndex >= 0) {\n            val currentIndex = startIndex\n\
    \            while(currentIndex < endIndex) {\n                val currentChar\
    \ = string.charAt(currentIndex)\n                val currentSubstring = string.substring(currentIndex,\
    \ currentIndex + substring.length)\n                val currentCount = count.get(currentSubstring)\n\
    \                if(currentCount == null) {\n                    count.put(currentSubstring,\
    \ 1)\n                } else {\n                    count.put(currentSubstring,\
    \ currentCount + 1)\n                }\n                currentIndex += 1\n  \
    \          }\n            startIndex -= 1\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzrok8kji.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzrok8kji.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                currentIndex += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ += is not a member of Int - did you mean currentIndex.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzrok8kji.scala:28:23 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            startIndex -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value -= is not a\
    \ member of Int - did you mean startIndex.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuqxxkc8.scala:30)\n\tat Problem.main(tmpyuqxxkc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap.empty[String, Long]\n       \
    \ val chars = string.split(substring).toList\n        chars.foreach(c => counts.put(c.toLowerCase,\
    \ counts.getOrElse(c.toLowerCase, 0L) + 1))\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj93xju_y.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.getOrElse(substring,\
    \ 0L)\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshlehhxm.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val len\
    \ = string.length\n        val sublen = substring.length\n        var i = 0\n\
    \        while (i < len) {\n            val start = i\n            while (i <\
    \ len && string.charAt(i) == substring.charAt(0)) {\n                i += 1\n\
    \            }\n            val end = i\n            val count = count.get(substring)\n\
    \            if (count == null) {\n                count.put(substring, 1)\n \
    \           } else {\n                count.put(substring, count.get(substring)\
    \ + 1)\n            }\n            i = end\n        }\n        count.get(substring)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv19ip5p4.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv19ip5p4.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = count.get(substring)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnb0ae02.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.substring(i, i + substring.length), count.getOrElse(string.substring(i,\
    \ i + substring.length), 0L) + 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3db6turf.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach { c =>\n           \
    \ val count = count.getOrElse(c, 0) + 1\n            count.updated(c, count +\
    \ 1)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobopdte1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1L))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpck8sg7t0.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ strings = string.split(substring)\n        strings.foreach(s => count.update(s,\
    \ count.getOrElse(s, 0L) + 1L))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4ukuzc8.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ stringArray = string.split(substring)\n        for (i <- 0 until stringArray.length)\
    \ {\n            val currentString = stringArray(i)\n            val currentCount\
    \ = count.get(currentString)\n            if (currentCount == null) {\n      \
    \          count.put(currentString, 1)\n            } else {\n               \
    \ count.put(currentString, currentCount + 1)\n            }\n        }\n     \
    \   count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfuhhgiz.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(s\
    \ => {\n            val count = counts.getOrElse(s, 0) + 1\n            counts.put(s,\
    \ count)\n        })\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg05jm817.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Int]()\n        string.split(substring).foreach(x\
    \ => count.getOrElse(x, 0) = count.getOrElse(x, 0) + 1L)\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6b8qj5u.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ len = string.length\n        val subLen = substring.length\n        val start\
    \ = 0\n        var i = 0\n        while (i < len) {\n            val end = start\
    \ + subLen\n            if (string.substring(start, end).equals(substring)) {\n\
    \                val value = count.get(substring)\n                if (value ==\
    \ null) {\n                    count.put(substring, 1)\n                } else\
    \ {\n                    count.put(substring, value + 1)\n                }\n\
    \                start = end\n            } else {\n                i += 1\n \
    \           }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkpvmbmks.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpkpvmbmks.scala:26:22 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                start = end\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ stringArray = string.split(substring)\n        stringArray.foreach { s =>\n\
    \            val count = mutable.HashMap.empty[String, Long]\n            val\
    \ stringArray = s.split(substring)\n            stringArray.foreach { s2 =>\n\
    \                val count = mutable.HashMap.empty[String, Long]\n           \
    \     val stringArray = s2.split(substring)\n                stringArray.foreach\
    \ { s3 =>\n                    val count = mutable.HashMap.empty[String, Long]\n\
    \                    val stringArray = s3.split(substring)\n                 \
    \   stringArray.foreach { s4 =>\n                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                        val stringArray = s4.split(substring)\n     \
    \                   stringArray.foreach { s5 =>\n                            val\
    \ count = mutable.HashMap.empty[String, Long]\n                            val\
    \ stringArray = s5.split(substring)\n                            stringArray.foreach\
    \ { s6 =>\n                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                val stringArray = s6.split(substring)\n\
    \                                stringArray.foreach { s7 =>\n               \
    \                     val count = mutable.HashMap.empty[String, Long]\n      \
    \                              val stringArray = s7.split(substring)\n       \
    \                             stringArray.foreach { s8 =>\n                  \
    \                      val count = mutable.HashMap.empty[String, Long]\n     \
    \                                   val stringArray = s8.split(substring)\n  \
    \                                      stringArray.foreach { s9 =>\n         \
    \                                   val count = mutable.HashMap.empty[String,\
    \ Long]\n                                            val stringArray = s9.split(substring)\n\
    \                                            stringArray.foreach { s10 =>\n  \
    \                                              val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val stringArray = s10.split(substring)\n\
    \                                                stringArray.foreach { s11 =>\n\
    \                                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val stringArray =\
    \ s11.split(substring)\n                                                    stringArray.foreach\
    \ { s12 =>\n                                                        val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                    val stringArray = s12.split(substring)\n                \
    \                                        stringArray.foreach { s13 =>\n      \
    \                                                      val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                            val stringArray\
    \ = s13.split(substring)\n                                                   \
    \         stringArray.foreach { s14 =>\n                                     \
    \                           val count = mutable.HashMap.empty[String, Long]\n\
    \                                                                val stringArray\
    \ = s14.split(substring)\n                                                   \
    \             stringArray.foreach { s15 =>\n                                 \
    \                                   val count = mutable.HashMap.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4kwbrljp.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp4kwbrljp.scala:67:0 ----------------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kwbrljp.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kwbrljp.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kwbrljp.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4kwbrljp.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ N"
  stdout: ''
  timestamp: 1659797767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length)\n \
    \           if(string.substring(i, i + substring.length) == substring)\n     \
    \           count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmptapyp_st.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmptapyp_st.scala:15)\n\
    \tat Problem$.main(tmptapyp_st.scala:21)\n\tat Problem.main(tmptapyp_st.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpepui2zqd.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnb0ae02.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            if (count.contains(sub)) {\n                count(sub) += 1\n   \
    \         } else {\n                count(sub) = 1 // count the first time\n \
    \           }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsq585ewj.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val countMap = mutable.Map[String, Long]()\n        val subStringLength\
    \ = substring.length\n        string.split(substring).foreach(x => {\n       \
    \     val substringLength = x.length\n            val substringIndex = substring.length\n\
    \            val substringChars = substring.toCharArray\n            val substringCharsLength\
    \ = substringChars.length\n            val substringCharsIndex = substringChars.length\n\
    \            val substringCharsIndexOf = substringChars.indexOf\n            val\
    \ substringCharsIndexOfLast = substringChars.lastIndexOf\n            val substringCharsIndexOfFirst\
    \ = substringChars.indexOf _\n            val substringCharsIndexOfLast = substringChars.lastIndexOf\
    \ _\n            val substringCharsIndexOfFirst = substringChars.indexOf _\n \
    \           val substringCharsIndexOfLast = substringChars.lastIndexOf _\n   \
    \         val substringCharsIndexOfFirst = substringChars.indexOf _\n        \
    \    val substringCharsIndexOfLast = substringChars.lastIndexOf _\n          \
    \  val substringCharsIndexOfFirst = substringChars.indexOf _\n            val\
    \ substringCharsIndexOfLast = substringChars.lastIndexOf _\n            val substringCharsIndexOfFirst\
    \ = substringChars.indexOf _\n            val substringCharsIndexOfLast = substringChars.lastIndexOf\
    \ _\n            val substringCharsIndexOfFirst = substringChars.indexOf _\n \
    \           val substringCharsIndexOfLast = substringChars.lastIndexOf _\n   \
    \         val substringCharsIndexOfFirst = substringChars.indexOf _\n        \
    \    val substringCharsIndexOfLast = substringChars.lastIndexOf _\n          \
    \  val substringCharsIndexOfFirst = substringChars.indexOf _\n            val\
    \ substringCharsIndexOfLast = substringChars.lastIndexOf _\n            val substringCharsIndexOfFirst\
    \ = substringChars.indexOf _\n            val substringCharsIndexOfLast = substringChars.lastIndexOf\
    \ _\n            val substringCharsIndexOfFirst = substringChars.indexOf _\n \
    \           val substringCharsIndexOfLast = substringChars.lastIndexOf _\n   \
    \         val substringCharsIndexOfFirst = substringChars.indexOf _\n        \
    \    val substringCharsIndexOfLast = substringChars.lastIndexOf _\n          \
    \  val substringCharsIndexOfFirst = substringChars.indexOf _\n            val\
    \ substringCharsIndexOfLast = substringChars.lastIndexOf _\n            val substringCharsIndexOfFirst\
    \ = substringChars.indexOf _\n            val substringCharsIndexOfLast = substringChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyyx2l_48.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyyx2l_48.scala:57:0 ----------------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyx2l_48.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyyx2l_48.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36msubstringCharsIndexOfLast\e[0m = substringChars.lastIndexOf _\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringCharsIndexOfLast is already defined as \e[33mvalue\e\
    [0m \e[35msubstringCharsIndexOfLast\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyyx2l_48.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36msubstringCharsIndexOfFirst\e\
    [0m = substringChars.indexOf _\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringCharsIndexOfFirst is already defined as \e[33mvalue\e\
    [0m \e[35msubstringCharsIndexOfFirst\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyyx2l_48.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36msubstringCh"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcsxwn4ha.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            if (end > string.length) end = string.length\n\
    \            val sub = string.substring(start, end)\n            val count = count.getOrElse(sub,\
    \ 0)\n            count.put(sub, count + 1)\n        }\n        count.getOrElse(substring,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppys2td7k.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmppys2td7k.scala:16:41\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e\
    [0m (end > string.length) end = string.length\n\e[31m\e[31m   |\e[0m         \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                              Reassignment to val end\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val substrings\
    \ = string.split(substring)\n        substrings.foreach(s => {\n            val\
    \ count = count.getOrElse(s, 0) + 1\n            count.put(s, count)\n       \
    \ })\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x5r2u3r.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring)\n\
    \            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring)\n                if (count ==\
    \ null) count.putIfAbsent(substring, 1L)\n                else count.put(substring,\
    \ count.get + 1) // count overlaping cases\n            }\n        }\n       \
    \ count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc4hndi0x.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc4hndi0x.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                 value indexOfSubstring is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Int]()\n        string.split(substring).foreach(s\
    \ => {\n            counts += (s -> 1)\n        })\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrtjs5fv.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var index = 0\n        var start =\
    \ -1\n        var end = -1\n        while (index < string.length) {\n        \
    \    start = string.indexOf(substring, index)\n            if (start != -1) {\n\
    \                end = start + substring.length\n                count += 1\n\
    \                index = end\n            } else {\n                index += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0gna9oan.scala:31)\n\tat Problem.main(tmp0gna9oan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val countMap = mutable.HashMap.empty[String, Long]\n     \
    \   val stringList = string.split(substring)\n        stringList.foreach { s =>\n\
    \            val count = countMap.getOrElse(s, 0) + 1\n            countMap +=\
    \ (s -> count)\n        }\n        countMap.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp318voo_h.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Int]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            count.get(sub) match {\n                case Some(count) => count.get\
    \ += 1\n                case None => count.put(sub, 1)\n            }\n      \
    \  }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgoc1s99q.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ len = string.length\n        val subLen = substring.length\n        val start\
    \ = 0\n        val end = len\n        while (start < end) {\n            val mid\
    \ = (start + end) / 2\n            if (string.charAt(mid) == substring.charAt(0))\
    \ {\n                val sub = string.substring(start, mid)\n                if\
    \ (sub.length == subLen) {\n                    val key = sub\n              \
    \      val count = count.getOrElse(key, 0) + 1\n                    count.put(key,\
    \ count)\n                }\n            }\n            else if (string.charAt(mid)\
    \ == substring.charAt(subLen - 1)) {\n                val sub = string.substring(mid\
    \ + 1, end)\n                if (sub.length == subLen) {\n                   \
    \ val key = sub\n                    val count = count.getOrElse(key, 0) + 1\n\
    \                    count.put(key, count)\n                }\n            }\n\
    \            else {\n                val sub = string.substring(start, mid + 1)\n\
    \                if (sub.length == subLen) {\n                    val key = sub\n\
    \                    val count = count.getOrElse(key, 0) + 1\n               \
    \     count.put(key, count)\n                }\n            }\n            start\
    \ = mid + 1\n        }\n        count.getOrElse(substring, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6xe36un.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc6xe36un.scala:23:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    \e\
    [33mval\e[0m \e[36mcount\e[0m = count.getOrElse(key, \e[31m0\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                Recursive \e[33mvalue\e[0m \e[35mcount\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc6xe36un.scala:31:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    \e\
    [33mval\e[0m \e[36mcount\e[0m = count.getOrElse(key, \e[31m0\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                Recursive \e[33mvalue\e[0m \e[35mcount\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc6xe36un.scala:39:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                    \e\
    [33mval\e[0m \e[36mcount\e[0m = count.getOrElse(key, \e[31m0\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                Recursive \e[33mvalue\e[0m \e[35mcount\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpc6xe36un.scala:43:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            start =\
    \ mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Reassignment to val start\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanat"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        for\
    \ (c <- string) {\n            val count = counts.getOrElse(substring, 0)\n  \
    \          counts += (c -> count + 1)\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78d8wspx.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        for(i <- 0 until chars.length){\n            val char = chars(i)\n\
    \            val substring = substrings(i)\n            if(char != substring){\n\
    \                val count = count.get(substring)\n                if(count ==\
    \ null) count.put(substring, 1L)\n                else count.put(substring, count.get(substring)\
    \ + 1)\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxt5ucx93.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuqxxkc8.scala:30)\n\tat Problem.main(tmpyuqxxkc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            if(string.substring(i, i+substring.length) == substring){\n     \
    \           count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmpsfa6a3c6.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmpsfa6a3c6.scala:17)\n\
    \tat Problem$.main(tmpsfa6a3c6.scala:23)\n\tat Problem.main(tmpsfa6a3c6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bk6v6g6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n                else\n                count.put(string.charAt(i),\
    \ count.getOrElse(string.charAt(i), 0L))\n        count.get(substring).orElse(0L)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp69rzyex4.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ len = string.length\n        val subLen = substring.length\n        var i =\
    \ 0\n        while (i < len) {\n            val start = i\n            while (i\
    \ < len && string.charAt(i) == substring.charAt(0)) {\n                i += 1\n\
    \            }\n            val end = i\n            val count = count.get(substring.substring(0,\
    \ subLen)).getOrElse(0)\n            count.update(substring.substring(0, subLen),\
    \ count + 1)\n            i = end\n        }\n        count.get(substring.substring(0,\
    \ subLen)).getOrElse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyodnhbh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmppyodnhbh.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = count.get(substring.substring(\e\
    [31m0\e[0m, subLen)).getOrElse(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \              ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count(x) = count(x) + 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2tp5avh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            if (start < string.length && end < string.length\
    \ && string.substring(start, end) == substring) {\n                val value =\
    \ count.get(string.substring(start, end)).getOrElse(0) + 1\n                count.put(string.substring(start,\
    \ end), value)\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpct_g96w5.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring)\n        for (i <- 0 until chars.length)\n \
    \           count += (chars(i) -> 1L)\n        count.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzwbnv7i.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                val sub = string.substring(i, i + substring.length)\n   \
    \             if (count.contains(sub)) {\n                    count(sub) += 1\n\
    \                } else {\n                    count(sub) = 1 // first time we\
    \ see this substring, so add 1\n                }\n            }\n        }\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiylo45oh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.put(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwkat8ul.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c, 0L)\
    \ += 1)\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhj_wj5j.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw53f9i4u.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        val substringArray = substring.split(string)\n\
    \        val stringArrayLength = stringArray.length\n        val substringArrayLength\
    \ = substringArray.length\n        var i = 0\n        while (i < stringArrayLength)\
    \ {\n            val substringIndex = substringArray.indexOf(stringArray(i))\n\
    \            if (substringIndex == -1) {\n                count.put(stringArray(i),\
    \ 1L)\n            } else {\n                count.put(stringArray(i), count.getOrElse(stringArray(i),\
    \ 0L) + substringIndex.toLong)\n            }\n            i += 1\n        }\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6risn0gg.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi74d0fic.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        val\
    \ len = string.length\n        val subLen = substring.length\n        var i =\
    \ 0\n        while (i < len) {\n            val start = i\n            while (i\
    \ < len && string.charAt(i) == substring.charAt(i)) {\n                i += 1\n\
    \            }\n            val end = i\n            val count = end - start\n\
    \            counts.put(substring.substring(start, end), count + 1)\n        }\n\
    \        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5jg0kku.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = i\n            val end = i + substring.length\n     \
    \       val sub = string.substring(start, end)\n            if(sub.equals(substring)){\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmpjxysl78k.scala:16)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmpjxysl78k.scala:20)\n\
    \tat Problem$.main(tmpjxysl78k.scala:26)\n\tat Problem.main(tmpjxysl78k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while(i < string.length && j < substring.length) {\n            if(string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if(string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx5mn2d3c.scala:30)\n\tat Problem.main(tmpx5mn2d3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx50k1kd.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count(x) += 1L)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_4yiene.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                val sub = string.substring(i, i + substring.length)\n   \
    \             val count = count.get(sub)\n                if (count == null) {\n\
    \                    count.put(sub, 1)\n                } else {\n           \
    \         count.put(sub, count.get + 1)\n                }\n            }\n  \
    \      }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpws8dph7w.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        for(i <- 0 until chars.length){\n\
    \            val char = chars(i)\n            val count = count.getOrElse(char,\
    \ 0)\n            val newCount = count + 1\n            count.put(char, newCount)\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfygcni9a.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach { c =>\n           \
    \ val count = count.getOrElseUpdate(c, 0) + 1\n            count.toLong\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1um24gev.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1um24gev.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        chars.foreach { \e[36mc\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e\
    [0m        Required: Long\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e\
    [0m = count.getOrElseUpdate(c, \e[31m0\e[0m) + \e[31m1\e[0m\n\e[31m16 |\e[0m \
    \           count.toLong\n\e[31m17 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx50k1kd.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count(x) = count(x) + 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2tp5avh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var start = 0\n        var end = string.length\n\
    \        while (start < end) {\n            val mid = (start + end) / 2\n    \
    \        if (string.charAt(mid) == substring.charAt(0)) {\n                start\
    \ = mid + 1\n                count = count + 1\n            } else if (string.charAt(mid)\
    \ == substring.charAt(1)) {\n                end = mid - 1\n                count\
    \ = count + 1\n            } else {\n                start = mid + 1\n       \
    \         end = mid - 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmp3thcdwut.scala:20)\n\tat Problem$.main(tmp3thcdwut.scala:32)\n\
    \tat Problem.main(tmp3thcdwut.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Int]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> count + 1)\n                i = end\n            }\n      \
    \  }\n        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqsojm8c9.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqsojm8c9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqsojm8c9.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => {\n            count.get(s) match {\n                case Some(count) =>\
    \ count.get += 1\n                case None => count.put(s, 1)\n            }\n\
    \        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq44arbcl.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ stringArray = string.split(substring)\n        stringArray.foreach(x => count.put(x,\
    \ count.getOrElse(x, 0L) + 1))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu04_w56.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ strings = string.split(substring)\n        for (string <- strings) {\n     \
    \       val count = count.getOrElse(string, 0)\n            count.toLong += 1\n\
    \            count.put(string, count.toLong)\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfvseth8.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnb0ae02.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap.empty[String, Long]\n       \
    \ for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts.put(substring,\
    \ count + 1)\n                counts += (substring -> count)\n            }\n\
    \        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpapr7jdnm.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpapr7jdnm.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.substring(i, i + substring.length), count.getOrElse(string.substring(i,\
    \ i + substring.length), 0L) + 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps68_wvcr.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0) + 1\n            \
    \    counts.put(substring, count)\n                counts += (substring -> count)\n\
    \            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbdl5ngj.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwbdl5ngj.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0L) + 1)\n                else\n                count.put(string.charAt(i),\
    \ count.getOrElse(string.charAt(i), 0L) - 1)\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpou8nocgw.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length)\n \
    \           if(string.substring(i, i + substring.length) == substring)\n     \
    \           count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmptapyp_st.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmptapyp_st.scala:15)\n\
    \tat Problem$.main(tmptapyp_st.scala:21)\n\tat Problem.main(tmptapyp_st.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnb0ae02.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.put(c.toLowerCase,\
    \ count.getOrElse(c.toLowerCase, 0L) + 1))\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_t1_70x.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.put(c.toUpperCase,\
    \ count.getOrElse(c.toUpperCase, 0L) + 1))\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmsvomga1.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjuzjdps.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var start = 0\n        var end = string.length\n\
    \        while (start < end) {\n            val mid = (start + end) / 2\n    \
    \        if (string.charAt(mid) == substring.charAt(0)) {\n                count\
    \ += 1\n                if (string.charAt(mid + 1) == substring.charAt(1)) {\n\
    \                    count += 1\n                    if (string.charAt(mid + 2)\
    \ == substring.charAt(2)) {\n                        count += 1\n            \
    \        }\n                }\n            }\n            start = mid + 1\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 7\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmpugsti57w.scala:19)\n\tat Problem$.main(tmpugsti57w.scala:32)\n\
    \tat Problem.main(tmpugsti57w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            if (count.contains(sub)) {\n                count(sub) += 1\n   \
    \         } else {\n                count(sub) = 1 // first time we see this substring\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphubsz8yo.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ index = new mutable.HashMap[String, Int]()\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) == substring.charAt(0))\n                count.put(string.charAt(i),\
    \ count.getOrElse(string.charAt(i), 0L) + 1)\n            else\n             \
    \   count.put(string.charAt(i), count.getOrElse(string.charAt(i), 0L))\n     \
    \   for (i <- 0 until substring.length)\n            if (substring.charAt(i) ==\
    \ string.charAt(index.getOrElse(substring.charAt(i), 0)))\n                index.put(substring.charAt(i),\
    \ index.getOrElse(substring.charAt(i), 0) + 1)\n            else\n           \
    \     index.put(substring.charAt(i), index.getOrElse(substring.charAt(i), 0) -\
    \ 1)\n        count.getOrElse(substring, 0L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysxwuv1j.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysxwuv1j.scala:13:24\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbuwlvuxq.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            if(string.charAt(i) == substring.charAt(0)){\n                for(j\
    \ <- 0 until substring.length){\n                    if(string.charAt(i+j) ==\
    \ substring.charAt(j)){\n                        count += 1;\n               \
    \     }\n                }\n            }\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 9\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes$$anonfun$1$$anonfun$1(tmpn6_9b8kd.scala:16)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes$$anonfun$1(tmpn6_9b8kd.scala:19)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmpn6_9b8kd.scala:21)\n\
    \tat Problem$.main(tmpn6_9b8kd.scala:27)\n\tat Problem.main(tmpn6_9b8kd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGe"
  stdout: ''
  timestamp: 1659797791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val substr = string.substring(start, end)\n\
    \            val count = counts.getOrElse(substr, 0) + 1\n            counts.put(substr,\
    \ count)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv54bw3g_.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val strings\
    \ = string.split(substring)\n        strings.foreach(s => count.update(s, count.getOrElse(s,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c5e77ss.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bk6v6g6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ startIndex = string.indexOf(substring)\n        if (startIndex == -1) return\
    \ 0\n        var endIndex = startIndex + substring.length\n        while (endIndex\
    \ < string.length) {\n            val substring2 = string.substring(endIndex)\n\
    \            val count = count.get(substring2) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.foreach\
    \ { count =>\n                count.toLong match {\n                    case count\
    \ if count > 0 => count.toLong + 1\n                    case _ => 1\n        \
    \        }\n            }\n            endIndex = string.indexOf(substring, endIndex\
    \ + 1)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2wikd9v.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo2wikd9v.scala:18:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = count.get(substring2) \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                    \
    \    Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo2wikd9v.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m Some(count) => count\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    Recursive \e[33mvalue\e\
    [0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val count = count.get(subString)\n            if (count == null)\
    \ count.put(subString, 1L) else count.put(subString, count + 1L)\n        }\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfsjko3t.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ strings = string.split(substring)\n        strings.foreach(s => count.update(s,\
    \ count.getOrElse(s, 0L) + 1))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6u94c21c.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        string.split(substring).foreach(x =>\
    \ count = count + 1)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpizr8t7k2.scala:17)\n\tat Problem.main(tmpizr8t7k2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbuwlvuxq.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuqxxkc8.scala:30)\n\tat Problem.main(tmpyuqxxkc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring)\n        chars.foreach { char =>\n            val\
    \ count = count.getOrElse(char, 0)\n            val newCount = count + 1\n   \
    \         count.put(char, newCount)\n        }\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2rtlh8f.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var start = 0\n        var end = string.length\n\
    \        while (start < end) {\n            val mid = start + (end - start) /\
    \ 2\n            if (string.charAt(mid) == substring.charAt(0)) {\n          \
    \      count += 1\n                start = mid + 1\n            } else if (string.charAt(mid)\
    \ == substring.charAt(1)) {\n                count += 1\n                end =\
    \ mid - 1\n            } else {\n                start = mid + 1\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmpdvbxxcu1.scala:20)\n\tat Problem$.main(tmpdvbxxcu1.scala:31)\n\
    \tat Problem.main(tmpdvbxxcu1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ stringArray = string.split(substring)\n        stringArray.foreach(x => {\n\
    \            val value = count.getOrElse(x, 0)\n            count(x) = value+1\n\
    \        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7e0k52g1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Int]()\n        val substrings\
    \ = string.split(substring)\n        substrings.foreach(s => {\n            val\
    \ count = count(s)\n            if (count > 0) {\n                count(s) = count\
    \ + 1\n            } else {\n                count(s) = 1\n            }\n   \
    \     })\n        count(substring).asInstanceOf[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn5nqrmk2.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ substrings = string.split(substring)\n        substrings.foreach { substring\
    \ =>\n            val count = count.get(substring)\n            if (count == null)\
    \ count.put(substring, 1L)\n            else count.put(substring, count.get +\
    \ 1L)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_91e9r2g.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    count += 1\n                i += 1\n            } else {\n              \
    \  count = 0\n                i += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5x9sxtox.scala:27)\n\tat Problem.main(tmp5x9sxtox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnb0ae02.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ startIndex = string.indexOf(substring)\n        if (startIndex == -1)\n    \
    \        return 0\n        val endIndex = startIndex + substring.length\n    \
    \    val subStrings = string.substring(startIndex, endIndex).split(\"\").toList\n\
    \        subStrings.foreach { subString =>\n            val count = count.get(subString)\n\
    \            if (count == null)\n                count(subString) = count(subString)\
    \ + 1\n            else\n                count(subString) = count(subString) +\
    \ 1\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptb50sqcv.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.put(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwkat8ul.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\
    \ count(\"a\") + count(\"b\") += 1\n            else count(\"a\") + count(\"b\"\
    ) += 1\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjri7g_12.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\
    \ count.put(string.charAt(i), count.getOrElse(string.charAt(i), 0) + 1L)\n   \
    \         else count.put(string.charAt(i), 0L)\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwv_21jxt.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring)\n        chars.foreach { c =>\n            val\
    \ count = counts.getOrElse(c.toLowerCase(), 0)\n            counts.put(c.toLowerCase(),\
    \ count + 1)\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52fv0mo7.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkio9mml1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                count += 1\n            }\n            i += 1\n        }\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes(tmpfd5l7nrl.scala:15)\n\tat Problem$.main(tmpfd5l7nrl.scala:25)\n\
    \tat Problem.main(tmpfd5l7nrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjuzjdps.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhugt_v6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var startIndex = 0\n        var endIndex\
    \ = 0\n        while(startIndex < string.length && endIndex < substring.length)\
    \ {\n            val currentChar = string.charAt(startIndex)\n            val\
    \ substringChar = substring.charAt(endIndex)\n            if(currentChar == substringChar)\
    \ {\n                count += 1\n                startIndex += 1\n           \
    \     endIndex += 1\n            } else if(currentChar < substringChar) {\n  \
    \              startIndex += 1\n            } else {\n                endIndex\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0ve3n7a.scala:32)\n\tat Problem.main(tmpf0ve3n7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring)\n        chars.foreach(c => count.put(c.toLowerCase(),\
    \ count.getOrElse(c.toLowerCase(), 0L) + 1))\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpte4ns48z.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count(s) += 1L)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpui2foqs0.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            if (start < string.length && end < string.length\
    \ && string.substring(start, end) == substring) {\n                val count =\
    \ count.get(string.substring(start, end)).getOrElse(0) + 1\n                count.put(string.substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwbyu141.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tmhbm_l.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            val count = count.getOrElse(sub, 0)\n            count(sub) = count(sub)\
    \ + 1\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vv6ohi1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Int]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(x => count.put(x, count.getOrElse(x,\
    \ 0) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c4jcz_0.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var lastIndex = string.length - 1\n\
    \        var startIndex = string.length\n        var index = string.length\n \
    \       while (index >= 0) {\n            if (string.charAt(index) == substring.charAt(0))\
    \ {\n                count += 1\n                lastIndex = index\n         \
    \       startIndex = index\n            }\n            index -= 1\n        }\n\
    \        if (lastIndex == string.length - 1)\n            count += 1\n       \
    \ if (lastIndex > string.length - 1)\n            count += lastIndex - string.length\
    \ + 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmp5og5uhmn.scala:17)\n\tat Problem$.main(tmp5og5uhmn.scala:31)\n\
    \tat Problem.main(tmp5og5uhmn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count(s) += 1L)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpui2foqs0.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring)\n        chars.foreach { c =>\n            val\
    \ count = mutable.HashMap.empty[String, Long]\n            val chars = string.split(substring)\n\
    \            chars.foreach { c2 =>\n                if (c == c2) count += ((c,\
    \ 1L))\n            }\n            count += ((c, 1L))\n            count += ((c,\
    \ 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n     \
    \       count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((c, 1L))\n            count += ((c, 1L))\n            count\
    \ += ((c, 1L))\n            count += ((c, 1L))\n            count += ((c, 1L))\n\
    \            count += ((\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpaxcj7t1w.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m            count += ((\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpaxcj7t1w.scala:84:0 ----------------------------\e[0m\e[0m\n\e[31m84\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxcj7t1w.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxcj7t1w.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaxcj7t1w.scala:83:1\
    \ ---------------------\e[0m\e[0m\n\e[31m83 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpaxcj7t1w.scala:76:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m76 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659797799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring)\n        for (i <- 0 until chars.length)\n \
    \           count += chars(i) -> 1\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfk8fknj9.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val strings\
    \ = string.split(substring)\n        for (s <- strings) {\n            val key\
    \ = s.toLowerCase\n            val value = count.get(key)\n            if (value\
    \ == null) {\n                count.put(key, 1)\n            } else {\n      \
    \          count.put(key, value + 1)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6e5v5lw.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Int]()\n        val chars\
    \ = string.split(substring)\n        chars.foreach(c => {\n            val count\
    \ = count.getOrElse(c, 0) + 1\n            count.put(c.toUpperCase, count)\n \
    \           count.put(c.toLowerCase, count)\n        })\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsm08q26.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            if (counts.contains(sub)) {\n                counts(sub) += 1\n \
    \           } else {\n                counts.put(sub, 1)\n            }\n    \
    \    }\n        counts.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr50ytfos.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        for(i <- 0 until chars.length)\n            for(j <- 0 until\
    \ substrings.length)\n                if(chars(i) == substrings(j))\n        \
    \            count.put(chars(i), count.getOrElse(chars(i), 0L) + 1)\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgt3k7c4s.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuqxxkc8.scala:30)\n\tat Problem.main(tmpyuqxxkc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        for(i <- 0 until chars.length){\n            val char = chars(i)\n\
    \            val substring = substrings(i)\n            if(chars.contains(substring)){\n\
    \                count.update(char, substring.length)\n            }\n       \
    \ }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfus81hpe.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var startIndex = 0\n        var endIndex\
    \ = 0\n        while(startIndex < string.length && endIndex < substring.length){\n\
    \            if(string.charAt(startIndex) == substring.charAt(endIndex)){\n  \
    \              count += 1\n                startIndex += 1\n                endIndex\
    \ += 1\n            }else{\n                if(string.charAt(startIndex) == substring.charAt(0)){\n\
    \                    count += 1\n                    startIndex += 1\n       \
    \         }else{\n                    if(string.charAt(endIndex) == substring.charAt(substring.length)){\n\
    \                        count += 1\n                        endIndex += 1\n \
    \                   }else{\n                        if(string.charAt(startIndex)\
    \ == substring.charAt(substring.length)){\n                            count +=\
    \ 1\n                            startIndex += 1\n                        }else{\n\
    \                            if(string.charAt(endIndex) == substring.charAt(0)){\n\
    \                                count += 1\n                                endIndex\
    \ += 1\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0km9vlu.scala:46)\n\tat Problem.main(tmpf0km9vlu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                if (end < string.length) {\n                    count.put(string.substring(start,\
    \ end), count.getOrElse(string.substring(start, end), 0L) + 1)\n             \
    \   }\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9fqzqtwc.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring).toList\n        for(c <- chars) {\n        \
    \    val count = mutable.HashMap.empty[String, Long]\n            val chars =\
    \ string.split(substring).toList\n            for(c <- chars) {\n            \
    \    val count = mutable.HashMap.empty[String, Long]\n                val chars\
    \ = string.split(substring).toList\n                for(c <- chars) {\n      \
    \              val count = mutable.HashMap.empty[String, Long]\n             \
    \       val chars = string.split(substring).toList\n                    for(c\
    \ <- chars) {\n                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                        val chars = string.split(substring).toList\n\
    \                        for(c <- chars) {\n                            val count\
    \ = mutable.HashMap.empty[String, Long]\n                            val chars\
    \ = string.split(substring).toList\n                            for(c <- chars)\
    \ {\n                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                val chars = string.split(substring).toList\n\
    \                                for(c <- chars) {\n                         \
    \           val count = mutable.HashMap.empty[String, Long]\n                \
    \                    val chars = string.split(substring).toList\n            \
    \                        for(c <- chars) {\n                                 \
    \       val count = mutable.HashMap.empty[String, Long]\n                    \
    \                    val chars = string.split(substring).toList\n            \
    \                            for(c <- chars) {\n                             \
    \               val count = mutable.HashMap.empty[String, Long]\n            \
    \                                val chars = string.split(substring).toList\n\
    \                                            for(c <- chars) {\n             \
    \                                   val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val chars = string.split(substring).toList\n\
    \                                                for(c <- chars) {\n         \
    \                                           val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val chars = string.split(substring).toList\n\
    \                                                    for(c <- chars) {\n     \
    \                                                   val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                        val chars = string.split(substring).toList\n\
    \                                                        for(c <- chars) {\n \
    \                                                           val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                            val chars\
    \ = string.split(substring).toList\n                                         \
    \                   for(c <- chars) {\n                                      \
    \                          val count = mutable.HashMap.empty[String, Long]\n \
    \                                                               val chars = string.split(substring).toList\n\
    \                                                                for(c <- chars)\
    \ {\n                                                                    val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                                val chars = string.split(substring).toList\n\
    \                                                                    for(c <-\
    \ chars) {\n                                                                 \
    \       val count = mutable.HashMap.empty[String, Long]\n                    \
    \                                                    val chars = string.split(substring).toList\n\
    \                                                                        for(c\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
    ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpecrbhw38.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpecrbhw38.scala:72:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpecrbhw38.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpecrbhw38.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecrbhw38.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpecrbhw38.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found E"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(1)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(2)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(3)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(4)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(5)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(6)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(7)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(8)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(9)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(10)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(11)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(12)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(13)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(14)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(15)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(16)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(17)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(18)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(19)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(20)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(21)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(22)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(23)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(24)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(25)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(26)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(27)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(28)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(29)) {\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeg03xw8y.scala:112:0 ---------------------------\e\
    [0m\e[0m\n\e[31m112 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeg03xw8y.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m 14 |\e[0m        \e[33mwhile\e[0m (i\
    \ < string.length) {\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m \
    \       Found:    Unit\n\e[31m    |\e[0m        Required: Long\n\e[31m 15 |\e\
    [0m            \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m0\e[0m))\
    \ {\n\e[31m 16 |\e[0m                count += \e[31m1\e[0m\n\e[31m 17 |\e[0m \
    \               i += \e[31m1\e[0m\n\e[31m 18 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m1\e[0m)) {\n\e[31m\
    \ 19 |\e[0m                count += \e[31m1\e[0m\n\e[31m 20 |\e[0m           \
    \     i += \e[31m1\e[0m\n\e[31m 21 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (string.charAt(i) == substring.charAt(\e[31m2\e[0m)) {\n\e[31m 22 |\e[0m \
    \               count += \e[31m1\e[0m\n\e[31m 23 |\e[0m                i += \e\
    [31m1\e[0m\n\e[31m 24 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (string.charAt(i)\
    \ == substring.charAt(\e[31m3\e[0m)) {\n\e[31m 25 |\e[0m                count\
    \ += \e[31m1\e[0m\n\e[31m 26 |\e[0m                i += \e[31m1\e[0m\n\e[31m 27\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e\
    [31m4\e[0m)) {\n\e[31m 28 |\e[0m                count += \e[31m1\e[0m\n\e[31m\
    \ 29 |\e[0m                i += \e[31m1\e[0m\n\e[31m 30 |\e[0m            } \e\
    [33melse\e[0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m5\e[0m))\
    \ {\n\e[31m 31 |\e[0m                count += \e[31m1\e[0m\n\e[31m 32 |\e[0m \
    \               i += \e[31m1\e[0m\n\e[31m 33 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m6\e[0m)) {\n\e[31m\
    \ 34 |\e[0m                count += \e[31m1\e[0m\n\e[31m 35 |\e[0m           \
    \     i += \e[31m1\e[0m\n\e[31m 36 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (string.charAt(i) == substring.charAt(\e[31m7\e[0m)) {\n\e[31m 37 |\e[0m \
    \               count += \e[31m1\e[0m\n\e[31m 38 |\e[0m                i += \e\
    [31m"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val char = string.charAt(i)\n  \
    \          val count = counts.getOrElse(char, 0)\n            val newCount = count\
    \ + 1\n            counts.put(char, newCount)\n        }\n        val count =\
    \ counts.getOrElse(substring, 0)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y7i6104.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var index = 0\n        var lastIndex\
    \ = string.length\n        while (index < lastIndex) {\n            if (string.charAt(index)\
    \ == substring.charAt(0)) {\n                count += 1\n                index\
    \ += substring.length\n            } else {\n                count = 0\n     \
    \           index += substring.length\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx79h8ff0.scala:28)\n\tat Problem.main(tmpx79h8ff0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bk6v6g6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val count = count.get(subString)\n            if (count == null)\
    \ count.put(subString, 1L)\n            else count.put(subString, count.get +\
    \ 1)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn752r__n.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring).toList\n        for(i <- 0 until chars.length)\n\
    \            count.update(chars(i), count.getOrElse(chars(i), 0L) + 1)\n     \
    \   count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqtr7dkhd.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach { c =>\n           \
    \ val count = count.getOrElse(c, 0) + 1\n            count.put(c, count)\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3745zjo.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_l463tlw.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c, 0L)\
    \ += 1)\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhj_wj5j.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1L))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpck8sg7t0.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ stringArray = string.split(substring)\n        val substringArray = substring.split(string)\n\
    \        var i = 0\n        while (i < stringArray.length && i < substringArray.length)\
    \ {\n            val stringChar = stringArray(i)\n            val substringChar\
    \ = substringArray(i)\n            if (stringChar == substringChar) {\n      \
    \          count.put(stringChar, count.getOrElse(stringChar, 0L) + 1)\n      \
    \          i += 1\n            } else {\n                count.put(stringChar,\
    \ count.getOrElse(stringChar, 0L) - 1)\n                i += 1\n            }\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzkx9uqq.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(s\
    \ => counts += (s -> 1))\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxqg415nz.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Int]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach { char =>\n        \
    \    val count = counts.getOrElse(char, 0)\n            counts.put(char, count\
    \ + 1)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdt5l6295.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            if (start < string.length && end < string.length)\
    \ {\n                val sub = string.substring(start, end)\n                if\
    \ (count.contains(sub)) {\n                    count(sub) += 1\n             \
    \   } else {\n                    count(sub) = 1 // first time we see this substring\
    \ so add 1\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnuyg2a7l.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            if (count.contains(sub)) {\n                count(sub) += 1\n   \
    \         } else {\n                count(sub) = 1 // count the first occurrence\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpug54s1so.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val strings\
    \ = string.split(substring)\n        strings.foreach(s => count(s) += 1L)\n  \
    \      strings.count(s => count(s) >= strings.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhitnblw.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bk6v6g6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnb0ae02.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(\"\").toList\n        val substrings = substring.split(\"\").toList\n\
    \        var i = 0\n        while (i < chars.length) {\n            val char =\
    \ chars(i)\n            val substring = substrings(i)\n            val count =\
    \ count.get(substring)\n            if (count == null) {\n                count.put(substring,\
    \ 1)\n            } else {\n                count.put(substring, count.get(substring)\
    \ + 1)\n            }\n            i += 1\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2srxqvh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu2srxqvh.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = count.get(substring)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi74d0fic.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_l463tlw.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap.empty[String, Long]\n       \
    \ val strings = string.split(substring)\n        strings.foreach(s => counts +=\
    \ (s -> 1))\n        strings.size * (strings.size - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rt5wopu.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\
    \ count(substring.charAt(0)) += 1\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptl7uq84i.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            val count = count.getOrElse(sub, 0)\n            count(sub) = count(sub)\
    \ + 1\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vv6ohi1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ substrings = string.split(substring)\n        substrings.foreach(s => {\n  \
    \          val count = count.getOrElse(s, 0) + 1\n            count.put(s, count)\n\
    \        })\n        count.getOrElse(substring, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhp1lxmt.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ subStrings = string.split(substring)\n        subStrings.foreach(s => {\n  \
    \          val count = mutable.HashMap.empty[String, Long]\n            val substrings\
    \ = s.split(substring)\n            substrings.foreach(ss => {\n             \
    \   val count = mutable.HashMap.empty[String, Long]\n                val substringss\
    \ = ss.split(substring)\n                substringss.foreach(sss => {\n      \
    \              val count = mutable.HashMap.empty[String, Long]\n             \
    \       val substringsss = sss.split(substring)\n                    substringsss.foreach(ssss\
    \ => {\n                        val count = mutable.HashMap.empty[String, Long]\n\
    \                        val substringssss = ssss.split(substring)\n         \
    \               substringssss.foreach(sssss => {\n                           \
    \ val count = mutable.HashMap.empty[String, Long]\n                          \
    \  val substringsssss = sssss.split(substring)\n                            substringsssss.foreach(ssssss\
    \ => {\n                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                val substringssssss = ssssss.split(substring)\n\
    \                                substringssssss.foreach(ssssss => {\n       \
    \                             val count = mutable.HashMap.empty[String, Long]\n\
    \                                    val substringssssss = ssssss.split(substring)\n\
    \                                    substringssssss.foreach(ssssss => {\n   \
    \                                     val count = mutable.HashMap.empty[String,\
    \ Long]\n                                        val substringssssss = ssssss.split(substring)\n\
    \                                        substringssssss.foreach(ssssss => {\n\
    \                                            val count = mutable.HashMap.empty[String,\
    \ Long]\n                                            val substringssssss = ssssss.split(substring)\n\
    \                                            substringssssss.foreach(ssssss =>\
    \ {\n                                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val substringssssss =\
    \ ssssss.split(substring)\n                                                substringssssss.foreach(ssssss\
    \ => {\n                                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val substringssssss\
    \ = ssssss.split(substring)\n                                                \
    \    substringsssss.foreach(ssssss => {\n                                    \
    \                    val count = mutable.HashMap.empty[String, Long]\n       \
    \                                                 val substringssssss = ssssss.split(substring)\n\
    \                                                        substringsssss.foreach(ssssss\
    \ => {\n                                                            val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                        val substringssssss = ssssss.split(substring)\n     \
    \                                                       substringsssss.foreach(ssssss\
    \ => {\n                                                                val count\
    \ = mutable.HashMap.empty[String, \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxow8dly.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpoxow8dly.scala:56:4 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxow8dly.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpoxow8dly.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxow8dly.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxow8dly.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoxow8dly.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap.e"
  stdout: ''
  timestamp: 1659797806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ strings = string.split(substring)\n        for (s <- strings) {\n          \
    \  val count = mutable.HashMap.empty[String, Long]\n            val strings =\
    \ s.split(substring)\n            for (i <- strings) {\n                val count\
    \ = mutable.HashMap.empty[String, Long]\n                val strings = i.split(substring)\n\
    \                for (j <- strings) {\n                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                    val strings = j.split(substring)\n              \
    \      for (k <- strings) {\n                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                        val strings = k.split(substring)\n          \
    \              for (l <- strings) {\n                            val count = mutable.HashMap.empty[String,\
    \ Long]\n                            val strings = l.split(substring)\n      \
    \                      for (m <- strings) {\n                                val\
    \ count = mutable.HashMap.empty[String, Long]\n                              \
    \  val strings = m.split(substring)\n                                for (n <-\
    \ strings) {\n                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                    val strings = n.split(substring)\n\
    \                                    for (o <- strings) {\n                  \
    \                      val count = mutable.HashMap.empty[String, Long]\n     \
    \                                   val strings = o.split(substring)\n       \
    \                                 for (p <- strings) {\n                     \
    \                       val count = mutable.HashMap.empty[String, Long]\n    \
    \                                        val strings = p.split(substring)\n  \
    \                                          for (q <- strings) {\n            \
    \                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val strings = q.split(substring)\n\
    \                                                for (r <- strings) {\n      \
    \                                              val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val strings = r.split(substring)\n\
    \                                                    for (s <- strings) {\n  \
    \                                                      val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                        val strings =\
    \ s.split(substring)\n                                                       \
    \ for (t <- strings) {\n                                                     \
    \       val count = mutable.HashMap.empty[String, Long]\n                    \
    \                                        val strings = t.split(substring)\n  \
    \                                                          for (u <- strings)\
    \ {\n                                                                val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                            val strings = u.split(substring)\n              \
    \                                                  for (v <- strings) {\n    \
    \                                                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                                    val\
    \ strings = v.split(substring)\n                                             \
    \                       for (w <- strings) {\n                               \
    \                                         val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                                    \
    \    val strings = w.split(substring)\n                                      \
    \                                  for (x <- strings) {\n                    \
    \                                                        val count = mutable.HashMap.empty[String,\
    \ Long\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2z2wtbhd.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2z2wtbhd.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp2z2wtbhd.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2z2wtbhd.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2z2wtbhd.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2z2wtbhd.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found E"
  stdout: ''
  timestamp: 1659797806
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuqxxkc8.scala:30)\n\tat Problem.main(tmpyuqxxkc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    var k = 0\n        while (i < string.length && j < substring.length) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n            } else if\
    \ (string.charAt(i) > substring.charAt(j)) {\n                j += 1\n       \
    \     } else {\n                i += 1\n                k += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp488acz9k.scala:32)\n\tat Problem.main(tmp488acz9k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n                else\n                count.put(string.charAt(i),\
    \ count.getOrElse(string.charAt(i), 0L))\n        count.get(substring).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxsv2glv3.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => {\n            val\
    \ count = count.getOrElse(c, 0) + 1\n            count.put(c, count)\n       \
    \ })\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14fjomxy.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val counts = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => counts += (x -> 1L))\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfls0y34k.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val sub = string.substring(i, i + substring.length)\n\
    \            val count = count.get(sub) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.put(sub,\
    \ count)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ohdqonl.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkio9mml1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ subStringLength = substring.length\n        val stringLength = string.length\n\
    \        var i = 0\n        while (i < stringLength) {\n            val start\
    \ = i\n            while (i < stringLength && string.charAt(i) == substring.charAt(0))\
    \ {\n                i += 1\n            }\n            val end = i\n        \
    \    val count = count.get(substring)\n            if (count == null) {\n    \
    \            count.put(substring, 1)\n            } else {\n                count.put(substring,\
    \ count.get + 1)\n            }\n            i = end\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4s0bo22y.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4s0bo22y.scala:22:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = count.get(substring)\n\e[31m\e[31m   |\e[0m           \
    \             ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ strings = string.split(substring)\n        strings.foreach(s => {\n        \
    \    val count = mutable.HashMap.empty[String, Long]\n            val strings\
    \ = s.split(substring)\n            strings.foreach(ss => {\n                val\
    \ count = mutable.HashMap.empty[String, Long]\n                val strings = ss.split(substring)\n\
    \                strings.foreach(sss => {\n                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                    val strings = sss.split(substring)\n            \
    \        strings.foreach(ssss => {\n                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                        val strings = ssss.split(substring)\n       \
    \                 strings.foreach(sssss => {\n                            val\
    \ count = mutable.HashMap.empty[String, Long]\n                            val\
    \ strings = sssss.split(substring)\n                            strings.foreach(ssssss\
    \ => {\n                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                val strings = ssssss.split(substring)\n\
    \                                strings.foreach(ssssss => {\n               \
    \                     val count = mutable.HashMap.empty[String, Long]\n      \
    \                              val strings = ssssss.split(substring)\n       \
    \                             strings.foreach(ssssss => {\n                  \
    \                      val count = mutable.HashMap.empty[String, Long]\n     \
    \                                   val strings = ssssss.split(substring)\n  \
    \                                      strings.foreach(ssssss => {\n         \
    \                                   val count = mutable.HashMap.empty[String,\
    \ Long]\n                                            val strings = ssssss.split(substring)\n\
    \                                            strings.foreach(ssssss => {\n   \
    \                                             val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val strings = ssssss.split(substring)\n\
    \                                                strings.foreach(ssssss => {\n\
    \                                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val strings = ssssss.split(substring)\n\
    \                                                    strings.foreach(ssssss =>\
    \ {\n                                                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                        val strings =\
    \ ssssss.split(substring)\n                                                  \
    \      strings.foreach(ssssss => {\n                                         \
    \                   val count = mutable.HashMap.empty[String, Long]\n        \
    \                                                    val strings = ssssss.split(substring)\n\
    \                                                            strings.foreach(ssssss\
    \ => {\n                                                                val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                            val strings = ssssss.split(substring)\n         \
    \                                                       strings.foreach(ssssss\
    \ => {\n                                                                    val\
    \ count = mutable.HashMap.empty[String, Long]\n                              \
    \                                      val strings = ssssss.split(substring)\n\
    \                                                                    strings.foreach(ss\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpto7ay76x.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpto7ay76x.scala:61:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpto7ay76x.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpto7ay76x.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpto7ay76x.scala:15:24 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e\
    [0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpto7ay76x.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpto7ay76x.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35m"
  stdout: ''
  timestamp: 1659797812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            val found = string.indexOf(substring, i)\n            if (found\
    \ >= 0) {\n                count += 1\n                i = found + substring.length\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphcpzd6pk.scala:28)\n\tat Problem.main(tmphcpzd6pk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val substr = string.substring(start, end)\n\
    \            if (count.contains(substr)) {\n                count(substr) += 1\n\
    \            } else {\n                count(substr) = 1 // new substring\n  \
    \          }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsajjo0vp.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = i\n            val end = i + substring.length\n     \
    \       val sub = string.substring(start, end)\n            if(string.contains(sub)){\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjq6qewkw.scala:25)\n\tat Problem.main(tmpjq6qewkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val subStrings\
    \ = string.split(substring)\n        for(subString <- subStrings) {\n        \
    \    val subStringCount = count.get(subString)\n            if(subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ycw0eex.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ len = string.length\n        var i = 0\n        while (i < len) {\n        \
    \    val start = i\n            val end = i + substring.length\n            val\
    \ sub = string.substring(start, end)\n            if (count.contains(sub)) {\n\
    \                count(sub, count)\n            } else {\n                count(sub,\
    \ 1L)\n            }\n            i += substring.length\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbdeqah2.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        substrings.foreach(substring => {\n            val index =\
    \ chars.indexOf(substring)\n            if (index != -1) {\n                val\
    \ count = chars.count(_ == substring)\n                count.foreach { count =>\
    \ count.toLong match {\n                    case 0 => count.toLong\n         \
    \           case _ => count.toLong + 1\n                }}\n            }\n  \
    \      })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1en9uale.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1en9uale.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                count.foreach { \e[36mcount\e[0m => count.toLong\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value foreach is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        for (i\
    \ <- 0 until string.length) {\n            val sub = string.substring(i, i + substring.length)\n\
    \            if (count.contains(sub)) {\n                count(sub) += 1\n   \
    \         } else {\n                count(sub) = 1 // first time we see this substring\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsh7gc_a6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        for(i <- 0 until chars.length){\n            val char = chars(i)\n\
    \            val substring = substrings(i)\n            if(chars.contains(substring)){\n\
    \                count.update(substring, count.getOrElse(substring, 0) + 1L)\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_90in1x.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => {\n            val\
    \ count = count.getOrElse(c, 0) + 1\n            count.put(c, count)\n       \
    \ })\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14fjomxy.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv97l3rkc.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring).toList\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv045u_1e.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(1)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(2)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(3)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(4)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(5)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(6)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(7)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(8)) {\n     \
    \           count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(9)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(10)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(11)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(12)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(13)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(14)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(15)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(16)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(17)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(18)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(19)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(20)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(21)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(22)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(23)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(24)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(25)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(26)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(27)) {\n                count += 1\n                i +=\
    \ 1\n            } else if (string.charAt(i) == substring.charAt(28)) {\n    \
    \            count += 1\n                i += 1\n            } else if (string.charAt(i)\
    \ == substring.charAt(29)) {\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeg03xw8y.scala:112:0 ---------------------------\e\
    [0m\e[0m\n\e[31m112 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeg03xw8y.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m 14 |\e[0m        \e[33mwhile\e[0m (i\
    \ < string.length) {\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m \
    \       Found:    Unit\n\e[31m    |\e[0m        Required: Long\n\e[31m 15 |\e\
    [0m            \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m0\e[0m))\
    \ {\n\e[31m 16 |\e[0m                count += \e[31m1\e[0m\n\e[31m 17 |\e[0m \
    \               i += \e[31m1\e[0m\n\e[31m 18 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m1\e[0m)) {\n\e[31m\
    \ 19 |\e[0m                count += \e[31m1\e[0m\n\e[31m 20 |\e[0m           \
    \     i += \e[31m1\e[0m\n\e[31m 21 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (string.charAt(i) == substring.charAt(\e[31m2\e[0m)) {\n\e[31m 22 |\e[0m \
    \               count += \e[31m1\e[0m\n\e[31m 23 |\e[0m                i += \e\
    [31m1\e[0m\n\e[31m 24 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (string.charAt(i)\
    \ == substring.charAt(\e[31m3\e[0m)) {\n\e[31m 25 |\e[0m                count\
    \ += \e[31m1\e[0m\n\e[31m 26 |\e[0m                i += \e[31m1\e[0m\n\e[31m 27\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e\
    [31m4\e[0m)) {\n\e[31m 28 |\e[0m                count += \e[31m1\e[0m\n\e[31m\
    \ 29 |\e[0m                i += \e[31m1\e[0m\n\e[31m 30 |\e[0m            } \e\
    [33melse\e[0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m5\e[0m))\
    \ {\n\e[31m 31 |\e[0m                count += \e[31m1\e[0m\n\e[31m 32 |\e[0m \
    \               i += \e[31m1\e[0m\n\e[31m 33 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (string.charAt(i) == substring.charAt(\e[31m6\e[0m)) {\n\e[31m\
    \ 34 |\e[0m                count += \e[31m1\e[0m\n\e[31m 35 |\e[0m           \
    \     i += \e[31m1\e[0m\n\e[31m 36 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (string.charAt(i) == substring.charAt(\e[31m7\e[0m)) {\n\e[31m 37 |\e[0m \
    \               count += \e[31m1\e[0m\n\e[31m 38 |\e[0m                i += \e\
    [31m"
  stdout: ''
  timestamp: 1659797803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                j += 1\n            } else {\n                i += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksamzn71.scala:30)\n\tat Problem.main(tmpksamzn71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ strings = string.split(substring)\n        strings.foreach(s => count.put(s,\
    \ count.getOrElse(s, 0L) + 1))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzduifmmn.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Int]()\n        for (i\
    \ <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val value = count.get(string.substring(start, end)).getOrElse(0)\
    \ +1\n                count.put(string.substring(start, end), value)\n       \
    \     }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptewfbg1y.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptewfbg1y.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        val\
    \ len = string.length\n        val subLen = substring.length\n        var i =\
    \ 0\n        while (i < len) {\n            val start = i\n            while (i\
    \ < len && string.charAt(i) == substring.charAt(i)) {\n                i += 1\n\
    \            }\n            val end = i\n            val count = count.get(substring)\n\
    \            if (count == null) {\n                count.put(substring, 1)\n \
    \           } else {\n                count.put(substring, count.get(substring)\
    \ + 1)\n            }\n            i = end\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ohq084k.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ohq084k.scala:22:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = count.get(substring)\n\e[31m\e[31m   |\e[0m           \
    \             ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n    \
    \    while (i < string.length && j < substring.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                j += 1\n            } else {\n                i += 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksamzn71.scala:30)\n\tat Problem.main(tmpksamzn71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ len = string.length\n        val subLen = substring.length\n        var i =\
    \ 0\n        while (i < len) {\n            val start = i\n            while (i\
    \ < len && string.charAt(i) == substring.charAt(0)) {\n                i += 1\n\
    \            }\n            val end = i\n            val subEnd = end - subLen\n\
    \            while (i < subEnd) {\n                val subStart = i\n        \
    \        while (i < subEnd && string.charAt(i) == substring.charAt(subLen)) {\n\
    \                    i += 1\n                }\n                val subEnd = i\n\
    \                val subSubEnd = subEnd - subLen\n                val count =\
    \ count.get(string.substring(start, subStart)).getOrElse(0) + 1\n            \
    \    val count = count.get(string.substring(subStart, subEnd)).getOrElse(0) +\
    \ 1\n                val count = count.get(string.substring(subStart, subSubEnd)).getOrElse(0)\
    \ + 1\n                i += 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7spufop.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpx7spufop.scala:31:20 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count.get(string.substring(subStart,\
    \ subEnd)).getOrElse(\e[31m0\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcount is already defined as \e[33mvalue\e[0m \e[35mcount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx7spufop.scala:32:20 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count.get(string.substring(subStart,\
    \ subSubEnd)).getOrElse(\e[31m0\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcount is already defined as \e[33mvalue\e[0m \e[35mcount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpx7spufop.scala:30:28 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count.get(string.substring(start,\
    \ subStart)).getOrElse(\e[31m0\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                         ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            val count = count.getOrElse(sub, 0)\n            count.update(sub,\
    \ count + 1)\n        }\n        count.getOrElse(substring, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8zg6hrp.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length) {\n            val sub = string.substring(i, i\
    \ + substring.length)\n            if (count.contains(sub)) {\n              \
    \  count(sub) += 1\n            } else {\n                count(sub) = 1 // first\
    \ time we see this substring so add 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpelxg7cw8.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length) {\n            val start = i\n            val end\
    \ = i + substring.length\n            val sub = string.substring(start, end)\n\
    \            if (count.contains(sub)) {\n                count(sub) += 1\n   \
    \         } else {\n                count(sub) = 1 // start from 0\n         \
    \   }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe48o6tps.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz3dnlpx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) == substring.charAt(0))\n\
    \                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n            else\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0L) + 1)\n        count.get(substring).orElse(0L)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp039a2v6z.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.put(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwkat8ul.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap[String, Long]()\n        val substrings\
    \ = string.split(substring)\n        substrings.foreach { substring =>\n     \
    \       val substrings = string.split(substring)\n            substrings.foreach\
    \ { substring =>\n                val count = substrings.count(substring) + 1\n\
    \                count.put(substring, count)\n            }\n        }\n     \
    \   count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ky9p523.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ky9p523.scala:17:45 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = substrings.count(substring)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \    Found:    (substring : String)\n\e[31m   |\e[0m                         \
    \                 Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0ky9p523.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                count.put(substring, count)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ put is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659797814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = mutable.HashMap.empty[String, Long]\n        val\
    \ chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjuzjdps.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    //\
    \ 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
    \ 'aa')\n    // 3\n    def howManyTimes(string : String, substring : String) :\
    \ Long = {\n        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length)\n            if (string.substring(i, i + substring.length)\
    \ == substring)\n                count.put(string.substring(i, i + substring.length),\
    \ count.getOrElse(string.substring(i, i + substring.length), 0L) + 1)\n      \
    \  count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhnkc40d.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797813
