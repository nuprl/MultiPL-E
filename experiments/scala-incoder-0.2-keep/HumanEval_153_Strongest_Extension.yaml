name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n   \
  \ def StrongestExtension(class_name : String, extensions : List[String]) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extensions_map = extensions.map(x => x.toUpperCase).zipWithIndex.toMap\n\
    \        val extensions_count = extensions.map(x => x.toUpperCase).distinct.length\n\
    \        val extensions_count_map = extensions_count.zipWithIndex.toMap\n    \
    \    val extensions_count_sum = extensions_count.foldLeft(0)(_ + _)\n        val\
    \ extensions_count_sum_map = extensions_count_sum.zipWithIndex.toMap\n       \
    \ val extensions_count_sum_map = extensions_count_sum_map.filter(_._2 > 1).map(_._1)\n\
    \        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2 >\
    \ 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        if (extensions_count > 1) {\n            val\
    \ extensions_sorted = extensions.sortWith((a, b) => strength - a.length - b.length)\n\
    \            val extensions_sorted = extensions.sortWith((a, b) => strength -\
    \ a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val strongest_extension = extensions_map.maxBy(_._2)._1\n\
    \        s\"$class_name.$strongest_extension\"", "        // Your code here\n\
    \        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x\
    \ => (x._1 - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val strongest_extension\
    \ = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val class_name_with_strongest_extension\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val class_name_with_strongest_extension_with_same_strength\
    \ = class_name_with_strongest_extension.filter(x => x == strongest_extension)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength.filter(x => x == class_name_with_strongest_extension_with_same_strength.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension_",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => a.length - b.length)\n\
    \        val extension_first = extensions_sorted.head\n        val extension_last\
    \ = extensions_sorted.last\n        val extension_first_count = extension_first.length\n\
    \        val extension_last_count = extension_last.length\n        val extension_first_first_letter\
    \ = extension_first(0)\n        val extension_last_last_letter = extension_last(extension_last_count\
    \ - 1)\n        val extension_first_last_letter = extension_first(extension_first_count\
    \ - 1)\n        val extension_first_first_letter_count = extension_first_first_letter.length\n\
    \        val extension_last_last_letter_count = extension_last_last_letter.length\n\
    \        val extension_first_last_letter_count = extension_first_last_letter.length\n\
    \        val extension_first_first_letter_last_letter = extension_first(extension_first_first_letter_count\
    \ - 1)\n        val extension_last_last_letter_last_letter = extension_last(extension_last_last_letter_count\
    \ - 1)\n        val extension_first_last_letter_last_letter_count = extension_first_last_letter_last_letter.length\n\
    \        val extension_first_last_letter_last_letter_last_letter_count = extension_last_last_letter_last_letter.length\n\
    \        val extension_first_last_letter_last_letter_last_letter_last_letter =\
    \ extension_first(extension_first_last_letter_last_letter_last_letter_count -\
    \ 1)\n        val extension_last_last_letter_last_letter_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_last_letter_last_letter_count -\
    \ 1)\n        val extension_first_last_letter_last_letter_last_letter_last_letter_count\
    \ = extension_first_last_letter_last_letter_last_letter_last_letter.length\n \
    \       val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ = extension_last_last_letter_last_letter_last_letter_last_letter.length\n  \
    \      val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_last_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_",
  "        val extensions_map = extensions.map(e => e.map(c => (c, 1)).toMap)\n  \
    \      val class_name_map = class_name.map(c => (c, 1)).toMap\n        val extensions_count\
    \ = extensions_map.values.sum\n        val class_name_count = class_name_map.values.sum\n\
    \        val strength = class_name_count - extensions_count\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(_._2).reverse\n        val class_name_sorted\
    \ = class_name_map.values.sortBy(_._2).reverse\n        val extensions_first =\
    \ extensions_sorted.head\n        val class_name_first = class_name_sorted.head\n\
    \        if (class_name_count > extensions_count && class_name_sorted.length ==\
    \ 1) {\n            class_name_sorted.head\n        } else if (extensions_count\
    \ > class_name_count && extensions_sorted.length == 1) {\n            extensions_sorted.head\n\
    \        } else {\n            val extensions_first_index = extensions_sorted.indexWhere(_._2\
    \ == extensions_first._2)\n            val class_name_first_index = class_name_sorted.indexWhere(_._2\
    \ == class_name_first._2)\n            val extensions_first_name = extensions_first._1\n\
    \            val class_name_first_name = class_name_first._1\n            val\
    \ extensions_first_name_count = extensions_first._2\n            val class_name_first_name_count\
    \ = class_name_first._2\n            val extensions_first_name_strength = extensions_first._3\n\
    \            val class_name_first_name_strength = class_name_first._3\n      \
    \      val extensions_first_name_sorted = extensions_sorted.take(extensions_first_index).sortBy(_._2).reverse\n\
    \            val class_name_first_sorted = class_name_sorted.take(class_name_first_index).sortBy(_._2).reverse\n\
    \            val extensions_first_name_first = extensions_first_name_sorted.head\n\
    \            val class_name_first_name_first = class_name_first_name_sorted.head\n\
    \            if (class_name_first_name_count > extensions_first_name_count &&\
    \ class_name_first_name_sorted.length == 1) {\n                class_name_first_name_sorted.head\n\
    \            } else if (extensions_first_name_count > class_name_first_name_count\
    \ && extensions_first_name_sorted.length == 1) {\n                extensions_first_name_sorted.head\n\
    \            } else {\n                val extensions_first_name_first_index =\
    \ extensions_first_name_sorted.indexWhere(_._2 == extensions_first_name_first._2)\n\
    \                val class_name_first_name_first_index = class_name_first_name_sorted.indexWhere(_._2\
    \ == class_name_first_name_first._2)\n                val extensions_first_name_first_name\
    \ = extensions_first_name_first._1\n                val ", "        val extensions_count\
    \ = extensions.map(x => x.length).sum\n        val extensions_count_sorted = extensions.map(x\
    \ => x.length).sort\n        val strength = extensions_count_sorted.last\n   \
    \     val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val strength_reversed = extensions_count_sorted_reversed.last\n     \
    \   val strength_fraction = strength_reversed / extensions_count\n        val\
    \ extensions_count_sorted_reversed_fraction = extensions_count_sorted_reversed.map(x\
    \ => x / extensions_count)\n        val extensions_count_sorted_reversed_fraction_sum\
    \ = extensions_count_sorted_reversed_fraction.sum\n        val extensions_count_sorted_reversed_fraction_sum_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction =\
    \ extensions_count_sorted_reversed_fraction_sum_fraction / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction /\
    \ extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_\
    \ == 'D')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.values.toList.sortWith(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.take(1).mkString.concat(\"\
    .\").concat(extensions_sorted.last)\n        extensions_sorted", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n\
    \        val extension_first = extensions_sorted.head\n        val extension_last\
    \ = extensions_sorted.last\n        val extension_first_name = extension_first._1\n\
    \        val extension_last_name = extension_last._1\n        val extension_first_name_length\
    \ = extension_first_name.length\n        val extension_last_name_length = extension_last_name.length\n\
    \        val extension_first_name_strength = extension_first._2\n        val extension_last_name_strength\
    \ = extension_last._2\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val class_name_sorted = class_name_map.toSeq.sortBy(_._2).reverse\n \
    \       val strength_sorted = strength.toSeq.sortBy(_._2).reverse\n        val\
    \ index = strength_sorted.zipWithIndex.find(_._2 == strength_sorted.head._2).get._1\n\
    \        val extension = extensions_sorted.apply(index)\n        class_name_sorted.apply(index)\
    \ + extension", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2 > class_name_map.get(_._1)).map(_._1).length\n\
    \        val extensions_sorted = extensions_map.filter(_._2 > class_name_map.get(_._1)).sortBy(_._1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2).mkString(\".\")\n\
    \        class_name + extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_map_sorted_keys = extensions_map_sorted.keys\n        val\
    \ extensions_map_sorted_values = extensions_map_sorted.values\n        val extensions_map_sorted_keys_sorted\
    \ = extensions_map_sorted_keys.sortBy(_._1)\n        val extensions_map_sorted_values_sorted\
    \ = extensions_map_sorted_values.sortBy(_._1)\n        val extensions_map_sorted_keys_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted\
    \ = extensions_map_sorted_values_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted.toSeq\n        val\
    \ extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted = extensions_map_sorted_values_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted.toSeq\n    \
    \    val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted.toSeq\n  \
    \      val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val strength_str = if (strength == 0) \"\"\
    \ else s\"${class_name}${extensions_map.keys.toList.sortBy(x => -extensions_map(x)).head}\"\
    \n        strength_str", "        val extensions_count = extensions.map(x => x.length).sum\n\
    \        val strength = extensions_count / extensions.length\n        val extensions_sorted\
    \ = extensions.sortWith(x => x.toLowerCase compare class_name)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.length > 0)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => x.toUpperCase compare class_name)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(x => x.length > 0)\n       \
    \ val extensions_sorted = extensions_sorted.map(x => x.toLowerCase compare class_name)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.length > 0)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase compare\
    \ class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x =>\
    \ x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x => x.toLowerCase\
    \ compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sor", "       \
    \ val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name.count(' ')\n        val strength = class_name_count - extensions_count\n\
    \        if (extensions_count > class_name_count) {\n            val max_key =\
    \ extensions_map.maxBy(_._2)._1\n            val max_value = extensions_map.maxBy(_._2)._2\n\
    \            class_name + max_key + max_value\n        } else {\n            class_name\
    \ + extensions_map.minBy(_._2)._1\n        }", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strength = extensions_sorted.head._1\
    \ - extensions_sorted.last._1\n        val extension = extensions_sorted.last._2\n\
    \        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength == 0) class_name\n        else if (strength\
    \ < 0) class_name + extensions_map.keys.toList.sortBy(x => -extensions_map(x)).head\n\
    \        else class_name + extensions_map.keys.toList.sortBy(x => extensions_map(x)).head",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name.countUpperCase\n        val strength = class_name_count - extensions_count\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        // Write your code here\n        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.filter(_._2.length == class_name_map.get(_._2)).length\n  \
    \      val strongest_extension = extensions_map.filter(_._2.length == class_name_map.get(_._2)).minBy(_._1)\n\
    \        class_name_map.get(_._2) + \".\" + strongest_extension._2", "       \
    \ val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => x.toUpperCase).reverse\n        val extensions_sorted_sorted = extensions_sorted.sortBy(x\
    \ => x.toUpperCase).reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.takeWhile(x\
    \ => x.toUpperCase.length < strength)\n        val extensions_sorted_sorted =\
    \ extensions_sorted_sorted.takeWhile(x => x.toUpperCase.length >= strength)\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ strength = extensions_count_sorted.last.length\n        val extensions_count_sorted\
    \ = extensions_count_sorted.takeWhile(_ < strength)\n        val extensions_count_sorted\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted = extensions_count_sorted.takeWhile(_\
    \ < extensions_count)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_.length < _.length)\n        val strength = extensions_count_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a')) / extensions_count_sorted.length\n\
    \        val strength_sorted = extensions_count_sorted.sortWith(_.length < _.length)\n\
    \        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_ == 'A')\
    \ - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions.map(x\
    \ => extensions_map(x.toUpperCase).length).sum\n        val class_name_count =\
    \ class_name.count('.')\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val extensions_first = extensions_sorted.head._2\n        val extensions_last\
    \ = extensions_sorted.last._2\n        val extensions_first_count = extensions_sorted.count(_._2\
    \ == extensions_first)\n        val extensions_last_count = extensions_sorted.count(_._2\
    \ == extensions_last)\n        if (extensions_first_count > extensions_last_count)\
    \ {\n            extensions_sorted.find(_._2 == extensions_first)._1 + \".\" +\
    \ extensions_first\n        } else {\n            extensions_sorted.find(_._2\
    \ == extensions_last)._1 + \".\" + extensions_last\n        }", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.values.max\n\
    \        val extension = extensions_map.values.min\n        val class_name_with_extension\
    \ = class_name + extension\n        if (extensions_map.values.toList.sorted ==\
    \ List(strength)) {\n            class_name_with_extension\n        } else {\n\
    \            class_name_with_extension + extensions_map.values.toList.sorted\n\
    \        }", "        val extensions_count = extensions.map(_.length).sum\n  \
    \      val extensions_count_sorted = extensions.map(_.length).sort\n        val\
    \ extensions_count_sorted_reversed = extensions_count_sorted.reverse\n       \
    \ val extensions_count_sorted_reversed_sorted = extensions_count_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed = extensions_count_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted.reverse\n        val\
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last\n\
    \        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val strength_reversed = extensions_count_sorted_reversed.last\n     \
    \   val strength_fraction = strength_reversed / extensions_count\n        val\
    \ class_name_with_extension = class_name + extensions.map(x => x.capitalize).mkString(\"\
    .\") + extensions_count.toString\n        val strength_fraction_reversed = strength_fraction\
    \ * -1\n        val strength_fraction_reversed_rounded = strength_fraction_reversed.round\n\
    \        val strength_fraction_reversed_rounded_string = strength_fraction_reversed_rounded.toString\n\
    \        val strength_fraction_reversed_rounded_string_with_extension = class_name_with_extension\
    \ + strength_fraction_reversed_rounded_string\n        val strength_fraction_reversed_rounded_string_with_extension_rounded\
    \ = strength_fraction_reversed_rounded_string_with_extension.round\n        val\
    \ strength_fraction_reversed_rounded_string_with_extension_rounded_string = strength_fraction_reversed_rounded_string_with_extension_rounded.toString\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension\
    \ = class_name_with_extension + strength_fraction_reversed_rounded_string_with_extension_rounded_string\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded\
    \ = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension.round\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string\
    \ = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded.toString\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension\
    \ = class_name_with_extension + strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension_rounded\
    \ = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension.round\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val class_name_map = class_name.split('.').map(_.toUpperCase).toMap\n\
    \        val strength = extensions_map.values.map(class_name_map.get(_)).sum\n\
    \        if (strength > 0) class_name + extensions_map.keys.toList.sortBy(_ -\
    \ strength).head\n        else class_name", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val strongest_extension = extensions_map_sorted.head._1\n        val strongest_extension_strength\
    \ = extensions_map_sorted.head._2\n        val class_name_with_strongest_extension\
    \ = class_name + strongest_extension\n        if(extensions_map_sorted.length\
    \ == 1) return class_name_with_strongest_extension\n        val strongest_extension_strength_2\
    \ = extensions_map_sorted.tail.head._2\n        if(strongest_extension_strength_2\
    \ > strongest_extension_strength) \n            StrongestExtension(class_name_with_strongest_extension,\
    \ extensions_map_sorted.tail.tail)\n        else class_name_with_strongest_extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2)\n        val first_extension = sorted_extensions.head\n\
    \        val first_extension_strength = first_extension._2\n        if (strength\
    \ == 0) first_extension\n        else if (strength < first_extension_strength)\
    \ first_extension\n        else class_name + first_extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortBy(_.length)\n   \
    \     val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = ", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val cap = e._1.toUpperCase.length\n            val\
    \ sm = e._2.toUpperCase.length\n            val strength = cap - sm\n        \
    \    if (strength > s) s \n            else s \n        }\n        val className\
    \ = className.toUpperCase\n        val extension = extensions_map.maxBy(_._1)._1\n\
    \        className + \".\" + extension", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_ < _)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)\n        ).sortBy(_._1).reverse.map(_._2).foldLeft(0)((a,\
    \ b) => a + b)\n        val strength = extensions_map.find(x => x == extensions_map.max).getOrElse(0)\n\
    \        val class_name_with_strength = class_name + \".\" + extensions.find(x\
    \ => x.toUpperCase.size == strength).getOrElse(\"\")\n        val class_name_with_strength_lowercase\
    \ = class_name_with_strength.toLowerCase\n        val class_name_with_strength_lowercase\
    \ = class_name_with_strength_lowercase.replaceAll(\"[^A-Z]\", \"\")\n        val\
    \ class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    ^\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    $\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    _\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\s\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\W\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\D\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{Punct}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{C}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{Z}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{L}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{M}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{S}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{P}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{C}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{Z}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{L}\", \"\")\n        val class_name_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val ", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (s, e) =>\n            val\
    \ c = class_name_map.getOrElse(e, e)\n            val cap = c.toUpperCase.length\n\
    \            val sm = c.toLowerCase.length\n            val strength = cap - sm\n\
    \            if (strength > s) strength\n            else s\n        }\n     \
    \   val class_name = class_name_map.getOrElse(extensions_map.keys.toList.sorted.head,\
    \ extensions_map.keys.toList.sorted.head)\n        val extension = extensions_map.getOrElse(extensions_map.keys.toList.sorted.last,\
    \ extensions_map.keys.toList.sorted.last)\n        s\"$class_name.$extension\"",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = extensions_count_upper\
    \ - strength\n        val strength_lower = extensions_count_lower - strength\n\
    \        val strength_sum = strength_upper + strength_lower\n        if (strength_sum\
    \ > 0) extensions(strength_sum - 1).substring(class_name.lastIndexOf('.') + 1)\n\
    \        else \"\"", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase).toMap\n        val extensions_count\
    \ = extensions.map(e => e.toUpperCase.charAt(0).toLowerCase).distinct.length\n\
    \        val extensions_count_map = extensions.map(e => e.toUpperCase.charAt(0).toLowerCase).distinct.map(e\
    \ => extensions_map(e) -> extensions_count(e)).sortBy(_._2).reverse\n        val\
    \ extensions_count_map = extensions_count_map.takeWhile(_._2 > 0).map(e => class_name\
    \ + e._1).mkString(\".\")\n        extensions_count_map.headOption.getOrElse(class_name)",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_\
    \ == 'D')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        val strength_difference\
    \ = strength - first_extension_strength\n        val first_extension_class = first_extension.substring(0,\
    \ first_extension.lastIndexOf('.'))\n        val first_extension_class_strength\
    \ = extensions_map.getOrElse(first_extension_class, 0)\n        val strength_difference_class\
    \ = strength_difference - first_extension_class_strength\n        val first_extension_class_name\
    \ = first_extension_class.substring(first_extension_class.lastIndexOf('.') + 1)\n\
    \        val first_extension_class_name_strength = extensions_map.getOrElse(first_extension_class_name,\
    \ 0)\n        val strength_difference_class_name = strength_difference_class -\
    \ first_extension_class_name_strength\n        val first_extension_class_name_strength_difference\
    \ = strength_difference_class_name - first_extension_class_name_strength\n   \
    \     val first_extension_class_name_strength_difference_class = first_extension_class_name_strength_difference\
    \ - first_extension_class_name_strength\n        val first_extension_class_name_strength_difference_class_name\
    \ = first_extension_class_name_strength_difference_class - first_extension_class_name_strength\n\
    \        val first_extension_class_name_strength_difference_class_name_name =\
    \ first_extension_class_name_strength_difference_class_name - first_extension_class_name_strength\n\
    \        val first_extension_class_name_strength_difference_class_name_name_name\
    \ = first_extension_class_name_strength_difference_class_name_name\n        val\
    \ first_extension_class_name_strength_difference_class_name_name_name", "    \
    \    val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val extensions_count = extensions.map(e => e.toUpperCase.charAt(0).toLowerCase).distinct.length\n\
    \        val class_name_count = class_name.distinct.length\n        val strength\
    \ = extensions_count - class_name_count\n        val extensions_sorted = extensions.sortWith(e\
    \ => extensions_map(e._1).compareTo(extensions_map(e._2)))\n        val extensions_sorted\
    \ = extensions_sorted.take(strength)\n        val class_name_sorted = class_name.sortWith(e\
    \ => e.toUpperCase.charAt(0).toLowerCase)\n        val class_name_sorted = class_name_sorted.take(strength)\n\
    \        val class_name_sorted.mkString(class_name_sorted.head.toString() + \"\
    .\")", "        val extensions_count = extensions.map(x => x.toUpperCase).distinct.length\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val strength = extensions_count_sorted.head\n        val extensions_sorted\
    \ = extensions_count_sorted.tail\n        val extensions_sorted = extensions_sorted.map(x\
    \ => x.toUpperCase)\n        val extensions_sorted = extensions_sorted.distinct.sortBy(x\
    \ => x.length)\n        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n\
    \        val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted.reverse\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_",
  "        val extensions_map = extensions.map(e => (e.toUpperCase - e.toLowerCase\
    \ -> 1)).toMap\n        val class_name_map = class_name.map(c => (c.toUpperCase\
    \ -> 1)).toMap\n        val max_strength = extensions_map.values.max\n       \
    \ val max_key = extensions_map.keys.max\n        val max_key_index = extensions_map.keys.indexOf(max_key)\n\
    \        val max_key_value = extensions_map.get(max_key)\n        val max_key_key_index\
    \ = max_key_index\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_", "        val extensions_count = extensions.map(_.length).sum\n  \
    \      val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_ratio = strength / extensions_count.toDouble\n        val\
    \ extensions_count_ratio = extensions_count_upper / extensions_count_lower\n \
    \       val extensions_count_ratio2 = extensions_count_upper / extensions_count_upper_ratio\n\
    \        val extensions_count_ratio3 = extensions_count_lower / extensions_count_lower_ratio\n\
    \        val extensions_count_ratio4 = extensions_count_upper / extensions_count_ratio\n\
    \        val extensions_count_ratio5 = extensions_count_lower / extensions_count_ratio2\n\
    \        val extensions_count_ratio6 = extensions_count_upper / extensions_count_ratio3\n\
    \        val extensions_count_ratio7 = extensions_count_lower / extensions_count_ratio4\n\
    \        val extensions_count_ratio8 = extensions_count_upper / extensions_count_ratio5\n\
    \        val extensions_count_ratio9 = extensions_count_lower / extensions_count_ratio6\n\
    \        val extensions_count_ratio10 = extensions_count_upper / extensions_count_ratio7\n\
    \        val extensions_count_ratio11 = extensions_count_lower / extensions_count_ratio8\n\
    \        val extensions_count_ratio12 = extensions_count_upper / extensions_count_ratio9\n\
    \        val extensions_count_ratio13 = extensions_count_lower / extensions_count_ratio10\n\
    \        val extensions_count_ratio14 = extensions_count_upper / extensions_count_ratio11\n\
    \        val extensions_count_ratio15 = extensions_count_lower / extensions_count_ratio12\n\
    \        val extensions_count_ratio16 = extensions_count_upper / extensions_count_ratio13\n\
    \        val extensions_count_ratio17 = extensions_count_lower / extensions_count_ratio14\n\
    \        val extensions_count_ratio18 = extensions_count_upper / extensions_count_ratio15\n\
    \        val extensions_count_ratio19 = extensions_count_lower / extensions_count_ratio16\n\
    \        val extensions_count_ratio20 = extensions_count_upper / extensions_count_ratio17\n\
    \        val extensions_count_ratio21 = extensions_count_lower / extensions_count_ratio18\n\
    \        val extensions_count_ratio22 = extensions_count_upper / extensions_count_ratio19\n",
  "        val extensions_map = extensions.map(e => e.toUpperCase).zipWithIndex.toMap\n\
    \        val extensions_sorted = extensions.sortWith(_.toUpperCase.compareTo(_))\n\
    \        val extensions_sorted_map = extensions_sorted.map(e => extensions_map(e._2))\n\
    \        val extensions_sorted_map_sorted = extensions_sorted_map.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted = extensions_sorted_map_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted = extensions_sorted_map_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted = extensions_sorted_map_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted = extensions_sorted_map_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted =\
    \ extensions_sorted_map_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.split('').map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map(x._1) -\
    \ class_name_map(x._2)).sum\n        val strongest_extension = extensions_map.values.filter(x\
    \ => x._1 == strength).head._2\n        class_name + \".\" + strongest_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val strongest_extension = extensions_map.maxBy(x\
    \ => strength(x._1))\n        class_name + \".\" + strongest_extension._1", " \
    \       val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortWith((a, b) => a._2\
    \ > b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.to", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toString.toString.toUpperCase.length).toArray\n        val max_strength\
    \ = strength.max\n        val max_key = extensions_map.keys.find(x => strength.contains(x)).max\n\
    \        val max_value = extensions_map.get(max_key)\n        max_key match {\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = extensions_count_upper\
    \ - strength\n        val strength_lower = extensions_count_lower - strength\n\
    \        val extensions_count_diff = extensions_count - strength\n        val\
    \ extensions_count_diff_upper = extensions_count_upper - extensions_count_diff\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_diff\n\
    \        val extensions_count_diff_diff = extensions_count_diff - strength\n \
    \       val extensions_count_diff_diff_upper = extensions_count_diff_upper - extensions_count_diff_diff\n\
    \        val extensions_count_diff_diff_lower = extensions_count_diff_lower -\
    \ extensions_count_diff_diff\n        val extensions_count_diff_diff_diff = extensions_count_diff_diff\
    \ - strength\n        val extensions_count_diff_diff_diff_upper = extensions_count_diff_diff_upper\
    \ - extensions_count_diff_diff_diff\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_lower - extensions_count_diff_diff_diff\n     \
    \   val extensions_count_diff_diff_diff_diff = extensions_count_diff_diff_diff\
    \ - strength\n        val extensions_count_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_upper\
    \ - extensions_count_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_lower - extensions_count_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff = extensions_count_diff_diff_diff_diff\
    \ - strength\n        val extensions_count_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_upper\
    \ - extensions_count_diff_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_lower - extensions_count_diff_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff = extensions_count_diff_diff_diff_diff_diff\
    \ - strength\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val ", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => a.length - b.length)\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed_length\
    \ = extensions_count_sorted_reversed.map(_.length)\n        val extensions_count_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length.sum\n        val extensions_count_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length.sortWith((a, b) => a - b)\n      \
    \  val extensions_count_sorted_reversed_length_sum_sorted_reversed = extensions_count_sorted_reversed_length_sum_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortWith((a,\
    \ b) => a - b)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sortWith((a,\
    \ b) => a - b)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val strongest_extension = extensions_map.maxBy(x\
    \ => x._2)._2\n        s\"$class_name.$strongest_extension\"", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_upper = strength * extensions_count_upper_ratio\n      \
    \  val strength_lower = strength * extensions_count_lower_ratio\n        val strength_total\
    \ = strength_upper + strength_lower\n        val extensions_count_ratio = extensions_count\
    \ / extensions_count_total.toDouble\n        val extensions_count_ratio_upper\
    \ = extensions_count_ratio / extensions_count_upper.toDouble\n        val extensions_count_ratio_lower\
    \ = extensions_count_ratio / extensions_count_lower.toDouble\n        val strength_upper_ratio\
    \ = strength_upper * extensions_count_ratio_upper\n        val strength_lower_ratio\
    \ = strength_lower * extensions_count_ratio_lower\n        val strength_total_ratio\
    \ = strength_total * extensions_count_ratio_upper\n        val strength_total_ratio_upper\
    \ = strength_total_ratio * extensions_count_ratio_upper\n        val strength_total_ratio_lower\
    \ = strength_total_ratio * extensions_count_ratio_lower\n        val strength_total_ratio_total\
    \ = strength_total_ratio_upper + strength_total_ratio_lower\n        val strength_total_ratio_total_upper\
    \ = strength_total_ratio_total * extensions_count_ratio_upper\n        val strength_total_ratio_total_lower\
    \ = strength_total_ratio_total * extensions_count_ratio_lower\n        val strength_total_ratio_total_total\
    \ = strength_total_ratio_total_upper + strength_total_ratio_total_lower\n    \
    \    val strength_total_ratio_total_total_upper = strength_total_ratio_total_total\
    \ * extensions_count_ratio_upper\n        val strength_total_ratio_total_total_lower\
    \ = strength_total_ratio_total_total * extensions_count_ratio_lower\n        val\
    \ strength_total_ratio_total_total_total = strength_total_ratio_total_total_upper\
    \ + strength_total_ratio_total_total_lower\n        val strength_total_ratio_total_total_total_upper\
    \ = strength_total_ratio_total_total_total * extensions_count_ratio_upper\n  \
    \      val strength_total_ratio_total_total_total_lower = strength_total_ratio_total_total_total\
    \ * extensions_count_ratio_lower\n        val strength_total_ratio_total_total_total_total\
    \ = strength_total_ratio_total_total_total_upper + strength_total_ratio_total_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ / e.toUpperCase.count(_ == 'B') * -1)\n        val extensions_sorted = extensions_map.toSeq.sortWith(_\
    \ < _)\n        val strength = extensions_sorted.last\n        val extension =\
    \ extensions_sorted.head\n        s\"$class_name.$extension\"", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n \
    \       val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.", "        val extensions_map\
    \ = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n \
    \       val extensions_sorted = extensions_map.values.sortWith((a, b) => math.signum(a-b))\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x < strength)\n\
    \        val extensions_sorted = extensions_sorted.map(x => class_name + \".\"\
    \ + extensions_sorted.indexOf(x)).mkString(\".\")\n        extensions_sorted.headOption.getOrElse(class_name)",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1)\
    \ -> 1)\n        val extensions_count = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_count_sorted = extensions_count.sortBy(_._1)\n       \
    \ val extensions_count_sorted = extensions_count_sorted.take(1)\n        val extensions_count_sorted\
    \ = extensions_count_sorted._2\n        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toString.toInt",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        if (extensions_count > 1) {\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted_upper\
    \ = extensions_sorted.map(_.toUpperCase)\n            val extensions_sorted_lower\
    \ = extensions_sorted.map(_.toLowerCase)\n            val strength_sorted = extensions_sorted_upper.map(_.length)\
    \ - extensions_sorted_lower.map(_.length)\n            val strength_sorted_upper\
    \ = extensions_sorted_upper.map(_.toUpperCase).sortBy(_.length)\n            val\
    \ strength_sorted_lower = extensions_sorted_lower.map(_.toLowerCase).sortBy(_.length)\n\
    \            val strength_sorted_upper.head match {\n                case x if\
    \ strength_sorted_upper.contains(x) => \"%s.%s\".format(class_name, x)\n     \
    \           case x if strength_sorted_lower.contains(x) => \"%s.%s\".format(class_name,\
    \ x)\n                case _ => \"%s.%s\".format(class_name, extensions_sorted_upper.head)\n\
    \            }\n        } else {\n            \"%s.%s\".format(class_name, extensions.head)\n\
    \        }", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((x,\
    \ y) =>\n            val cap = x._1.length\n            val sm = y._1.length\n\
    \            val diff = cap - sm\n            val strength_diff = if (diff ==\
    \ 0) -1 else diff.toFloat\n            x._2 + strength_diff\n        )\n     \
    \   val class_name_with_strength = class_name_map + (strength -> class_name)\n\
    \        val strength_sorted = class_name_with_strength.sortBy(_._2)\n       \
    \ strength_sorted.head._3", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(_._1).reverse.map(_._2)\n\
    \        val strength = extensions_map.last\n        val extension = extensions_map.find(_._2\
    \ == strength).get._1\n        s\"$class_name.$extension\"", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        val first_extension_strength_frac\
    \ = first_extension_strength.toDouble / strength\n        val first_extension_strength_frac_str\
    \ = first_extension_strength_frac.toString.replaceAll(\"\\\\.\", \"%\")\n    \
    \    val first_extension_strength_frac_str = first_extension_strength_frac_str.replaceAll(\"\
    %\", \".\")\n        val first_extension_strength_frac_str = first_extension_strength_frac_str.replaceAll(\"\
    %\", \"\")\n        class_name + first_extension_strength_frac_str + first_extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map = extensions_map.toMap\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._",
  "        // Your code here\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val extensions_str = extensions.map(_.toString).mkString(\".\")\n       \
    \ val class_name = class_name.replaceFirst(\"\\\\W\", \"\")\n        val class_name_upper\
    \ = class_name.toUpperCase()\n        val class_name_lower = class_name.toLowerCase()\n\
    \        val class_name_str = if (class_name_upper == class_name_lower) class_name\
    \ else class_name_upper + \".\" + class_name_lower\n        val class_name_str_upper\
    \ = if (class_name_upper == class_name_lower) class_name_upper else class_name_upper.toUpperCase()\n\
    \        val class_name_str_lower = if (class_name_upper == class_name_lower)\
    \ class_name_lower else class_name_lower.toLowerCase()\n        val class_name_str_str\
    \ = if (class_name_upper == class_name_lower) class_name_upper else class_name_upper.toUpperCase()\
    \ + \".\" + class_name_lower.toLowerCase()\n        val class_name_str_str_upper\
    \ = if (class_name_upper == class_name_lower) class_name_upper.toUpperCase() else\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_lower = if (class_name_upper == class_name_lower)\
    \ class_name_lower.toLowerCase() else class_name_lower.toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str = if (class_name_upper == class_name_lower)\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toUpperCase()\
    \ else class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str_upper = if (class_name_upper == class_name_lower)\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toUpperCase()\
    \ else class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str_lower = if (class_name_upper == class_name_lower)\
    \ class_name_lower.toLowerCase().toLowerCase().toUpperCase() else class_name_lower.toLowerCase().toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str_str = if (class_name_upper == class_name_lower)\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toLowerCase().toUpperCase()\
    \ else class_name_upper.toUpperCase() + \".\" + class_name_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n        val\
    \ max_strength = strength.max\n        val max_key = strength.indexWhere(x =>\
    \ x == max_strength)\n        val max_extension = extensions(max_key)\n      \
    \  class_name_map.get(max_extension)", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val strongest_extension = sorted_extensions.head._1\n        val strongest_extension_strength\
    \ = sorted_extensions.head._2\n        val strongest_extension_strength_str =\
    \ if (strongest_extension_strength == 0) \"\" else s\"${strongest_extension_strength}%\"\
    \n        s\"$class_name.$strongest_extension_strength_str\"", "        val extensions_count\
    \ = extensions.map(x => x.length).sum\n        val extensions_count_sorted = extensions.sortWith((x,\
    \ y) => x.length - y.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(x\
    \ => x.length).sum\n        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith((x,\
    \ y) => x.length - y.length)\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.map(x => x.length).sum\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length.map(x\
    \ => x.length).sortWith((x, y) => x.length - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.values.sortWith(_ < _)\n        val strength_sorted = extensions_sorted.max\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < strength_sorted)\n\
    \        val extensions_sorted.mkString(class_name + \".\")", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val class_name_str = class_name.replaceAll(\"\\\\W\", \"\")\n        val\
    \ extensions_str = extensions.map(_.toLowerCase).mkString(\".\")\n        val\
    \ extensions_name_str = extensions.mkString(\".\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\W\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\.\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\$\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\[\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\]\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\^\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_total = strength_upper\
    \ + strength_lower\n        if (strength_total > extensions_count)\n         \
    \   class_name + extensions.sortWith(_.length < _.length)(0)\n        else if\
    \ (strength_total == extensions_count)\n            class_name + extensions.sortWith(_.length\
    \ < _.length)(0)\n        else if (strength_total < extensions_count)\n      \
    \      class_name + extensions.sortWith(_.length < _.length)(0)\n        else\n\
    \            class_name + extensions.sortWith(_.length < _.length)(0)", "    \
    \    val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_fraction = strength / extensions_count.toDouble\n\
    \        val extensions_count_fraction = extensions_count.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_fraction2 = extensions_count_fraction * extensions_count_fraction\n\
    \        val extensions_count_fraction3 = extensions_count_fraction2 * extensions_count_fraction\n\
    \        val extensions_count_fraction4 = extensions_count_fraction3 * extensions_count_fraction\n\
    \        val extensions_count_fraction5 = extensions_count_fraction4 * extensions_count_fraction\n\
    \        val extensions_count_fraction6 = extensions_count_fraction5 * extensions_count_fraction\n\
    \        val extensions_count_fraction7 = extensions_count_fraction6 * extensions_count_fraction\n\
    \        val extensions_count_fraction8 = extensions_count_fraction7 * extensions_count_fraction\n\
    \        val extensions_count_fraction9 = extensions_count_fraction8 * extensions_count_fraction\n\
    \        val extensions_count_fraction10 = extensions_count_fraction9 * extensions_count_fraction\n\
    \        val extensions_count_fraction11 = extensions_count_fraction10 * extensions_count_fraction\n\
    \        val extensions_count_fraction12 = extensions_count_fraction11 * extensions_count_fraction\n\
    \        val extensions_count_fraction13 = extensions_count_fraction12 * extensions_count_fraction\n\
    \        val extensions_count_fraction14 = extensions_count_fraction13 * extensions_count_fraction\n\
    \        val extensions_count_fraction15 = extensions_count_fraction14 * extensions_count_fraction\n\
    \        val extensions_count_fraction16 = extensions_count_fraction15 * extensions_count_fraction\n\
    \        val extensions_count_fraction17 = extensions_count_fraction16 * extensions_count_fraction\n\
    \        val extensions_count_fraction18 = extensions_count_fraction17 * extensions_count_fraction\n\
    \        val extensions_count_fraction19 = extensions_count_fraction18 * extensions_count_fraction\n\
    \        val extensions_count_fraction20 = extensions_count_fraction19 * extensions_count_fraction\n\
    \        val extensions_count_fraction21 = extensions_count_fraction20 * extensions_count_fraction\n\
    \        val extensions_count_fraction22 = extensions_count_fraction21 * extensions_count_fraction\n\
    \        val extensions_count_fraction23 = extensions_count_fraction22 * extensions_count_fraction\n\
    \        val extensions_count_fraction24 = extensions_count_fraction23 * extensions_count_fraction\n\
    \        val ", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') / e.toUpperCase.count(_ == 'B') * 100).toMap\n        val strength =\
    \ extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        val strength_difference\
    \ = strength - first_extension_strength\n        val extension_str = first_extension\
    \ + first_extension_strength - strength_difference\n        extension_str", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => a.length - b.length)\n        val extensions_count_sorted_length\
    \ = extensions_count_sorted.map(_.length)\n        val extensions_count_sorted_length_sorted\
    \ = extensions_count_sorted.sortWith((a, b) => a.length - b.length)\n        val\
    \ extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith((a, b) => a.length\
    \ - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith((a, b)\
    \ => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_",
  "        val extensions_map = extensions.map(x => x.toUpperCase.count(_ == 'A')\
    \ - x.toUpperCase.count(_ == 'B') - x.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.values.toList.sortWith(_ < _)\n        val first_extension\
    \ = sorted_extensions.head\n        val first_extension_strength = extensions_map.get(first_extension)\n\
    \        if (first_extension_strength != strength) {\n            val first_extension_strength_str\
    \ = first_extension_strength.map(x => x.toString).mkString\n            val first_extension_strength_str\
    \ = first_extension_strength_str.replaceAll(\",\", \"\").replaceAll(\"[()]\",\
    \ \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength", "     \
    \   val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + extensions_map(x._2).length\
    \ - extensions_map(x._1).length)\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2.length - x._1.length)\n        val strongest_extension = extensions_sorted.head._1\n\
    \        val strongest_extension_name = extensions_sorted.head._2\n        val\
    \ class_name_with_strongest_extension = class_name + \".\" + strongest_extension_name\n\
    \        if (strength == 0) class_name_with_strongest_extension\n        else\
    \ class_name_with_strongest_extension + extensions_sorted.last._1", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => if (x == -1) y else x + y)\n        val strength_map = strength.map(x\
    \ => (x._1, x._2)).toMap\n        val strength_sum = strength_map.values.foldLeft(0)((x,\
    \ y) => if (x == -1) y else x + y)\n        val strength_avg = strength_sum /\
    \ extensions_map.size\n        val strength_min = strength_map.values.min\n  \
    \      val strength_max = strength_map.values.max\n        val strength_max_index\
    \ = strength_map.values.indexOf(strength_max)\n        val strength_max_key =\
    \ strength_map.keys.toList.apply(strength_max_index)\n        val strength_max_value\
    \ = strength_map.values.toList.apply(strength_max_index)\n        val strength_max_key_index\
    \ = strength_map.keys.toList.indexOf(strength_max_key)\n        val strength_max_key_value\
    \ = strength_map.values.toList.apply(strength_max_key_index)\n        val strength_max_key_value_length\
    \ = strength_max_key_value.length\n        val strength_max_key_value_length_avg\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_min\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_index\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_value\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_index\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value_length\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value_length_avg\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value_length_min\
    \ = strength_max_key_value_length / extensions_map.size\n        val ", "    \
    \    val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') +\
    \ e.toUpperCase.count(_ == 'B') + e.toUpperCase.count(_ == 'C')).toMap\n     \
    \   val strength = extensions_map.values.max\n        val extensions_sorted =\
    \ extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_._2\
    \ > strength).map(_._1)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \") + \".\" + extensions_sorted.last\n        class_name+\".\"+extensions_sorted",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ / e.toUpperCase.count(_ == 'B') * -1)\n        val extensions_sorted = extensions_map.toSeq.sortWith(_\
    \ < _)\n        val strength = extensions_sorted.last\n        val extension =\
    \ extensions_sorted.head\n        s\"$class_name.$extension\"", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_diff = extensions_count - extensions_count_upper\n \
    \       val extensions_count_diff_upper = extensions_count_diff - extensions_count_lower\n\
    \        val extensions_count_diff_lower = extensions_count_diff - extensions_count_upper\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper -\
    \ extensions_count_lower\n        val extensions_count_diff_diff_lower = extensions_count_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_lower\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_lower - extensions_count_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_lower\n        val\
    \ extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_lower\n    \
    \    val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_",
  "        val extensions_count = extensions.map(x => x.toUpperCase).distinct.length\n\
    \        val class_name_count = class_name.map(x => x.toUpperCase).distinct.length\n\
    \        val strength = class_name_count - extensions_count\n        val extension\
    \ = extensions.find(x => x.toUpperCase.contains(class_name))\n        if (extension\
    \ == None) \"\"\n        else extension.drop(class_name_count).drop(extensions_count)",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (s, e) =>\n            val\
    \ cap = e.length\n            val sm = e.toLowerCase length\n            val strength\
    \ = cap - sm\n            if (strength > s) s \n            else s \n        }\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2)\n        val\
    \ extensions_sorted = extensions_sorted.take(strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._1)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \") + \".\" + class_name\n        extensions_sorted.mkString", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val first_extension = extensions.sortBy(_.length).head\n\
    \            val first_extension_upper = first_extension.toUpperCase\n       \
    \     val first_extension_lower = first_extension.toLowerCase\n            if\
    \ (first_extension_upper == first_extension_lower) {\n                first_extension\n\
    \            } else {\n                first_extension_upper\n            }\n\
    \        } else {\n            class_name\n        }", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_\
    \ == 'B') * -1)\n        val strength_map = extensions_map.toMap\n        val\
    \ max_strength = strength_map.max\n        val max_key = strength_map.keys.max\n\
    \        val max_value = strength_map.values.max\n        val max_key_index =\
    \ strength_map.keys.indexOf(max_key)\n        val max_value_index = strength_map.values.indexOf(max_value)\n\
    \        val max_key_index = max_key_index + 1\n        val max_value_index =\
    \ max_value_index + 1\n        val max_key_index = max_key_index - 1\n       \
    \ val max_value_index = max_value_index - 1\n        val max_key_index = max_key_index\
    \ + 1\n        val max_value_index = max_value_index + 1\n        val max_key_index\
    \ = max_key_index - 1\n        val max_value_index = max_value_index - 1\n   \
    \     val max_key_index = max_key_index + 1\n        val max_value_index = max_value_index\
    \ + 1\n        val max_key_index = max_key_index - 1\n        val max_value_index\
    \ = max_value_index - 1\n        val max_key_index = max_key_index + 1\n     \
    \   val max_value_index = max_value_index + 1\n        val max_key_index = max_key_index\
    \ - 1\n        val max_value_index = max_value_index - 1\n        val max_key_index\
    \ = max_key_index + 1\n        val max_value_index = max_value_index + 1\n   \
    \     val max_key_index = max_key_index - 1\n        val max_value_index = max_value_index\
    \ - 1\n        val max_key_index = max_key_index + 1\n        val max_value_index\
    \ = max_value_index + 1\n        val max_key_index = max_key_index - 1\n     \
    \   val max_value_index = max_value_index - 1\n        val max_key_index = max_key_index\
    \ + 1\n        val max_value_index = max_value_index + 1\n        val max_key_index\
    \ = max_key_index - 1\n        val max_value_index = max_value_index - 1\n   \
    \     val max_key_index = max_key_index + 1\n        val max_value_index = max_value_index\
    \ + 1\n        val max_key_index = max_key_index - 1\n        val max_value_index\
    \ = max_value_index - 1\n        val max_key_index = max_key_index + 1\n     \
    \   val max_value_index = max_value_index + 1\n        val max_key_index = max_key_index\
    \ - 1\n        val max_value_index = max_value_index - 1\n        val max_key_index\
    \ = max_key_index + 1\n        val max_value_index = max_value_index + 1\n   \
    \     val max_key_index = max_key_index - 1\n        val max_value_index = max_value_index\
    \ - 1\n        val max_key_index = max_key_index + 1\n        val max_value",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)\n\
    \        ).sortBy(x => x._1 - x._2).head\n        val strength = extensions_map.getOrElse(extensions_map.size\
    \ - 1, -1)\n        val extension = extensions_map.getOrElse(extensions_map.size\
    \ - 2, \"\")\n        class_name + extension", "        val extensions_count =\
    \ extensions.map(_.length).sum\n        val class_name_count = class_name.length\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extension_first = extensions_sorted.head\n        val class_name_first = class_name.substring(0,\
    \ class_name_count)\n        val extension_last = extensions_sorted.last\n   \
    \     val class_name_last = class_name.substring(class_name_count)\n        val\
    \ extension_first = extension_first\n        val class_name_first = class_name_first\n\
    \        val extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        val extension_last = extension_last\n\
    \        val class_name_last = class_name_last\n        val extension_first =\
    \ extension_first\n        val class_name_first = class_name_first\n        val\
    \ extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        val extension_last = extension_last\n\
    \        val class_name_last = class_name_last\n        val extension_first =\
    \ extension_first\n        val class_name_first = class_name_first\n        val\
    \ extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        val extension_last = extension_last\n\
    \        val class_name_last = class_name_last\n        val extension_first =\
    \ extension_first\n        val class_name_first = class_name_first\n        val\
    \ extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        ", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_map_sorted_keys = extensions_map_sorted.map(_._1)\n  \
    \      val extensions_map_sorted_values = extensions_map_sorted.map(_._2)\n  \
    \      val extensions_map_sorted_keys_sorted = extensions_map_sorted_keys.toSeq.sortBy(_)\n\
    \        val extensions_map_sorted_keys_sorted_values = extensions_map_sorted_keys_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted\
    \ = extensions_map_sorted_keys_sorted_values.toSeq.sortBy(_)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted.map(e => extensions_map_sorted_values.find(_._1\
    \ == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted.map(e => extensions_map_sorted_values.find(_._1\
    \ == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted.map(e => extensions_map_sorted_values.find(_._1\
    \ == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strongest_extension\
    \ = extensions_map.maxBy(_._2)._1\n        class_name.toString + \".\" + strongest_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (s, e) =>\n            val\
    \ c = class_name_map.getOrElse(e._1, e._1)\n            val s = s + (e._2.count(x\
    \ => x.isUpper) - e._2.count(x => x.isLower))\n            s + e._2.count(x =>\
    \ x.isUpper)\n        }\n        val class_name_with_strength = class_name_map.getOrElse(class_name,\
    \ class_name)\n        val strength_str = if (strength == 0) \"\" else s\"${class_name_with_strength}.${extensions_map.getOrElse(class_name_with_strength,\
    \ \"\")}\"\n        strength_str", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_sum = strength_upper\
    \ + strength_lower\n        val strength_average = strength_sum / extensions_count.toDouble\n\
    \        val strength_min = extensions_count.toDouble * strength_average\n   \
    \     val strength_max = extensions_count.toDouble * strength_average\n      \
    \  val strength_max_index = extensions.zipWithIndex.maxBy(_._2)._2\n        val\
    \ strength_max_index = strength_max_index + 1 // because index starts from 0\n\
    \        val strength_max_index = strength_max_index.toString.toInt\n        val\
    \ extension = extensions.take(strength_max_index).mkString(\".\")\n        val\
    \ extension_upper = extensions.take(strength_max_index).map(_.toUpperCase).mkString(\"\
    .\")\n        val extension_lower = extensions.take(strength_max_index).map(_.toLowerCase).mkString(\"\
    .\")\n        val extension_average = extensions_count.toDouble * strength_average\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        ",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)) }\n        val strongest_extension = extensions_map.maxBy(_._2)._1\n\
    \        val strongest_extension_strength = extensions_map.maxBy(_._2)._2\n  \
    \      val class_name_with_strongest_extension = class_name_map(strongest_extension)\n\
    \        val strongest_extension_class_name = class_name_with_strongest_extension\
    \ + \".\" + strongest_extension\n        val strongest_extension_class_name_with_strongest_extension\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_2\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_2\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_3\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_3\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_4\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_4\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_5\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_5\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_6\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_6\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_7\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_7\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_8\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_8\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_9\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_9\n\
    \        val strongest_extension_class_name_with_strongest_extension", "     \
    \   val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((x, y) => x - y)\n        val\
    \ extensions_sorted = extensions_map.values.sortWith((x, y) => x < y)\n      \
    \  val extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extension", "        val extensions_map\
    \ = extensions.map(e => (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val\
    \ class_name_map = class_name.split('').map(c => (c.toUpperCase -> 1)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (s, c) =>\n            val\
    \ extension_strength = extensions_map.getOrElse(c._1, 0)\n            s + extension_strength\n\
    \        }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_str\
    \ = extensions_sorted.head._1\n        val extension_str = extension_str + extension_strength\n\
    \        class_name + extension_str", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a > b)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x < strength).mkString(\".\")\n        className + extensions_sorted", " \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val extensions_sorted = extensions_map.values.sortWith((a, b) => a >\
    \ b)\n        val strongest_extension = extensions_sorted.head\n        val class_name_with_strongest_extension\
    \ = class_name + \".\" + strongest_extension\n        val class_name_with_strongest_extension_lowercase\
    \ = class_name_with_strongest_extension.toLowerCase\n        if (extensions_map.contains(class_name_with_strongest_extension_lowercase))\
    \ {\n            class_name_with_strongest_extension_lowercase\n        } else\
    \ {\n            StrongestExtension(class_name_with_strongest_extension_lowercase,\
    \ extensions_sorted)\n        }", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => if (x < y) x else y)\n        val strongest_extension = extensions_map.values.min\n\
    \        val class_name_with_strongest_extension = class_name + strongest_extension.mkString\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension.toLowerCase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension.toUpperCase\n\
    \        val class_name_with_strongest_extension_uppercase_lowercase = class_name_with_strongest_extension_uppercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase + class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase + class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.split('').map(x => (x.toUpperCase, x.toLowerCase)).toMap\n    \
    \    val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).sum\n        val strongest_extension = extensions_map.values.filter(x\
    \ => x.toUpperCase.length == strength).head\n        class_name + \".\" + strongest_extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ / e.toUpperCase.count(_ == 'B') * -1)\n        val strength = extensions_map.max\n\
    \        val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n     \
    \   val extensions_sorted = extensions_sorted.takeWhile(_ < strength)\n      \
    \  val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        val extensions_sorted = extensions_sorted.replace(\".\", \"\")\n    \
    \    class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(_._1).reverse.map(x\
    \ => x._2).foldLeft(0)((x, y) => x + y)\n        val strength = extensions_map.last\n\
    \        val extension = extensions_map.filter(_._2 == strength).head\n      \
    \  s\"$class_name.$extension\"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val extensions_count_upper_small\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower_small\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength_upper_small\
    \ = extensions_count_upper_small - strength\n        val strength_lower_small\
    \ = extensions_count_lower_small - strength\n        val extensions_count_lower_large\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength_lower_large\
    \ = extensions_count_lower_large - strength\n        val extensions_count_upper_large\
    \ = extensions.map(_.toUpperCase.length).sum\n        val strength_upper_large\
    \ = extensions_count_upper_large - strength\n        val extensions_count_large\
    \ = extensions.map(_.length).sum\n        val strength_large = extensions_count_large\
    \ - strength\n        val extensions_count_small = extensions.map(_.length).sum\n\
    \        val strength_small = extensions_count_small - strength\n        val extensions_count_large_small\
    \ = extensions.map(_.length).sum\n        val strength_large_small = extensions_count_large_small\
    \ - strength\n        val extensions_count_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_large = extensions_count_small_large - strength\n\
    \        val extensions_count_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_large = extensions_count_small_small_large -\
    \ strength\n        val extensions_count_small_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_small_large = extensions_count_small_small_small_large\
    \ - strength\n        val extensions_count_small_small_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_small_small_large = extensions_count_small_small_small_small_large\
    \ - strength\n        val extensions_count_small_small_small_small_small_large\
    \ = extensions.map(_.length).sum\n        val strength_small_small_small_small_small_large\
    \ = extensions_count_small_small_small_small_small_large - strength\n        val\
    \ extensions_count_small_small_small_small_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_small_small_small_small_large = extensions_count_small_small_small_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper_ratio = extensions_count_upper\
    \ / extensions_count.toDouble\n        val extensions_count_lower_ratio = extensions_count_lower\
    \ / extensions_count.toDouble\n        val strength_ratio = strength / extensions_count.toDouble\n\
    \        val extensions_count_ratio = extensions_count_upper / extensions_count_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_", "      \
    \  val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed_length\
    \ = extensions_count_sorted_reversed.map(_.length)\n        val extensions_count_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length.sum\n        val extensions_count_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length.sortBy(_.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted.reverse\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0) { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2))\
    \ }\n        val strongest_extension = extensions_map.maxBy(_._1)._1\n       \
    \ val strongest_extension_name = extensions_map.maxBy(_._1)._2\n        class_name\
    \ + \".\" + strongest_extension_name + \".\" + strongest_extension", "       \
    \ val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_\
    \ == 'B') * -1)\n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.takeWhile(_ < 0)\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val\
    \ extensions_sorted = extensions_sorted.take(1)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\"\") + class_name + extensions_sorted.mkString(\"\
    \")\n        extensions_sorted.toUpperCase", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split('').map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (class_name_map.get(x) - extensions_map.get(x)).abs)\n        val max_strength\
    \ = strength.max\n        val max_key = strength.indexWhere(x => x == max_strength)\n\
    \        val max_key = max_key match {\n            case Some(x) => x\n      \
    \      case None => -1\n        }\n        val max_key = max_key + 1\n       \
    \ val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_value = extensions_map.values.max\n        val max_key_value\
    \ = class_name_map.getOrElse(max_key, 0)\n        val max_key_value_length = max_key_value.length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = ", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extension = extensions_map.values.find(e => e == strength).getOrElse(\"\")\n\
    \        s\"$class_name.$extension\"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.sortBy(_._1).reverse\n\
    \        val extensions_count = extensions_map.size\n        val extensions_map\
    \ = extensions_map.take(extensions_count)\n        val extensions_map = extensions_map.map(x\
    \ => x._1 + x._2)\n        val extensions_map = extensions_map.toSet\n       \
    \ val extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strengths = extensions_map.map(x => (x._1,\
    \ x._2.toUpperCase.count(_ == 'A') + x._2.toLowerCase.count(_ == 'a')))\n    \
    \    val strengths_sorted = strengths.sortBy(x => -x._2)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val extension_first = extensions_sorted.head._1\n        val extension_second\
    \ = extensions_sorted.head._2\n        if (strength == 0) extension_first\n  \
    \      else if (strength == 1) extension_second\n        else if (strength > 1)\
    \ extension_second\n        else extension_first", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = sorted_extensions.find(e => e._2 == strength).getOrElse(\"\
    \")\n        class_name + extension_strength", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n        val\
    \ extensions_sorted = extensions_sorted.take(strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._1)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \") + \".\" + extensions_sorted.last\n        class_name+\".\"+extensions_sorted",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map = extensions_map.toMap\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '.')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '$')\n        val extensions_map = extensions_map.filter(_._2 != '_')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.", "        val extensions_count =\
    \ extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_ratio = strength / extensions_count.toDouble\n        val\
    \ extensions_count_ratio = extensions_count_upper / extensions_count_lower\n \
    \       val extensions_count_ratio_upper = extensions_count_upper / extensions_count_upper_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower / extensions_count_lower_ratio\n\
    \        val extensions_count_ratio_upper_ratio = extensions_count_upper_ratio\
    \ / extensions_count_ratio_upper\n        val extensions_count_ratio_lower_ratio\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower\n        val extensions_count_ratio_upper_ratio_upper\
    \ = extensions_count_upper_ratio / extensions_count_ratio_upper_ratio\n      \
    \  val extensions_count_ratio_lower_ratio_lower = extensions_count_lower_ratio\
    \ / extensions_count_ratio_lower_ratio\n        val extensions_count_ratio_upper_ratio_lower_ratio\
    \ = extensions_count_upper_ratio / extensions_count_ratio_lower_ratio\n      \
    \  val extensions_count_ratio_lower_ratio_upper = extensions_count_lower_ratio\
    \ / extensions_count_ratio_upper_ratio\n        val extensions_count_ratio_lower_ratio_lower_ratio\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower_ratio\n      \
    \  val extensions_count_ratio_upper_ratio_lower_ratio_upper = extensions_count_upper_ratio\
    \ / extensions_count_ratio_lower_ratio_upper\n        val extensions_count_ratio_lower_ratio_lower_ratio_lower\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower_ratio_lower_ratio\n\
    \        val extensions_count_ratio_upper_ratio_lower_ratio_lower_ratio = extensions_count_upper_ratio\
    \ / extensions_count_ratio_lower_ratio_lower_ratio\n        val extensions_count_ratio_lower_ratio_lower_ratio_upper\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower_ratio_upper\n\
    \        val extensions_count_ratio_lower_ratio_lower_ratio_lower_ratio = extensions_count_lower_ratio\
    \ / extensions_count_ratio_lower_ratio_lower_ratio\n        val extensions_count_ratio_upper_ratio_lower_ratio_lower_ratio_upper\
    \ = extensions_count_upper_ratio / extensions_count_ratio_lower_ratio_lower_ratio_upper\n\
    \        val extensions_count_ratio_lower_ratio_lower_", "        val extensions_map\
    \ = extensions.map(x => x.toUpperCase).zipWithIndex.toMap\n        val class_name_map\
    \ = class_name.zipWithIndex.toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val extension_strength\
    \ = extensions_count - class_name_count\n        val strength = extensions_map.get(extension_strength)\n\
    \        val class_name = class_name_map.get(strength)\n        class_name match\
    \ {\n            case Some(class_name) => class_name\n            case None =>\
    \ \"\"\n        }", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1) -> 1)\n        val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_map_sorted_with_strength = extensions_map_sorted.map(e\
    \ => (e._1, e._2))\n        val extensions_map_sorted_with_strength_length = extensions_map_sorted_with_strength.length\n\
    \        val extensions_map_sorted_with_strength_length_sorted = extensions_map_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength =\
    \ extensions_map_sorted_with_strength_length_sorted.map(e => (e._1, e._2._2))\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength.length\n \
    \       val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted.map(e\
    \ => (e._1, e._2._2))\n        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.length\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted.map(e\
    \ => (e._1, e._2._2))\n        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.length\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.filter(_._1 == class_name_map.getOrElse(_._1,\
    \ _._2)).map(_._2).sum\n        val strongest_extension = extensions_map.filter(_._1\
    \ == class_name_map.getOrElse(_._1, _._2)).map(_._2).min\n        val class_name\
    \ = class_name_map.getOrElse(strongest_extension, strongest_extension)\n     \
    \   class_name", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last\n        val extensions_count_sorted_sorted\
    \ = extensions_count_sorted.sort\n        val strength_sorted = extensions_count_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted = extensions_count_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.sort\n        val\
    \ strength_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val cap = c.toUpperCase.length\n            val sm = m.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) strength\n\
    \            else s\n        }\n        val class_name_with_strength = class_name_map.foldLeft(\"\
    \") { (s, e) =>\n            val c = class_name_map(e._1)\n            val m =\
    \ extensions_map(e._2)\n            val cap = c.toUpperCase.length\n         \
    \   val sm = m.toUpperCase.length\n            val strength = cap - sm\n     \
    \       if (strength > s) s + \".\" + e._1\n            else s\n        }\n  \
    \      class_name_with_strength", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strength_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._1).reverse\n        val strength_sorted\
    \ = strength_sorted.takeWhile(x => strength_sorted.exists(y => x._2 > y._1))\n\
    \        val strength_sorted.head._2", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)) }\n      \
    \  val strongest_extension = extensions_map.maxBy(x => strength(x._1))\n     \
    \   class_name + strongest_extension._2", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val first_extension = sorted_extensions.head._1\n        val first_extension_strength\
    \ = sorted_extensions.head._2\n        if (strength == 0) first_extension\n  \
    \      else if (strength > first_extension_strength) first_extension\n       \
    \ else first_extension", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strength_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val strength_sorted_list\
    \ = strength_sorted.map(x => x._1).mkString(\".\")\n        val strength_sorted_list_with_extension\
    \ = strength_sorted_list + \".\" + extensions_map.keys.mkString(\".\")\n     \
    \   val strength_sorted_list_with_extension_with_cap = strength_sorted_list_with_extension\
    \ + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap + \".\" + extensions_map.keys.mkString(\"\
    .\")) + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm + \".\" + extensions_map.keys.mkString(\"\
    .\")) + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm + \".\" + extensions_map.keys.mkString(\"\
    .\")) + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm + \"\
    .\" + extensions_map.keys.mkString(\".\")) + \".\" + extensions_map.values.mkString(\"\
    .\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ + \".\" + extensions_map.keys.mkString(\".\")) + \".\" + extensions_map.values.mkString(\"\
    .\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ + \".", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)\n        ).sortBy(_._1).reverse\n        val strength =\
    \ extensions_map.head._2 - extensions_map.head._1\n        val extension = extensions_map.head._1\n\
    \        val class_name = class_name.toUpperCase\n        val extension_name =\
    \ extension.toUpperCase\n        val class_name_with_extension = class_name +\
    \ extension_name\n        val extension_with_name = extension_name + class_name\n\
    \        val extension_with_name_and_class = extension_with_name.concat(class_name)\n\
    \        val extension_with_name_and_class_with_extension = extension_with_name_and_class.concat(extension_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name = extension_with_name_and_class_with_extension.concat(extension_with_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class\
    \ = extension_with_name_and_class_with_extension_with_name.concat(extension_with_name_and_class)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name_and_class)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class_with_extension\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name_and_class_with_extension)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)) }\n        val strength_sorted = extensions_map.toSeq.sortBy(x\
    \ => -x)\n        val strength_sorted = strength_sorted.takeWhile(x => x <= strength).reverse\n\
    \        val strength_sorted.headOption.getOrElse(class_name_map.getOrElse(class_name,\
    \ \"\"))", "        val extensions_count = extensions.map(_.length).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n \
    \       val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_diff = extensions_count - extensions_count_lower\n \
    \       val extensions_count_diff_upper = extensions_count_upper - extensions_count_diff\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_diff\n\
    \        val extensions_count_diff_upper_small = extensions_count_diff_upper -\
    \ extensions_count_diff\n        val extensions_count_diff_lower_small = extensions_count_diff_lower\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small\
    \ = extensions_count_diff_upper_small - extensions_count_diff\n        val extensions_count_diff_lower_small_small\
    \ = extensions_count_diff_lower_small - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small\
    \ = extensions_count_diff_upper_small_small - extensions_count_diff\n        val\
    \ extensions_count_diff_lower_small_small_small = extensions_count_diff_lower_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small - extensions_count_diff\n  \
    \      val extensions_count_diff_lower_small_small_small_small = extensions_count_diff_lower_small_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_lower_small_small_small_small_small = extensions_count_diff_lower_small_small_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_lower_small_small_small_small_small_small =\
    \ extensions_count_diff_lower_small_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_upper_small_small_small_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_lower_small_small_small_small_small_small_small_small\
    \ = extensions_count_diff_lower_small_small_small_small_small_small_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small_small_small_small_small_small\
    \ = extensions_count_diff_upper_sm", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val cap = c.toUpperCase.length\n            val sm = m.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) strength\n\
    \            else s\n        }\n        val class_name = class_name_map(strength)\n\
    \        val extension = extensions_map(strength)\n        class_name + \".\"\
    \ + extension", "        val extensions_map = extensions.map(x => x.toUpperCase.charAt(0)\
    \ - x.toLowerCase.charAt(0)).groupBy(x => x).mapValues(_.size)\n        val max_value\
    \ = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_value = extensions_map.get(max_key).size\n        val max_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_value)\n        val max_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_value)\n        val max_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_value)\n        val max_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_value)\n        val max_key_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_key_key_value)\n     \
    \   val max_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = extensions_map.get(", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toString.toString.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.find(x\
    \ => strength.contains(x)).get\n        val max_value = extensions_map.get(max_key)\n\
    \        val max_key_with_extension = max_key + max_value\n        val max_key_with_extension_map\
    \ = class_name_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension\
    \ = max_key_with_extension_map + extensions_map.get(max_key)\n        val max_key_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension + extensions_map.get(max_key_with_extension)\n\
    \        val max_key_with_extension_map_with_extension_map_with_extension = max_key_with_extension_map_with_extension_map\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension_map_with_extension + extensions_map.get(max_key_with_extension)\n\
    \        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_", "    \
    \    val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper_ratio = extensions_count_upper\
    \ / extensions_count.toDouble\n        val extensions_count_lower_ratio = extensions_count_lower\
    \ / extensions_count.toDouble\n        val extensions_count_ratio = extensions_count_upper_ratio\
    \ - extensions_count_lower_ratio\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs).reduce(_ + _)\n        val strongest_extension\
    \ = extensions_map.values.find(x => x == strength).get\n        s\"$class_name.$strongest_extension\"",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_str = if (strength == 0) \"0\"\
    \ else strength.toString\n        val extensions_str = extensions.map(_.toString).mkString(\"\
    .\")\n        val extensions_count_str = if (extensions_count == 0) \"0\" else\
    \ extensions_count.toString\n        val extensions_count_upper_str = if (extensions_count_upper\
    \ == 0) \"0\" else extensions_count_upper.toString\n        val extensions_count_lower_str\
    \ = if (extensions_count_lower == 0) \"0\" else extensions_count_lower.toString\n\
    \        val extensions_count_upper_lower_str = if (extensions_count_upper - extensions_count_lower\
    \ == 0) \"0\" else extensions_count_upper - extensions_count_lower.toString\n\
    \        val extensions_count_upper_lower_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str_str_str = if\
    \ (extensions_count_upper - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str_str_str_str_str\
    \ = if (extensions_count_upper - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_cap = extensions.map(_.toUpperCase.length).sum -\
    \ extensions.map(_.toLowerCase.length).sum\n        val extensions_count_sm =\
    \ extensions.map(_.toLowerCase.length).sum - extensions.map(_.toUpperCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower - extensions_count_cap\
    \ - extensions_count_sm\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - b.length)\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - b.length)\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - b.length)\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - ", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.values.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_str = if (strength == 0) \"0\"\
    \ else strength.toString\n        val extensions_count_str = if (extensions_count\
    \ == 0) \"0\" else extensions_count.toString\n        val extensions_count_upper\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lower = if (extensions_count_lower == 0) \"0\" else\
    \ extensions_count_lower.toString\n        val extensions_count_str = if (extensions_count_str\
    \ == 0) \"0\" else extensions_count_str.toString\n        val extensions_count_upper\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lower = if (extensions_count_lower == 0) \"0\" else\
    \ extensions_count_lower.toString\n        val extensions_count_str = if (extensions_count_str\
    \ == 0) \"0\" else extensions_count_str.toString\n        val extensions_count_upper\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lower = if (extensions_count_lower == 0) \"0\" else\
    \ extensions_count_lower.toString\n        val extensions_count_str = if (extensions_count_str\
    \ == 0) \"0\" else extensions_count_str.toString\n        val extensions_count_upper\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lower = if (extensions_count_lower == 0) \"0\" else\
    \ extensions_count_lower.toString\n        val extensions_count_str = if (extensions_count_str\
    \ == 0) \"0\" else extensions_count_str.toString\n        val extensions_count_upper\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lower = if (extensions_count_lower == 0) \"0\" else\
    \ extensions_count_lower.toString\n        val extensions_count_str = if (extensions_count_str\
    \ == 0) \"0\" else extensions_count_str.toString\n        val extensions_count_upper\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lower = if (extensions_count_lower == 0) \"0\" else\
    \ extensions_count_lower.toString\n        val extensions_count_str = if (extensions_count_str\
    \ == 0) \"0\" else extensions_count_str.toString\n        val extensions_count_upper\
    \ = ", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_sorted = extensions.sortWith((x, y) => extensions_map(y)\
    \ - extensions_map(x))\n        val extensions_count = extensions_sorted.size\n\
    \        val extension_strength = extensions_sorted.last.size - extensions_sorted.head.size\n\
    \        val extension_strength_fraction = extension_strength.toDouble / extensions_count\n\
    \        val extension_strength_fraction_rounded = extension_strength_fraction.toInt\n\
    \        val extension_strength_rounded = extension_strength_fraction_rounded\
    \ * -1\n        val extension_strength_rounded_str = extension_strength_rounded.toString\n\
    \        val extension_strength_rounded_str_split = extension_strength_rounded_str.split('.')\n\
    \        val extension_strength_rounded_str_split_length = extension_strength_rounded_str_split.length\n\
    \        val extension_strength_rounded_str_split_length_rounded = extension_strength_rounded_str_split_length.toInt\n\
    \        val extension_strength_rounded_str_split_length_rounded_str = extension_strength_rounded_str_split_length_rounded.toString\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split = extension_strength_rounded_str_split_length_rounded_str.split('.')\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length\
    \ = extension_strength_rounded_str_split_length_rounded_str_split.length\n   \
    \     val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length.toInt\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded.toString\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str.split('.')\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length.toInt\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length_rounded_str\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length_rounded.toString\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = strength / extensions_count_upper\n\
    \        val strength_lower = strength / extensions_count_lower\n        val extensions_count_diff\
    \ = extensions_count - extensions_count_upper - extensions_count_lower\n     \
    \   val strength_diff = strength / extensions_count_diff\n        val extensions_count_diff_upper\
    \ = extensions_count_diff / extensions_count_upper\n        val strength_diff_upper\
    \ = strength_diff / extensions_count_diff_upper\n        val extensions_count_diff_lower\
    \ = extensions_count_diff / extensions_count_lower\n        val strength_diff_lower\
    \ = strength_diff / extensions_count_diff_lower\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper / extensions_count_upper\n        val strength_diff_diff_upper\
    \ = strength_diff_upper / extensions_count_diff_upper\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower / extensions_count_lower\n        val strength_diff_diff_lower\
    \ = strength_diff_lower / extensions_count_diff_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper / extensions_count_upper\n        val strength_diff_diff_diff_upper\
    \ = strength_diff_diff_upper / extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_lower / extensions_count_lower\n        val strength_diff_diff_diff_lower\
    \ = strength_diff_diff_lower / extensions_count_diff_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper / extensions_count_upper\n        val\
    \ strength_diff_diff_diff_diff_upper = strength_diff_diff_diff_upper / extensions_count_diff_upper\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_lower\
    \ / extensions_count_diff_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper / extensions_count_upper\n    \
    \    val strength_diff_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_upper\
    \ / extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1) -> 1)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = ", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toList.max\n     \
    \   val extensions_sorted = extensions_map.values.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val class_name_sorted = class_name_map.values.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val strongest_extension = extensions_sorted.find(x => x.toUpperCase.length\
    \ == strength).getOrElse(\"\")\n        class_name_sorted.find(x => x.toUpperCase.length\
    \ == strength).getOrElse(\"\")", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_count = extensions_map.size\n        val class_name_map = class_name.map(c\
    \ => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val class_name_sorted = class_name_map.toSeq.sortBy(_._2).reverse\n \
    \       val extension_sorted = extensions_sorted.take(strength)\n        val class_name\
    \ = class_name_sorted.take(strength)\n        val extension = extension_sorted.take(strength)\n\
    \        class_name + \".\" + extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n            ).toMap\n        val\
    \ strength = extensions_map.values.reduce((x, y) => x - y)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength\
    \ = extensions_sorted.head._2\n        val extension_class = extensions_sorted.head._1\n\
    \        val extension_class_name = extension_class.substring(extension_class.lastIndexOf('.')\
    \ + 1)\n        val extension_class_name_upper = extension_class_name.toUpperCase\n\
    \        val extension_class_name_lower = extension_class_name.toLowerCase\n \
    \       if (strength == extension_strength) {\n            class_name + extension_class_name_upper\n\
    \        } else if (strength > extension_strength) {\n            class_name +\
    \ extension_class_name_lower + extensions_sorted.last._1\n        } else {\n \
    \           class_name + extension_class_name_lower + extensions_sorted.last._2\n\
    \        }", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.split('').map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val extension_first\
    \ = extensions_sorted.head._1\n        val extension_last = extensions_sorted.last._1\n\
    \        val extension_strength = extensions_sorted.last._2\n        val extension_strength_sorted\
    \ = extensions_sorted.sortBy(x => x._2).reverse\n        val extension_strength_first\
    \ = extensions_strength_sorted.head._1\n        val extension_strength_last =\
    \ extensions_strength_sorted.last._1\n        val extension_strength_strength\
    \ = extensions_strength_sorted.last._2\n        val extension_strength_strength_sorted\
    \ = extensions_strength_sorted.sortBy(x => x._2).reverse\n        val extension_strength_strength_first\
    \ = extensions_strength_strength_sorted.head._1\n        val extension_strength_strength_last\
    \ = extensions_strength_strength_sorted.last._1\n        val extension_strength_strength_strength\
    \ = extensions_strength_strength_sorted.last._2\n        val extension_strength_strength_strength_sorted\
    \ = extensions_strength_strength_sorted.sortBy(x => x._2).reverse\n        val\
    \ extension_strength_strength_strength_first = extensions_strength_strength_strength_sorted.head._1\n\
    \        val extension_strength_strength_strength_last = extensions_strength_strength_strength_sorted.last._1\n\
    \        val extension_strength_strength_strength_strength = extensions_strength_strength_strength_sorted.last._2\n\
    \        val extension_strength_strength_strength_strength_sorted = extensions_strength_strength_strength_sorted.sortBy(x\
    \ => x._2).reverse\n        val extension_strength_strength_strength_strength_first\
    \ = extensions_strength_strength_strength_strength_sorted.head._1\n        val\
    \ extension_strength_strength_strength_strength_last = extensions_strength_strength_strength_strength_sorted.last._1\n\
    \        val extension_strength_strength_strength_strength_strength = extensions_strength_strength_strength",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toInt)\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_str = if (strength == 0) \"0\"\
    \ else strength.toString\n        val extensions_str = extensions.map(_.toUpperCase).mkString(\"\
    .\")\n        val class_name_str = class_name.toUpperCase\n        val extension_str\
    \ = extensions_str.dropRight(extensions_str.length - 1)\n        val class_name_and_extension\
    \ = class_name_str + \".\" + extension_str\n        val strength_extension_str\
    \ = class_name_and_extension + \".\" + strength_str\n        val strength_extension_str2\
    \ = class_name_and_extension + \".\" + extensions_str\n        val strength_extension_str3\
    \ = class_name_and_extension + \".\" + extensions_count.toString\n        val\
    \ strength_extension_str4 = class_name_and_extension + \".\" + extensions_count_upper.toString\n\
    \        val strength_extension_str5 = class_name_and_extension + \".\" + extensions_count_lower.toString\n\
    \        val strength_extension_str6 = class_name_and_extension + \".\" + strength_str\
    \ + extensions_str\n        val strength_extension_str7 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count.toString\n        val strength_extension_str8\
    \ = class_name_and_extension + \".\" + strength_str + extensions_count_upper.toString\n\
    \        val strength_extension_str9 = class_name_and_extension + \".\" + strength_str\
    \ + extensions_count_lower.toString\n        val strength_extension_str10 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count_upper + extensions_str\n        val\
    \ strength_extension_str11 = class_name_and_extension + \".\" + strength_str +\
    \ extensions_count_lower + extensions_str\n        val strength_extension_str12\
    \ = class_name_and_extension + \".\" + strength_str + extensions_count_upper +\
    \ extensions_count.toString\n        val strength_extension_str13 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count_lower + extensions_count.toString\n\
    \        val strength_extension_str14 = class_name_and_extension + \".\" + strength_str\
    \ + extensions_count_upper + extensions_count_upper.toString\n        val strength_extension_str15\
    \ = class_name_and_extension + \".\" + strength_str + extensions_count_lower +\
    \ extensions_count_upper.toString\n        val strength_extension_str16 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count_upper ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0) { (acc, x) => acc + (x._2.length - x._1.length)\
    \ }\n        val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2.length\
    \ - x._1.length)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != extensions_sorted.last._2)\n        val extensions_sorted = extensions_sorted.takeWhile",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sor", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.max\n\
    \        val strongest_extension = extensions_map.values.find(x => x._1 == strength).map(_._2).head\n\
    \        class_name + \".\" + strongest_extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_length = class_name.length\n\
    \        val strength = extensions_count - class_name_length\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_first = extensions_sorted.head\n        val extensions_last = extensions_sorted.last\n\
    \        val extensions_first_length = extensions_first.length\n        val extensions_last_length\
    \ = extensions_last.length\n        val extensions_first_first_letter = extensions_first.charAt(0)\n\
    \        val extensions_last_last_letter = extensions_last.charAt(extensions_last.length\
    \ - 1)\n        val extensions_first_last_letter = extensions_first.charAt(extensions_first.length\
    \ - 1)\n        val extensions_first_first_letter_length = extensions_first_first_letter.length\n\
    \        val extensions_last_last_letter_length = extensions_last_last_letter.length\n\
    \        val extensions_first_last_letter_length = extensions_first_last_letter.length\n\
    \        val extensions_first_first_letter_strength = extensions_first_first_letter.toLowerCase\
    \ - extensions_first_last_letter.toLowerCase + 1\n        val extensions_last_last_letter_strength\
    \ = extensions_last_last_letter.toLowerCase - extensions_first_first_letter.toLowerCase\
    \ + 1\n        val extensions_first_last_letter_strength = extensions_first_last_letter.toLowerCase\
    \ - extensions_last_last_letter.toLowerCase + 1\n        val extensions_first_first_letter_strength_length\
    \ = extensions_first_first_letter_strength.length\n        val extensions_last_last_letter_strength_length\
    \ = extensions_last_last_letter_strength.length\n        val extensions_first_last_letter_strength_length\
    \ = extensions_first_last_letter_strength.length\n        val extensions_first_first_letter_strength_strength\
    \ = extensions_first_first_letter_strength.toLowerCase - extensions_last_last_letter_strength.toLowerCase\
    \ + 1\n        val extensions_last_last_letter_strength_strength = extensions_last_last_letter_strength.toLowerCase\
    \ - extensions_first_first_letter_strength.toLowerCase + 1\n        val extensions_first_last_letter_strength_strength\
    \ = extensions_first_last_letter_strength.toLowerCase - extensions_last_last_letter_strength.toLowerCase\
    \ + 1\n        val extensions_first_first_letter_strength_strength_length = extensions_first_first_letter_strength_strength.length\n\
    \        val extensions_last_last_letter_strength_strength_length = extensions_last_last_letter_strength_strength.length\n\
    \        val extensions_first_last_letter_strength_strength_strength = extensions_first_last_letter_strength_strength.toLowerCase\
    \ - extensions_last_last_letter_strength_strength.toLowerCase + 1\n        val\
    \ extensions_first_", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((x,\
    \ y) => (x._2 - y._2))\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2)\n        val extension_strength = extensions_sorted.last._2\n     \
    \   val extension_str = extensions_sorted.last._1\n        val extension_class\
    \ = extension_str.substring(0, extension_str.length - 1)\n        val extension_class_name\
    \ = extension_class.substring(extension_class.lastIndexOf('.') + 1)\n        val\
    \ extension_class_name_sorted = extension_class_name.substring(extension_class_name.lastIndexOf('_')\
    \ + 1).toUpperCase\n        val extension_class_name_strength = extension_class_name_sorted.length\
    \ - extension_class_name_sorted.lastIndexOf('_') + 1\n        val extension_class_name_strength_str\
    \ = extension_class_name_strength.toString\n        if (extension_strength ==\
    \ -1) {\n            class_name + extension_str\n        } else if (extension_strength\
    \ > 0) {\n            class_name + extension_str + extension_class_name_strength_str\
    \ + extension_class_name_sorted\n        } else {\n            class_name + extension_str\
    \ + extension_class_name_sorted\n        }", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = strength.toString\n        val strength_str_upper = strength_str.toUpperCase\n\
    \        val strength_str_lower = strength_str.toLowerCase\n        val strength_str_upper\
    \ = strength_str_upper.charAt(0)\n        val strength_str_lower = strength_str_lower.charAt(0)\n\
    \        val strength_str_upper = strength_str_upper - strength_str_lower\n  \
    \      val strength_str_upper = strength_str_upper.toString\n        val strength_str_lower\
    \ = strength_str_lower.toString\n        val strength_str_upper = strength_str_upper.charAt(0)\n\
    \        val strength_str_lower = strength_str_lower.charAt(0)\n        val strength_str_upper\
    \ = strength_str_upper - strength_str_lower\n        val strength_str_upper =\
    \ strength_str_upper.toString\n        val strength_str_lower = strength_str_lower.toString\n\
    \        val strength_str_upper = strength_str_upper.charAt(0)\n        val strength_str_lower\
    \ = strength_str_lower.charAt(0)\n        val strength_str_upper = strength_str_upper\
    \ - strength_str_lower\n        val strength_str_upper = strength_str_upper.toString\n\
    \        val strength_str_lower = strength_str_lower.toString\n        val strength_str_upper\
    \ = strength_str_upper.charAt(0)\n        val strength_str_lower = strength_str_lower.charAt(0)\n\
    \        val strength_str_upper = strength_str_upper - strength_str_lower\n  \
    \      val strength_str_upper = strength_str_upper.toString\n        val strength_str_lower\
    \ = strength_str_lower.toString\n        val strength_str_upper = strength_str_upper.charAt(0)\n\
    \        val strength_str_lower = strength_str_lower.charAt(0)\n        val strength_str_upper\
    \ = strength_str_upper - strength_str_lower\n        val strength_str_upper =\
    \ strength_str_upper.toString\n        val strength_str_lower = strength_str_lower.toString\n\
    \        val strength_str_upper = strength_str_upper.charAt(0)\n        val strength_str_lower\
    \ = strength_str_lower.charAt(0)\n        val strength_str_upper = strength_str_upper\
    \ - strength_str_lower\n        val strength_str_upper", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.values.max\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val ", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.maxBy(x => x)\n        val max_key_index = strength.indexOf(max_key)\n\
    \        val max_key_name = extensions_map.get(max_key)\n        val max_key_name_index\
    \ = extensions_map.indexOf(max_key_name)\n        val max_key_name_length = max_key_name_index\
    \ - max_key_index\n        val max_key_name_length = max_key_name_length / 2\n\
    \        val max_key_name_length = max_key_name_length.toString.length\n     \
    \   val max_key_name_length = max_key_name_length + max_key_name_length\n    \
    \    val max_key_name_length = max_key_name_length + max_key_name_length\n   \
    \     val max_key_name_length = max_key_name_length + max_key_name_length\n  \
    \      val max_key_name_length = max_key_name_length + max_key_name_length\n \
    \       val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val strengths = extensions_map.values.map(_.toString.toInt)\n       \
    \ val max_strength = strengths.max\n        val max_strength_extension = extensions_map.filter(_._2\
    \ == max_strength).head\n        val class_name_with_max_strength = class_name\
    \ + max_strength_extension._1\n        val extensions_with_max_strength = extensions_map.filter(_._2\
    \ == max_strength)\n        val extensions_with_max_strength_first = extensions_with_max_strength.sortBy(_._1).head\n\
    \        val extensions_with_max_strength_last = extensions_with_max_strength.sortBy(_._1).last\n\
    \        val extensions_with_max_strength_first_last = extensions_with_max_strength_first\
    \ + extensions_with_max_strength_last\n        val extensions_with_max_strength_first_last_sorted\
    \ = extensions_with_max_strength_first_last.sortBy(_._1).reverse\n        val\
    \ extensions_with_max_strength_first_last_sorted_first = extensions_with_max_strength_first_last_sorted.head\n\
    \        val extensions_with_max_strength_first_last_sorted_last = extensions_with_max_strength_first_last_sorted.last\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last = extensions_with_max_strength_first_last_sorted_first\
    \ + extensions_with_max_strength_first_last_sorted_last\n        val extensions_with_max_strength_first_last_sorted_first_last_sorted\
    \ = extensions_with_max_strength_first_last_sorted_first_last.sortBy(_._1).reverse\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted.head\n  \
    \      val extensions_with_max_strength_first_last_sorted_first_last_sorted_last\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted.last\n  \
    \      val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first + extensions_with_max_strength_first_last_sorted_first_last_sorted_last\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted.sortBy(_._1).reverse\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_first\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_last.head\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_last\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_last.last\n\
    \        val extensions_with_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val cap = m.toList.map(x => x.toUpperCase).count(x => x.isUpper)\n\
    \            val sm = m.toList.map(x => x.toLowerCase).count(x => x.isLower)\n\
    \            val strength = cap - sm\n            if (strength > s) strength else\
    \ s\n        }\n        val class_name_with_strength = class_name_map.foldLeft(\"\
    \") { (s, e) =>\n            val c = class_name_map(e._1)\n            val m =\
    \ extensions_map(e._2)\n            val cap = m.toList.map(x => x.toUpperCase).count(x\
    \ => x.isUpper)\n            val sm = m.toList.map(x => x.toLowerCase).count(x\
    \ => x.isLower)\n            val strength = cap - sm\n            if (strength\
    \ > s) s + \".\" + e._1 else s\n        }\n        class_name_with_strength",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((x, y) => (x._2 - y._2))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2)\n    \
    \    val extensions_sorted = extensions_sorted.takeWhile(x => x._2 > 0).sortBy(x\
    \ => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x._2\
    \ > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val ", "        val extensions_map =\
    \ extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count\
    \ = extensions_map.values.toList\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val strength = extensions_count_sorted.head\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sort", "    \
    \    val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_frac\
    \ = extensions_count_diff / extensions_count_upper\n        val extensions_count_diff_frac_upper\
    \ = extensions_count_diff_frac / extensions_count_upper\n        val extensions_count_diff_frac_lower\
    \ = extensions_count_diff_frac / extensions_count_lower\n        val extensions_count_diff_frac_diff\
    \ = extensions_count_diff_frac_upper - extensions_count_diff_frac_lower\n    \
    \    val extensions_count_diff_frac_diff_frac = extensions_count_diff_frac_diff\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac / extensions_count_diff\n        val\
    \ extensions_count_diff_frac_diff_frac_lower = extensions_count_diff_frac_diff_frac\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff\
    \ = extensions_count_diff_frac_diff_frac_upper - extensions_count_diff_frac_diff_frac_lower\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac = extensions_count_diff_frac_diff_frac_diff\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac_diff_frac / extensions_count_diff\n \
    \       val extensions_count_diff_frac_diff_frac_diff_frac_lower = extensions_count_diff_frac_diff_frac_diff_frac\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff_frac_diff\
    \ = extensions_count_diff_frac_diff_frac_diff_frac_upper - extensions_count_diff_frac_diff_frac_diff_frac_lower\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac = extensions_count_diff_frac_diff_frac_diff_frac_diff\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac_diff_frac_diff_frac / extensions_count_diff\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac_lower =\
    \ extensions_count_diff_frac_diff_frac_diff_frac_diff_frac / ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strength = extensions_sorted.map(x\
    \ => extensions_map(x._2)).sum\n        val class_name_with_extension = class_name\
    \ + extensions_sorted.head._2\n        val extension_with_strength = extensions_sorted.head._1\n\
    \        val strength_str = strength.toString\n        val extension_str = extension_with_strength\n\
    \        if (strength_str == extension_str) {\n            class_name_with_extension\n\
    \        } else {\n            class_name_with_extension + extension_str\n   \
    \     }", "        val extensions_map = extensions.map(x => x.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val extensions_count\
    \ = extensions_map.values.toList\n        val class_name_count = class_name_map.values.toList\n\
    \        val max_count = extensions_count.max\n        val max_index = extensions_count.indexOf(max_count)\n\
    \        val max_key = extensions_count.take(max_index).last\n        val max_value\
    \ = class_name_count.take(max_index).last\n        val max_key = class_name_count.take(max_index).last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val max_key = max_value.last\n\
    \        val max_value = max_key.last\n        val ", "        // Your code here\n\
    \        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortBy(_.length)\n        val strength = extensions_count_sorted.last.length\
    \ - extensions_count_sorted.head.length\n        val class_name_with_extension\
    \ = class_name + extensions.map(_.capitalize).mkString(\".\") + \".\"\n      \
    \  if(strength == 0) class_name_with_extension\n        else if(strength == 1)\
    \ class_name_with_extension + extensions_count_sorted.head\n        else if(strength\
    \ == -1) class_name_with_extension + extensions_count_sorted.last\n        else\
    \ class_name_with_extension + extensions_count_sorted.last.substring(0, strength)",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)) }\n        val strongest_extension = extensions_map.maxBy(x\
    \ => strength(x._1))\n        class_name + strongest_extension._2", "        val\
    \ extensions_count = extensions.map(x => x.length).sum\n        val extensions_count_upper\
    \ = extensions.map(x => x.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(x => x.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = extensions_count_upper\
    \ - strength\n        val strength_lower = extensions_count_lower - strength\n\
    \        val strength_total = extensions_count_upper + extensions_count_lower\
    \ + strength\n        if (strength_total > 0) \n            class_name + extensions.sortWith(x\
    \ => x.toUpperCase.compareTo(x))(strength_upper)\n        else\n            class_name\
    \ + extensions.sortWith(x => x.toLowerCase.compareTo(x))(strength_lower)", " \
    \       val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1)\
    \ -> e).toMap\n        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0)\
    \ -> c.toUpperCase.charAt(1) -> c).toMap\n        val strength = extensions_map.values.map(_.toString.toInt).sum\n\
    \        val class_name_with_strength = class_name_map.filter(_._2 > strength).map(_._1).mkString(\"\
    .\") + \".\" + extensions_map.filter(_._2 == strength).map(_._2).mkString(\".\"\
    ) + \".\"\n        val class_name_with_strength_2 = class_name_with_strength.substring(0,\
    \ class_name_with_strength.lastIndexOf(\".\"))\n        val class_name_with_strength_3\
    \ = class_name_with_strength_2.substring(0, class_name_with_strength_2.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_4 = class_name_with_strength_3.substring(0,\
    \ class_name_with_strength_3.lastIndexOf(\".\"))\n        val class_name_with_strength_5\
    \ = class_name_with_strength_4.substring(0, class_name_with_strength_4.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_6 = class_name_with_strength_5.substring(0,\
    \ class_name_with_strength_5.lastIndexOf(\".\"))\n        val class_name_with_strength_7\
    \ = class_name_with_strength_6.substring(0, class_name_with_strength_6.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_8 = class_name_with_strength_7.substring(0,\
    \ class_name_with_strength_7.lastIndexOf(\".\"))\n        val class_name_with_strength_9\
    \ = class_name_with_strength_8.substring(0, class_name_with_strength_8.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_10 = class_name_with_strength_9.substring(0,\
    \ class_name_with_strength_9.lastIndexOf(\".\"))\n        val class_name_with_strength_11\
    \ = class_name_with_strength_10.substring(0, class_name_with_strength_10.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_12 = class_name_with_strength_11.substring(0,\
    \ class_name_with_strength_11.lastIndexOf(\".\"))\n        val class_name_with_strength_13\
    \ = class_name_with_strength_12.substring(0, class_name_with_strength_12.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_14 = class_name_with_strength_13.substring(0,\
    \ class_name_with_strength_13.lastIndexOf(\".\"))\n        val class_name_with_strength_15\
    \ = class_name_with_strength_14.substring(0, class_name_with_strength_14.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_16 = class_name_with_strength_15.substring(0,\
    \ class_name_with_strength_15.lastIndexOf(\".\"))\n        ", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_count = extensions_map.values.count(_ == 0)\n        val\
    \ extensions_count_map = extensions_map.map(e => (e._1, e._2.toInt)).toMap\n \
    \       val extensions_count_map_sorted = extensions_count_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_count_map_sorted_with_zero = extensions_count_map_sorted.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero = extensions_count_map_sorted_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero.map(_._1 -> 0)\n        val\
    \ extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero = extensions_count_map_sorted_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength.toDouble / extensions_count.toDouble\n    \
    \    val strength_lower = strength.toDouble / extensions_count.toDouble\n    \
    \    val strength_sum = strength_upper + strength_lower\n        val strength_max\
    \ = if (strength_sum > 0) strength_sum else 0\n        val strength_min = if (strength_sum\
    \ < 0) -strength_sum else 0\n        val strength_max_index = extensions.zipWithIndex.maxBy(_._2)._2\n\
    \        val strength_min_index = extensions.zipWithIndex.minBy(_._2)._2\n   \
    \     val extension = extensions(strength_max_index)\n        val extension_upper\
    \ = extension.toUpperCase\n        val extension_lower = extension.toLowerCase\n\
    \        val extension_sum = extension_upper + extension_lower\n        val extension_max\
    \ = if (extension_sum > 0) extension_sum else 0\n        val extension_min = if\
    \ (extension_sum < 0) -extension_sum else 0\n        val extension_max_index =\
    \ extensions.zipWithIndex.maxBy(_._2)._2\n        val extension_min_index = extensions.zipWithIndex.minBy(_._2)._2\n\
    \        val extension_strength = extensions(extension_max_index)\n        val\
    \ extension_strength_upper = extension_strength.toUpperCase\n        val extension_strength_lower\
    \ = extension_strength.toLowerCase\n        val extension_strength_sum = extension_strength_upper\
    \ + extension_strength_lower\n        val extension_strength_max = if (extension_strength_sum\
    \ > 0) extension_strength_sum else 0\n        val extension_strength_min = if\
    \ (extension_strength_sum < 0) -extension_strength_sum else 0\n        val extension_strength_max_index\
    \ = extensions.zipWithIndex.maxBy(_._2)._2\n        val extension_strength_min_index\
    \ = extensions.zipWithIndex.minBy(_._2)._2\n        val extension_strength_strength\
    \ = extensions(extension_strength_max_index)\n        val extension_strength_strength_upper\
    \ = extension_strength_strength.toUpperCase\n        val extension_strength_strength_lower\
    \ = extension_strength_strength.toLowerCase\n        val extension_strength_strength_sum\
    \ = extension_strength_strength_upper + extension_strength_strength_lower\n  \
    \      val extension", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted_with_strength = extensions_count_sorted.zip(strength)\n\
    \        val extensions_count_sorted_with_strength_sorted = extensions_count_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength = extensions_count_sorted_with_strength_sorted.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.takeWhile(_._2\
    \ > ", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).toArray\n        val max_strength = strength.max\n\
    \        val max_key = extensions_map.keys.find(x => strength.contains(x)).getOrElse(\"\
    \")\n        val max_value = extensions_map.get(max_key)\n        val max_key_lower\
    \ = max_key.toLowerCase\n        val max_value_lower = max_value.toLowerCase\n\
    \        if (max_strength == 0) \"\"\n        else if (max_strength == 1) max_value_lower\n\
    \        else if (max_strength == 2) max_value_lower + max_key_lower\n       \
    \ else if (max_strength == 3) max_value_lower + max_key_lower + max_key_lower\n\
    \        else \"\"", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map.get(x) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + extension", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength / extensions_count_upper\n        val strength_lower\
    \ = strength / extensions_count_lower\n        val strength_diff = strength_upper\
    \ - strength_lower\n        val strength_diff_upper = strength_diff / extensions_count_upper\n\
    \        val strength_diff_lower = strength_diff / extensions_count_lower\n  \
    \      val strength_diff_diff_upper = strength_diff_upper - strength_diff_lower\n\
    \        val strength_diff_diff_lower = strength_diff_lower - strength_diff_upper\n\
    \        val strength_diff_diff_diff_upper = strength_diff_diff_upper - strength_diff_diff_lower\n\
    \        val strength_diff_diff_diff_lower = strength_diff_diff_lower - strength_diff_diff_upper\n\
    \        val strength_diff_diff_diff_upper = strength_diff_diff_diff_upper - strength_diff_diff_diff_lower\n\
    \        val strength_diff_diff_diff_lower = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_lower = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_upper\
    \ - strength_diff_diff_diff_diff_lower\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1) ->\
    \ e).toMap\n        val extensions_count = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1) -> e).groupBy(_._1).mapValues(_.size)\n        val\
    \ extensions_count_sorted = extensions_count.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._2).sum\n\
    \        val extensions_count_sorted = extensions_count_sorted.toDouble\n    \
    \    val extensions_count_sorted = extensions_count_sorted.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toLong\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toDouble\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => -strength(x._1))\n        extensions_sorted.head._2", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\".\")\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        val\
    \ extensions_sorted = extensions_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n        val\
    \ extensions_sorted = extensions_sorted.take(strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._1).mkString(\".\")\n        class_name + extensions_sorted",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions.map(x => extensions_map(x.toUpperCase).length).toMap\n\
    \        val extensions_count_sorted = extensions_count.sortBy(_._2)\n       \
    \ val strength = extensions_count_sorted.last._1 - extensions_count_sorted.head._1\n\
    \        val extension = extensions_count_sorted.head._1\n        val class_name_with_extension\
    \ = class_name + extension\n        val extension_with_same_strength = extensions_map.get(extension)\n\
    \        if (extension_with_same_strength != null) {\n            val extension_with_same_strength_length\
    \ = extension_with_same_strength.length\n            if (extension_with_same_strength_length\
    \ == 1) {\n                class_name_with_extension + extension_with_same_strength\n\
    \            } else {\n                class_name_with_extension + extension_with_same_strength.mkString(\"\
    \")\n            }\n        } else {\n            class_name_with_extension\n\
    \        }", "        val extensions_count = extensions.map(_.length).sum\n  \
    \      val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ extensions_count_sorted_reversed = extensions_count_sorted.reverse\n       \
    \ val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed = extensions_count_sorted_reversed_length_sum_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0) { (s, e) =>\n            val c = class_name_map(e._1)\n\
    \            val s = if (c > s) c else s\n        }\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength\
    \ = extensions_sorted.foldLeft(0) { (s, e) =>\n            val c = class_name_map(e._1)\n\
    \            val s = if (c > s) c else s\n        }\n        val extension_strength_sorted\
    \ = extensions_sorted.sortBy(_._1).reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_sorted = extension_strength_sorted.reverse\n        val extension_strength_sorted\
    \ = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n        val\
    \ extension_strength_", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n        val strength = extensions_map.max\n\
    \        val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n     \
    \   val extensions_sorted = extensions_sorted.takeWhile(_ < strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\") + extensions_sorted.last\n\
    \        class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strongest_extension\
    \ = extensions_sorted.head._2\n        class_name + \".\" + strongest_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strengths = extensions_map.filter(_._2 > class_name_map.get(_._1)).map(_._1)\n\
    \        val strength = strengths.max\n        if (strength == -1) \"\"\n    \
    \    else class_name + extensions_map.getOrElse(strength, \"\")", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val extensions_count = extensions.map(e => extensions_map(e).length).toMap\n\
    \        val extensions_count_sorted = extensions_count.toSeq.sortWith(_._2 >\
    \ _._2)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(e => extensions_map(e).mkString(\"\
    .\"))\n        val extensions_count_sorted = extensions_count_sorted.mkString(\"\
    .\") + \".\"\n        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_map_sorted_keys = extensions_map_sorted.keys.toSeq\n \
    \       val extensions_map_sorted_values = extensions_map_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted = extensions_map_sorted_keys.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_values_sorted = extensions_map_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values = extensions_map_sorted_keys_sorted.zip(extensions_map_sorted_values_sorted)\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted = extensions_map_sorted_keys_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys = extensions_map_sorted_keys_sorted_values_sorted.keys.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values = extensions_map_sorted_keys_sorted_values_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted = extensions_map_sorted_keys_sorted_values_sorted_keys.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted = extensions_map_sorted_keys_sorted_values_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted.keys.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys_sorted.zip(extensions_map_sorted_values_sorted_values_sorted_values_sorted)\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_keys\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted.keys.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)\n           \
    \ ).toMap\n        val strength = extensions_map.values.reduce((x, y) => if (x\
    \ < y) x else y)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_str\
    \ = extensions_sorted.head._1\n        if (extension_strength == strength) {\n\
    \            class_name + extension_str\n        } else {\n            class_name\
    \ + extension_str + extension_strength.toString.substring(strength)\n        }",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strongest_extension\
    \ = sorted_extensions.find(e => e._2 == strength).getOrElse(\"\")\n        class_name\
    \ + \".\" + strongest_extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_with_same_strength = extensions_map.filter(_._1\
    \ == strength)\n        val extensions_with_same_strength_sorted = extensions_with_same_strength.sortBy(_._1)\n\
    \        val extensions_with_same_strength_sorted = extensions_with_same_strength_sorted.head._2\n\
    \        val extensions_with_same_strength_sorted = extensions_with_same_strength_sorted.toList\n\
    \        val extensions_with_same_strength_sorted.map(x => class_name + x).mkString(\"\
    .\")", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortWith((a, b) => strength - a)\n        val extensions_sorted\
    \ = extensions_sorted.take(1).mkString.concat(\".\").concat(extensions_sorted.last)\n\
    \        val extensions_sorted = extensions_sorted.replaceAll(\"(.)\", \"$1.\"\
    )\n        class_name + extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.values.toList.sortWith(_\
    \ < _)\n        val strongest_extension = sorted_extensions.head\n        val\
    \ strongest_extension_class = class_name + \".\" + strongest_extension\n     \
    \   val strongest_extension_strength = extensions_map.getOrElse(strongest_extension,\
    \ 0)\n        if (strongest_extension_strength == 0) strongest_extension_class\
    \ else strongest_extension_class", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase).zipWithIndex.toMap\n        val class_name_map = class_name.zipWithIndex.toMap\n\
    \        val strength = class_name_map.get(class_name).map(_.toUpperCase).map(_.length\
    \ - _.toUpperCase.indexOf(_)).getOrElse(0)\n        val strength_map = strength.zipWithIndex.toMap\n\
    \        val strongest_extension = strength_map.values.min\n        val strongest_extension_map\
    \ = strongest_extension.zipWithIndex.toMap\n        class_name_map.get(strongest_extension_map.keys.toList.head).map(_.toUpperCase).map(_.length\
    \ - _.toUpperCase.indexOf(_)).getOrElse(0)", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map = extensions_map.toMap\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.values.sortBy(-_)\n        val first_extension = sorted_extensions.head\n\
    \        val first_extension_strength = extensions_map.get(first_extension)._1\n\
    \        val strength_str = if (strength == 0) \"\" else s\"(${strength})\"\n\
    \        s\"$class_name.$first_extension$strength_str\"", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0) { (acc, x) => acc + (x._2 - x._1) }\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).reverse\n        val extensions_sorted\
    \ = extensions_sorted.", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val first_extension = sorted_extensions.head\n\
    \        val first_extension_strength = extensions_map.getOrElse(first_extension,\
    \ 0)\n        if (strength == 0) first_extension\n        else class_name + first_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val strongest_extension = extensions_map.values.find(x => x == strength).head\n\
    \        s\"$class_name.$strongest_extension\"", "        val extensions_map =\
    \ extensions.map(e => e.map(c => (c, e)))\n        val strengths = extensions_map.map(_.map(c\
    \ => (c._1.toUpperCase - c._1.toLowerCase))).flatten\n        val max_strength\
    \ = strengths.max\n        val max_strength_extension = strengths.find(s => s\
    \ == max_strength).get\n        val class_name_with_max_strength = class_name\
    \ + max_strength_extension\n        val class_name_with_max_strength_extension\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_2 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_3\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_4 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_5\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_6 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_7\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_8 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_9\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_10 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_11\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_12 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_13\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_14 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_15\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_16 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_17\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_18 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_", "  \
    \      val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sorted_with_strength\
    \ = extensions_count_sorted.zip(strength)\n        val extensions_count_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength.sortBy(_._1)\n        val extensions_count_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted.take(extensions_count_sorted_with_strength_sorted.length\
    \ - 1)\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength.sortBy(_._2)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.head\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._1\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._1\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._1\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength", "  \
    \      val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n\
    \        val strongest_extension = extensions_map.values.filter(x => x == strength).head\n\
    \        class_name + \".\" + strongest_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\".\")\n        val\
    \ extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        ", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = first_extension._1\n        if (strength == first_extension_strength) {\n\
    \            class_name + first_extension._2\n        } else {\n            class_name\
    \ + sorted_extensions.head._2\n        }"]
stop_tokens:
- "\n    }\n"
