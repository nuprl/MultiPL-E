name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n   \
  \ def StrongestExtension(class_name : String, extensions : List[String]) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extensions_map = extensions.map(x => x.toUpperCase).zipWithIndex.toMap\n\
    \        val extensions_count = extensions.map(x => x.toUpperCase).distinct.length\n\
    \        val extensions_count_map = extensions_count.zipWithIndex.toMap\n    \
    \    val extensions_count_sum = extensions_count.foldLeft(0)(_ + _)\n        val\
    \ extensions_count_sum_map = extensions_count_sum.zipWithIndex.toMap\n       \
    \ val extensions_count_sum_map = extensions_count_sum_map.filter(_._2 > 1).map(_._1)\n\
    \        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2 >\
    \ 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        if (extensions_count > 1) {\n            val\
    \ extensions_sorted = extensions.sortWith((a, b) => strength - a.length - b.length)\n\
    \            val extensions_sorted = extensions.sortWith((a, b) => strength -\
    \ a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val strongest_extension = extensions_map.maxBy(_._2)._1\n\
    \        s\"$class_name.$strongest_extension\"", "        // Your code here\n\
    \        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x\
    \ => (x._1 - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val strongest_extension\
    \ = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val class_name_with_strongest_extension\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val class_name_with_strongest_extension_with_same_strength\
    \ = class_name_with_strongest_extension.filter(x => x == strongest_extension)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength.filter(x => x == class_name_with_strongest_extension_with_same_strength.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension_",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => a.length - b.length)\n\
    \        val extension_first = extensions_sorted.head\n        val extension_last\
    \ = extensions_sorted.last\n        val extension_first_count = extension_first.length\n\
    \        val extension_last_count = extension_last.length\n        val extension_first_first_letter\
    \ = extension_first(0)\n        val extension_last_last_letter = extension_last(extension_last_count\
    \ - 1)\n        val extension_first_last_letter = extension_first(extension_first_count\
    \ - 1)\n        val extension_first_first_letter_count = extension_first_first_letter.length\n\
    \        val extension_last_last_letter_count = extension_last_last_letter.length\n\
    \        val extension_first_last_letter_count = extension_first_last_letter.length\n\
    \        val extension_first_first_letter_last_letter = extension_first(extension_first_first_letter_count\
    \ - 1)\n        val extension_last_last_letter_last_letter = extension_last(extension_last_last_letter_count\
    \ - 1)\n        val extension_first_last_letter_last_letter_count = extension_first_last_letter_last_letter.length\n\
    \        val extension_first_last_letter_last_letter_last_letter_count = extension_last_last_letter_last_letter.length\n\
    \        val extension_first_last_letter_last_letter_last_letter_last_letter =\
    \ extension_first(extension_first_last_letter_last_letter_last_letter_count -\
    \ 1)\n        val extension_last_last_letter_last_letter_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_last_letter_last_letter_count -\
    \ 1)\n        val extension_first_last_letter_last_letter_last_letter_last_letter_count\
    \ = extension_first_last_letter_last_letter_last_letter_last_letter.length\n \
    \       val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ = extension_last_last_letter_last_letter_last_letter_last_letter.length\n  \
    \      val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_last_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_",
  "        val extensions_map = extensions.map(e => e.map(c => (c, 1)).toMap)\n  \
    \      val class_name_map = class_name.map(c => (c, 1)).toMap\n        val extensions_count\
    \ = extensions_map.values.sum\n        val class_name_count = class_name_map.values.sum\n\
    \        val strength = class_name_count - extensions_count\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(_._2).reverse\n        val class_name_sorted\
    \ = class_name_map.values.sortBy(_._2).reverse\n        val extensions_first =\
    \ extensions_sorted.head\n        val class_name_first = class_name_sorted.head\n\
    \        if (class_name_count > extensions_count && class_name_sorted.length ==\
    \ 1) {\n            class_name_sorted.head\n        } else if (extensions_count\
    \ > class_name_count && extensions_sorted.length == 1) {\n            extensions_sorted.head\n\
    \        } else {\n            val extensions_first_index = extensions_sorted.indexWhere(_._2\
    \ == extensions_first._2)\n            val class_name_first_index = class_name_sorted.indexWhere(_._2\
    \ == class_name_first._2)\n            val extensions_first_name = extensions_first._1\n\
    \            val class_name_first_name = class_name_first._1\n            val\
    \ extensions_first_name_count = extensions_first._2\n            val class_name_first_name_count\
    \ = class_name_first._2\n            val extensions_first_name_strength = extensions_first._3\n\
    \            val class_name_first_name_strength = class_name_first._3\n      \
    \      val extensions_first_name_sorted = extensions_sorted.take(extensions_first_index).sortBy(_._2).reverse\n\
    \            val class_name_first_sorted = class_name_sorted.take(class_name_first_index).sortBy(_._2).reverse\n\
    \            val extensions_first_name_first = extensions_first_name_sorted.head\n\
    \            val class_name_first_name_first = class_name_first_name_sorted.head\n\
    \            if (class_name_first_name_count > extensions_first_name_count &&\
    \ class_name_first_name_sorted.length == 1) {\n                class_name_first_name_sorted.head\n\
    \            } else if (extensions_first_name_count > class_name_first_name_count\
    \ && extensions_first_name_sorted.length == 1) {\n                extensions_first_name_sorted.head\n\
    \            } else {\n                val extensions_first_name_first_index =\
    \ extensions_first_name_sorted.indexWhere(_._2 == extensions_first_name_first._2)\n\
    \                val class_name_first_name_first_index = class_name_first_name_sorted.indexWhere(_._2\
    \ == class_name_first_name_first._2)\n                val extensions_first_name_first_name\
    \ = extensions_first_name_first._1\n                val ", "        val extensions_count\
    \ = extensions.map(x => x.length).sum\n        val extensions_count_sorted = extensions.map(x\
    \ => x.length).sort\n        val strength = extensions_count_sorted.last\n   \
    \     val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val strength_reversed = extensions_count_sorted_reversed.last\n     \
    \   val strength_fraction = strength_reversed / extensions_count\n        val\
    \ extensions_count_sorted_reversed_fraction = extensions_count_sorted_reversed.map(x\
    \ => x / extensions_count)\n        val extensions_count_sorted_reversed_fraction_sum\
    \ = extensions_count_sorted_reversed_fraction.sum\n        val extensions_count_sorted_reversed_fraction_sum_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction =\
    \ extensions_count_sorted_reversed_fraction_sum_fraction / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction /\
    \ extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_\
    \ == 'D')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.values.toList.sortWith(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.take(1).mkString.concat(\"\
    .\").concat(extensions_sorted.last)\n        extensions_sorted", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n\
    \        val extension_first = extensions_sorted.head\n        val extension_last\
    \ = extensions_sorted.last\n        val extension_first_name = extension_first._1\n\
    \        val extension_last_name = extension_last._1\n        val extension_first_name_length\
    \ = extension_first_name.length\n        val extension_last_name_length = extension_last_name.length\n\
    \        val extension_first_name_strength = extension_first._2\n        val extension_last_name_strength\
    \ = extension_last._2\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val class_name_sorted = class_name_map.toSeq.sortBy(_._2).reverse\n \
    \       val strength_sorted = strength.toSeq.sortBy(_._2).reverse\n        val\
    \ index = strength_sorted.zipWithIndex.find(_._2 == strength_sorted.head._2).get._1\n\
    \        val extension = extensions_sorted.apply(index)\n        class_name_sorted.apply(index)\
    \ + extension", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2 > class_name_map.get(_._1)).map(_._1).length\n\
    \        val extensions_sorted = extensions_map.filter(_._2 > class_name_map.get(_._1)).sortBy(_._1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2).mkString(\".\")\n\
    \        class_name + extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_map_sorted_keys = extensions_map_sorted.keys\n        val\
    \ extensions_map_sorted_values = extensions_map_sorted.values\n        val extensions_map_sorted_keys_sorted\
    \ = extensions_map_sorted_keys.sortBy(_._1)\n        val extensions_map_sorted_values_sorted\
    \ = extensions_map_sorted_values.sortBy(_._1)\n        val extensions_map_sorted_keys_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted\
    \ = extensions_map_sorted_values_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted.toSeq\n        val\
    \ extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted = extensions_map_sorted_values_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted.toSeq\n    \
    \    val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted.toSeq\n  \
    \      val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val strength_str = if (strength == 0) \"\"\
    \ else s\"${class_name}${extensions_map.keys.toList.sortBy(x => -extensions_map(x)).head}\"\
    \n        strength_str", "        val extensions_count = extensions.map(x => x.length).sum\n\
    \        val strength = extensions_count / extensions.length\n        val extensions_sorted\
    \ = extensions.sortWith(x => x.toLowerCase compare class_name)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.length > 0)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => x.toUpperCase compare class_name)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(x => x.length > 0)\n       \
    \ val extensions_sorted = extensions_sorted.map(x => x.toLowerCase compare class_name)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.length > 0)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase compare\
    \ class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x =>\
    \ x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x => x.toLowerCase\
    \ compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sor", "       \
    \ val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name.count(' ')\n        val strength = class_name_count - extensions_count\n\
    \        if (extensions_count > class_name_count) {\n            val max_key =\
    \ extensions_map.maxBy(_._2)._1\n            val max_value = extensions_map.maxBy(_._2)._2\n\
    \            class_name + max_key + max_value\n        } else {\n            class_name\
    \ + extensions_map.minBy(_._2)._1\n        }", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strength = extensions_sorted.head._1\
    \ - extensions_sorted.last._1\n        val extension = extensions_sorted.last._2\n\
    \        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength == 0) class_name\n        else if (strength\
    \ < 0) class_name + extensions_map.keys.toList.sortBy(x => -extensions_map(x)).head\n\
    \        else class_name + extensions_map.keys.toList.sortBy(x => extensions_map(x)).head",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name.countUpperCase\n        val strength = class_name_count - extensions_count\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        // Write your code here\n        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.filter(_._2.length == class_name_map.get(_._2)).length\n  \
    \      val strongest_extension = extensions_map.filter(_._2.length == class_name_map.get(_._2)).minBy(_._1)\n\
    \        class_name_map.get(_._2) + \".\" + strongest_extension._2"]
stop_tokens:
- "\n    }\n"
