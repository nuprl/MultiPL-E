name: HumanEval_55_fib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    // 55\n    // >>>\
  \ fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    def fib(n : Long) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
  \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
  \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
completions: ["        val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs +=\
    \ 0\n        fibs += 1\n        fibs += 2\n        fibs += 3\n        fibs +=\
    \ 4\n        fibs += 5\n        fibs += 6\n        fibs += 7\n        fibs +=\
    \ 8\n        fibs += 9\n        fibs += 10\n        fibs.take(n).sum", "     \
    \   val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs +=\
    \ 1\n        fibs += fibs.head + fibs.tail.head\n        fibs.drop(n).last", " \
    \       val fibs = mutable.ListBuffer(1, 2)\n        fibs ::: fibs.tail.scanLeft(0)((acc,\
    \ x) => acc + x)\n            .takeWhile(_ < n)\n            .last", "       \
    \ if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n == 0) 1\n \
    \       else if (n == 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n\
    \ == 0 || n == 1) return n\n        else fib(n - 1) + fib(n - 2)", "        if\
    \ (n <= 1) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n <= 1) 1\n\
    \        else fib(n-1) + fib(n-2)", "        if (n <= 1) 1\n        else fib(n\
    \ - 1) + fib(n - 2)", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)",
  "        if (n == 0 || n == 1) {\n            return n\n        }\n        else\
    \ {\n            return fib(n - 1) + fib(n - 2)\n        }", "        val fibs\
    \ = mutable.ListBuffer(1,1)\n        fibs.tail.foreach(fibs.head += _)\n     \
    \   fibs.take(n).last", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs take n foreach { x => fibs\
    \ += fibs(x - 1) + fibs(x - 2) }\n        fibs last", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(1).last",
  "        val fibs = mutable.ListBuffer(1, 2)\n        while (fibs.size < n) {\n\
    \            fibs += fibs.head + fibs.last\n        }\n        fibs.last", " \
    \       if (n == 0) 1\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ListBuffer(1,1)\n        fibs += fibs.last\n\
    \        fibs += fibs.last\n        fibs.drop(n).last", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        fibs.takeWhile(_ < n).last", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        fibs.tail.foreach(fibs.head)\n        fibs.take(n).sum", "     \
    \   if (n == 0) 1\n        else if (n == 1) 1\n        else fib(n-1) + fib(n-2)"]
stop_tokens:
- "\n    }\n"
