name: HumanEval_3_below_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n    // zero balance. Your task is to detect if at any point\
  \ the balance of account fallls below zero, and\n    // at that point function should\
  \ return True. Otherwise it should return False.\n    // >>> below_zero([1, 2, 3])\n\
  \    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    def belowZero(operations\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
  \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (true));\n    }\n\n}\n"
completions: ["        val balance = operations.foldLeft(0L) { (sum, operation) =>\
    \ sum + operation }\n        balance < 0", "        val balance = operations.reduceLeft(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ x) => acc + x)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ x) => acc + x)\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.reduce((a, b) => a +\
    \ b)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.reduce((a, b) =>\
    \ a + b)\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0 && newBalance < 0) {\n            true\n        } else\
    \ {\n            false\n        }", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.sum\n\
    \        (balance < 0)", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val withdrawals = operations.filter(x\
    \ => x < 0)\n        val deposits = operations.filter(x => x >= 0)\n        val\
    \ withdrawalsCount = withdrawals.size\n        val depositsCount = deposits.size\n\
    \        withdrawalsCount < depositsCount && withdrawalsCount == 0 || depositsCount\
    \ < withdrawalsCount && depositsCount == 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)((acc, curr) => acc + curr)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val operations_sum\
    \ = operations.sum\n        val operations_product = operations.product\n    \
    \    val operations_product2 = operations_product * operations_product\n     \
    \   val operations_product3 = operations_product2 * operations_product\n     \
    \   val operations_product4 = operations_product3 * operations_product\n     \
    \   val operations_product5 = operations_product4 * operations_product\n     \
    \   val operations_product6 = operations_product5 * operations_product\n     \
    \   val operations_product7 = operations_product6 * operations_product\n     \
    \   val operations_product8 = operations_product7 * operations_product\n     \
    \   val operations_product9 = operations_product8 * operations_product\n     \
    \   val operations_product10 = operations_product9 * operations_product\n    \
    \    val operations_product11 = operations_product10 * operations_product\n  \
    \      val operations_product12 = operations_product11 * operations_product\n\
    \        val operations_product13 = operations_product12 * operations_product\n\
    \        val operations_product14 = operations_product13 * operations_product\n\
    \        val operations_product15 = operations_product14 * operations_product\n\
    \        val operations_product16 = operations_product15 * operations_product\n\
    \        val operations_product17 = operations_product16 * operations_product\n\
    \        val operations_product18 = operations_product17 * operations_product\n\
    \        val operations_product19 = operations_product18 * operations_product\n\
    \        val operations_product20 = operations_product19 * operations_product\n\
    \        val operations_product21 = operations_product20 * operations_product\n\
    \        val operations_product22 = operations_product21 * operations_product\n\
    \        val operations_product23 = operations_product22 * operations_product\n\
    \        val operations_product24 = operations_product23 * operations_product\n\
    \        val operations_product25 = operations_product24 * operations_product\n\
    \        val operations_product26 = operations_product25 * operations_product\n\
    \        val operations_product27 = operations_product26 * operations_product\n\
    \        val operations_product28 = operations_product27 * operations_product\n\
    \        val operations_product29 = operations_product28 * operations_product\n\
    \        val operations_product30 = operations_product29 * operations_product\n\
    \        val operations_product31 = operations_product30 * operations_product\n\
    \        val operations_product32 = operations_product31 * operation", "     \
    \   val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "     \
    \   val balance = operations.foldLeft(0L){ (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0L) { (sum, operation) => sum + operation\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.reduceLeft(_ + _)\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.sum\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val\
    \ balance = operations.sum\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val withdrawals = operations.takeWhile(_\
    \ > 0)\n        val deposits = operations.dropWhile(_ < 0)\n        withdrawals.forall(x\
    \ => balance - x < 0)", "        val balance = operations.foldLeft(0L){ (sum,\
    \ op) => sum + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.last\n        val operations = operations.dropRight(1)\n      \
    \  val balance = operations.last\n        balance < 0", "        val balance =\
    \ operations.reduce((a, b) => a + b)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (sum, op) => sum + op\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.reduce((a, b) => a +\
    \ b)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        balance < 0 && newBalance <\
    \ 0", "        val balance = operations.foldLeft(0L)((acc, x) => acc + x)\n  \
    \      balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n  \
    \      balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n  \
    \      balance < 0", "        val balance = operations.foldLeft(0L) { (acc, op)\
    \ => acc + op }\n        balance < 0", "        val balance = operations.reduce((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.reduceLeft((a, b) =>\
    \ a + b)\n        balance < 0", "        val balance = operations.sum\n      \
    \  balance < 0", "        val balance = operations.reduceLeft((a, b) => a + b)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.last\n        val operations\
    \ = operations.dropRight(1)\n        val newBalance = operations.last\n      \
    \  if (balance < 0 && newBalance < 0) {\n            true\n        } else {\n\
    \            false\n        }", "        val balance = operations.foldLeft(0L){\
    \ (acc, curr) => acc + curr }\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, op) => sum + op }\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)((acc, curr) => acc + curr)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        val newOperations = operations.dropRight(1)\n\
    \        if (balance < 0 && newBalance < 0) {\n            true\n        } else\
    \ if (balance < 0 && newBalance > 0) {\n            false\n        } else if (balance\
    \ > 0 && newBalance < 0) {\n            false\n        } else if (balance > 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else {\n\
    \            belowZero(newOperations)\n        }", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.reduce((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.last\n        val operations\
    \ = operations.dropRight(1)\n        val balance = operations.last\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0L)((acc, op) => acc + op)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)((acc, x) => acc + x)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L)((acc, curr)\
    \ => acc + curr)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val sumOfOperations = operations.sum\n        val operationSum = sumOfOperations\
    \ - balance\n        val operationSumAbs = Math.abs(operationSum)\n        val\
    \ operationSumAbsMinusOne = operationSumAbs - 1\n        val operationSumAbsMinusOneMinusOne\
    \ = operationSumAbsMinusOne - 1\n        val operationSumAbsMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOne - 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOne - 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOneMinusOne - 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n    \
    \    val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operationSumAbsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMin",
  "        val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.reduce((a, b) => a + b)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0\
    \ && newBalance < 0) {\n            true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            false\n        } else if (balance > 0 && newBalance < 0)\
    \ {\n            false\n        } else if (balance > 0 && newBalance > 0) {\n\
    \            belowZero(newOperations)\n        } else {\n            belowZero(newOperations)\n\
    \        }", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)((acc, curr) => acc + curr)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (sum,\
    \ op) => sum + op }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val balance = operations.last\n        balance < 0", "        val balance\
    \ = operations.reduceLeft((a, b) => a + b)\n        balance < 0"]
stop_tokens:
- "\n    }\n"
