name: HumanEval_3_below_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n    // zero balance. Your task is to detect if at any point\
  \ the balance of account fallls below zero, and\n    // at that point function should\
  \ return True. Otherwise it should return False.\n    // >>> below_zero([1, 2, 3])\n\
  \    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    def belowZero(operations\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
  \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (true));\n    }\n\n}\n"
completions: ["        val balance = operations.foldLeft(0L) { (sum, operation) =>\
    \ sum + operation }\n        balance < 0", "        val balance = operations.reduceLeft(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ x) => acc + x)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ x) => acc + x)\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.reduce((a, b) => a +\
    \ b)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.reduce((a, b) =>\
    \ a + b)\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0 && newBalance < 0) {\n            true\n        } else\
    \ {\n            false\n        }", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.sum\n\
    \        (balance < 0)", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0"]
stop_tokens:
- "\n    }\n"
