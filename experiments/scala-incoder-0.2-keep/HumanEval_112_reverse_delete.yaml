name: HumanEval_112_reverse_delete
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n    // then check if the\
  \ result string is palindrome.\n    // A string is called palindrome if it reads\
  \ the same backward as forward.\n    // You should return a tuple containing the\
  \ result string and True/False for the check.\n    // Example\n    // For s = \"\
  abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s = \"abcdef\"\
  , c = \"b\"  the result should be ('acdef',False)\n    // For s = \"abcdedcba\"\
  , c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s : String,\
  \ c : String) : Tuple2[String, Boolean] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
  abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
  ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
  ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"),\
  \ (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\"\
  )).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"\
  abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\"\
  , true))));\n    }\n\n}\n"
completions: ["        val sArray = s.toCharArray\n        val cArray = c.toCharArray\n\
    \        val sArraySize = sArray.length\n        val cArraySize = cArray.length\n\
    \        val resultArray = new Array[Char](sArraySize)\n        var i = 0\n  \
    \      var j = 0\n        var k = 0\n        var resultString = \"\"\n       \
    \ var isPalindrome = false\n        while(i < sArraySize && j < cArraySize) {\n\
    \            if(sArray(i) == cArray(j)) {\n                resultArray(i) = sArray(i)\n\
    \                i += 1\n                j += 1\n                k += 1\n    \
    \        }\n            else if(sArray(i) != cArray(j)) {\n                resultArray(i)\
    \ = sArray(i)\n                i += 1\n                j += 1\n              \
    \  k += 1\n            }\n            else {\n                i += 1\n       \
    \         j += 1\n                k += 1\n            }\n        }\n        while(i\
    \ < sArraySize) {\n            resultString += sArray(i)\n            i += 1\n\
    \        }\n        while(j < cArraySize) {\n            resultString += cArray(j)\n\
    \            j += 1\n        }\n        if(resultString.equals(s.reverse)) {\n\
    \            isPalindrome = true\n        }\n        else {\n            isPalindrome\
    \ = false\n        }\n        return (resultString, isPalindrome)", "        val\
    \ sArr = s.toCharArray\n        val cArr = c.toCharArray\n        val sLen = sArr.length\n\
    \        val cLen = cArr.length\n        var i = 0\n        var j = 0\n      \
    \  var resultStr = \"\"\n        var resultBool = false\n        while(i < sLen\
    \ && j < cLen) {\n            if(sArr(i) == cArr(j)) {\n                i += 1\n\
    \                j += 1\n            } else {\n                resultStr += sArr(i)\n\
    \                i += 1\n                resultBool = true\n            }\n  \
    \      }\n        if(i < sLen) {\n            resultStr += sArr(i)\n         \
    \   resultBool = true\n        }\n        if(j < cLen) {\n            resultBool\
    \ = false\n        }\n        return (resultStr, resultBool)", "        val result\
    \ = s.filterNot(c => s.indexOf(c) == s.lastIndexOf(c))\n        val isPalindrome\
    \ = result == s.reverse\n        (result, isPalindrome)", "        var resultString\
    \ = s\n        var isPalindrome = true\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) == c.charAt(0)){\n                resultString = resultString.substring(0,i)\
    \ + resultString.substring(i+1)\n            }\n        }\n        if(resultString\
    \ == s){\n            isPalindrome = false\n        }\n        return Tuple2(resultString,\
    \ isPalindrome)", "        val chars = mutable.Set[Char]()\n        chars ++=\
    \ s.toCharArray\n        chars ++= c.toCharArray\n        chars.toList.sortWith(_\
    \ < _)\n        val result = chars.toList.reverse.mkString\n        (result, chars.toList.forall(chars.contains))",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) == c.charAt(0)){\n                chars += s.charAt(i)\n\
    \            }\n        }\n        val reversed = new StringBuilder(s)\n     \
    \   for(i <- 0 until s.length){\n            if(chars.contains(s.charAt(i))){\n\
    \                reversed.deleteCharAt(i)\n            }\n        }\n        if(reversed.toString()\
    \ == s){\n            return (s, true)\n        }\n        else{\n           \
    \ return (s, false)\n        }", "        val result = new StringBuilder(s)\n\
    \        val charSet = c.toSet\n        val charSetSize = charSet.size + 1\n \
    \       val charSetIterator = charSet.iterator\n        val charSetIteratorSize\
    \ = charSetIterator.size\n        val charSetIteratorIterator = charSetIterator.iterator\n\
    \        val charSetIteratorIteratorSize = charSetIteratorIterator.size\n    \
    \    val charSetIteratorIteratorIterator = charSetIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorSize = charSetIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIterator = charSetIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorSize = charSetIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIterator = charSetIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorSize = charSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ charSetIteratorIteratorIteratorIteratorIterator.iterator\n        val charSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = charSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIterator", "        val reverse = mutable.StringBuilder(s).reverse\n\
    \        val deleted = mutable.Set(c)\n        val result = reverse.filterNot(deleted.contains)\n\
    \        val isPalindrome = result == reverse\n        (result,isPalindrome)",
  "        val newS = s.filterNot(c => s.indexOf(c) == s.lastIndexOf(c))\n       \
    \ val newC = c.filterNot(c => s.indexOf(c) == s.lastIndexOf(c))\n        (newS,\
    \ newC == newS)", "        val result = new StringBuilder\n        val chars =\
    \ c.toCharArray\n        val charsArray = s.toCharArray\n        val charsArrayLength\
    \ = charsArray.length\n        val charsArrayLength = charsArrayLength - 1\n \
    \       val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = charsArrayLength - 1\n\
    \        val charsArrayLength = charsArrayLength - 1\n        val charsArrayLength\
    \ = charsArrayLength - 1\n        val charsArrayLength = ", "        val result\
    \ = s.filterNot(c.toSet).mkString\n        val isPalindrome = result.equals(s.reverse)\n\
    \        (result, isPalindrome)", "        val result = new StringBuilder(s)\n\
    \        val deleted = new mutable.HashSet[Char](c)\n        val deleteChar =\
    \ new mutable.HashSet[Char]()\n        val reverse = new mutable.HashSet[Char]()\n\
    \        val isPalindrome = mutable.HashSet[Char]()\n        val isReverse = mutable.HashSet[Char]()\n\
    \        val isDeleted = mutable.HashSet[Char]()\n        val isReversed = mutable.HashSet[Char]()\n\
    \        val isDeletedReversed = mutable.HashSet[Char]()\n        val isDeletedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversed = mutable.HashSet[Char]()\n\
    \        val isDeletedReversedReversedReversedReversed = mutable.HashSet[Char]()\n\
    \        val isDeletedReversedReversedReversedReversedReversedReversed = mutable.HashSet[Char]()\n\
    \        val isDeletedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = mutable.HashSet[Char]()\n        val isDeletedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse",
  "        val sArray = s.toCharArray\n        val cArray = c.toCharArray\n      \
    \  val sArrayLength = sArray.length\n        val cArrayLength = cArray.length\n\
    \        val resultArray = new Array[Char](sArrayLength)\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var isPalindrome = true\n     \
    \   while(i < sArrayLength && j < cArrayLength) {\n            if(sArray(i) ==\
    \ cArray(j)) {\n                resultArray(k) = sArray(i)\n                i\
    \ += 1\n                j += 1\n                k += 1\n            } else {\n\
    \                i += 1\n                j += 1\n            }\n        }\n  \
    \      if(i < sArrayLength) {\n            isPalindrome = false\n        }\n \
    \       if(j < cArrayLength) {\n            isPalindrome = false\n        }\n\
    \        if(isPalindrome) {\n            val resultString = resultArray.toString\n\
    \            val reversedString = resultString.reverse\n            val reversedArray\
    \ = reversedString.toCharArray\n            val reversedArrayLength = reversedArray.length\n\
    \            val resultTuple = Tuple2(resultString, reversedArray.length == 0)\n\
    \        }\n        return resultTuple", "        val result = s.filterNot(c.toSet)\n\
    \        val reverse = result.reverse\n        val check = reverse.equals(result)\n\
    \        (result,check)", "        val result = s.filterNot(c => s.contains(c))\n\
    \        val reverseResult = result.map(c => c.reverse).mkString\n        val\
    \ isPalindrome = reverseResult == result\n        (result,isPalindrome)", "  \
    \      var i = 0\n        var j = 0\n        var result = \"\"\n        var isPalindrome\
    \ = true\n        while(i < s.length && j < c.length) {\n            if(s(i) ==\
    \ c(j)) {\n                i += 1\n                j += 1\n            } else\
    \ {\n                result += s(i)\n                i += 1\n                isPalindrome\
    \ = false\n            }\n        }\n        if(isPalindrome) {\n            (result,\
    \ true)\n        } else {\n            (result, false)\n        }", "        var\
    \ i = 0\n        var j = 0\n        var resultString = \"\"\n        var isPalindrome\
    \ = false\n        while(i < s.length && j < c.length) {\n            if(s(i)\
    \ == c(j)) {\n                i += 1\n                j += 1\n            } else\
    \ {\n                resultString += s(i)\n                i += 1\n          \
    \  }\n        }\n        if(i < s.length) {\n            resultString += s(i)\n\
    \        }\n        if(j < c.length) {\n            resultString += c(j)\n   \
    \     }\n        if(resultString.equals(s.reverse)) {\n            isPalindrome\
    \ = true\n        }\n        return Tuple2(resultString, isPalindrome)", "   \
    \     val result = new StringBuilder\n        val charSet = c.toSet\n        val\
    \ charSetSize = charSet.size\n        val charSetIterator = charSet.iterator\n\
    \        val charSetIteratorSize = charSetIterator.size\n        val charSetIteratorIterator\
    \ = charSetIterator.iterator\n        val charSetIteratorIteratorSize = charSetIteratorIterator.size\n\
    \        val charSetIteratorIteratorIterator = charSetIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorSize = charSetIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIterator = charSetIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorSize = charSetIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIterator = charSetIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorSize = charSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ charSetIteratorIteratorIteratorIteratorIterator.iterator\n        val charSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = charSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charSetIteratorIterator", "        val result = s.filterNot(x =>\
    \ x == c)\n        val reverse = result.mkString\n        val reversed = reverse.split(\"\
    \").reverse.mkString\n        val result = reversed.split(\"\").mkString\n   \
    \     val check = result.equals(reverse)\n        (result,check)", "        val\
    \ reverse = s.reverse\n        val deleted = reverse.filterNot(x => x == c)\n\
    \        val result = deleted.reverse\n        val isPalindrome = result == reverse\n\
    \        (result, isPalindrome)"]
stop_tokens:
- "\n    }\n"
