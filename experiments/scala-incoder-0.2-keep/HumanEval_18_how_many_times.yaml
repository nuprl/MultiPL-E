name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n    //\
  \ >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa', 'aa')\n\
  \    // 3\n    def howManyTimes(string : String, substring : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            val start = i\n            while (i < string.length && string.charAt(i)\
    \ == substring.charAt(i)) {\n                i += 1\n            }\n         \
    \   val end = i\n            count += end - start\n        }\n        count",
  "        val count = new mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        val substringArray = substring.split(string)\n\
    \        val stringArrayLength = stringArray.length\n        val substringArrayLength\
    \ = substringArray.length\n        var i = 0\n        var j = 0\n        while\
    \ (i < stringArrayLength && j < substringArrayLength) {\n            if (stringArray(i)\
    \ == substringArray(j)) {\n                count.put(stringArray(i), count.getOrElse(stringArray(i),\
    \ 0L) + 1)\n                i += 1\n                j += 1\n            } else\
    \ {\n                i += 1\n            }\n        }\n        count.size", " \
    \       var count = 0\n        for(i <- 0 until string.length){\n            for(j\
    \ <- 0 until substring.length){\n                if(string.charAt(i) == substring.charAt(j)){\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count", "        val count = mutable.HashMap[String, Long]()\n      \
    \  for (i <- 0 until string.length) {\n            val index = string.indexOf(substring,\
    \ i)\n            if (index >= 0) {\n                val substringIndex = string.indexOf(substring,\
    \ index + 1)\n                if (substringIndex >= 0) {\n                   \
    \ val substringLength = substring.length\n                    val substringIndex\
    \ = substringIndex + substringLength\n                    val substringLength\
    \ = substringIndex - index\n                    count.put(substring, substringLength)\n\
    \                }\n            }\n        }\n        count.values.sum", "   \
    \     val count = mutable.HashMap.empty[String, Long]\n        for (i <- 0 until\
    \ string.length) {\n            val start = i\n            val end = i + substring.length\n\
    \            if (start < string.length && end < string.length && string.substring(start,\
    \ end) == substring) {\n                val value = count.get(string.substring(start,\
    \ end)).getOrElse(0)\n                count.put(string.substring(start, end),\
    \ value + 1)\n            }\n        }\n        count.values.sum", "        var\
    \ count = 0\n        val chars = string.split(substring).toList\n        for(i\
    \ <- 0 until chars.length){\n            val c = chars(i)\n            val j =\
    \ i + 1\n            while(j < chars.length && chars(j) == c){\n             \
    \   count += 1\n                j += 1\n            }\n        }\n        count",
  "        val count = mutable.HashMap[String, Long]()\n        val startIndex = string.indexOf(substring)\n\
    \        val endIndex = startIndex + substring.length\n        while(startIndex\
    \ >= 0) {\n            val currentIndex = startIndex\n            while(currentIndex\
    \ < endIndex) {\n                val currentChar = string.charAt(currentIndex)\n\
    \                val currentSubstring = string.substring(currentIndex, currentIndex\
    \ + substring.length)\n                val currentCount = count.get(currentSubstring)\n\
    \                if(currentCount == null) {\n                    count.put(currentSubstring,\
    \ 1)\n                } else {\n                    count.put(currentSubstring,\
    \ currentCount + 1)\n                }\n                currentIndex += 1\n  \
    \          }\n            startIndex -= 1\n        }\n        count.values.sum",
  "        var count = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ string.length && j < substring.length) {\n            if (string.charAt(i) ==\
    \ substring.charAt(j)) {\n                count += 1\n                i += 1\n\
    \                j += 1\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        count", "        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(substring).toList\n        chars.foreach(c\
    \ => counts.put(c.toLowerCase, counts.getOrElse(c.toLowerCase, 0L) + 1))\n   \
    \     counts.values.sum", "        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.getOrElse(substring, 0L)", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val len = string.length\n        val sublen = substring.length\n\
    \        var i = 0\n        while (i < len) {\n            val start = i\n   \
    \         while (i < len && string.charAt(i) == substring.charAt(0)) {\n     \
    \           i += 1\n            }\n            val end = i\n            val count\
    \ = count.get(substring)\n            if (count == null) {\n                count.put(substring,\
    \ 1)\n            } else {\n                count.put(substring, count.get(substring)\
    \ + 1)\n            }\n            i = end\n        }\n        count.get(substring)",
  "        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum", " \
    \       val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum", " \
    \       val count = new mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length)\n            if (string.charAt(i) == substring.charAt(0))\n \
    \               count.put(string.substring(i, i + substring.length), count.getOrElse(string.substring(i,\
    \ i + substring.length), 0L) + 1)\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Long]()\n        val chars = string.split(substring).toList\n\
    \        chars.foreach { c =>\n            val count = count.getOrElse(c, 0) +\
    \ 1\n            count.updated(c, count + 1)\n        }\n        count.values.sum",
  "        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1L))\n        count.values.sum",
  "        val count = mutable.HashMap.empty[String, Long]\n        val strings =\
    \ string.split(substring)\n        strings.foreach(s => count.update(s, count.getOrElse(s,\
    \ 0L) + 1L))\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        for (i <-\
    \ 0 until stringArray.length) {\n            val currentString = stringArray(i)\n\
    \            val currentCount = count.get(currentString)\n            if (currentCount\
    \ == null) {\n                count.put(currentString, 1)\n            } else\
    \ {\n                count.put(currentString, currentCount + 1)\n            }\n\
    \        }\n        count.values.sum", "        val counts = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(s => {\n            val count\
    \ = counts.getOrElse(s, 0) + 1\n            counts.put(s, count)\n        })\n\
    \        counts.values.sum"]
stop_tokens:
- "\n    }\n"
