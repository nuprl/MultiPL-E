language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += \"the number of odd elements \" + str.charAt(j) + \" of the\
    \ \" + str.charAt(j) + \" of the \" + str.charAt(j) + \".\"\n                \
    \    case _ => odds += \"the number of odd elements \" + str.charAt(j) + \" of\
    \ the \" + str.charAt(j) + \" of the \" + str.charAt(j) + \".\"\n            \
    \    })\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7meqhiyy.scala:22:8 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7meqhiyy.scala:14:19 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       val oddsStr = odds filter (x => x != str) map (x => x + \" \" + str) mkString\
    \ \" \"\n            odds += \"the number of odd elements \" + oddsStr + \" of\
    \ the \" + str + \" of the \" + i + \".\"\n        }\n        odds.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouh1yqq1.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => s.toInts.foreach(i => odds.+=(i%2)))\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6icuxlc3.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6icuxlc3.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.foreach(\e[36ms\e[0m => s.toInts.foreach(\e\
    [36mi\e[0m => odds.+=(i%\e[31m2\e[0m)))\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value toInts\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach { s =>\n            val n = s.toInt\n            odds +=\
    \ n\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09tg_dm2.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.isDigit) {\n     \
    \               val digit = str.charAt(j)\n                    if(digit == '1')\
    \ {\n                        odd += 1 // Add one to the odd counter\n        \
    \            }\n                }\n            }\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkodei4q.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmkodei4q.scala:18:23 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.isDigit) {\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \    value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(x => x.isDigit).length\n\
    \            odds.add(oddDigits)\n        })\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlaib4o7.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(s => {\n            for(i <- 0 until s.length) if(s.charAt(i)\
    \ == '1') odds += (s.charAt(i).toInt)\n        })\n        odds.toList.map(s =>\
    \ s\"the number of odd elements ${s}n the str${s}ng ${s.length} of the ${s.length}nput.\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gmcft55.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val digit = str.charAt(j)\n\
    \                if(digit == '1') {\n                    odds += 1 \n        \
    \        }\n            }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26xav5gr.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt == x) odds += 1)\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw45nf6ay.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpw45nf6ay.scala:15:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x.toString.toInt\
    \ == x) odds += \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val count = str.count(_ == '1')\n            odd += count\n        }\n  \
    \      odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgi67ed1j.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val odd_count = lst.count(x\
    \ => x % 2 != 0)\n            odd_count += s\"the number of odd elements ${odd_count}\
    \ of the str${i}ng ${lst.size} of the ${lst.size}nput.\"\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplvyowmd0.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplvyowmd0.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36modd_count\e[0m = lst.count(\e\
    [36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                    ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplvyowmd0.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            odd_count +=\
    \ \e[31ms\"the number of odd elements \e[0m${odd_count}\e[31m of the str\e[0m${i}\e\
    [31mng \e[0m${lst.size}\e[31m of the \e[0m${lst.size}\e[31mnput.\"\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean odd_count.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659795094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = new mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '1')\n            odd.append(numOddDigits)\n\
    \        }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj293ntq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x)\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3ygqn9t.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        })\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuih5lwt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val n = str.charAt(j)\n \
    \               if(n != '0') {\n                    odds += (n - '0')\n      \
    \          }\n            }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwx746b11.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach { s =>\n            val n = s.toInt\n            val odd\
    \ = n % 2 == 1\n            if (odd) odds.push(n)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp51e_tlt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val n = s.toInt\n            for(i <-\
    \ 0 until n) odds += n%2\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzh3jq3nz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => x match {\n            case x if x.forall(_.isDigit)\
    \ => odds += x.toInt\n            case x => odds += 0\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4mw3_g0b.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val count = str.count(c => c % 2 == 1)\n            odd_count += s\"the\
    \ number of odd elements $count in the $str string.\"\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplffnhikg.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds += s\"the number of odd elements ${oddDigits} the str${str.length} of\
    \ the ${str.length}.\"\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7z0x2__q.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hnpmgoz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  val odd_count = s.filter(x => x % 2 == 1).length\n            odd += s\"the\
    \ number of odd elements ${odd_count} the str${s.length} ${s}.\"\n        }\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp473hfx9k.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val n = lst(i).length\n  \
    \          val odd_digits = lst(i).filter(x => x % 2 != 0)\n            odd_count\
    \ += s\"the number of odd elements $n the str$n of the $nput.\"\n        }\n \
    \       odd_count.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzf_x5vb.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach { s =>\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => ()\n                case _ => odds += digits\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsehfz0r1.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odd += lst(i).count(x => x % 2 != 0)\n \
    \       odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprgi6xfsi.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt - 48)\n                    case 'a' |\
    \ 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'\
    \ | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds\
    \ += (str.charAt(j).toInt - 97)\n                    case 'A' | 'B' | 'C' | 'D'\
    \ | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q'\
    \ | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt\
    \ - 65)\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h'\
    \ | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'\
    \ | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 97)\n      \
    \              case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'\
    \ | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W'\
    \ | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 65)\n                  \
    \  case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - 48)\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h'\
    \ | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'\
    \ | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 97)\n      \
    \              case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'\
    \ | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W'\
    \ | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7sr604gi.scala:26:212 --------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mcase\e[0m \e[31m'A'\e[0m |\
    \ \e[31m'B'\e[0m | \e[31m'C'\e[0m | \e[31m'D'\e[0m | \e[31m'E'\e[0m | \e[31m'F'\e\
    [0m | \e[31m'G'\e[0m | \e[31m'H'\e[0m | \e[31m'I'\e[0m | \e[31m'J'\e[0m | \e[31m'K'\e\
    [0m | \e[31m'L'\e[0m | \e[31m'M'\e[0m | \e[31m'N'\e[0m | \e[31m'O'\e[0m | \e[31m'P'\e\
    [0m | \e[31m'Q'\e[0m | \e[31m'R'\e[0m | \e[31m'S'\e[0m | \e[31m'T'\e[0m | \e[31m'U'\e\
    [0m | \e[31m'V'\e[0m | \e[31m'W'\e[0m | \e[31m'X'\e[0m | \e[31m'Y'\e[0m | \e[31m'Z'\e\
    [0m => odds += (str.charAt(j).toInt - \n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7sr604gi.scala:28:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp7sr604gi.scala:35:0 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sr604gi.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp7sr604gi.scala:34:0\
    \ -----------------\e[0m\e[0m\n\e[33m32 |\e[0m    }\n\e[33m33 |\e[0m}\n\e[33m\e\
    [33m   |\e[0m     ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you m"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter( x => x != '0' && x != '1' ).length\n        \
    \    odds.add(s\"the number of odd elements ${oddDigits} the str${ str.length\
    \ } of the ${ str.length }nput.\")\n        }\n        odds.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptk5y3vv8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            val str = x.toInt\n            val odd_str = str.toString.filter(_\
    \ % 2 != 0)\n            val even_str = str.toString.filter(_ % 2 == 0)\n    \
    \        odd += s\"the number of odd elements ${odd_str.length} the str${str.toString.length}\
    \ of the ${x.toString.length}.\"\n            even += s\"the number of even elements\
    \ ${even_str.length} the str${str.toString.length} of the ${x.toString.length}.\"\
    \n        })\n        odd.toList ::: even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49l8rlgy.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp49l8rlgy.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odd += s\"the number of odd elements ${oddDigits} the str${str.length} of the\
    \ ${str.length}.\"\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5udvxef.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5r3lp07.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n\
    \            val digits = x.toInt\n            digits match {\n              \
    \  case 0 => even.clear()\n                case _ => even.clear()\n          \
    \          even.+=digits\n                    odd += digits\n            }\n \
    \       })\n        odd.toList match {\n            case Nil => Nil\n        \
    \    case _ => even.toList match {\n                case Nil => Nil\n        \
    \        case _ => odd.toList.map(x => s\"the number of odd elements $x of the\
    \ $x input.\")\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpell8ho5z.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpell8ho5z.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(x => x match {\n            case x if x.isDigit() => odds.add(x.toInt)\n\
    \            case _ => ()\n        })\n        odds.toList.map(x => s\"the number\
    \ of odd elements ${x} of the $x string.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4e2kidfm.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4e2kidfm.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit()\
    \ => odds.add(x.toInt)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value isDigit is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length) odd += lst(i).count(x => x % 2 != 0)\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75nk1btv.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountList\
    \ = new mutable.ListBuffer[String]()\n        for (i <- 0 until lst.length) {\n\
    \            val str = lst(i)\n            val strList = str.split(\"\")\n   \
    \         val oddDigits = strList.filter(x => x.toInt % 2 != 0)\n            oddCount\
    \ += strList.filter(x => x.toInt % 2 == 0).length\n            oddCountList +=\
    \ s\"the number of odd elements ${oddDigits.length} the str${strList.length} of\
    \ the ${strList.length} input.\"\n        }\n        oddCountList.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0k6a79x.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36moddCountList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            val n = x.toInt\n            if (n % 2 == 0) even.push(x)\n \
    \           else odd.push(x)\n        })\n        odd.toList ::: even.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn_ctjq7.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbn_ctjq7.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val numOddDigits = str.filter(_.isDigit).length\n\
    \            val numEvenDigits = str.length - numOddDigits\n            if(numOddDigits\
    \ % 2 == 0) {\n                odd() += s\"the number of odd elements ${numOddDigits}\
    \ the str${numOddDigits}ng ${numOddDigits}n the ${i}nput.\"\n            } else\
    \ {\n                even() += s\"the number of odd elements ${numEvenDigits}\
    \ the str${numEvenDigits}ng ${numEvenDigits}n the ${i}nput.\"\n            }\n\
    \        }\n        odd.toList ++ even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hqlqxf4.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4hqlqxf4.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt)\n                    case 'a' | 'b' |\
    \ 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ (str.charAt(j).toInt)\n                    case 'A' | 'B' | 'C' | 'D' | 'E'\
    \ | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'\
    \ | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt)\n\
    \                    case '-' => odds += (str.charAt(j).toInt)\n             \
    \       case '_' => odds += (str.charAt(j).toInt)\n                    case '/'\
    \ => odds += (str.charAt(j).toInt)\n                    case '\\\\' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '*' => odds += (str.charAt(j).toInt)\n\
    \                    case '+' => odds += (str.charAt(j).toInt)\n             \
    \       case '-' => odds += (str.charAt(j).toInt)\n                    case '_'\
    \ => odds += (str.charAt(j).toInt)\n                    case '\\\\' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '/' => odds += (str.charAt(j).toInt)\n\
    \                    case '*' => odds += (str.charAt(j).toInt)\n             \
    \       case '+' => odds += (str.charAt(j).toInt)\n                    case '-'\
    \ => odds += (str.charAt(j).toInt)\n                    case '_' => odds += (str.charAt(j).toInt)\n\
    \                    case '\\\\' => odds += (str.charAt(j).toInt)\n          \
    \          case '/' => odds += (str.charAt(j).toInt)\n                    case\
    \ '*' => odds += (str.charAt(j).toInt)\n                    case '+' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '-' => odds += (str.charAt(j).toInt)\n\
    \                    case '_' => odds += (str.charAt(j).toInt)\n             \
    \       case '\\\\' => odds += (str.charAt(j).toInt)\n                    case\
    \ '/' => odds += (str.\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe6e5dor6.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe6e5dor6.scala:45:4 ----------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe6e5dor6.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpe6e5dor6.scala:14:19 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpe6e5dor6.scala:51:0 -----------------\e\
    [0m\e[0m\n\e[33m49 |\e[0m    }\n\e[33m50 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                odds += digits(i)\n            }\n   \
    \     })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18ltz112.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n\
    \            val n = s.length\n            val odd_count = s.filter(_ match {\n\
    \                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odd += odd_count\n            even += n\n\
    \        })\n        odd.toList :+ even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ocqxfgz.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_ocqxfgz.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCounts = mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until lst.size) {\n            val oddCount = lst.count(x\
    \ => x.charAt(i).isDigit)\n            oddCounts += s\"the number of odd elements\
    \ ${oddCount} the str${i}ng ${oddCount} of the ${i}nput.\"\n        }\n      \
    \  oddCounts\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_1xps4f.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36moddCounts\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_qucv2d.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x != '0').count(x => x != '1')\n        \
    \    odd += s\"the number of odd elements $oddDigits of the $str\"\n        }\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnm3l3qm.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val odd_digits = str.filter(x => x.isDigit).map(x => x.toInt)\n        \
    \    odd_count += odd_digits.count(x => x % 2 != 0)\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pmn9n25.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' =>\n                        odds += (str.charAt(j).toInt - '0').toInt\n\
    \                }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaw_bcybq.scala:22:8 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpaw_bcybq.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_ % 2 != 0).size\n            odds.append((s\"\
    the number of odd elements $oddDigits of the $str string.\"))\n        }\n   \
    \     odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7gl8x1x.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.isDigit) {\n     \
    \               val n = str.charAt(j).toInt\n                    odd += n\n  \
    \              }\n            }\n        }\n        odd.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbukuekkl.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbukuekkl.scala:18:23 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.isDigit) {\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \    value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt - '0')\n                    case 'a' |\
    \ 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'\
    \ | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds\
    \ += (str.charAt(j).toInt - 'a')\n                    case 'A' | 'B' | 'C' | 'D'\
    \ | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q'\
    \ | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt\
    \ - 'A')\n                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'\
    \ | '8' | '9' => odds += (str.charAt(j).toInt - '0')\n                    case\
    \ 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'\
    \ | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\
    \ => odds += (str.charAt(j).toInt - 'a')\n                    case 'A' | 'B' |\
    \ 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O'\
    \ | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds +=\
    \ (str.charAt(j).toInt - 'A')\n                    else => odds += 0\n       \
    \         })\n            }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpffmjungy.scala:25:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpffmjungy.scala:27:12 ---------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpffmjungy.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length)\n            odds += (lst(i).filter(x =>\
    \ x % 2 != 0).toString.length)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwh3t1vsa.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val s = lst(i)\n         \
    \   for(j <- 0 until s.length){\n                if(s(j) match {\n           \
    \         case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds\
    \ += s(j)\n                    case _ => {}\n                })\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf5r0mdd6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf5r0mdd6.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf5r0mdd6.scala:20:30 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e[0m _ => {}\n\e[31m\e\
    [31m   |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m          \
    \                    Found:    Unit\n\e[31m   |\e[0m                         \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountString\
    \ = \"\"\n        var oddCountString2 = \"\"\n        var oddCountString3 = \"\
    \"\n        var oddCountString4 = \"\"\n        var oddCountString5 = \"\"\n \
    \       var oddCountString6 = \"\"\n        var oddCountString7 = \"\"\n     \
    \   var oddCountString8 = \"\"\n        var oddCountString9 = \"\"\n        var\
    \ oddCountString10 = \"\"\n        var oddCountString11 = \"\"\n        var oddCountString12\
    \ = \"\"\n        var oddCountString13 = \"\"\n        var oddCountString14 =\
    \ \"\"\n        var oddCountString15 = \"\"\n        var oddCountString16 = \"\
    \"\n        var oddCountString17 = \"\"\n        var oddCountString18 = \"\"\n\
    \        var oddCountString19 = \"\"\n        var oddCountString20 = \"\"\n  \
    \      var oddCountString21 = \"\"\n        var oddCountString22 = \"\"\n    \
    \    var oddCountString23 = \"\"\n        var oddCountString24 = \"\"\n      \
    \  var oddCountString25 = \"\"\n        var oddCountString26 = \"\"\n        var\
    \ oddCountString27 = \"\"\n        var oddCountString28 = \"\"\n        var oddCountString29\
    \ = \"\"\n        var oddCountString30 = \"\"\n        var oddCountString31 =\
    \ \"\"\n        var oddCountString32 = \"\"\n        var oddCountString33 = \"\
    \"\n        var oddCountString34 = \"\"\n        var oddCountString35 = \"\"\n\
    \        var oddCountString36 = \"\"\n        var oddCountString37 = \"\"\n  \
    \      var oddCountString38 = \"\"\n        var oddCountString39 = \"\"\n    \
    \    var oddCountString40 = \"\"\n        var oddCountString41 = \"\"\n      \
    \  var oddCountString42 = \"\"\n        var oddCountString43 = \"\"\n        var\
    \ oddCountString44 = \"\"\n        var oddCountString45 = \"\"\n        var oddCountString46\
    \ = \"\"\n        var oddCountString47 = \"\"\n        var oddCountString48 =\
    \ \"\"\n        var oddCountString49 = \"\"\n        var oddCountString50 = \"\
    \"\n        var oddCountString51 = \"\"\n        var oddCountString52 = \"\"\n\
    \        var oddCountString53 = \"\"\n        var oddCountString54 = \"\"\n  \
    \      var oddCountString55 = \"\"\n        var oddCountString56 = \"\"\n    \
    \    var oddCountString57 = \"\"\n        var oddCountString58 = \"\"\n      \
    \  var oddCountString59 = \"\"\n        var oddCountString60 = \"\"\n        var\
    \ oddCountString61 = \"\"\n        var oddCountString62 = \"\"\n        var oddCountString63\
    \ = \"\"\n        var oddCountString64 = \"\"\n        var oddCountString65 =\
    \ \"\"\n        var oddCountString66 = \"\"\n        var oddCountString67 = \"\
    \"\n        var oddCountString68 = \"\"\n        var oddCountString69 = \"\"\n\
    \        var oddCountString70 = \"\"\n        var oddCountString7\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa0n5vk4.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwa0n5vk4.scala:86:5 ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fc0k8jc.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) isDigit)\n\
    \                    odds += (str.charAt(j).toInt - '0')\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf_6v7hes.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_6v7hes.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x != '0').filter(x => x != '1')\n       \
    \     odd += s\"the number of odd elements ${oddDigits.size} the str${str.length}\
    \ of the ${str.length} input.\"\n        }\n        odd.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8m8wko1.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val numOdds = x.count(y => y == '1')\n\
    \            odds.add(numOdds)\n        })\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnlb8kxpr.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n\
    \            val s = x.toInt\n            if (s % 2 == 0) {\n                even\
    \ += s\n            } else {\n                odd += s\n            }\n      \
    \  })\n        odd.toList ++ even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mngreve.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1mngreve.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountString\
    \ = \"\"\n        var oddCountString2 = \"\"\n        var oddCountString3 = \"\
    \"\n        var oddCountString4 = \"\"\n        var oddCountString5 = \"\"\n \
    \       var oddCountString6 = \"\"\n        var oddCountString7 = \"\"\n     \
    \   var oddCountString8 = \"\"\n        var oddCountString9 = \"\"\n        var\
    \ oddCountString10 = \"\"\n        var oddCountString11 = \"\"\n        var oddCountString12\
    \ = \"\"\n        var oddCountString13 = \"\"\n        var oddCountString14 =\
    \ \"\"\n        var oddCountString15 = \"\"\n        var oddCountString16 = \"\
    \"\n        var oddCountString17 = \"\"\n        var oddCountString18 = \"\"\n\
    \        var oddCountString19 = \"\"\n        var oddCountString20 = \"\"\n  \
    \      var oddCountString21 = \"\"\n        var oddCountString22 = \"\"\n    \
    \    var oddCountString23 = \"\"\n        var oddCountString24 = \"\"\n      \
    \  var oddCountString25 = \"\"\n        var oddCountString26 = \"\"\n        var\
    \ oddCountString27 = \"\"\n        var oddCountString28 = \"\"\n        var oddCountString29\
    \ = \"\"\n        var oddCountString30 = \"\"\n        var oddCountString31 =\
    \ \"\"\n        var oddCountString32 = \"\"\n        var oddCountString33 = \"\
    \"\n        var oddCountString34 = \"\"\n        var oddCountString35 = \"\"\n\
    \        var oddCountString36 = \"\"\n        var oddCountString37 = \"\"\n  \
    \      var oddCountString38 = \"\"\n        var oddCountString39 = \"\"\n    \
    \    var oddCountString40 = \"\"\n        var oddCountString41 = \"\"\n      \
    \  var oddCountString42 = \"\"\n        var oddCountString43 = \"\"\n        var\
    \ oddCountString44 = \"\"\n        var oddCountString45 = \"\"\n        var oddCountString46\
    \ = \"\"\n        var oddCountString47 = \"\"\n        var oddCountString48 =\
    \ \"\"\n        var oddCountString49 = \"\"\n        var oddCountString50 = \"\
    \"\n        var oddCountString51 = \"\"\n        var oddCountString52 = \"\"\n\
    \        var oddCountString53 = \"\"\n        var oddCountString54 = \"\"\n  \
    \      var oddCountString55 = \"\"\n        var oddCountString56 = \"\"\n    \
    \    var oddCountString57 = \"\"\n        var oddCountString58 = \"\"\n      \
    \  var oddCountString59 = \"\"\n        var oddCountString60 = \"\"\n        var\
    \ oddCountString61 = \"\"\n        var oddCountString62 = \"\"\n        var oddCountString63\
    \ = \"\"\n        var oddCountString64 = \"\"\n        var oddCountString65 =\
    \ \"\"\n        var oddCountString66 = \"\"\n        var oddCountString67 = \"\
    \"\n        var oddCountString68 = \"\"\n        var oddCountString69 = \"\"\n\
    \        var oddCountString70 = \"\"\n        var oddCountString7\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa0n5vk4.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwa0n5vk4.scala:86:5 ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountString\
    \ = \"\"\n        var oddCountString2 = \"\"\n        var oddCountString3 = \"\
    \"\n        var oddCountString4 = \"\"\n        var oddCountString5 = \"\"\n \
    \       var oddCountString6 = \"\"\n        var oddCountString7 = \"\"\n     \
    \   var oddCountString8 = \"\"\n        var oddCountString9 = \"\"\n        var\
    \ oddCountString10 = \"\"\n        var oddCountString11 = \"\"\n        var oddCountString12\
    \ = \"\"\n        var oddCountString13 = \"\"\n        var oddCountString14 =\
    \ \"\"\n        var oddCountString15 = \"\"\n        var oddCountString16 = \"\
    \"\n        var oddCountString17 = \"\"\n        var oddCountString18 = \"\"\n\
    \        var oddCountString19 = \"\"\n        var oddCountString20 = \"\"\n  \
    \      var oddCountString21 = \"\"\n        var oddCountString22 = \"\"\n    \
    \    var oddCountString23 = \"\"\n        var oddCountString24 = \"\"\n      \
    \  var oddCountString25 = \"\"\n        var oddCountString26 = \"\"\n        var\
    \ oddCountString27 = \"\"\n        var oddCountString28 = \"\"\n        var oddCountString29\
    \ = \"\"\n        var oddCountString30 = \"\"\n        var oddCountString31 =\
    \ \"\"\n        var oddCountString32 = \"\"\n        var oddCountString33 = \"\
    \"\n        var oddCountString34 = \"\"\n        var oddCountString35 = \"\"\n\
    \        var oddCountString36 = \"\"\n        var oddCountString37 = \"\"\n  \
    \      var oddCountString38 = \"\"\n        var oddCountString39 = \"\"\n    \
    \    var oddCountString40 = \"\"\n        var oddCountString41 = \"\"\n      \
    \  var oddCountString42 = \"\"\n        var oddCountString43 = \"\"\n        var\
    \ oddCountString44 = \"\"\n        var oddCountString45 = \"\"\n        var oddCountString46\
    \ = \"\"\n        var oddCountString47 = \"\"\n        var oddCountString48 =\
    \ \"\"\n        var oddCountString49 = \"\"\n        var oddCountString50 = \"\
    \"\n        var oddCountString51 = \"\"\n        var oddCountString52 = \"\"\n\
    \        var oddCountString53 = \"\"\n        var oddCountString54 = \"\"\n  \
    \      var oddCountString55 = \"\"\n        var oddCountString56 = \"\"\n    \
    \    var oddCountString57 = \"\"\n        var oddCountString58 = \"\"\n      \
    \  var oddCountString59 = \"\"\n        var oddCountString60 = \"\"\n        var\
    \ oddCountString61 = \"\"\n        var oddCountString62 = \"\"\n        var oddCountString63\
    \ = \"\"\n        var oddCountString64 = \"\"\n        var oddCountString65 =\
    \ \"\"\n        var oddCountString66 = \"\"\n        var oddCountString67 = \"\
    \"\n        var oddCountString68 = \"\"\n        var oddCountString69 = \"\"\n\
    \        var oddCountString70 = \"\"\n        var oddCountString7\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa0n5vk4.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwa0n5vk4.scala:86:5 ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = new mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdd = str.count(c => c % 2 != 0)\n            odd(numOdd) += numOdd\n\
    \        }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlev4lyy.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length) {\n            val odd_digits = lst(i).filter(x\
    \ => x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            })\n            odd_count += s\"the number of odd elements\
    \ ${odd_digits.size} the str${odd_digits.size} of the ${odd_digits.size}nput.\"\
    \n        }\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sq3gnmg.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt.toInt)\n  \
    \      odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpratnm4lp.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '1' => odd.add(\"1n\")\n                    case '0'\
    \ => odd.add(\"0n\")\n                    case '9' => odd.add(\"9n\")\n      \
    \              case 'a' => odd.add(\"an\")\n                    case 'b' => odd.add(\"\
    bn\")\n                    case 'c' => odd.add(\"cn\")\n                    case\
    \ 'd' => odd.add(\"dn\")\n                    case 'e' => odd.add(\"en\")\n  \
    \                  case 'f' => odd.add(\"fn\")\n                    case 'g' =>\
    \ odd.add(\"gn\")\n                    case 'h' => odd.add(\"hn\")\n         \
    \           case 'i' => odd.add(\"in\")\n                    case 'j' => odd.add(\"\
    jn\")\n                    case 'k' => odd.add(\"kn\")\n                    case\
    \ 'l' => odd.add(\"ln\")\n                    case 'm' => odd.add(\"mn\")\n  \
    \                  case 'n' => odd.add(\"nn\")\n                    case 'o' =>\
    \ odd.add(\"on\")\n                    case 'p' => odd.add(\"pn\")\n         \
    \           case 'q' => odd.add(\"qn\")\n                    case 'r' => odd.add(\"\
    rn\")\n                    case 's' => odd.add(\"sn\")\n                    case\
    \ 't' => odd.add(\"tn\")\n                    case 'u' => odd.add(\"un\")\n  \
    \                  case 'v' => odd.add(\"vn\")\n                    case 'w' =>\
    \ odd.add(\"wn\")\n                    case 'x' => odd.add(\"xn\")\n         \
    \           case 'y' => odd.add(\"yn\")\n                    case 'z' => odd.add(\"\
    zn\")\n                    case 'A' => odd.add(\"an\")\n                    case\
    \ 'B' => odd.add(\"bn\")\n                    case 'C' => odd.add(\"cn\")\n  \
    \                  case 'D' => odd.add(\"dn\")\n                    case 'E' =>\
    \ odd.add(\"en\")\n                    case 'F' => odd.add(\"fn\")\n         \
    \           case 'G' => odd.add(\"gn\")\n                    case 'H' => odd.add(\"\
    hn\")\n                    case 'I' => odd.add(\"in\")\n                    case\
    \ 'J' => odd.add(\"jn\")\n                    case 'K' => odd.add(\"kn\")\n  \
    \                  case 'L' => odd.add(\"ln\")\n                    case 'M' =>\
    \ odd.add(\"mn\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_iq9igwa.scala:60:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m                    \e[33mcase\e[0m \e[31m'M'\e[0m =>\
    \ odd.add(\"mn\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0m                                        unclosed string literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_iq9igwa.scala:62:34 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_iq9igwa.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp_iq9igwa.scala:14:18 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp_iq9igwa.scala:68:0 -----------------\e\
    [0m\e[0m\n\e[33m66 |\e[0m    }\n\e[33m67 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case _ => odds\
    \ += 0\n                })\n            }\n        }\n        odds.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wl9t1ey.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7wl9t1ey.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x.isDigit).length\n            odds.add(s\"\
    the number of odd elements $oddDigits of the $str.\")\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpekjlg2ri.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds.add(str + str.substring(j, j + 1))\n           \
    \     }\n            }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprfzy2i3r.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val odd_digits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odd_count += s\"the number of odd elements $odd_digits in the $str string.\"\
    \n        }\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqz_1_cs.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddsCount = str.count(_ == '1')\n            odds.add(oddsCount)\n \
    \       }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9im5_us8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                if(digits % 2 == 0) {\n              \
    \      odds.add(digits)\n                }\n            }\n        })\n      \
    \  odds.toList.map(x => s\"the number of odd elements ${x} of the str${x} of the\
    \ ${lst(0)}.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbo8zuae.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter( x => x != '0' && x != '1' )\n            odd.append(\
    \ oddDigits.size )\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7xtrusht.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            odd\
    \ += digits\n        })\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1iiby9d.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x != '0').count(x => x != '1')\n        \
    \    odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcrz329m.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length)\n            if(lst(i).forall(_.isDigit))\n\
    \                odd += lst(i).filter(_.isDigit).map(_.toInt).sum\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnbnpa_b_.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd_digits = digits % 2\n            odds.add(odd_digits)\n        })\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpne2edgjz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            val s = x.toInt\n            if (s % 2 == 0) {\n            \
    \    even.append(x)\n            } else {\n                odd.append(x)\n   \
    \         }\n        })\n        odd.toList ++ even.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgx4m6by1.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgx4m6by1.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9bzt_3g1.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val strLen = str.length\n            for(j <- 0 until strLen) {\n       \
    \         val digit = str.charAt(j)\n                if(digit == '1') {\n    \
    \                odd += 1 // add one to the odd counter\n                }\n \
    \           }\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprp0fzy9t.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt)\n                    case _ => odds +=\
    \ 0\n                })\n            }\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp898xtsuj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp898xtsuj.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                val digit = digits % 10\n            \
    \    if(digit % 2 == 1) odds += digit\n            }\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ulfkkj2.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' | 'd'\
    \ | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\
    \ - 'a'\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H'\
    \ | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'\
    \ | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += str.charAt(j) - 'A'\n             \
    \       case _ => odds += 0\n                })\n            }\n        }\n  \
    \      odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp74hul_u7.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp74hul_u7.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c % 2 == 1)\n            odds += numOdds\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7tg1bpk.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(s =>\
    \ {\n            val n = s.toInt\n            if (n % 2 == 0) {\n            \
    \    even += s\n            } else {\n                odd += s\n            }\n\
    \        })\n        odd.toList ++ even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposb5ks2j.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmposb5ks2j.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hnpmgoz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hnpmgoz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountString\
    \ = \"\"\n        var oddCountString2 = \"\"\n        var oddCountString3 = \"\
    \"\n        var oddCountString4 = \"\"\n        var oddCountString5 = \"\"\n \
    \       var oddCountString6 = \"\"\n        var oddCountString7 = \"\"\n     \
    \   var oddCountString8 = \"\"\n        var oddCountString9 = \"\"\n        var\
    \ oddCountString10 = \"\"\n        var oddCountString11 = \"\"\n        var oddCountString12\
    \ = \"\"\n        var oddCountString13 = \"\"\n        var oddCountString14 =\
    \ \"\"\n        var oddCountString15 = \"\"\n        var oddCountString16 = \"\
    \"\n        var oddCountString17 = \"\"\n        var oddCountString18 = \"\"\n\
    \        var oddCountString19 = \"\"\n        var oddCountString20 = \"\"\n  \
    \      var oddCountString21 = \"\"\n        var oddCountString22 = \"\"\n    \
    \    var oddCountString23 = \"\"\n        var oddCountString24 = \"\"\n      \
    \  var oddCountString25 = \"\"\n        var oddCountString26 = \"\"\n        var\
    \ oddCountString27 = \"\"\n        var oddCountString28 = \"\"\n        var oddCountString29\
    \ = \"\"\n        var oddCountString30 = \"\"\n        var oddCountString31 =\
    \ \"\"\n        var oddCountString32 = \"\"\n        var oddCountString33 = \"\
    \"\n        var oddCountString34 = \"\"\n        var oddCountString35 = \"\"\n\
    \        var oddCountString36 = \"\"\n        var oddCountString37 = \"\"\n  \
    \      var oddCountString38 = \"\"\n        var oddCountString39 = \"\"\n    \
    \    var oddCountString40 = \"\"\n        var oddCountString41 = \"\"\n      \
    \  var oddCountString42 = \"\"\n        var oddCountString43 = \"\"\n        var\
    \ oddCountString44 = \"\"\n        var oddCountString45 = \"\"\n        var oddCountString46\
    \ = \"\"\n        var oddCountString47 = \"\"\n        var oddCountString48 =\
    \ \"\"\n        var oddCountString49 = \"\"\n        var oddCountString50 = \"\
    \"\n        var oddCountString51 = \"\"\n        var oddCountString52 = \"\"\n\
    \        var oddCountString53 = \"\"\n        var oddCountString54 = \"\"\n  \
    \      var oddCountString55 = \"\"\n        var oddCountString56 = \"\"\n    \
    \    var oddCountString57 = \"\"\n        var oddCountString58 = \"\"\n      \
    \  var oddCountString59 = \"\"\n        var oddCountString60 = \"\"\n        var\
    \ oddCountString61 = \"\"\n        var oddCountString62 = \"\"\n        var oddCountString63\
    \ = \"\"\n        var oddCountString64 = \"\"\n        var oddCountString65 =\
    \ \"\"\n        var oddCountString66 = \"\"\n        var oddCountString67 = \"\
    \"\n        var oddCountString68 = \"\"\n        var oddCountString69 = \"\"\n\
    \        var oddCountString70 = \"\"\n        var oddCountString7\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa0n5vk4.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwa0n5vk4.scala:86:5 ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val numOdds = x.toString.toInt\n    \
    \        odds += numOdds\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpghfy17zz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val odd_digits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            })\n            odd_count\
    \ += s\"the number of odd elements ${odd_digits.size} the str${str.length} ${str.length}\
    \ of the ${str.length} ${str.length}.\"\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg8qrq5d.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd_digits = digits % 2\n            odds.add(odd_digits)\n        })\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpne2edgjz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val n = str.length\n            val odd_count = str.count(_ % 2 == 1)\n\
    \            odd_count match {\n                case 0 => odd += s\"the number\
    \ of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.\"\n              \
    \  case _ => odd += s\"the number of odd elements ${n}n the str${n}ng ${n} of\
    \ the ${n}nput.\"\n            }\n        }\n        odd.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsx00wra.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCounts = mutable.Map[Int,\
    \ Int]()\n        lst.foreach(s => {\n            s.toInt().toList.foreach(i =>\
    \ {\n                if (i % 2 == 1) {\n                    oddCounts(i) = oddCounts(i)\
    \ + 1\n                }\n            })\n        })\n        oddCounts.toList.map(i\
    \ => s\"the number of odd elements ${i._2} of the str${i._1} of the ${i._1}nput.\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8snepat5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36moddCounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp8snepat5.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            s.toInt().toList.foreach(\e[36mi\e[0m =>\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  \e[33mmethod\e[0m \e[35mtoInt\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => x match {\n            case x if x.isDigit => odds +=\
    \ x.toInt\n            case _ => ()\n        })\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjk9vfatq.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjk9vfatq.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit\
    \ => odds += x.toInt\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value isDigit is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        })\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuih5lwt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '1')\n            odd += s\"the number\
    \ of odd elements ${numOddDigits}n the str${str.length}ng ${numOddDigits}n of\
    \ the ${str.length}nput.\"\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgrxa0pyd.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(x => x.toInts.foreach(y => if (y % 2 == 1) odds += y))\n\
    \        lst.map(x => s\"the number of odd elements ${odds.size} the str${x.length}\
    \ of the ${x.length}nput.\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp387437fd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp387437fd.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.foreach(\e[36mx\e[0m => x.toInts.foreach(\e\
    [36my\e[0m => \e[33mif\e[0m (y % \e[31m2\e[0m == \e[31m1\e[0m) odds += y))\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      value toInts is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            })\n            odd +=\
    \ s\"the number of odd elements ${oddDigits.size} the str${str.length} of the\
    \ ${str.length} input.\"\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2t7h936.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            val digits = x.toInt\n            if (digits % 2 == 0) {\n  \
    \              even.append(x)\n            } else {\n                odd.append(x)\n\
    \            }\n        })\n        odd.toList ::: even.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjtdgrwm.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppjtdgrwm.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt - '0')\n                    case 'a' |\
    \ 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'\
    \ | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds\
    \ += (str.charAt(j).toInt - 'a')\n                    case 'A' | 'B' | 'C' | 'D'\
    \ | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q'\
    \ | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt\
    \ - 'A')\n                    case _ => odds += 0\n                })\n      \
    \      }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkzlily20.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkzlily20.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5r3lp07.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOddDigits = str.filter(_.isDigit).length\n            odd.append(s\"\
    the number of odd elements ${numOddDigits}n the str${numOddDigits}ng ${str.length}\
    \ of the ${str.length}nput.\")\n        }\n        odd.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsublez7u.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9bzt_3g1.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddsCount = str.count(c => c % 2 != 0)\n            odds.add(oddsCount)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp99jpr4ux.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if\
    \ (x.toString.toInt == 0) even += 0 else if (x.toString.toInt == 1) odd += 0)\n\
    \        odd.toList ++ even.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy6dro63.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjy6dro63.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) isDigit) {\n\
    \                    val n = str.charAt(j).toInt\n                    odd += n\n\
    \                }\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpix_bqpad.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_bqpad.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val n = str.charAt(j)\n \
    \               if(n % 2 != 0) odd() += n\n            }\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6r7b464.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       val strArr = str.split(\"\")\n            val oddArr = strArr.filter(x\
    \ => x.toInt % 2 != 0)\n            odd.append(oddArr.length)\n        }\n   \
    \     odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_t5lihj0.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += \"the number of odd elements \" + str.length + \"n the str\"\
    \ + str.length + \"ng \" + str.charAt(j) + \" of the \" + str.length + \"nput.\"\
    \n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += \"the number of odd elements \" + str.length\
    \ + \"n the str\" + str.length + \"ng \" + str.charAt(j) + \" of the \" + str.length\
    \ + \"nput.\"\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'\
    \ | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'\
    \ | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += \"the number of odd elements\
    \ \" + str.length + \"n the str\" + str.length + \"ng \" + str.charAt(j) + \"\
    \ of the \" + str.length + \"nput.\"\n                    else => odds += \"the\
    \ number of odd elements \" + str.length + \"n the str\" + str.length + \"ng \"\
    \ + str.charAt(j) + \" of the \" + str.length + \"nput.\"\n                })\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74d4qck9.scala:22:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33melse\e[0m => odds += \e[31m\"\
    the number of odd elements \"\e[0m + str.length + \e[31m\"n the str\"\e[0m + str.length\
    \ + \e[31m\"ng \"\e[0m + str.charAt(j) + \e[31m\" of the \"\e[0m + str.length\
    \ + \e[31m\"nput.\"\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                    end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp74d4qck9.scala:24:8 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp74d4qck9.scala:14:19 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odd += str\n                }\n            }\n      \
    \  }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmotlzlj.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = new mutable.HashSet[Int]()\n\
    \        lst.foreach(x => x match {\n            case x if x.isDigit => odd.add(x.toInt)\n\
    \            case _ => ()\n        })\n        odd.toList.map(x => s\"the number\
    \ of odd elements ${x} of the $x string.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmcb4noxk.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmcb4noxk.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m x \e[33mif\e[0m x.isDigit => odd.add(x.toInt)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value isDigit\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd_digits = digits % 2\n            odd_count += s\"the number of odd elements\
    \ $odd_digits of the $x of the $digits.\"\n        })\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8e72phe5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       val odd_digits = str.filter(x => x match {\n                case x if\
    \ x.isDigit => true\n                case _ => false\n            }).length\n\
    \            odd_count += s\"the number of odd elements ${odd_digits}n the str${str.length}ng\
    \ ${str.length}nput.\"\n        }\n        odd_count.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkzsh9uwm.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(s => {\n            val n = s.toInt\n            val odd_count\
    \ = if (n % 2 == 0) 1 else 0\n            odd += s\"the number of odd elements\
    \ ${odd_count} the str${n} of the ${n}put.\"\n        })\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd54isscd.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => ()\n                case _ => odds += digits\n\
    \            }\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8khbjsi.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odds += (oddDigits\
    \ % 2)\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvlcz_zqe.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt)\n                    case 'a' | 'b' |\
    \ 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ (str.charAt(j).toInt)\n                    case 'A' | 'B' | 'C' | 'D' | 'E'\
    \ | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'\
    \ | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt)\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt)\n                    case 'a' | 'b' |\
    \ 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ (str.charAt(j).toInt)\n                    case 'A' | 'B' | 'C' | 'D' | 'E'\
    \ | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'\
    \ | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt)\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt)\n                    case 'a' | 'b' |\
    \ 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ (str.charAt(j).toInt)\n                    case 'A' | 'B' | 'C' | 'D' | 'E'\
    \ | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'\
    \ | 'S' | 'T' | 'U\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr55jx0bo.scala:27:145 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m \e[31m'A'\e[0m |\
    \ \e[31m'B'\e[0m | \e[31m'C'\e[0m | \e[31m'D'\e[0m | \e[31m'E'\e[0m | \e[31m'F'\e\
    [0m | \e[31m'G'\e[0m | \e[31m'H'\e[0m | \e[31m'I'\e[0m | \e[31m'J'\e[0m | \e[31m'K'\e\
    [0m | \e[31m'L'\e[0m | \e[31m'M'\e[0m | \e[31m'N'\e[0m | \e[31m'O'\e[0m | \e[31m'P'\e\
    [0m | \e[31m'Q'\e[0m | \e[31m'R'\e[0m | \e[31m'S'\e[0m | \e[31m'T'\e[0m | \e[31m'U\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0msymbol literal 'U is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \"U\" or an application Symbol(\"U\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{U} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr55jx0bo.scala:28:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=>' expected, but '}' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpr55jx0bo.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpr55jx0bo.scala:36:0 ----------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr55jx0bo.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type "
  stdout: ''
  timestamp: 1659795122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.length) odds += lst(i).count(i => i%2==1)\n   \
    \     odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kudqhiz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length.toInt\n      \
    \      val oddsInString = s.filter(_ match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.+=(numOdds - oddsInString)\n        })\n        odds.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe25esfod.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odd.add(s\"the number of odd elements ${str.charAt(j)}n the str${str.charAt(j)}ng\
    \ ${str.charAt(j)} of the ${str.charAt(j)}nput.\")\n                    case _\
    \ => odd.add(s\"the number of odd elements ${str.charAt(j)}n the str${str.charAt(j)}ng\
    \ ${str.charAt(j)} of the ${str.charAt(j)}nput.\")\n                })\n     \
    \   }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpep55r8go.scala:22:8 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpep55r8go.scala:14:18 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach { x\
    \ =>\n            val n = x.toInt\n            if (n % 2 == 0) {\n           \
    \     even += x\n            } else {\n                odd += x\n            }\n\
    \        }\n        odd.toList ++ even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zuaw5on.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0zuaw5on.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odd += s\"the number\
    \ of odd elements $oddDigits of the $str\"\n        }\n        odd.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplixd3ao4.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val odd_digits = str.filter(x => x % 2 != 0)\n            odd_count += odd_digits.size.toString\n\
    \        }\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fdrvw5q.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) isDigit) {\n\
    \                    odds += (str.charAt(j).toInt - 48).toInt\n              \
    \      break\n                }\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprj1x5f_p.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprj1x5f_p.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprj1x5f_p.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) odds += (str.charAt(j) match {\n           \
    \     case '1' => 1\n                case '0' => 0\n                case _ =>\
    \ -1\n            })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfat9i2z_.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val s = lst(i)\n         \
    \   for(j <- 0 until s.length){\n                if(s(j).isDigit){\n         \
    \           odds += s(j).asDigit.toInt\n                }\n            }\n   \
    \     }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp31bhy6c.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(_ match {\n\
    \                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nwg0t3c.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val odd_digits = str.filter(x => x % 2 != 0)\n            odd_count += odd_digits.length\n\
    \        }\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_iq79m_.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) odds += (str.charAt(j) match {\n           \
    \     case '1' => 1\n                case '0' => 0\n                case _ =>\
    \ -1\n            })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2h0mp5xd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n\
    \            val y = x.toInt\n            if (y % 2 == 0) {\n                even\
    \ += y\n            } else {\n                odd += y\n            }\n      \
    \  })\n        odd.toList ::: even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmn0bvuo.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdmn0bvuo.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val strLen = str.length\n     \
    \       for(j <- 0 until strLen) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => {\n                        odd += str.charAt(j).toInt\n           \
    \         }\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => {\n                        even += str.charAt(j).toInt\n\
    \                    }\n                    else => throw new Exception(\"Invalid\
    \ character\")\n                }\n            }\n        }\n        odd.toList\
    \ ++ even.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpourh84v5.scala:27:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33melse\e[0m => \e[33mthrow\e\
    [0m \e[33mnew\e[0m Exception(\e[31m\"Invalid character\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    end\
    \ of statement expected but 'else' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpourh84v5.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpourh84v5.scala:14:18 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpourh84v5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val n = str.length\n            for(j <- 0 until n) {\n                if(str.charAt(j)\
    \ == '1') {\n                    odd += str\n                }\n            }\n\
    \        }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp69fpmn0i.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                val c = str.charAt(j)\n \
    \               if(c.isDigit){\n                    val n = c.toInt\n        \
    \            if(n%2 == 1){\n                        odds.push(n)\n           \
    \         }\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7kju2x8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val odd_digits = str.filter(x => x != '0').filter(x => x != '1')\n      \
    \      odd_count += odd_digits.size\n        }\n        odd_count.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7orett4.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_ match {\n                case c if c.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(s\"the number of odd elements $oddDigits of the $str.\")\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxpw1eo5o.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp45z5u5oq.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length)\n                if(s(j) match {\n             \
    \       case '1' => odds += 1\n                    case '0' => odds -= 1\n   \
    \                 case _ => ()\n                })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4039xb7b.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4039xb7b.scala:14:19 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4039xb7b.scala:21:30 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e[0m _ => ()\n\e[31m\e\
    [31m   |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m          \
    \                    Found:    Unit\n\e[31m   |\e[0m                         \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(x => x.isDigit).length\n            odds += (oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprkp4kves.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        })\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuih5lwt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5wn_xnq.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_ %2 == 1).length\n            odd += s\"the\
    \ number of odd elements $oddDigits in the str$i of the $i\"\n        }\n    \
    \    odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgqj3url.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' | 'd'\
    \ | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += str.charAt(j)\n                    case '@'\
    \ => odds += str.charAt(j)\n                    case '!' => odds += str.charAt(j)\n\
    \                    case '$' => odds += str.charAt(j)\n                    case\
    \ '%' => odds += str.charAt(j)\n                    case '&' => odds += str.charAt(j)\n\
    \                    case '*' => odds += str.charAt(j)\n                    case\
    \ '+' => odds += str.charAt(j)\n                    case '-' => odds += str.charAt(j)\n\
    \                    case '/' => odds += str.charAt(j)\n                    case\
    \ '=' => odds += str.charAt(j)\n                    case '?' => odds += str.charAt(j)\n\
    \                    case '^' => odds += str.charAt(j)\n                    case\
    \ '|' => odds += str.charAt(j)\n                    case '~' => odds += str.charAt(j)\n\
    \                    case '?' => odds += str.charAt(j)\n                    case\
    \ '<' => odds += str.charAt(j)\n                    case '>' => odds += str.charAt(j)\n\
    \                    case '{' => odds += str.charAt(j)\n                    case\
    \ '}' => odds += str.charAt(j)\n                    case '[' | ']' => odds +=\
    \ str.charAt(j)\n                    case '\\\\' => odds += str.charAt(j)\n  \
    \                  case '|' => odds += str.charAt(j)\n                    case\
    \ '\\\\' => odds += str.charAt(j)\n                    case '|' => odds += str.charAt(j)\n\
    \                    case '\\\\' => odds += str.charAt(j)\n                  \
    \  case '|' => odds += str.charAt(j)\n                    case '\\\\' => odds\
    \ += str.charAt(j)\n                    case '|' => odds += str.charAt(j)\n  \
    \                  case '\\\\' => odds += str.charAt(j)\n                    case\
    \ '|' => odds += str.charAt(j)\n                    case '\\\\' => odds += str.charAt(j)\n\
    \                    case '\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu9asb_t4.scala:53:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                    \e[33mcase\e[0m '\n\e[31m\e[31m \
    \  |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                    \
    \     unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu9asb_t4.scala:55:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpu9asb_t4.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu9asb_t4.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9asb_t4.scala:54:4\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \    ^\e[0m\n\e[31m   |\e[0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpu9asb_t4.scala:61:0\
    \ -----------------\e[0m\e[0m\n\e[33m59 |\e[0m    }\n\e[33m60 |\e[0m}\n\e[33m\e\
    [33m   |\e[0m     ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659795130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val odd_digits = s.filter(_ % 2 != 0)\n            odd_count += s\"the number\
    \ of odd elements ${odd_digits.size} the str${odd_digits.size} of the str${s.size}.\"\
    \n        }\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqw8grqf.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' | 'd'\
    \ | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\
    \ - 'a'\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H'\
    \ | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'\
    \ | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += str.charAt(j) - 'A'\n             \
    \       else => odds += 0\n                })\n            }\n        }\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptppb4p13.scala:22:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmptppb4p13.scala:24:12 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptppb4p13.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val odd_digits = lst.filter(_(i).isDigit).map(_.toInt).filter(_\
    \ % 2 == 1)\n            odd_count += odd_digits.size.toString\n        }\n  \
    \      odd_count.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvlc912c.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val odd_count = str.count(_ == '1')\n            odd.append(s\"the number\
    \ of odd elements ${odd_count} the str${str.size} of ${str}.\") \n        }\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdamp8zb3.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt.toString.length.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprm8mhzno.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(c => c.isDigit)\n            val numOddElements\
    \ = str.count(c => c.isDigit) && str.count(c => c.isDigit) == numOddDigits\n \
    \           odd.append(s\"the number of odd elements ${numOddElements}n the str${numOddDigits}${str}.\"\
    )\n        }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsbnvqkan.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbnvqkan.scala:18:59\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumOddElements\e[0m = str.count(\e[36mc\e[0m => c.isDigit) && str.count(\e\
    [36mc\e[0m => c.isDigit) == numOddDigits\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value && is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' | 'd'\
    \ | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += str.charAt(j)\n                    case '!'\
    \ | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '+' | '-' | '.' | '/'\
    \ | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '='\
    \ | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';'\
    \ | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.'\
    \ | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>'\
    \ | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':'\
    \ | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ','\
    \ | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<'\
    \ | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/'\
    \ | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '='\
    \ | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';'\
    \ | '<' | '>' | '=' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | ',' | \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxay7tubk.scala:22:960 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'$'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e\
    [0m | \e[31m'&'\e[0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e\
    [0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e\
    [0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e\
    [0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m"
  stdout: ''
  timestamp: 1659795132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odd(j) += 1\n                    case 'a' | 'b' | 'c' | 'd' | 'e' |\
    \ 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'\
    \ | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odd(j) += 1\n           \
    \         case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'\
    \ | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'\
    \ | 'Y' | 'Z' => odd(j) += 1\n                    case '@' | '#' | '$' | '%' |\
    \ '&' | '(' | ')' | '-' | '.' | '+' | '=' | '/' | ':' | ';' | '<' | '>' | '?'\
    \ | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/'\
    \ | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':'\
    \ | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';'\
    \ | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<'\
    \ | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>'\
    \ | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?'\
    \ | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/'\
    \ | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':'\
    \ | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';'\
    \ | '<' | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':' | ';' | '<'\
    \ | '>' | '?' | '/' | ':' | ';' | '<' | '>' | '?' | '/' | ':\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqr4dm1m2.scala:22:961 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m'@'\e[0m |\
    \ \e[31m'#'\e[0m | \e[31m'$'\e[0m | \e[31m'%'\e[0m | \e[31m'&'\e[0m | \e[31m'('\e\
    [0m | \e[31m')'\e[0m | \e[31m'-'\e[0m | \e[31m'.'\e[0m | \e[31m'+'\e[0m | \e[31m'='\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m"
  stdout: ''
  timestamp: 1659795132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd_digits = digits % 2\n            odd_count += s\"the number of odd elements\
    \ ${odd_digits} the str${digits} ${odd_digits} of the ${digits} ${odd_digits}.\"\
    \n        })\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jnnsia0.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val odd_digits = str.filter(_ % 2 != 0)\n            odd_count += s\"the\
    \ number of odd elements ${odd_digits.size} the str${str.length} of the ${str.length}\
    \ input.\"\n        }\n        odd_count.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9z7nmzzn.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => odds += x.toInt)\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk310e8dj.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val len = str.length\n\
    \            for(j <- 0 until len) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odd() += str.charAt(j)\n                    case 'a' | 'b' | 'c' |\
    \ 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p'\
    \ | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => even() += str.charAt(j)\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => even() += str.charAt(j)\n                    case\
    \ _ => odd() += str.charAt(j)\n                })\n            }\n        }\n\
    \        odd.toList ++ even.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjoz08ab3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjoz08ab3.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjoz08ab3.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        val evens = mutable.HashSet[Int]()\n        lst.foreach(x => {\n    \
    \        val y = x.toInt\n            if (y % 2 == 0) evens += y\n           \
    \ else odds += y\n        })\n        odds ++ evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp685rh9od.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp685rh9od.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => odds += 0\n                case _ => odds\
    \ += digits\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxqb9ipq4.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.count(_ == '1')\n            odds.add(oddDigits)\n \
    \       }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqg0d8zbt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x != '0').length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1k11i7fk.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => {\n                        odd += str.charAt(j)\n                 \
    \   }\n                    case _ => {\n                        odd += 0\n   \
    \                 }\n                }\n            }\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14vx_4i_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp14vx_4i_.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val numOddDigits = str.count(_\
    \ == '1')\n            if(numOddDigits % 2 == 0) {\n                even += str\n\
    \            } else {\n                odd += str\n            }\n        }\n\
    \        odd.toList ++ even.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_vday2e.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7_vday2e.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountString\
    \ = \"\"\n        var oddCountString2 = \"\"\n        var oddCountString3 = \"\
    \"\n        var oddCountString4 = \"\"\n        var oddCountString5 = \"\"\n \
    \       var oddCountString6 = \"\"\n        var oddCountString7 = \"\"\n     \
    \   var oddCountString8 = \"\"\n        var oddCountString9 = \"\"\n        var\
    \ oddCountString10 = \"\"\n        var oddCountString11 = \"\"\n        var oddCountString12\
    \ = \"\"\n        var oddCountString13 = \"\"\n        var oddCountString14 =\
    \ \"\"\n        var oddCountString15 = \"\"\n        var oddCountString16 = \"\
    \"\n        var oddCountString17 = \"\"\n        var oddCountString18 = \"\"\n\
    \        var oddCountString19 = \"\"\n        var oddCountString20 = \"\"\n  \
    \      var oddCountString21 = \"\"\n        var oddCountString22 = \"\"\n    \
    \    var oddCountString23 = \"\"\n        var oddCountString24 = \"\"\n      \
    \  var oddCountString25 = \"\"\n        var oddCountString26 = \"\"\n        var\
    \ oddCountString27 = \"\"\n        var oddCountString28 = \"\"\n        var oddCountString29\
    \ = \"\"\n        var oddCountString30 = \"\"\n        var oddCountString31 =\
    \ \"\"\n        var oddCountString32 = \"\"\n        var oddCountString33 = \"\
    \"\n        var oddCountString34 = \"\"\n        var oddCountString35 = \"\"\n\
    \        var oddCountString36 = \"\"\n        var oddCountString37 = \"\"\n  \
    \      var oddCountString38 = \"\"\n        var oddCountString39 = \"\"\n    \
    \    var oddCountString40 = \"\"\n        var oddCountString41 = \"\"\n      \
    \  var oddCountString42 = \"\"\n        var oddCountString43 = \"\"\n        var\
    \ oddCountString44 = \"\"\n        var oddCountString45 = \"\"\n        var oddCountString46\
    \ = \"\"\n        var oddCountString47 = \"\"\n        var oddCountString48 =\
    \ \"\"\n        var oddCountString49 = \"\"\n        var oddCountString50 = \"\
    \"\n        var oddCountString51 = \"\"\n        var oddCountString52 = \"\"\n\
    \        var oddCountString53 = \"\"\n        var oddCountString54 = \"\"\n  \
    \      var oddCountString55 = \"\"\n        var oddCountString56 = \"\"\n    \
    \    var oddCountString57 = \"\"\n        var oddCountString58 = \"\"\n      \
    \  var oddCountString59 = \"\"\n        var oddCountString60 = \"\"\n        var\
    \ oddCountString61 = \"\"\n        var oddCountString62 = \"\"\n        var oddCountString63\
    \ = \"\"\n        var oddCountString64 = \"\"\n        var oddCountString65 =\
    \ \"\"\n        var oddCountString66 = \"\"\n        var oddCountString67 = \"\
    \"\n        var oddCountString68 = \"\"\n        var oddCountString69 = \"\"\n\
    \        var oddCountString70 = \"\"\n        var oddCountString7\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa0n5vk4.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwa0n5vk4.scala:86:5 ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odd += str.charAt(j)\n                }\n           \
    \ }\n        }\n        odd.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pcsg6xn.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val odd_digits = lst.filter(_(i).isDigit).map(_.toInt).filter(_\
    \ % 2 == 1)\n            odd_count += s\"the number of odd elements ${odd_digits.size}\
    \ the str${odd_digits.size} of the ${i}nput.\"\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16idchun.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' | 'd'\
    \ | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += str.charAt(j)\n                    case '@'\
    \ => odds += str.charAt(j)\n                    case '!' => odds += str.charAt(j)\n\
    \                    case '?' => odds += str.charAt(j)\n                    case\
    \ '-' => odds += str.charAt(j)\n                    case '+' => odds += str.charAt(j)\n\
    \                    case '*' => odds += str.charAt(j)\n                    case\
    \ '/' => odds += str.charAt(j)\n                    case '%' => odds += str.charAt(j)\n\
    \                    case '^' => odds += str.charAt(j)\n                    case\
    \ '&' => odds += str.charAt(j)\n                    case '|' => odds += str.charAt(j)\n\
    \                    case '~' => odds += str.charAt(j)\n                    case\
    \ '`' => odds += str.charAt(j)\n                    case '{' => odds += str.charAt(j)\n\
    \                    case '}' => odds += str.charAt(j)\n                    case\
    \ '<' => odds += str.charAt(j)\n                    case '>' => odds += str.charAt(j)\n\
    \                    case '=' => odds += str.charAt(j)\n                    case\
    \ '~' => odds += str.charAt(j)\n                    case '`' => odds += str.charAt(j)\n\
    \                    case '{' => odds += str.charAt(j)\n                    case\
    \ '}' => odds += str.charAt(j)\n                    case '<' => odds += str.charAt(j)\n\
    \                    case '>' => odds += str.charAt(j)\n                    case\
    \ '=' => odds += str.charAt(j)\n                    case '~' => odds += str.charAt(j)\n\
    \                    case '`' => odds += str.charAt(j)\n                    case\
    \ '{' => odds += str.charAt(j)\n                    case '}' => odds += str.charAt(j)\n\
    \                    case '<' => odds += str.charAt(j)\n                    case\
    \ '>' => odds += str.charAt(j)\n                    case '=' => odd\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphy1pm_o0.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmphy1pm_o0.scala:62:0 ----------------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphy1pm_o0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphy1pm_o0.scala:53:32 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                    \e[33mcase\e[0m \e[31m'='\e[0m =>\
    \ odd\n\e[31m\e[31m   |\e[0m                                ^^^\e[0m\n\e[31m \
    \  |\e[0m                                Not found: odd\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmphy1pm_o0.scala:61:0 -----------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    }\n\e[33m60 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odd(j) += 1\n                    case 'a' | 'b' | 'c' | 'd' | 'e' |\
    \ 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'\
    \ | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odd(j) += 1\n           \
    \         case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'\
    \ | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'\
    \ | 'Y' | 'Z' => odd(j) += 1\n                    case '!' | '@' | '#' | '$' |\
    \ '%' | '^' | '&' | '*' | '(' | ')' | '-' | '+' | '=' | '/' | ':' | '<' | '>'\
    \ | '?' | '_' | '|' | '\\\\' | ';' | '{' | '[' | ']' | '|' | '\\\\' | ':' | '~'\
    \ | '`' | '-' | '+' | '=' | '/' | ':' | '<' | '>' | '?' | '_' | '|' | '\\\\' |\
    \ ';' | '{' | '[' | ']' | '|' | '\\\\' | ':' | '~' | '`' | '-' | '+' | '=' | '/'\
    \ | ':' | '<' | '>' | '?' | '_' | '|' | '\\\\' | ';' | '{' | '[' | ']' | '|' |\
    \ '\\\\' | ':' | '~' | '`' | '-' | '+' | '=' | '/' | ':' | '<' | '>' | '?' | '_'\
    \ | '|' | '\\\\' | ';' | '{' | '[' | ']' | '|' | '\\\\' | ':' | '~' | '`' | '-'\
    \ | '+' | '=' | '/' | ':' | '<' | '>' | '?' | '_' | '|' | '\\\\' | ';' | '{' |\
    \ '[' | ']' | '|' | '\\\\' | ':' | '~' | '`' | '-' | '+' | '=' | '/' | ':' | '<'\
    \ | '>' | '?' | '_' | '|' | '\\\\' | ';' | '{' | '[' | ']' | '|' | '\\\\' | ':'\
    \ | '~' | '`' | '-' | '+' | '=' | '/' | ':' | '<' | '>' | '?' | '_' | '|' | '\\\
    \\' | ';' | '{' | '[' | ']' | '|' | '\\\\' | ':' | '~' | '`' | '-' | '+' | '='\
    \ | '/' | ':' | '<' | '>\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppikwr6nn.scala:22:975 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'$'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e\
    [0m | \e[31m'&'\e[0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'='\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'_'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\
    \\'\e[0m | \e[31m';'\e[0m | \e[31m'{'\e[0m | \e[31m'['\e[0m | \e[31m']'\e[0m |\
    \ \e[31m'|'\e[0m | \e[31m'\\\\'\e[0m | \e[31m':'\e[0m | \e[31m'~'\e[0m | \e[31m'`'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'+'\e[0m | \e[31m'='\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'_'\e[0m | \e[31m'|'\e\
    [0m | \e[31m'\\\\'\e[0m | \e[31m';'\e[0m | \e[31m'{'\e[0m | \e[31m'['\e[0m | \e\
    [31m']'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\\'\e[0m | \e[31m':'\e[0m | \e[31m'~'\e\
    [0m | \e[31m'`'\e[0m | \e[31m'-'\e[0m | \e[31m'+'\e[0m | \e[31m'='\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'_'\e\
    [0m | \e[31m'|'\e[0m | \e[31m'\\\\'\e[0m | \e[31m';'\e[0m | \e[31m'{'\e[0m | \e\
    [31m'['\e[0m | \e[31m']'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\\'\e[0m | \e[31m':'\e\
    [0m | \e[31m'~'\e[0m | \e[31m'`'\e[0m | \e[31m'-'\e[0m | \e[31m'+'\e[0m | \e[31m'='\e\
    [0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'_'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\\'\e[0m | \e[31m';'\e[0m | \e\
    [31m'{'\e[0m | \e[31m'['\e[0m | \e[31m']'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\\\
    '\e[0m | \e[31m':'\e[0m | \e[31m'~'\e[0m | \e[31m'`'\e[0m | \e[31m'-'\e[0m | \e\
    [31m'+'\e[0m | \e[31m'='\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'_'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\
    \\'\e[0m | \e[31m';'\e[0m | \e[31m'{'\e[0m | \e[31m'['\e[0m | \e[31m']'\e[0m |\
    \ \e[31m'|'\e[0m | \e[31m'\\\\'\e[0m | \e[31m':'\e[0m | \e[31m'~'\e[0m | \e[31m'`'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'+'\e[0m | \e[31m'='\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'_'\e[0m | \e[31m'|'\e\
    [0m | \e[31m'\\\\'\e[0m | \e[31m';'\e[0m | \e[31m'{'\e[0m | \e[31m'['\e[0m | \e\
    [31m']'\e[0m | \e[31m'|'\e[0m | \e"
  stdout: ''
  timestamp: 1659795137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length){\n            val str = lst(i)\n            val oddDigits = str.filter(x\
    \ => x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n            odd += s\"the number of odd elements\
    \ ${oddDigits} the str${str.length} of the str${str.length}.\"\n            val\
    \ evenDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => false\n                case _ => true\n            }).length\n          \
    \  even += s\"the number of even elements ${evenDigits} the str${str.length} of\
    \ the str${str.length}.\"\n        }\n        odd.toList ++ even.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0d_tlmi.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn0d_tlmi.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) isDigit) {\n\
    \                    val n = str.charAt(j).toInt\n                    odd += s\"\
    the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.\"\n     \
    \           }\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg1dfsmn2.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1dfsmn2.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val n = s.toInt\n            odds +=\
    \ n\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsi3ltk11.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt == 0) odds += 0 else odds += 1)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1x9o61p.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) isDigit) {\n\
    \                    odds += (str.charAt(j).toInt)\n                    lst.updated(i,\
    \ str.replaceFirst(s\"${ str.charAt(j) }\", \"\"))\n                    break\n\
    \                }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeel8bx94.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeel8bx94.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeel8bx94.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '1' => odd += str\n                    case '0' => odd\
    \ += str\n                    case '9' => odd += str\n                    case\
    \ '8' => odd += str\n                    case '7' => odd += str\n            \
    \        case '6' => odd += str\n                    case '5' => odd += str\n\
    \                    case '4' => odd += str\n                    case '3' => odd\
    \ += str\n                    case '2' => odd += str\n                    case\
    \ '1' => odd += str\n                    case '0' => odd += str\n            \
    \        case '9' => odd += str\n                    case '8' => odd += str\n\
    \                    case '7' => odd += str\n                    case '6' => odd\
    \ += str\n                    case '5' => odd += str\n                    case\
    \ '4' => odd += str\n                    case '3' => odd += str\n            \
    \        case '2' => odd += str\n                    case '1' => odd += str\n\
    \                    case '0' => odd += str\n                    case '9' => odd\
    \ += str\n                    case '8' => odd += str\n                    case\
    \ '7' => odd += str\n                    case '6' => odd += str\n            \
    \        case '5' => odd += str\n                    case '4' => odd += str\n\
    \                    case '3' => odd += str\n                    case '2' => odd\
    \ += str\n                    case '1' => odd += str\n                    case\
    \ '0' => odd += str\n                    case '9' => odd += str\n            \
    \        case '8' => odd += str\n                    case '7' => odd += str\n\
    \                    case '6' => odd += str\n                    case '5' => odd\
    \ += str\n                    case '4' => odd += str\n                    case\
    \ '3' => odd += str\n                    case '2' => odd += str\n            \
    \        case '1' => odd += str\n                    case '0' => odd += str\n\
    \                    case '9' => odd += str\n                    case '8' => odd\
    \ += str\n                    case '7' => odd += str\n                    case\
    \ '6' => odd += str\n                    case '5' => odd += str\n            \
    \        case '4' => odd += str\n                    case '3' => odd += str\n\
    \                    case '2' => odd += str\n                    case '1' => odd\
    \ += str\n                    case '0' => odd += str\n                    case\
    \ '9' => odd += str\n                    case '8' => odd += str\n            \
    \        case '7' => odd += str\n                    case '6' => odd += str\n\
    \                    case '5' => odd += str\n                    case '4' => odd\
    \ += str\n\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp047wz171.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp047wz171.scala:86:0 ----------------------------\e[0m\e[0m\n\e[31m86\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp047wz171.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp047wz171.scala:85:0 -----------------\e\
    [0m\e[0m\n\e[33m83 |\e[0m    }\n\e[33m84 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val digit = str.charAt(j)\n\
    \                if(digit == '1') {\n                    odds += digit.toInt\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprle0i6if.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) odds += (str.charAt(j) match {\n           \
    \     case '1' => 1\n                case '0' => 0\n                case _ =>\
    \ -1\n            })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfat9i2z_.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.isDigit) {\n     \
    \               val digit = str.charAt(j)\n                    if(digit == '1')\
    \ {\n                        odd += digit\n                    }\n           \
    \     }\n            }\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp59p7rqrv.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp59p7rqrv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.isDigit) {\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '1'){\n\
    \                    odds += (str.length-j-1)\n                }\n           \
    \ }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqz_bxu4.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.count(c => c.isDigit).filter(_ % 2 == 1).length\n     \
    \       odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3i_74c_2.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3i_74c_2.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mnumOdds\e[0m = str.count(\e\
    [36mc\e[0m => c.isDigit).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value filter is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd_digits = digits % 2\n            odds.add(odd_digits)\n        })\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpne2edgjz.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val s = x.toInt\n            val odd_count\
    \ = s.filter(_ % 2 != 0).length\n            odd.append(s\"the number of odd elements\
    \ ${odd_count} the str${s}ng ${x}.\")\n        })\n        odd.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwegttcyq.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwegttcyq.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd_count\e[0m = s.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n\
    \            val digits = x.toInt\n            digits match {\n              \
    \  case 0 => even.clear()\n                case _ => even.append(digits)\n   \
    \         }\n        })\n        val odd_count = odd.toList\n        odd_count.foreach(x\
    \ => odd_count.remove(x))\n        odd_count.foreach(x => odd_count.append(x))\n\
    \        odd_count.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vl32mpz.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1vl32mpz.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odd(j) += 1\n                    case 'a' | 'b' | 'c' | 'd' | 'e' |\
    \ 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'\
    \ | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odd(j) += 1\n           \
    \         case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'\
    \ | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'\
    \ | 'Y' | 'Z' => odd(j) += 1\n                    case '!' | '@' | '%' | '*' |\
    \ '+' | ',' | '-' | '.' | '/'\n                    => odd(j) += 1\n          \
    \          case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k'\
    \ | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'\
    \ | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'\
    \ | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'\
    \ | 'Y' | 'Z' | '!' | '@' | '%' | '*' | '+' | ',' | '-' | '.' | '/'\n        \
    \            => odd(j) += 1\n                    case '0' | '1' | '2' | '3' |\
    \ '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'\
    \ | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'\
    \ | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '!' | '@' | '%' | '*' | '+' | ',' | '-'\
    \ | '.' | '/'\n                    => odd(j) += 1\n                    \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp60elh4j8.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp60elh4j8.scala:37:0 ----------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60elh4j8.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmp60elh4j8.scala:36:0 -----------------\e[0m\e\
    [0m\n\e[33m34 |\e[0m    }\n\e[33m35 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e[0m\n\
    \e[33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659795140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt - '0').abs()\n                    case\
    \ 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'\
    \ | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\
    \ => odds += (str.charAt(j).toInt - 'a').abs()\n                    case 'A' |\
    \ 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'\
    \ | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds\
    \ += (str.charAt(j).toInt - 'A').abs()\n                    else => odds += (str.charAt(j).toInt\
    \ - 'a').abs()\n                })\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkjj6cfit.scala:22:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33melse\e[0m => odds += (str.charAt(j).toInt\
    \ - \e[31m'a'\e[0m).abs()\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                    end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkjj6cfit.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkjj6cfit.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) isDigit)\n\
    \                    odd += str.charAt(j)\n        }\n        odd.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpev6sr_x_.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpev6sr_x_.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                odds += if (digits % 2 == 1) 1 else 0\n\
    \            }\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbvanm_v9.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                odds += \e[33mif\e[0m (digits % \e[31m2\e\
    [0m == \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                    \
    \    expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbvanm_v9.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val len = str.length\n\
    \            for(j <- 0 until len) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odd += str.substring(j, j + 1)\n                }\n \
    \               else {\n                    even += str.substring(j, j + 1)\n\
    \                }\n            }\n        }\n        odd.toList ::: even.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm17yehu.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgm17yehu.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val odd_digits = lst.filter(_\
    \ match {\n                case x if x.isDigit => true\n                case _\
    \ => false\n            }).count(x => x.toString.toInt%2 == 1)\n            odd_count\
    \ += s\"the number of odd elements ${odd_digits}n the str${i}ng ${odd_digits}n\
    \ of the ${i}nput.\"\n        }\n        odd_count.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzw6jrk7c.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzw6jrk7c.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value isDigit is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val odd_count = s.count(c => c % 2 == 1)\n            odd_count match {\n\
    \                case 0 => odd.clear()\n                case _ => odd.append(s\"\
    the number of odd elements ${odd_count} the str${odd_count} of the ${s}.\")\n\
    \            }\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5f_k5lrw.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val odd_digits = lst.filter(_(i).isDigit).map(_.toInt).filter(_\
    \ % 2 == 1)\n            odd_count += s\"the number of odd elements ${odd_digits.size}\
    \ the str${odd_digits.size} ${odd_digits.mkString(\",\")} of the ${lst.size} ${lst.head(i).replaceFirst(\"\
    \\\\d\", \"\")}.\"\n        }\n        odd_count.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11d7qs15.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => x.toInts.foreach(y => if (y % 2 == 1) odds += y))\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps45cdkux.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps45cdkux.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.foreach(\e[36mx\e[0m => x.toInts.foreach(\e\
    [36my\e[0m => \e[33mif\e[0m (y % \e[31m2\e[0m == \e[31m1\e[0m) odds += y))\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      value toInts is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            val digits = x.toInt\n            if (digits % 2 == 0) {\n  \
    \              even += x\n            } else {\n                odd += x\n   \
    \         }\n        })\n        odd.toList ++ even.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvll2mqfk.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvll2mqfk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val digit = str.charAt(j)\n\
    \                if(digit == '1') {\n                    odds.add(1)\n       \
    \         }\n                else if(digit == '0') {\n                    odds.add(0)\n\
    \                }\n                else {\n                    odds.add(0)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcav0u9t1.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var oddCount = 0\n        var oddCountString\
    \ = \"\"\n        var oddCountString2 = \"\"\n        var oddCountString3 = \"\
    \"\n        var oddCountString4 = \"\"\n        var oddCountString5 = \"\"\n \
    \       var oddCountString6 = \"\"\n        var oddCountString7 = \"\"\n     \
    \   var oddCountString8 = \"\"\n        var oddCountString9 = \"\"\n        var\
    \ oddCountString10 = \"\"\n        var oddCountString11 = \"\"\n        var oddCountString12\
    \ = \"\"\n        var oddCountString13 = \"\"\n        var oddCountString14 =\
    \ \"\"\n        var oddCountString15 = \"\"\n        var oddCountString16 = \"\
    \"\n        var oddCountString17 = \"\"\n        var oddCountString18 = \"\"\n\
    \        var oddCountString19 = \"\"\n        var oddCountString20 = \"\"\n  \
    \      var oddCountString21 = \"\"\n        var oddCountString22 = \"\"\n    \
    \    var oddCountString23 = \"\"\n        var oddCountString24 = \"\"\n      \
    \  var oddCountString25 = \"\"\n        var oddCountString26 = \"\"\n        var\
    \ oddCountString27 = \"\"\n        var oddCountString28 = \"\"\n        var oddCountString29\
    \ = \"\"\n        var oddCountString30 = \"\"\n        var oddCountString31 =\
    \ \"\"\n        var oddCountString32 = \"\"\n        var oddCountString33 = \"\
    \"\n        var oddCountString34 = \"\"\n        var oddCountString35 = \"\"\n\
    \        var oddCountString36 = \"\"\n        var oddCountString37 = \"\"\n  \
    \      var oddCountString38 = \"\"\n        var oddCountString39 = \"\"\n    \
    \    var oddCountString40 = \"\"\n        var oddCountString41 = \"\"\n      \
    \  var oddCountString42 = \"\"\n        var oddCountString43 = \"\"\n        var\
    \ oddCountString44 = \"\"\n        var oddCountString45 = \"\"\n        var oddCountString46\
    \ = \"\"\n        var oddCountString47 = \"\"\n        var oddCountString48 =\
    \ \"\"\n        var oddCountString49 = \"\"\n        var oddCountString50 = \"\
    \"\n        var oddCountString51 = \"\"\n        var oddCountString52 = \"\"\n\
    \        var oddCountString53 = \"\"\n        var oddCountString54 = \"\"\n  \
    \      var oddCountString55 = \"\"\n        var oddCountString56 = \"\"\n    \
    \    var oddCountString57 = \"\"\n        var oddCountString58 = \"\"\n      \
    \  var oddCountString59 = \"\"\n        var oddCountString60 = \"\"\n        var\
    \ oddCountString61 = \"\"\n        var oddCountString62 = \"\"\n        var oddCountString63\
    \ = \"\"\n        var oddCountString64 = \"\"\n        var oddCountString65 =\
    \ \"\"\n        var oddCountString66 = \"\"\n        var oddCountString67 = \"\
    \"\n        var oddCountString68 = \"\"\n        var oddCountString69 = \"\"\n\
    \        var oddCountString70 = \"\"\n        var oddCountString7\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa0n5vk4.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwa0n5vk4.scala:86:5 ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.length) {\n            val s = lst(i)\n       \
    \     val oddDigits = s.filter(x => x != '0').length\n            odds += s\"\
    the number of odd elements ${oddDigits} the str${s.length} of the ${i}nput.\"\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6a5nxox5.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val digit = str.charAt(j)\n\
    \                if(digit == '1') {\n                    odds.add(1)\n       \
    \         } else {\n                    odds.add(0)\n                }\n     \
    \       }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wapt_94.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach { s =>\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbf3_4hy0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_ match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds += s\"the number of odd elements $oddDigits of the $str\"\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpalgv6tab.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' | '1' | '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' => odds += 1\n                    case 'b' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' => odds += 2\n                    case 'c' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ => odds += 3\n                    case 'd' | 't' | 'e' | 'i' | 'o' | 'u' | 'D'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u' => odds +=\
    \ 4\n                    case 'e' | 't' | 'e' | 'i' | 'o' | 'u' | 'E' | 't' |\
    \ 'e' | 'i' | 'o' | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 5\n   \
    \                 case 'f' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 6\n             \
    \       case 'g' | 't' | 'e' | 'i' | 'o\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8eij28f4.scala:48:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                    \e[33mcase\e[0m \e[31m'g'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 'o is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"o\" or an application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{o} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp8eij28f4.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8eij28f4.scala:50:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp8eij28f4.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eij28f4.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8eij28f4.scala:48:51\
    \ --------------------\e[0m\e[0m\n\e[31m48 |\e[0m                    \e[33mcase\e\
    [0m \e[31m'g'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   ^\e\
    [0m\n\e[31m   |\e[0m                                                   "
  stdout: ''
  timestamp: 1659795145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => x.toIntList.foreach(y => odd += y))\n        odd.toList.map(x\
    \ => s\"the number of odd elements $x of the $x input.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpky6rg5vs.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpky6rg5vs.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.foreach(\e[36mx\e[0m => x.toIntList.foreach(\e\
    [36my\e[0m => odd += y))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toIntList is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(x => x != '0').map(x\
    \ => x % 2).length\n            odds.add(s\"the number of odd elements ${oddDigits}n\
    \ the str${s.length}ng ${s.length}n the ${s}nput.\")\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgj28lbd5.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val num_odd_digits = str.count(x => x % 2 == 1)\n            odd_count +=\
    \ num_odd_digits + \" \" + str\n        }\n        odd_count.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1i9ukb5u.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = new mutable.ListBuffer[String]()\n\
    \        val even = new mutable.ListBuffer[String]()\n        lst.foreach(x =>\
    \ {\n            val digits = x.toInt\n            if (digits % 2 == 0) {\n  \
    \              even.append(x)\n            } else {\n                odd.append(x)\n\
    \            }\n        })\n        odd.toList ::: even.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcoefaevf.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcoefaevf.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqsvi15f.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length)\n                if(s(j) isDigit)\n            \
    \        odd() += s(j).toInt\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1ru3urib.scala:18:31 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(s(j) isDigit)\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     expression expected but \e[31m')'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ru3urib.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length)\n            if(lst(i).forall(_.isDigit))\n\
    \                odds += lst(i).filter(_.isDigit).length\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn31zd87z.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val numOddDigits = str.filter(_.isDigit).length\n            val numOddElements\
    \ = str.filter(_.isDigit).map(_.toInt).sum\n            odd.append((numOddElements.toString\
    \ + \" \" + numOddDigits.toString))\n        }\n        odd.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vi29z6j.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val odd_digits = str.filter(_.isDigit).map(_.toInt)\n            odd_count\
    \ += s\"the number of odd elements ${odd_digits.size} the str${odd_digits.size}\
    \ of the str${str.length} of the str${i}.\"\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxdmwr3jo.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795146
