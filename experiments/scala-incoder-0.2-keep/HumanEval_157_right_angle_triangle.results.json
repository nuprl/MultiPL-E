{
  "language": "scala",
  "name": "HumanEval_157_right_angle_triangle",
  "results": [
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpma33izls.scala:18)\n\tat Problem.main(tmpma33izls.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a * Math.cos(math.pi/a))\n        val b1 = math.abs(b * Math.cos(math.pi/b))\n        val c1 = math.abs(c * Math.cos(math.pi/c))\n        val a2 = math.abs(a * Math.sin(math.pi/a))\n        val b2 = math.abs(b * Math.sin(math.pi/b))\n        val c2 = math.abs(c * Math.sin(math.pi/c))\n        (a1 + b1 + c1 == a2 + b2 + c2) || (a1 + b1 + c1 == a2 + b2 + c2) || (a1 + b1 + c1 == a2 + b2 + c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpplmz_b5d.scala:12:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma1\u001b[0m = math.abs(a * Math.cos(math.pi/a))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpplmz_b5d.scala:13:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb1\u001b[0m = math.abs(b * Math.cos(math.pi/b))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpplmz_b5d.scala:14:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc1\u001b[0m = math.abs(c * Math.cos(math.pi/c))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpplmz_b5d.scala:15:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma2\u001b[0m = math.abs(a * Math.sin(math.pi/a))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpplmz_b5d.scala:16:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb2\u001b[0m = math.abs(b * Math.sin(math.pi/b))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpplmz_b5d.scala:17:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc2\u001b[0m = math.abs(c * Math.sin(math.pi/c))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n6 errors found\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b * b) - (a * a))\n        val bc = math.sqrt((b * b) - (c * c))\n        val ac = math.sqrt((a * a) - (c * c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdoxgdvka.scala:18)\n\tat Problem.main(tmpdoxgdvka.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c2 && c1 == a2) || (a1 == b2 && b1 == c1 && c1 == a2) || (a1 == b2 && b1 == c2 && c1 == a2) || (a2 == b1 && b2 == c1 && c1 == a2) || (a2 == b1 && b2 == c2 && c1 == a2) || (a2 == b2 && b2 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdsa12z2h.scala:21)\n\tat Problem.main(tmpdsa12z2h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2 = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a1 + a2\n        val b3 = b1 + b2\n        val c3 = c1 + c2\n        val a4 = a2 + a2\n        val b4 = b2 + b2\n        val c4 = c2 + c2\n        val a5 = a2 + a3\n        val b5 = b2 + b3\n        val c5 = c2 + c4\n        val a6 = a3 + a3\n        val b6 = b3 + b3\n        val c6 = c3 + c4\n        val a7 = a3 + a4\n        val b7 = b3 + b4\n        val c7 = c3 + c5\n        val a8 = a4 + a4\n        val b8 = b4 + b4\n        val c8 = c4 + c5\n        val a9 = a4 + a5\n        val b9 = b4 + b5\n        val c9 = c4 + c6\n        val a10 = a5 + a5\n        val b10 = b5 + b5\n        val c10 = c5 + c6\n        val a11 = a5 + a6\n        val b11 = b5 + b6\n        val c11 = c5 + c7\n        val a12 = a6 + a6\n        val b12 = b6 + b6\n        val c12 = c6 + c7\n        val a13 = a6 + a7\n        val b13 = b6 + b7\n        val c13 = c6 + c8\n        val a14 = a7 + a7\n        val b14 = b7 + b7\n        val c14 = c7 + c8\n        val a15 = a7 + a8\n        val b15 = b7 + b8\n        val c15 = c7 + c9\n        val a16 = a8 + a8\n        val b16 = b8 + b8\n        val c16 = c8 + c9\n        val a17 = a8 + a9\n        val b17 = b8 + b9\n        val c17 = c8 + c10\n        val a18 = a9 + a9\n        val b18 = b9 + b9\n        val c18 = c9 + c10\n        val a19 = a9 + a10\n        val b19 = b9 + b10\n        val c19 = c9 + c11\n        val a20 = a10 + a10\n        val b20 = b10 + b10\n        val c20 = c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8pmcxqq.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b1 * c2) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b2 * c1) > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj_ufuks4.scala:21)\n\tat Problem.main(tmpj_ufuks4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val acb = math.pow(a + b + c, 0.5)\n        val bcd = math.pow(b + c, 2)\n        val cdab = math.pow(cd + ab, 0.5)\n        val abbc = math.pow(ab + bc, 2)\n        val bcab = math.pow(b + c, 2)\n        val cabd = math.pow(c + ab, 2)\n        val abcd = math.pow(a + b + c, 2)\n        abc > 0 && abbc > 0 && bcab > 0 && cabd > 0 && abcd > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjreej8g5.scala:27)\n\tat Problem.main(tmpjreej8g5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val acd = math.pow(a, 2) + math.pow(c, 2) - abc + bc\n        val bcd = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdab = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val abdc = math.pow(ab + bc + d, 0.5)\n        val acdb = math.pow(a, 2) + math.pow(b, 2) - abc + bc\n        val bcdd = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdabc = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val abdcd = math.pow(ab + bc + d, 0.5)\n        val acdbcd = math.pow(a, 2) + math.pow(b, 2) - abc + bc\n        val bcdabc = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdabdc = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val abdcdb = math.pow(ab + bc + d, 0.5)\n        val acdbcdb = math.pow(a, 2) + math.pow(b, 2) - abc + bc\n        val bcdabcd = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdabdcd = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val abdcdbc = math.pow(ab + bc + d, 0.5)\n        val acdbcdbc = math.pow(a, 2) + math.pow(b, 2) - abc + bc\n        val bcdabcdb = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdabdcdb = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val abdcdbcd = math.pow(ab + bc + d, 0.5)\n        val acdbcdbcd = math.pow(a, 2) + math.pow(b, 2) - abc + bc\n        val bcdabcdbc = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdabdcdbc = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val abdcdbcdb = math.pow(ab + bc + d, 0.5)\n        val acdbcdbcdb = math.pow(a, 2) + math.pow(b, 2) - abc + bc\n        val bcdabcdbc = math.pow(b, 2) + math.pow(c, 2) - abc + bc\n        val cdabdcdbcd = math.pow(c, 2) + math.pow(d, 2) - abc + bc\n        val ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi5vheah8.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi5vheah8.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdabcdbc\u001b[0m = math.pow(b, \u001b[31m2\u001b[0m) + math.pow(c, \u001b[31m2\u001b[0m) - abc + bc\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdabcdbc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdabcdbc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi5vheah8.scala:18:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdab\u001b[0m = math.pow(c, \u001b[31m2\u001b[0m) + math.pow(d, \u001b[31m2\u001b[0m) - abc + bc\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi5vheah8.scala:19:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabdc\u001b[0m = math.pow(ab + bc + d, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi5vheah8.scala:22:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdabc\u001b[0m = math.pow(c, \u001b[31m2\u001b[0m) + math.pow(d, \u001b[31m2\u001b[0m) - abc + bc\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi5vheah8.scala:23:39 ------------",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiyud327q.scala:21)\n\tat Problem.main(tmpiyud327q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + 1\n        val b2 = b1 + 1\n        val c2 = c1 + 1\n        val a3 = a2 + 1\n        val b3 = b2 + 1\n        val c3 = c3 + 1\n        val a4 = a3 + 1\n        val b4 = b4 + 1\n        val c4 = c4 + 1\n        val a5 = a4 + 1\n        val b5 = b5 + 1\n        val c5 = c5 + 1\n        val a6 = a6 + 1\n        val b6 = b6 + 1\n        val c6 = c6 + 1\n        val a7 = a7 + 1\n        val b7 = b7 + 1\n        val c7 = c7 + 1\n        val a8 = a8 + 1\n        val b8 = b8 + 1\n        val c8 = c8 + 1\n        val a9 = a9 + 1\n        val b9 = b9 + 1\n        val c9 = c9 + 1\n        val a10 = a10 + 1\n        val b10 = b10 + 1\n        val c10 = c10 + 1\n        val a11 = a11 + 1\n        val b11 = b11 + 1\n        val c11 = c11 + 1\n        val a12 = a12 + 1\n        val b12 = b12 + 1\n        val c12 = c12 + 1\n        val a13 = a13 + 1\n        val b13 = b13 + 1\n        val c13 = c13 + 1\n        val a14 = a14 + 1\n        val b14 = b14 + 1\n        val c14 = c14 + 1\n        val a15 = a15 + 1\n        val b15 = b15 + 1\n        val c15 = c15 + 1\n        val a16 = a16 + 1\n        val b16 = b16 + 1\n        val c16 = c16 + 1\n        val a17 = a17 + 1\n        val b17 = b17 + 1\n        val c17 = c17 + 1\n        val a18 = a18 + 1\n        val b18 = b18 + 1\n        val c18 = c18 + 1\n        val a19 = a19 + 1\n        val b19 = b19 + 1\n        val c19 = c19 + 1\n        val a20 = a20 + 1\n        val b20 = b20 + 1\n        val c20 = c20 + 1\n        val a21 = a21 + 1\n        val b21 = b21 + 1\n        val c21 = c21 + 1\n        val a22 = a22 + 1\n        val b22 = b22 + 1\n        val c22 = c22 + 1\n        val a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsvt02kbd.scala:79:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsvt02kbd.scala:12:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma1\u001b[0m = a / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue / is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsvt02kbd.scala:20:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc3\u001b[0m = c3 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc3\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsvt02kbd.scala:22:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb4\u001b[0m = b4 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsvt02kbd.scala:23:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc4\u001b[0m = c4 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bccd = math.pow(bc, c)\n        val abcdb = math.pow(abc, b)\n        val bcdab = math.pow(bc, d)\n        val abcda = math.pow(abc, a)\n        val bcdcb = math.pow(bc, c)\n        val abcdbc = math.pow(abc, b)\n        val cdbab = math.pow(cd, b)\n        val cdbca = math.pow(cd, a)\n        val cdbcb = math.pow(cd, c)\n        val cdbcd = math.pow(cd, b)\n        val abccd = math.pow(abc, c)\n        val bcdaa = math.pow(bc, a)\n        val bcdbc = math.pow(bc, c)\n        val bcdbd = math.pow(bc, d)\n        val abbcc = math.pow(ab, b)\n        val bcdabc = math.pow(bc, d)\n        val bcdaab = math.pow(bc, a)\n        val bcdbcd = math.pow(bc, c)\n        val abccdb = math.pow(abc, c)\n        val bcdaac = math.pow(bc, a)\n        val bcdbcb = math.pow(bc, c)\n        val abbccd = math.pow(ab, b)\n        val bcdaabc = math.pow(bc, a)\n        val bcdbcda = math.pow(bc, c)\n        val abccdbc = math.pow(abc, c)\n        val bcdaabbc = math.pow(bc, a)\n        val bcdbcdbc = math.pow(bc, c)\n        val abbcccd = math.pow(ab, b)\n        val bcdaabbc = math.pow(bc, a)\n        val bcdbcdbd = math.pow(bc, c)\n        val abccdbcd = math.pow(abc, c)\n        val bcdaabbcc = math.pow(bc, a)\n        val bcdbcdbcb = math.pow(bc, c)\n        val abbcccdb = math.pow(ab, b)\n        val bcdaabbccd = math.pow(bc, a)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjdgnmond.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaabbc\u001b[0m = math.pow(bc, a)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaabbc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaabbc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjdgnmond.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjdgnmond.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjdgnmond.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjdgnmond.scala:24:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdab\u001b[0m = math.pow(bc, d)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjdgnmond.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m ",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2) || (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2) || (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpitg35gtb.scala:21)\n\tat Problem.main(tmpitg35gtb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abdc = math.pow(ab, b)\n        val bcda = math.pow(bc, a)\n        val abcda = math.pow(abc, a)\n        val abdcd = math.pow(ab, b)\n        val bcdaa = math.pow(bc, a)\n        val abcdaa = math.pow(abc, a)\n        val abdcda = math.pow(ab, b)\n        val bcdaab = math.pow(bc, a)\n        val abcdaab = math.pow(abc, a)\n        val abdcdaa = math.pow(ab, b)\n        val bcdaabcd = math.pow(bc, a)\n        val abcdaabcd = math.pow(abc, a)\n        val abdcdaab = math.pow(bc, a)\n        val abcdaabdc = math.pow(abc, a)\n        val abdcdaabcd = math.pow(ab, b)\n        val bcdaabdcd = math.pow(bc, a)\n        val abcdaabdcd = math.pow(abc, a)\n        val abdcdaabdc = math.pow(bc, a)\n        val abcdaabdcd = math.pow(ab, b)\n        val bcdaabdcda = math.pow(bc, a)\n        val abcdaabdcda = math.pow(abc, a)\n        val abdcdaabdcd = math.pow(bc, a)\n        val abcdaabdcda = math.pow(ab, b)\n        val bcdaabdcdaa = math.pow(bc, a)\n        val abcdaabdcdaa = math.pow(abc, a)\n        val abdcdaabdcda = math.pow(bc, a)\n        val abcdaabdcdaa = math.pow(ab, b)\n        val bcdaabdcdaab = math.pow(bc, a)\n        val abcdaabdcdaab = math.pow(abc, a)\n        val abdcdaabdcdaa = math.pow(bc, a)\n        val abcdaabdcdaab = math.pow(ab, b)\n        val bcdaabdcdaabcd = math.pow(bc, a)\n        val abcdaabdcdaabcd = math.pow(abc, a)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk54714_v.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdaabdcd\u001b[0m = math.pow(ab, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdaabdcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdaabdcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk54714_v.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdaabdcda\u001b[0m = math.pow(ab, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdaabdcda is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdaabdcda\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk54714_v.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdaabdcdaa\u001b[0m = math.pow(ab, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdaabdcdaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdaabdcdaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk54714_v.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdaabdcdaab\u001b[0m = math.pow(ab, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdaabdcdaab is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdaabdcdaab\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpk54714_v.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bccd = math.pow(bc, c)\n        val bcda = math.pow(bc, a)\n        val cdaa = math.pow(cd, a)\n        val abcda = math.pow(abc, a)\n        val abbca = math.pow(ab, b)\n        val bcdab = math.pow(bc, d)\n        val cdaab = math.pow(cd, a)\n        val abcdbc = math.pow(abc, b)\n        val bcdac = math.pow(bc, c)\n        val cdaac = math.pow(cd, a)\n        val abcdbd = math.pow(abc, b)\n        val bcdad = math.pow(bc, d)\n        val cdaad = math.pow(cd, a)\n        val abcdbc = math.pow(abc, b)\n        val bcdac = math.pow(bc, c)\n        val cdaac = math.pow(cd, a)\n        val abcdbd = math.pow(abc, b)\n        val bcdad = math.pow(bc, d)\n        val cdaad = math.pow(cd, a)\n        val abcdbc = math.pow(abc, b)\n        val bcdac = math.pow(bc, c)\n        val cdaac = math.pow(cd, a)\n        val abcdbd = math.pow(abc, b)\n        val bcdad = math.pow(bc, d)\n        val cdaad = math.pow(cd, a)\n        val abcdbc = math.pow(abc, b)\n        val bcdac = math.pow(bc, c)\n        val cdaac = math.pow(cd, a)\n        val abcdbd = math.pow(abc, b)\n        val bcdad = math.pow(bc, d)\n        val cdaad = math.pow(cd, a)\n        val abcdbc = math.pow(abc, b)\n        val bcdac = math.pow(bc, c)\n        val cdaac = math.pow(cd, a)\n        val abcdbd = math.pow(abc, b)\n        val bcdad = math.pow(bc, d)\n        val cdaad\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9vgt10h1.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9vgt10h1.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbc\u001b[0m = math.pow(abc, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdbc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdbc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9vgt10h1.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdac\u001b[0m = math.pow(bc, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdac is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdac\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9vgt10h1.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdaac\u001b[0m = math.pow(cd, a)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcdaac is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcdaac\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9vgt10h1.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbd\u001b[0m = math.pow(abc, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdbd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdbd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9vgt10h1.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdad\u001b[0m = math.pow(bc, d)\n\u001b[31m\u001b[31m   |\u001b[0m        ^",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, bc)\n        val bcd = math.pow(bc, cd)\n        val abcd = math.pow(abc, bcd) \n        abc / bcd > 1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8goss4er.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8goss4er.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8goss4er.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794234
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        (a1 == a2 && b1 == b2 && c1 == c2) || (a1 == a3 && b1 == b3 && c1 == c3) || (a1 == a4 && b1 == b4 && c1 == c4)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwbl9isdi.scala:27)\n\tat Problem.main(tmpwbl9isdi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        ab > ac && ab > bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_qibwxv_.scala:18)\n\tat Problem.main(tmp_qibwxv_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd // if abc < bcd then abc is a right-angled triangle\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0fsdlzcx.scala:20)\n\tat Problem.main(tmp0fsdlzcx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiyud327q.scala:21)\n\tat Problem.main(tmpiyud327q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b + c + a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpowiv9_6z.scala:20)\n\tat Problem.main(tmpowiv9_6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b + c + a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpowiv9_6z.scala:20)\n\tat Problem.main(tmpowiv9_6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc > ab && abc > bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpelljgbiy.scala:20)\n\tat Problem.main(tmpelljgbiy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((c*c) - (a*a))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphxp1j4b_.scala:18)\n\tat Problem.main(tmphxp1j4b_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794245
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz7wgpzjp.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7wgpzjp.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a\n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgt2bn3j3.scala:21)\n\tat Problem.main(tmpgt2bn3j3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b + c + a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpowiv9_6z.scala:20)\n\tat Problem.main(tmpowiv9_6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfvpium75.scala:20)\n\tat Problem.main(tmpfvpium75.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(bc, 2) + math.pow(cd, 2)\n        abc < b * c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1a184bjc.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1a184bjc.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1a184bjc.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794245
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        (a1 == a2 && b1 == b2 && c1 == c2) || (a1 == a3 && b1 == b3 && c1 == c3) || (a1 == a4 && b1 == b4 && c1 == c4) || (a1 == a5 && b1 == b5 && c1 == c5)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjix7glmn.scala:31)\n\tat Problem.main(tmpjix7glmn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmevol7v_.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmevol7v_.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + a2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c2) - (a\n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bcbc = math.pow(bc, c)\n        val abcdb = math.pow(abc, b)\n        val bcbcd = math.pow(bc, c)\n        val abcdbc = math.pow(abc, b)\n        val abbcd = math.pow(ab, b)\n        val bcbcdb = math.pow(bc, c)\n        val abcdbcd = math.pow(abc, b)\n        val abbcdb = math.pow(ab, b)\n        val bcbcdbc = math.pow(bc, c)\n        val abcdbcdb = math.pow(abc, b)\n        val abbcdbc = math.pow(ab, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val abcdbcdbc = math.pow(abc, b)\n        val abbcdbcd = math.pow(ab, b)\n        val bcbcdbcdb = math.pow(bc, c)\n        val abcdbcdbc = math.pow(abc, b)\n        val abbcdbcdb = math.pow(ab, b)\n        val bcbcdbcdbc = math.pow(bc, c)\n        val abcdbcdbcd = math.pow(abc, b)\n        val abbcdbcdbc = math.pow(ab, b)\n        val bcbcdbcdbcd = math.pow(bc, c)\n        val abcdbcdbcdb = math.pow(abc, b)\n        val abbcdbcdbcd = math.pow(ab, b)\n        val bcbcdbcdbcdb = math.pow(bc, c)\n        val abcdbcdbcdbc = math.pow(abc, b)\n        val abbcdbcdbcd = math.pow(ab, b)\n        val bcbcdbcdbcdb = math.pow(bc, c)\n        val abcdbcdbcdbc = math.pow(abc, b)\n        val abbcdbcdbcdb = math.pow(ab, b)\n        val bcbcdbcdbcdbc = math.pow(bc, c)\n        val abcdbcdbcdbcd = math.pow(abc, b)\n        val ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt033jseh.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt033jseh.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbcdbc\u001b[0m = math.pow(abc, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdbcdbc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdbcdbc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt033jseh.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcdbcdbcd\u001b[0m = math.pow(ab, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabbcdbcdbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabbcdbcdbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt033jseh.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcbcdbcdbcdb\u001b[0m = math.pow(bc, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcbcdbcdbcdb is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcbcdbcdbcdb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt033jseh.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbcdbcdbc\u001b[0m = math.pow(abc, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdbcdbcdbc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdbcdbcdbc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt033jseh.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m1",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b * b) - (a * a))\n        val bc = math.sqrt((c * c) - (b * b))\n        val ac = math.sqrt((c * c) - (a * a))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0cb6nygz.scala:18)\n\tat Problem.main(tmp0cb6nygz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        (a1 == a2 && b1 == b2 && c1 == c2) || (a1 == a3 && b1 == b3 && c1 == c3) || (a1 == a4 && b1 == b4 && c1 == c4)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwbl9isdi.scala:27)\n\tat Problem.main(tmpwbl9isdi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1 - b1)\n        val b2 = math.abs(b1 - c1)\n        val c2 = math.abs(c1 - a1)\n        (a1 + b1 + c1) < (a2 + b2 + c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzua0hosv.scala:21)\n\tat Problem.main(tmpzua0hosv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < math.pow(a, 0.5) * math.pow(b, 0.5) * math.pow(c, 0.5)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6wvz2i6o.scala:24)\n\tat Problem.main(tmp6wvz2i6o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8qq1tvh0.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qq1tvh0.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a\n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b * b) - (a * a))\n        val ac = math.sqrt((c * c) - (a * a))\n        val bc = math.sqrt((b * b) - (c * c))\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjk3pnhuq.scala:18)\n\tat Problem.main(tmpjk3pnhuq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c2 && c1 == a2) || (a1 == b2 && b1 == c1 && c1 == a2) || (a1 == b2 && b1 == c2 && c1 == a2) || (a1 == c2 && b1 == c1 && c1 == a2) || (a1 == c2 && b1 == c2 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1uaq511s.scala:21)\n\tat Problem.main(tmp1uaq511s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8qq1tvh0.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qq1tvh0.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a\n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (a2 + b2 + c1) - (a1 + b1 + c1) * (a2 + b2 + c1) > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsphbje2j.scala:21)\n\tat Problem.main(tmpsphbje2j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val acb = math.pow(a + b + c, 0.5)\n        val bcd = math.pow(b + c + d, 0.5)\n        val abcd = math.pow(abc + acb + bcd, 0.5)\n        abc > 0 && acb > 0 && bcd > 0 && abcd > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprbfuz6ua.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprbfuz6ua.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprbfuz6ua.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794245
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(ab+ac+bc)\n        abc < 2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppptuzygd.scala:19)\n\tat Problem.main(tmppptuzygd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val abd = math.pow(ab + bc, 0.5)\n        val bcd = math.pow(b + c, 0.5)\n        val cda = math.pow(cd + a, 0.5)\n        val abda = math.pow(ab + bd, 0.5)\n        val bcda = math.pow(bc + d, 0.5)\n        val cdbc = math.pow(cd + b, 0.5)\n        val abdbc = math.pow(ab + bd, 0.5)\n        val bcdbc = math.pow(bc + d, 0.5)\n        val cdbd = math.pow(cd + b, 0.5)\n        val abdbd = math.pow(ab + bd, 0.5)\n        val bcdbd = math.pow(bc + d, 0.5)\n        val cdbda = math.pow(cd + b, 0.5)\n        val abdbda = math.pow(ab + bd, 0.5)\n        val bcdbda = math.pow(bc + d, 0.5)\n        val cdbdbc = math.pow(cd + b, 0.5)\n        val abdbdbc = math.pow(ab + bd, 0.5)\n        val bcdbdbc = math.pow(bc + d, 0.5)\n        val cdbdbd = math.pow(cd + b, 0.5)\n        val abdbdbd = math.pow(ab + bd, 0.5)\n        val bcdbdbd = math.pow(bc + d, 0.5)\n        val cdbdbda = math.pow(cd + b, 0.5)\n        val abdbdbda = math.pow(ab + bd, 0.5)\n        val bcdbdbda = math.pow(bc + d, 0.5)\n        val cdbdbdbc = math.pow(cd + b, 0.5)\n        val abdbdbdbc = math.pow(ab + bd, 0.5)\n        val bcdbdbdbc = math.pow(bc + d, 0.5)\n        val cdbdbdbd = math.pow(cd + b, 0.5)\n        val abdbdbdbd = math.pow(ab + bd, 0.5)\n        val bcdbdbdbd = math.pow(bc + d, 0.5)\n        val cdbdbdbda = math.pow(cd + b, 0.5)\n        val abdbdbdbda = math.pow(ab + bd, 0.5)\n        val bcdbdbdbda = math.pow(bc + d, 0.5)\n        val cdbdbdbdbc = math.pow(cd + b, 0.5)\n        val abdbdbdb\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph92168.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjph92168.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjph92168.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjph92168.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjph92168.scala:22:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabda\u001b[0m = math.pow(ab + bd, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: bd\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjph92168.scala:23:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcda\u001b[0m = math.pow(bc + d, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b + c + a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpowiv9_6z.scala:20)\n\tat Problem.main(tmpowiv9_6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a,2)\n        val bc = math.pow(b,2)\n        val cd = math.pow(c,2)\n        val abc = math.pow(ab,2)\n        val bcd = math.pow(bc,2)\n        val abcd = math.pow(abc,2)\n        val abbc = math.pow(ab,2)\n        val abbb = math.pow(ab,2)\n        val bccd = math.pow(bc,2)\n        val bcda = math.pow(bc,2)\n        val bcdaa = math.pow(bc,2)\n        val bcdaaa = math.pow(bc,2)\n        val bcdaaaa = math.pow(bc,2)\n        val bcdaaaaa = math.pow(bc,2)\n        val bcdaaaaaa = math.pow(bc,2)\n        val bcdaaaaaaa = math.pow(bc,2)\n        val bcdaaaaaaaa = math.pow(bc,2)\n        val bcdaaaaaaaaa = math.pow(bc,2)\n        val bcdaaaaaaaaaa = math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n        val bcdaaaaaaaaaa= math.pow(bc,2)\n\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprlkcf8na.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaa\u001b[0m= math.pow(bc,\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprlkcf8na.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaa\u001b[0m= math.pow(bc,\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprlkcf8na.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaa\u001b[0m= math.pow(bc,\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprlkcf8na.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaa\u001b[0m= math.pow(bc,\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprlkcf8na.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaa\u001b[0m= math.pow(bc,\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[3",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        if (a + b > c && a + c > b && b + c > a) return true\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfpdl4i56.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfpdl4i56.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfpdl4i56.scala:15:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794246
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + 1\n        val b2 = b1 + 1\n        val c2 = c1 + 1\n        val a3 = a2 + 1\n        val b3 = b2 + 1\n        val c3 = c2 + 1\n        val a4 = a3 + 1\n        val b4 = b3 + 1\n        val c4 = c3 + 1\n        val a5 = a4 + 1\n        val b5 = b5 + 1\n        val c5 = c5 + 1\n        val a6 = a6 + 1\n        val b6 = b6 + 1\n        val c6 = c6 + 1\n        val a7 = a7 + 1\n        val b7 = b7 + 1\n        val c7 = c7 + 1\n        val a8 = a8 + 1\n        val b8 = b8 + 1\n        val c8 = c8 + 1\n        val a9 = a9 + 1\n        val b9 = b9 + 1\n        val c9 = c9 + 1\n        val a10 = a10 + 1\n        val b10 = b10 + 1\n        val c10 = c10 + 1\n        val a11 = a11 + 1\n        val b11 = b11 + 1\n        val c11 = c11 + 1\n        val a12 = a12 + 1\n        val b12 = b12 + 1\n        val c12 = c12 + 1\n        val a13 = a13 + 1\n        val b13 = b13 + 1\n        val c13 = c13 + 1\n        val a14 = a14 + 1\n        val b14 = b14 + 1\n        val c14 = c14 + 1\n        val a15 = a15 + 1\n        val b15 = b15 + 1\n        val c15 = c15 + 1\n        val a16 = a16 + 1\n        val b16 = b16 + 1\n        val c16 = c16 + 1\n        val a17 = a17 + 1\n        val b17 = b17 + 1\n        val c17 = c17 + 1\n        val a18 = a18 + 1\n        val b18 = b18 + 1\n        val c18 = c18 + 1\n        val a19 = a19 + 1\n        val b19 = b19 + 1\n        val c19 = c19 + 1\n        val a20 = a20 + 1\n        val b20 = b20 + 1\n        val c20 = c20 + 1\n        val a21 = a21 + 1\n        val b21 = b21 + 1\n        val c21 = c21 + 1\n        val a22 = a22 + 1\n        val b22 = b22 + 1\n        val c22\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmyd5o4x8.scala:79:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmyd5o4x8.scala:26:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb5\u001b[0m = b5 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmyd5o4x8.scala:27:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc5\u001b[0m = c5 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmyd5o4x8.scala:28:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma6\u001b[0m = a6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35ma6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmyd5o4x8.scala:29:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb6\u001b[0m = b6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmyd5o4x8.scala:30:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc6\u001b[0m = c6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[",
      "stdout": "",
      "timestamp": 1659794250
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b1 * c1 - a2 * b2 * c1) - (a1 * b2 * c1 - a2 * b1 * c1) > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkvnbbz6f.scala:23)\n\tat Problem.main(tmpkvnbbz6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3 = b2 + c3\n        val c3 = c2 + a3\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 == a3) || (a3 == b3 && b3 == c3 && c3 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E039] Reference Error: /tmp/tmpbtlwtsak.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb3\u001b[0m = b2 + c3\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m           c3 is a forward reference extending over the definition of b3\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpajk0j1yo.scala:18)\n\tat Problem.main(tmpajk0j1yo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0cjyiiv.scala:21)\n\tat Problem.main(tmpr0cjyiiv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc < bc // if abc is less than bc then abc is a right-angled triangle\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppksdalvu.scala:19)\n\tat Problem.main(tmppksdalvu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc > 0 && abc < math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyjkzajx1.scala:20)\n\tat Problem.main(tmpyjkzajx1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794256
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a * 0.5)\n        val b1 = math.abs(b * 0.5)\n        val c1 = math.abs(c * 0.5)\n        val a2 = math.abs(a * 0.5)\n        val b2 = math.abs(b * 0.5)\n        val c2 = math.abs(c * 0.5)\n        val a3 = math.abs(a * 0.5)\n        val b3 = math.abs(b * 0.5)\n        val c3 = math.abs(c * 0.5)\n        val a4 = math.abs(a * 0.5)\n        val b4 = math.abs(b * 0.5)\n        val c4 = math.abs(c * 0.5)\n        val a5 = math.abs(a * 0.5)\n        val b5 = math.abs(b * 0.5)\n        val c5 = math.abs(c * 0.5)\n        val a6 = math.abs(a * 0.5)\n        val b6 = math.abs(b * 0.5)\n        val c6 = math.abs(c * 0.5)\n        val a7 = math.abs(a * 0.5)\n        val b7 = math.abs(b * 0.5)\n        val c7 = math.abs(c * 0.5)\n        val a8 = math.abs(a * 0.5)\n        val b8 = math.abs(b * 0.5)\n        val c8 = math.abs(c * 0.5)\n        val a9 = math.abs(a * 0.5)\n        val b9 = math.abs(b * 0.5)\n        val c9 = math.abs(c * 0.5)\n        val a10 = math.abs(a * 0.5)\n        val b10 = math.abs(b * 0.5)\n        val c10 = math.abs(c * 0.5)\n        val a11 = math.abs(a * 0.5)\n        val b11 = math.abs(b * 0.5)\n        val c11 = math.abs(c * 0.5)\n        val a12 = math.abs(a * 0.5)\n        val b12 = math.abs(b * 0.5)\n        val c12 = math.abs(c * 0.5)\n        val a13 = math.abs(a * 0.5)\n        val b13 = math.abs(b * 0.5)\n        val c13 = math.abs(c * 0.5)\n        val a14 = math.abs(a * 0.5)\n        val b14 = math.abs(b * 0.5)\n        val c14 = math.abs(c * 0.5)\n        val a15 = math.abs(a * 0.5)\n        val b15 = math.abs(b * 0.5)\n        val c15 = math.abs(c * 0.5)\n        val a16 = math.abs(a * 0.5)\n        val b16 = math.abs(b * 0.5)\n        val c16 = math.abs(c * 0.5)\n        val a17 = math.abs(a * 0.5)\n        val b17 = math.abs(b * \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpp_dkhxe4.scala:61:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb17\u001b[0m = math.abs(b * \n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_dkhxe4.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794257
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2) || (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7d0f4vj8.scala:21)\n\tat Problem.main(tmp7d0f4vj8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpma33izls.scala:18)\n\tat Problem.main(tmpma33izls.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy_zo1wmp.scala:21)\n\tat Problem.main(tmpy_zo1wmp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val ad = math.pow(a, 2)\n        val bc = math.pow(ab, 2)\n        val bd = math.pow(ac, 2)\n        val cd = math.pow(ad, 2)\n        val abc = math.pow(ab, 2)\n        val acd = math.pow(ac, 2)\n        val bcd = math.pow(bc, 2)\n        val abcd = math.pow(abc, 2)\n        val bcda = math.pow(bc, 2)\n        val abcda = math.pow(abc, 2)\n        val bcdaa = math.pow(bc, 2)\n        val abcdaa = math.pow(abc, 2)\n        val bcdaaa = math.pow(bc, 2)\n        val abcdaaa = math.pow(abc, 2)\n        val bcdaaaa = math.pow(bc, 2)\n        val abcdaaaa = math.pow(abc, 2)\n        val bcdaaaaa = math.pow(bc, 2)\n        val abcdaaaaa = math.pow(abc, 2)\n        val bcdaaaaaa = math.pow(bc, 2)\n        val abcdaaaaaa = math.pow(abc, 2)\n        val bcdaaaaaaa = math.pow(bc, 2)\n        val abcdaaaaaaa = math.pow(abc, 2)\n        val bcdaaaaaaaa = math.pow(bc, 2)\n        val abcdaaaaaaaa = math.pow(abc, 2)\n        val bcdaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaa =math.pow(abc, 2)\n        val bcdaaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaaa =math.pow(abc, 2)\n        val bcdaaaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaaaa =math.pow(abc, 2)\n        val bcdaaaaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaaaa =math.pow(abc, 2)\n        val bcdaaaaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaaaa =math.pow(abc, 2)\n        val bcdaaaaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaaaa =math.pow(abc, 2)\n        val bcdaaaaaaaaaaaa =math.pow(bc, 2)\n        val abcdaaaaaaaaaaa =math.pow(abc, 2)\n        val bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1i_eptzv.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1i_eptzv.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdaaaaaaaaaaa\u001b[0m =math.pow(abc, \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdaaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdaaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1i_eptzv.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaaaa\u001b[0m =math.pow(bc, \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaaaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1i_eptzv.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdaaaaaaaaaaa\u001b[0m =math.pow(abc, \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdaaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdaaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1i_eptzv.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaaaaaaaaaa\u001b[0m =math.pow(bc, \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdaaaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- ",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpajk0j1yo.scala:18)\n\tat Problem.main(tmpajk0j1yo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgt2bn3j3.scala:21)\n\tat Problem.main(tmpgt2bn3j3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(a-c)\n        val bcd = math.abs(b-c)\n        ab == abc && ac == bcd && b == c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0gf8rxr0.scala:20)\n\tat Problem.main(tmp0gf8rxr0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        ab >= ac && ab >= bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp17udnf_r.scala:18)\n\tat Problem.main(tmp17udnf_r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b2 * c2) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdnx0fv1a.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdnx0fv1a.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b2 * c2) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a\n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd // if abc < bcd then a is right angle\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp58q6s6ow.scala:20)\n\tat Problem.main(tmp58q6s6ow.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1 * b1)\n        val b2 = math.abs(b1 * c1)\n        val c2 = math.abs(c1 * b1)\n        val a3 = math.abs(a2 * b2)\n        val b3 = math.abs(b2 * c2)\n        val c3 = math.abs(c2 * b2)\n        (a1 + b1 + c1 == a2 + b2 + c2 && a3 + b3 + c3 == a2 * b2 + b2 * c2) || (a1 + b1 + c1 == a2 + b2 + c2 && a3 + b3 + c3 == a2 * b2 + b2 * c2 && a1 * b2 + b1 * c2 == a2 * c2 && b1 * c2 + c1 * b2 == b2 * c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzqdgrhb2.scala:24)\n\tat Problem.main(tmpzqdgrhb2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuyrzfk6o.scala:19)\n\tat Problem.main(tmpuyrzfk6o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a * Math.cos(math.pi/180))\n        val b1 = math.abs(b * Math.cos(math.pi/180))\n        val c1 = math.abs(c * Math.cos(math.pi/180))\n        val a2 = math.abs(a * Math.sin(math.pi/180))\n        val b2 = math.abs(b * Math.sin(math.pi/180))\n        val c2 = math.abs(c * Math.sin(math.pi/180))\n        (a1 + b1 + c1) * (a2 + b2 + c2) < 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr2fw2hu.scala:12:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma1\u001b[0m = math.abs(a * Math.cos(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr2fw2hu.scala:13:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb1\u001b[0m = math.abs(b * Math.cos(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr2fw2hu.scala:14:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc1\u001b[0m = math.abs(c * Math.cos(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr2fw2hu.scala:15:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma2\u001b[0m = math.abs(a * Math.sin(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr2fw2hu.scala:16:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb2\u001b[0m = math.abs(b * Math.sin(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr2fw2hu.scala:17:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc2\u001b[0m = math.abs(c * Math.sin(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1 - b1)\n        val b2 = math.abs(b1 - c1)\n        val c2 = math.abs(c1 - a1)\n        (a1 + b1 + c1) - (a2 + b2 + c2) < 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgaomn763.scala:21)\n\tat Problem.main(tmpgaomn763.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 = (c + a) / 2\n        val b1 = (a + c) / 2\n        val b2 = (c + b) / 2\n        val b3 = (b + a) / 2\n        val c1 = (a + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (c + a) / 2\n        val a1_sq = a1 * a1\n        val a2_sq = a2 * a2\n        val a3_sq = a3 * a3\n        val b1_sq = b1 * b1\n        val b2_sq = b2 * b2\n        val b3_sq = b3 * b3\n        val c1_sq = c1 * c1\n        val c2_sq = c2 * c2\n        val c3_sq = c3 * c3\n        val a1_sq2 = a1_sq + a1_sq\n        val a2_sq2 = a2_sq + a2_sq\n        val a3_sq2 = a3_sq + a3_sq\n        val b1_sq2 = b1_sq + b1_sq\n        val b2_sq2 = b2_sq + b2_sq\n        val b3_sq2 = b3_sq + b3_sq\n        val c1_sq2 = c1_sq + c1_sq\n        val c2_sq2 = c2_sq + c2_sq\n        val c3_sq2 = c3_sq + c3_sq\n        val a1_sq3 = a1_sq2 + a1_sq2\n        val a2_sq3 = a2_sq2 + a2_sq2\n        val a3_sq3 = a3_sq2 + a3_sq2\n        val b1_sq3 = b1_sq2 + b1_sq2\n        val b2_sq3 = b2_sq2 + b2_sq2\n        val b3_sq3 = b3_sq2 + b3_sq2\n        val c1_sq3 = c1_sq2 + c1_sq2\n        val c2_sq3 = c2_sq2 + c2_sq2\n        val c3_sq3 = c3_sq2 + c3_sq2\n        val a1_sq4 = a1_sq3 + a1_sq3\n        val a2_sq4 = a2_sq3 + a2_sq3\n        val a3_sq4 = a3_sq3 + a3_sq3\n        val b1_sq4 = b1_sq3 + b1_sq3\n        val b2_sq4 = b2_sq3 + b2_sq3\n        val b3_sq4 = b3_sq3 + b3_sq3\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpgp_2pgg1.scala:54:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp_2pgg1.scala:55:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + 1\n        val b2 = b1 + 1\n        val c2 = c1 + 1\n        val a3 = a1 + 2\n        val b3 = b1 + 2\n        val c3 = c1 + 2\n        val a4 = a2 + 1\n        val b4 = b2 + 1\n        val c4 = c2 + 1\n        val a5 = a2 + 2\n        val b5 = b2 + 2\n        val c5 = c2 + 2\n        val a6 = a3 + 1\n        val b6 = b3 + 1\n        val c6 = c3 + 1\n        val a7 = a3 + 1\n        val b7 = b3 + 1\n        val c7 = c3 + 1\n        val a8 = a4 + 2\n        val b8 = b4 + 2\n        val c8 = c4 + 2\n        val a9 = a4 + 3\n        val b9 = b4 + 3\n        val c9 = c4 + 3\n        val a10 = a5 + 1\n        val b10 = b5 + 1\n        val c10 = c5 + 1\n        val a11 = a5 + 2\n        val b11 = b5 + 2\n        val c11 = c5 + 2\n        val a12 = a6 + 1\n        val b12 = b6 + 1\n        val c12 = c6 + 1\n        val a13 = a6 + 2\n        val b13 = b6 + 2\n        val c13 = c6 + 2\n        val a14 = a7 + 1\n        val b14 = b7 + 1\n        val c14 = c7 + 1\n        val a15 = a7 + 2\n        val b15 = b7 + 2\n        val c15 = c7 + 2\n        val a16 = a8 + 1\n        val b16 = b8 + 1\n        val c16 = c8 + 1\n        val a17 = a8 + 2\n        val b17 = b8 + 2\n        val c17 = c8 + 2\n        val a18 = a9 + 1\n        val b18 = b9 + 1\n        val c18 = c9 + 1\n        val a19 = a9 + 2\n        val b19 = b9 + 2\n        val c19 = c9 + 2\n        val a20 = a10 + 1\n        val b20 = b10 + 1\n        val c20 = c10 + 1\n        val a21 = a10 + 2\n        val b21 = b10 + 2\n        val c21 = c10 + 2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9u12nj2.scala:75:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val ad = math.pow(a, 2)\n        ab + ac + ad == 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplaydjen3.scala:18)\n\tat Problem.main(tmplaydjen3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc > ab && abc > bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpelljgbiy.scala:20)\n\tat Problem.main(tmpelljgbiy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = ab + bc\n        val bcd = bc + cd\n        val abcd = abc + bcd\n        val acbd = ac + bd\n        val bcda = bcd + ad\n        val abcda = abcd + acbd\n        val acdbd = acbd + bd\n        val bcdaa = bcda + ad\n        val abcdaa = abcda + acdbd\n        val acdbda = acdbd + ad\n        val bcdaaa = bcdaa + ad\n        val abcdaaa = abcdaa + acdbda\n        val acdbdaa = acdbdaa + ad\n        val bcdaaaa = bcdaaaa + ad\n        val abcdaaaa = abcdaaaa + acdbdaa\n        val acdbdaaa = acdbdaaaa + ad\n        val bcdaaaaa = bcdaaaaa + ad\n        val abcdaaaaa = abcdaaaaa + acdbdaaa\n        val acdbdaaaa = acdbdaaaaa + ad\n        val bcdaaaaaa = bcdaaaaaa + ad\n        val abcdaaaaaa = abcdaaaaaa + acdbdaaaa\n        val acdbdaaaaa = acdbdaaaaaa + ad\n        val bcdaaaaaaa = bcdaaaaaaa + ad\n        val abcdaaaaaaa = abcdaaaaaaa + acdbdaaaaa\n        val acdbdaaaaaa = acdbdaaaaaaa + ad\n        val bcdaaaaaaaa = bcdaaaaaaaa + ad\n        val abcdaaaaaaaa = abcdaaaaaaaa + acdbdaaaaaa\n        val acdbdaaaaaaa = acdbdaaaaaaaa + ad\n        val bcdaaaaaaaaa = bcdaaaaaaaaa + ad\n        val abcdaaaaaaaaa = abcdaaaaaaaaa + acdbdaaaaaaa\n        val acdbdaaaaaaaa = acdbdaaaaaaaaa + ad\n        val bcdaaaaaaaaaa = bcdaaaaaaaaaa + ad\n        val abcdaaaaaaaaaa = abcdaaaaaaaaaa + acdbdaaaaaaaa\n        val acdbdaaaaaaaa = acdbdaaaaaaaaaa + ad\n        val bcdaaaaaaaaaaa = bcdaaaaaaaaaaa + ad\n        val abcdaaaaaaaaaaa = abcdaaaaaaaaaaa + acdbdaaaaaaaa\n\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpudbpybka.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36macdbdaaaaaaaa\u001b[0m = acdbdaaaaaaaaaa + ad\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0macdbdaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35macdbdaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudbpybka.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36macbd\u001b[0m = ac + bd\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: ac\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudbpybka.scala:19:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcda\u001b[0m = bcd + ad\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: ad\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpudbpybka.scala:27:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36macdbdaa\u001b[0m = acdbdaa + ad\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35macdbdaa\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpudbpybka.scala:28:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdaaaa\u001b[0m = bcdaaaa + ad\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mbcdaaaa\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpudbpybka.scala:29:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[3",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val ad = math.pow(a, 2)\n        ab == ac && ab == ad && ac == ad || ab == ad && ac == ab && ad == ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq78ab208.scala:18)\n\tat Problem.main(tmpq78ab208.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794260
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1 - b1)\n        val b2 = math.abs(b1 - c1)\n        val c2 = math.abs(c1 - a1)\n        (a1 + b1 + c1) * (a2 + b2 + c2) < 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyigyb0r3.scala:21)\n\tat Problem.main(tmpyigyb0r3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + 1\n        val b2 = b1 + 1\n        val c2 = c1 + 1\n        val a3 = a2 + 1\n        val b3 = b2 + 1\n        val c3 = c2 + 1\n        val a4 = a3 + 1\n        val b4 = b4 + 1\n        val c4 = c4 + 1\n        val a5 = a4 + 1\n        val b5 = b5 + 1\n        val c5 = c5 + 1\n        val a6 = a6 + 1\n        val b6 = b6 + 1\n        val c6 = c6 + 1\n        val a7 = a7 + 1\n        val b7 = b7 + 1\n        val c7 = c7 + 1\n        val a8 = a8 + 1\n        val b8 = b8 + 1\n        val c8 = c8 + 1\n        val a9 = a9 + 1\n        val b9 = b9 + 1\n        val c9 = c9 + 1\n        val a10 = a10 + 1\n        val b10 = b10 + 1\n        val c10 = c10 + 1\n        val a11 = a11 + 1\n        val b11 = b11 + 1\n        val c11 = c11 + 1\n        val a12 = a12 + 1\n        val b12 = b12 + 1\n        val c12 = c12 + 1\n        val a13 = a13 + 1\n        val b13 = b13 + 1\n        val c13 = c13 + 1\n        val a14 = a14 + 1\n        val b14 = b14 + 1\n        val c14 = c14 + 1\n        val a15 = a15 + 1\n        val b15 = b15 + 1\n        val c15 = c15 + 1\n        val a16 = a16 + 1\n        val b16 = b16 + 1\n        val c16 = c16 + 1\n        val a17 = a17 + 1\n        val b17 = b17 + 1\n        val c17 = c17 + 1\n        val a18 = a18 + 1\n        val b18 = b18 + 1\n        val c18 = c18 + 1\n        val a19 = a19 + 1\n        val b19 = b19 + 1\n        val c19 = c19 + 1\n        val a20 = a20 + 1\n        val b20 = b20 + 1\n        val c20 = c20 + 1\n        val a21 = a21 + 1\n        val b21 = b21 + 1\n        val c21 = c21 + 1\n        val a22 = a22 + 1\n        val b22 = b22 + 1\n        val c22 = c22 + 1\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpwic8y6w4.scala:78:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwic8y6w4.scala:22:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb4\u001b[0m = b4 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwic8y6w4.scala:23:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc4\u001b[0m = c4 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwic8y6w4.scala:25:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb5\u001b[0m = b5 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwic8y6w4.scala:26:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc5\u001b[0m = c5 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwic8y6w4.scala:27:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma6\u001b[0m = a6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35ma6\u001b[0m",
      "stdout": "",
      "timestamp": 1659794260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bcbc = math.pow(bc, c)\n        val cbcd = math.pow(cb, c)\n        val abcdb = math.pow(abc, b)\n        val bcbcd = math.pow(bc, c)\n        val cbcdb = math.pow(cb, c)\n        val abcdbc = math.pow(abc, b)\n        val bcbcdb = math.pow(bc, c)\n        val cbcdbc = math.pow(cb, c)\n        val abcdbbc = math.pow(abc, b)\n        val bcbcdbc = math.pow(bc, c)\n        val cbcdbbc = math.pow(cb, c)\n        val abcdbbcd = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdc = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdcd = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdcd = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdcd = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdcd = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdcd = math.pow(abc, b)\n        val bcbcdbcd = math.pow(bc, c)\n        val cbcdbbcd = math.pow(cb, c)\n        val abcdbbcdcd = math.pow(ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3a8u4s_c.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3a8u4s_c.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcbcdbcd\u001b[0m = math.pow(bc, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcbcdbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcbcdbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3a8u4s_c.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcbcdbbcd\u001b[0m = math.pow(cb, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcbcdbbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcbcdbbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3a8u4s_c.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcbcdbcd\u001b[0m = math.pow(bc, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcbcdbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcbcdbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3a8u4s_c.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcbcdbbcd\u001b[0m = math.pow(cb, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcbcdbbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcbcdbbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3a8u4s_c.scala:42:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbbcdcd\u001b[0m = ma",
      "stdout": "",
      "timestamp": 1659794265
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = (a + b + c) / 2\n        val a2 = (b + c + a) / 2\n        val a3 = (c + a + b) / 2\n        val b1 = (a + c + b) / 2\n        val b2 = (c + b + a) / 2\n        val b3 = (b + a + c) / 2\n        val c1 = (a + b + c) / 2\n        val c2 = (b + c + a) / 2\n        val c3 = (c + a + b) / 2\n        val d1 = (a + c + b) / 2\n        val d2 = (c + b + a) / 2\n        val d3 = (b + a + c) / 2\n        val e1 = (a + b + c) / 2\n        val e2 = (b + c + a) / 2\n        val e3 = (c + a + b) / 2\n        val f1 = (a + c + b) / 2\n        val f2 = (c + b + a) / 2\n        val f3 = (b + a + c) / 2\n        val g1 = (a + b + c) / 2\n        val g2 = (b + c + a) / 2\n        val g3 = (c + a + b) / 2\n        val h1 = (a + c + b) / 2\n        val h2 = (c + b + a) / 2\n        val h3 = (b + a + c) / 2\n        val i1 = (a + b + c) / 2\n        val i2 = (b + c + a) / 2\n        val i3 = (c + a + b) / 2\n        val j1 = (a + c + b) / 2\n        val j2 = (c + b + a) / 2\n        val j3 = (b + a + c) / 2\n        val k1 = (a + b + c) / 2\n        val k2 = (b + c + a) / 2\n        val k3 = (c + a + b) / 2\n        val l1 = (a + c + b) / 2\n        val l2 = (c + b + a) / 2\n        val l3 = (b + a + c) / 2\n        val m1 = (a + b + c) / 2\n        val m2 = (b + c + a) / 2\n        val m3 = (c + a + b) / 2\n        val n1 = (a + c + b) / 2\n        val n2 = (b + c + a) / 2\n        val n3 = (c + a + b) / 2\n        val o1 = (a + b + c) / 2\n        val o2 = (b + c + a) / 2\n        val o3 = (c + a + b) / 2\n        val p1 = (a + c + b) / 2\n        val p2 = (c + b + a) / 2\n        val p3 = (b + a + c) / 2\n        val q1 = (a + b + c) / 2\n        val q2 = (b + c + a) / 2\n        val q3 = (c + a + b) / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplbox39tn.scala:64:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659794265
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2) || (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0jmikhs.scala:22)\n\tat Problem.main(tmpi0jmikhs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794266
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(a-b)+math.abs(c-a)+math.abs(c-b)\n        abc < ab*ac && abc < bc*ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj3w2_y35.scala:19)\n\tat Problem.main(tmpj3w2_y35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794267
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(bc, 2) + math.pow(cd, 2)\n        val acd = math.pow(a, 2) + math.pow(c, 2)\n        val bcd = math.pow(b, 2) + math.pow(c, 2)\n        val abcd = math.pow(abc, 2) + math.pow(bcd, 2) + math.pow(acd, 2)\n        abc / abcd > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmps91d1h1o.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmps91d1h1o.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmps91d1h1o.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794264
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && bc == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2_y6f8tt.scala:18)\n\tat Problem.main(tmp2_y6f8tt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b1 * c2) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b2 * c1) > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj_ufuks4.scala:21)\n\tat Problem.main(tmpj_ufuks4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(a-c)\n        val bcd = math.abs(b-c)\n        ab == abc && ac == bcd && b == c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0gf8rxr0.scala:20)\n\tat Problem.main(tmp0gf8rxr0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val d = math.min(a,b,c)\n        val e = math.max(a,b,c)\n        val f = math.min(a,c,b)\n        val g = math.max(a,c,b)\n        val h = math.min(b,c,a)\n        val i = math.max(b,c,a)\n        val j = math.min(c,a,b)\n        val k = math.max(c,a,b)\n        val l = math.min(c,b,a)\n        val m = math.max(c,b,a)\n        val n = math.min(a,c,b)\n        val o = math.max(a,c,b)\n        val p = math.min(b,c,a)\n        val q = math.max(b,c,a)\n        val r = math.min(c,a,b)\n        val s = math.max(c,a,b)\n        val t = math.min(a,b,c)\n        val u = math.max(a,b,c)\n        val v = math.min(b,c,a)\n        val w = math.max(b,c,a)\n        val x = math.min(c,a,b)\n        val y = math.max(c,a,b)\n        val z = math.min(c,b,a)\n        val A = math.min(a,c,b)\n        val B = math.max(a,c,b)\n        val C = math.min(b,c,a)\n        val D = math.max(b,c,a)\n        val E = math.min(c,a,b)\n        val F = math.max(c,a,b)\n        val G = math.min(c,b,a)\n        val H = math.max(c,b,a)\n        val I = math.min(a,b,c)\n        val J = math.max(a,b,c)\n        val K = math.min(b,c,a)\n        val L = math.max(b,c,a)\n        val M = math.min(c,a,b)\n        val N = math.max(c,a,b)\n        val O = math.min(c,b,a)\n        val P = math.max(c,b,a)\n        val Q = math.min(a,b,c)\n        val R = math.max(a,b,c)\n        val S = math.min(b,c,a)\n        val T = math.max(b,c,a)\n        val U = math.min(c,a,b)\n        val V = math.max(c,a,b)\n        val W = math.min(c,b,a)\n        val X = math.min(c,a,b)\n        val Y = math.max(c,a,b)\n        val Z = math.min(c,b,a)\n\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj4shwkqk.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj4shwkqk.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj4shwkqk.scala:15:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4shwkqk.scala:66:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b * b) - (a * a))\n        val bc = math.sqrt((b * b) - (c * c))\n        val ac = math.sqrt((a * a) - (c * c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdoxgdvka.scala:18)\n\tat Problem.main(tmpdoxgdvka.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + c2 + a2) - (a1 + b1 + c1) * (c2 + a2 + b2) - (a2 + b2 + c2) * (a1 + b1 + c1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp439y3mms.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp439y3mms.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1) * (b2 + c2 + a2) - (a1 + b1 + c1) * (c2 + a2 + b2) - (a2 + b2 + c2) * (a1 + b1 + c1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a2 + b2 + c2) * (c1 + a1 + b1) - (a2 + b2 + c2) * (c1 + b1 + a1) - (a2 + b2 + c2) * (a1 + c1 + b1) - (a2 + b2 + c2) * (b1 + c1 + a1) - (a\n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1 == a2) || (a1 + b1 + c1 == b2) || (a1 + b1 + c1 == c2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdthfmn0y.scala:21)\n\tat Problem.main(tmpdthfmn0y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c2 && c1 == a2) || (a1 == b2 && b1 == c1 && c1 == a2) || (a1 == b2 && b1 == c2 && c1 == a2) || (a1 == c2 && b1 == c1 && c1 == a2) || (a1 == c2 && b1 == c2 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1uaq511s.scala:21)\n\tat Problem.main(tmp1uaq511s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.pow(a1, 2)\n        val b2 = math.pow(b1, 2)\n        val c2 = math.pow(c1, 2)\n        val a3 = math.pow(a2, 2)\n        val b3 = math.pow(b2, 2)\n        val c3 = math.pow(c2, 2)\n        val a4 = math.pow(a3, 2)\n        val b4 = math.pow(b3, 2)\n        val c4 = math.pow(c3, 2)\n        val a5 = math.pow(a4, 2)\n        val b5 = math.pow(b4, 2)\n        val c5 = math.pow(c4, 2)\n        val a6 = math.pow(a5, 2)\n        val b6 = math.pow(b5, 2)\n        val c6 = math.pow(c5, 2)\n        val a7 = math.pow(a6, 2)\n        val b7 = math.pow(b6, 2)\n        val c7 = math.pow(c6, 2)\n        val a8 = math.pow(a7, 2)\n        val b8 = math.pow(b7, 2)\n        val c8 = math.pow(c7, 2)\n        val a9 = math.pow(a8, 2)\n        val b9 = math.pow(b8, 2)\n        val c9 = math.pow(c8, 2)\n        val a10 = math.pow(a9, 2)\n        val b10 = math.pow(b9, 2)\n        val c10 = math.pow(c9, 2)\n        val a11 = math.pow(a10, 2)\n        val b11 = math.pow(b10, 2)\n        val c11 = math.pow(c10, 2)\n        val a12 = math.pow(a11, 2)\n        val b12 = math.pow(b11, 2)\n        val c12 = math.pow(c11, 2)\n        val a13 = math.pow(a12, 2)\n        val b13 = math.pow(b12, 2)\n        val c13 = math.pow(c12, 2)\n        val a14 = math.pow(a13, 2)\n        val b14 = math.pow(b13, 2)\n        val c14 = math.pow(c13, 2)\n        val a15 = math.pow(a14, 2)\n        val b15 = math.pow(b14, 2)\n        val c15 = math.pow(c14, 2)\n        val a16 = math.pow(a15, 2)\n        val b16 = math.pow(b15, 2)\n        val c16 = math.pow(c15, 2)\n        val a17 = math.pow(a16, 2)\n        val b17 = math.pow(b16, 2)\n        val c17\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpej4lsi9f.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpej4lsi9f.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1 + b1 + c1)\n        val b2 = math.abs(b1 + c1)\n        val c2 = math.abs(a1 + b1)\n        val a3 = math.abs(a2 + b2 + c2)\n        val b3 = math.abs(b2 + c2)\n        val c3 = math.abs(a2 + b2)\n        val a4 = math.abs(a3 + b3 + c3)\n        val b4 = math.abs(b3 + c3)\n        val c4 = math.abs(a3 + b3)\n        val a5 = math.abs(a4 + b4 + c4)\n        val b5 = math.abs(b4 + c4)\n        val c5 = math.abs(a4 + b4)\n        val a6 = math.abs(a5 + b5 + c5)\n        val b6 = math.abs(b5 + c5)\n        val c6 = math.abs(a5 + b5)\n        val a7 = math.abs(a6 + b6 + c6)\n        val b7 = math.abs(b6 + c6)\n        val c7 = math.abs(a6 + b6)\n        val a8 = math.abs(a7 + b7 + c7)\n        val b8 = math.abs(b7 + c7)\n        val c8 = math.abs(a7 + b7)\n        val a9 = math.abs(a8 + b8 + c8)\n        val b9 = math.abs(b8 + c8)\n        val c9 = math.abs(a8 + b8)\n        val a10 = math.abs(a9 + b9 + c9)\n        val b10 = math.abs(b9 + c9)\n        val c10 = math.abs(a9 + b9)\n        val a11 = math.abs(a10 + b10 + c10)\n        val b11 = math.abs(b10 + c10)\n        val c11 = math.abs(a10 + b10)\n        val a12 = math.abs(a11 + b11 + c11)\n        val b12 = math.abs(b11 + c11)\n        val c12 = math.abs(a11 + b11)\n        val a13 = math.abs(a12 + b12 + c12)\n        val b13 = math.abs(b12 + c12)\n        val c13 = math.abs(a12 + b12)\n        val a14 = math.abs(a13 + b13 + c13)\n        val b14 = math.abs(b13 + c13)\n        val c14 = math.abs(a13 + b13)\n        val a15 = math.abs(a14 + b\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl9lv2_q4.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9lv2_q4.scala:55:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val acb = math.pow(a + c + b, 2)\n        val bcd = math.pow(b + c, 2)\n        val bcda = math.pow(bcd + acb, 0.5)\n        val abbc = math.pow(ab + bc + cd, 2)\n        val abbca = math.pow(ab + bc + cd, 3)\n        val abbcd = math.pow(ab + bc + cd, 4)\n        val abbcda = math.pow(ab + bc + cd, 5)\n        val abbcdaa = math.pow(ab + bc + cd, 6)\n        val abbcdaaa = math.pow(ab + bc + cd, 7)\n        val abbcdaaaa = math.pow(ab + bc + cd, 8)\n        val abbcdaaaaa = math.pow(ab + bc + cd, 9)\n        val abbcdaaaaaa = math.pow(ab + bc + cd, 10)\n        val abbcdaaaaaaa = math.pow(ab + bc + cd, 11)\n        val abbcdaaaaaaaa = math.pow(ab + bc + cd, 12)\n        val abbcdaaaaaaaaa = math.pow(ab + bc + cd, 13)\n        val abbcdaaaaaaaaa = math.pow(ab + bc + cd, 14)\n        val abbcdaaaaaaaaaa = math.pow(ab + bc + cd, 15)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 16)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 17)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 18)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 19)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 20)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 21)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 22)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 23)\n        val abbcdaaaaaaaaaa= math.pow(ab + bc + cd, 24)\n        val abbcdaaaaaaaaaa= math.pow(ab + \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp47ni568_.scala:42:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcdaaaaaaaaaa\u001b[0m= math.pow(ab + \n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp47ni568_.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcdaaaaaaaaa\u001b[0m = math.pow(ab + bc + cd, \u001b[31m14\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabbcdaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabbcdaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp47ni568_.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcdaaaaaaaaaa\u001b[0m= math.pow(ab + bc + cd, \u001b[31m16\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabbcdaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabbcdaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp47ni568_.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcdaaaaaaaaaa\u001b[0m= math.pow(ab + bc + cd, \u001b[31m17\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabbcdaaaaaaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabbcdaaaaaaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp47ni568_.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcdaaaaaaaaaa\u001b[0m= math.pow(ab + bc + cd,",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b + c + a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpowiv9_6z.scala:20)\n\tat Problem.main(tmpowiv9_6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(ab+ac+bc)\n        abc > a && abc > b\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3s22g61r.scala:19)\n\tat Problem.main(tmp3s22g61r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        (a1 + b1 + c1 == a2 + b2 + c2 && a1 + b1 + c1 == a3 + b3 + c3 && a1 + b1 + c1 == a4 + b4 + c4 && a2 + b2 + c2 == a3 + b3 + c3 && a2 + b2 + c2 == a4 + b4 + c4 && a3 + b3 + c3 == a4 + b4 + c4 && a3 + b3 + c3 == a5 + b5 + c5 && a4 + b4 + c4 == a5 + b5 + c5 && a4 + b4 + c4 == a6 + b6 + c6 && a5 + b5 + c5 == a6 + b6 + c6 && a5 + b5 + c5 == a7 + b7 + c7 && a6 + b6 + c6 == a7 + b7 + c7 && a6 + b6 + c6 == a8 + b8 + c8 && a7 + b7 + c7 == a8 + b8 + c8 && a7 + b7 + c7 == a9 + b9 + c9)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqp6c2bn7.scala:24:217 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        (a1 + b1 + c1 == a2 + b2 + c2 && a1 + b1 + c1 == a3 + b3 + c3 && a1 + b1 + c1 == a4 + b4 + c4 && a2 + b2 + c2 == a3 + b3 + c3 && a2 + b2 + c2 == a4 + b4 + c4 && a3 + b3 + c3 == a4 + b4 + c4 && a3 + b3 + c3 == a5 + b5 + c5 && a4 + b4 + c4 == a5 + b5 + c5 && a4 + b4 + c4 == a6 + b6 + c6 && a5 + b5 + c5 == a6 + b6 + c6 && a5 + b5 + c5 == a7 + b7 + c7 && a6 + b6 + c6 == a7 + b7 + c7 && a6 + b6 + c6 == a8 + b8 + c8 && a7 + b7 + c7 == a8 + b8 + c8 && a7 + b7 + c7 == a9 + b9 + c9)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                           Not found: a5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqp6c2bn7.scala:24:249 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        (a1 + b1 + c1 == a2 + b2 + c2 && a1 + b1 + c1 == a3 + b3 + c3 && a1 + b1 + c1 == a4 + b4 + c4 && a2 + b2 + c2 == a3 + b3 + c3 && a2 + b2 + c2 == a4 + b4 + c4 && a3 + b3 + c3 == a4 + b4 + c4 && a3 + b3 + c3 == a5 + b5 + c5 && a4 + b4 + c4 == a5 + b5 + c5 && a4 + b4 + c4 == a6 + b6 + c6 && a5 + b5 + c5 == a6 + b6 + c6 && a5 + b5 + c5 == a7 + b7 + c7 && a6 + b6 + c6 == a7 + b7 + c7 && a6 + b6 + c6 == a8 + b8 + c8 && a7 + b7 + c7 == a8 + b8 + c8 && a7 + b7 + c7 == a9 + b9 + c9)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                           Not found: a5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wi",
      "stdout": "",
      "timestamp": 1659794265
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(ab+ac+bc)\n        abc > ab*ac*bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr10fmuix.scala:20)\n\tat Problem.main(tmpr10fmuix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + 1\n        val b2 = b1 + 1\n        val c2 = c1 + 1\n        val a3 = a2 + 1\n        val b3 = b2 + 1\n        val c3 = c3 + 1\n        val a4 = a3 + 1\n        val b4 = b4 + 1\n        val c4 = c4 + 1\n        val a5 = a4 + 1\n        val b5 = b5 + 1\n        val c5 = c5 + 1\n        val a6 = a6 + 1\n        val b6 = b6 + 1\n        val c6 = c6 + 1\n        val a7 = a7 + 1\n        val b7 = b7 + 1\n        val c7 = c7 + 1\n        val a8 = a8 + 1\n        val b8 = b8 + 1\n        val c8 = c8 + 1\n        val a9 = a9 + 1\n        val b9 = b9 + 1\n        val c9 = c9 + 1\n        val a10 = a10 + 1\n        val b10 = b10 + 1\n        val c10 = c10 + 1\n        val a11 = a11 + 1\n        val b11 = b11 + 1\n        val c11 = c11 + 1\n        val a12 = a12 + 1\n        val b12 = b12 + 1\n        val c12 = c12 + 1\n        val a13 = a13 + 1\n        val b13 = b13 + 1\n        val c13 = c13 + 1\n        val a14 = a14 + 1\n        val b14 = b14 + 1\n        val c14 = c14 + 1\n        val a15 = a15 + 1\n        val b15 = b15 + 1\n        val c15 = c15 + 1\n        val a16 = a16 + 1\n        val b16 = b16 + 1\n        val c16 = c16 + 1\n        val a17 = a17 + 1\n        val b17 = b17 + 1\n        val c17 = c17 + 1\n        val a18 = a18 + 1\n        val b18 = b18 + 1\n        val c18 = c18 + 1\n        val a19 = a19 + 1\n        val b19 = b19 + 1\n        val c19 = c19 + 1\n        val a20 = a20 + 1\n        val b20 = b20 + 1\n        val c20 = c20 + 1\n        val a21 = a21 + 1\n        val b21 = b21 + 1\n        val c21 = c21 + 1\n        val a22 = a22 + 1\n        val b22 = b22 + 1\n        val c22 = c22 + 1\n        val a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsvt02kbd.scala:79:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsvt02kbd.scala:12:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma1\u001b[0m = a / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue / is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsvt02kbd.scala:20:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc3\u001b[0m = c3 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc3\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsvt02kbd.scala:22:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb4\u001b[0m = b4 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsvt02kbd.scala:23:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc4\u001b[0m = c4 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(a-b)+math.abs(c-a)+math.abs(c-b)\n        abc < ab*ac*bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj9jvhbgy.scala:19)\n\tat Problem.main(tmpj9jvhbgy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794269
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc > math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2tt41knr.scala:19)\n\tat Problem.main(tmp2tt41knr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794269
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && bc == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2_y6f8tt.scala:18)\n\tat Problem.main(tmp2_y6f8tt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = (a + b) / 2\n        val a2 = (b + c) / 2\n        val a3 = (a2 + c) / 2\n        val b1 = (a + c) / 2\n        val b2 = (b + a) / 2\n        val b3 = (b2 + a) / 2\n        val c1 = (a + b) / 2\n        val c2 = (b + a) / 2\n        val c3 = (b + c) / 2\n        val d1 = (a + b) / 2\n        val d2 = (b + a) / 2\n        val d3 = (b + c) / 2\n        val e1 = (a + c) / 2\n        val e2 = (b + c) / 2\n        val e3 = (b + a) / 2\n        val f1 = (a + c) / 2\n        val f2 = (b + c) / 2\n        val f3 = (b + a) / 2\n        val g1 = (a + b) / 2\n        val g2 = (b + a) / 2\n        val g3 = (b + c) / 2\n        val h1 = (a + c) / 2\n        val h2 = (b + c) / 2\n        val h3 = (b + a) / 2\n        val i1 = (a + b) / 2\n        val i2 = (b + a) / 2\n        val i3 = (b + c) / 2\n        val j1 = (a + c) / 2\n        val j2 = (b + c) / 2\n        val j3 = (b + a) / 2\n        val k1 = (a + b) / 2\n        val k2 = (b + a) / 2\n        val k3 = (b + c) / 2\n        val l1 = (a + c) / 2\n        val l2 = (b + c) / 2\n        val l3 = (b + a) / 2\n        val m1 = (a + b) / 2\n        val m2 = (b + a) / 2\n        val m3 = (b + c) / 2\n        val n1 = (a + c) / 2\n        val n2 = (b + c) / 2\n        val n3 = (b + a) / 2\n        val o1 = (a + b) / 2\n        val o2 = (b + a) / 2\n        val o3 = (b + c) / 2\n        val p1 = (a + c) / 2\n        val p2 = (b + c) / 2\n        val p3 = (b + a) / 2\n        val q1 = (a + b) / 2\n        val q2 = (b + a) / 2\n        val q3 = (b + c) / 2\n        val r1 = (a + c) / 2\n        val r2 = (b + c) / 2\n        val r3 = (b + a) / 2\n        val s1 = (a + b) / 2\n        val s2 = (b + a) / 2\n        val s3 = (b + c) / 2\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk3k8zty0.scala:70:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk3k8zty0.scala:71:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.abs(a * 0.5)\n        val b1 = math.abs(b * 0.5)\n        val c1 = math.abs(c * 0.5)\n        val a2 = math.abs(a * 0.5)\n        val b2 = math.abs(b * 0.5)\n        val c2 = math.abs(c * 0.5)\n        val a3 = math.abs(a * 0.5)\n        val b3 = math.abs(b * 0.5)\n        val c3 = math.abs(c * 0.5)\n        val a4 = math.abs(a * 0.5)\n        val b4 = math.abs(b * 0.5)\n        val c4 = math.abs(c * 0.5)\n        val a5 = math.abs(a * 0.5)\n        val b5 = math.abs(b * 0.5)\n        val c5 = math.abs(c * 0.5)\n        val a6 = math.abs(a * 0.5)\n        val b6 = math.abs(b * 0.5)\n        val c6 = math.abs(c * 0.5)\n        val a7 = math.abs(a * 0.5)\n        val b7 = math.abs(b * 0.5)\n        val c7 = math.abs(c * 0.5)\n        val a8 = math.abs(a * 0.5)\n        val b8 = math.abs(b * 0.5)\n        val c8 = math.abs(c * 0.5)\n        val a9 = math.abs(a * 0.5)\n        val b9 = math.abs(b * 0.5)\n        val c9 = math.abs(c * 0.5)\n        val a10 = math.abs(a * 0.5)\n        val b10 = math.abs(b * 0.5)\n        val c10 = math.abs(c * 0.5)\n        val a11 = math.abs(a * 0.5)\n        val b11 = math.abs(b * 0.5)\n        val c11 = math.abs(c * 0.5)\n        val a12 = math.abs(a * 0.5)\n        val b12 = math.abs(b * 0.5)\n        val c12 = math.abs(c * 0.5)\n        val a13 = math.abs(a * 0.5)\n        val b13 = math.abs(b * 0.5)\n        val c13 = math.abs(c * 0.5)\n        val a14 = math.abs(a * 0.5)\n        val b14 = math.abs(b * 0.5)\n        val c14 = math.abs(c * 0.5)\n        val a15 = math.abs(a * 0.5)\n        val b15 = math.abs(b * 0.5)\n        val c15 = math.abs(c * 0.5)\n        val a16 = math.abs(a * 0.5)\n        val b16 = math.abs(b * 0.5)\n        val c16 = math.abs(c * 0.5)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt50hf4gi.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt50hf4gi.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt50hf4gi.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt50hf4gi.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659794269
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(a-b)+math.abs(c-a)+math.abs(c-b)\n        ab == abc && ac == bc && ab != 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqgfnkkh_.scala:19)\n\tat Problem.main(tmpqgfnkkh_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val ac = math.sqrt((c*c) - (a*a))\n        val bc = math.sqrt((b*b) - (c*c))\n        val abc = math.sqrt((abc*abc) - (ab*ab))\n        abc > ab && abc > ac && abc > bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp501wm3a_.scala:15:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabc\u001b[0m = math.sqrt((abc*abc) - (ab*ab))\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35mabc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659794267
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgyt_gtt9.scala:18)\n\tat Problem.main(tmpgyt_gtt9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4\n        (a1 + b1 + c1 == a2 + b2 + c2 && a3 + b3 + c3 == a4 + b4 + c4 && a1 + b1 + c1 == a2 + b2 + c2 && a3 + b3 + c3 == a4 + b4 + c4)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuz5tu94i.scala:22:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb4\u001b[0m = b4 + c3\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuz5tu94i.scala:23:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc4\u001b[0m = c4 + a4\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794267
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpajk0j1yo.scala:18)\n\tat Problem.main(tmpajk0j1yo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        ab > ac && ab > bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprfrhx951.scala:18)\n\tat Problem.main(tmprfrhx951.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794274
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, bc)\n        val bcd = math.pow(bc, cd)\n        val abcd = math.pow(abc, bcd) \n        abc / bcd > 1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8goss4er.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8goss4er.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8goss4er.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794234
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bcbc = math.pow(bc, c)\n        val cbcd = math.pow(cb, c)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.pow(cbc, d)\n        val abbcd = math.pow(abbc, d)\n        val bcbcd = math.pow(bcbc, d)\n        val cbcd = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4mwflne1.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4mwflne1.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcbcd\u001b[0m = math.pow(cbc, d)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4mwflne1.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcd\u001b[0m = math.pow(abbc, d)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4mwflne1.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcbcd\u001b[0m = math.pow(bcbc, d)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4mwflne1.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcbcd\u001b[0m = math.pow(cbc, d)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4mwflne1.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabbcd\u001b[0m = math.pow(abbc, d)\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1659794275
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && bc == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2_y6f8tt.scala:18)\n\tat Problem.main(tmp2_y6f8tt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0cjyiiv.scala:21)\n\tat Problem.main(tmpr0cjyiiv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc > ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzx8vwco2.scala:20)\n\tat Problem.main(tmpzx8vwco2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794275
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc > bc && abc > ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz6ojfwxd.scala:20)\n\tat Problem.main(tmpz6ojfwxd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794275
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((c*c) - (a*a))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphxp1j4b_.scala:18)\n\tat Problem.main(tmphxp1j4b_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794245
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0cjyiiv.scala:21)\n\tat Problem.main(tmpr0cjyiiv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(bc, 2) + math.pow(cd, 2)\n        abc > Math.pow(a, 3) * Math.pow(b, 3) * Math.pow(c, 3)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpik_30xk3.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpik_30xk3.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpik_30xk3.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794272
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiyud327q.scala:21)\n\tat Problem.main(tmpiyud327q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val bc = math.pow(b, 2)\n        val cb = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(ac, 2)\n        val bcb = math.pow(bc, 2) + math.pow(cb, 2)\n        val abcb = math.pow(abc, 2) + math.pow(bcb, 2)\n        abcb == math.pow(a, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0sqafwrb.scala:22)\n\tat Problem.main(tmp0sqafwrb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val bc = math.pow(b, 2)\n        val cb = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(ac, 2)\n        val bcb = math.pow(bc, 2) + math.pow(cb, 2)\n        val abcb = math.pow(abc, 2) + math.pow(bcb, 2)\n        abc < bcb && abc < abcb && abc > ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpicerququ.scala:22)\n\tat Problem.main(tmpicerququ.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc < bc // if abc < bc then abc is a right-angled triangle\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppoio8vax.scala:19)\n\tat Problem.main(tmppoio8vax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794276
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(ab+ac+bc)\n        abc > a && abc > b && abc > c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzy7pgvq3.scala:19)\n\tat Problem.main(tmpzy7pgvq3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc < ab || (ab == abc && bc < b) || (ab == abc && bc == b)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiw9qdenw.scala:19)\n\tat Problem.main(tmpiw9qdenw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc > bcd // if abc > bcd then abc is a right angle triangle\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo4s975p0.scala:21)\n\tat Problem.main(tmpo4s975p0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(bc, 2) + math.pow(cd, 2)\n        abc > math.pow(a, 3) * math.pow(b, 3) * math.pow(c, 3)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt8bkyl8b.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt8bkyl8b.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt8bkyl8b.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794274
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) < 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4yiry7es.scala:21)\n\tat Problem.main(tmp4yiry7es.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfvpium75.scala:20)\n\tat Problem.main(tmpfvpium75.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfvpium75.scala:20)\n\tat Problem.main(tmpfvpium75.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794248
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val ad = math.pow(a, 2)\n        ab + ac + ad == 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplaydjen3.scala:18)\n\tat Problem.main(tmplaydjen3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc < ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp79q1n6zq.scala:19)\n\tat Problem.main(tmp79q1n6zq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc > b * c && abc > a * c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp28_pcpoe.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp28_pcpoe.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp28_pcpoe.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794275
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.abs(a-b)\n        val a2 = math.abs(a-c)\n        val b1 = math.abs(b-c)\n        val a3 = math.abs(a-c)\n        val b2 = math.abs(b-c)\n        val c1 = math.abs(c-b)\n        val c2 = math.abs(c-a)\n        val a4 = math.abs(a-b)\n        val b3 = math.abs(b-a)\n        val c3 = math.abs(c-a)\n        val a5 = math.abs(a-c)\n        val b4 = math.abs(b-c)\n        val c4 = math.abs(c-b)\n        val a6 = math.abs(a-b)\n        val b5 = math.abs(b-a)\n        val c5 = math.abs(c-a)\n        val a7 = math.abs(a-c)\n        val b6 = math.abs(b-a)\n        val c6 = math.abs(c-b)\n        val a8 = math.abs(a-b)\n        val b7 = math.abs(b-c)\n        val c7 = math.abs(c-a)\n        val a9 = math.abs(a-c)\n        val b8 = math.abs(b-c)\n        val c8 = math.abs(c-b)\n        val a10 = math.abs(a-b)\n        val b10 = math.abs(b-a)\n        val c10 = math.abs(c-a)\n        val a11 = math.abs(a-c)\n        val b11 = math.abs(b-a)\n        val c11 = math.abs(c-b)\n        val a12 = math.abs(a-b)\n        val b12 = math.abs(b-c)\n        val c12 = math.abs(c-a)\n        val a13 = math.abs(a-c)\n        val b13 = math.abs(b-a)\n        val c13 = math.abs(c-b)\n        val a14 = math.abs(a-b)\n        val b14 = math.abs(b-c)\n        val c14 = math.abs(c-a)\n        val a15 = math.abs(a-c)\n        val b15 = math.abs(b-a)\n        val c15 = math.abs(c-b)\n        val a16 = math.abs(a-b)\n        val b16 = math.abs(b-c)\n        val c16 = math.abs(c-a)\n        val a17 = math.abs(a-c)\n        val b17 = math.abs(b-a)\n        val c17 = math.abs(c-b)\n        val a18 = math.abs(a-b)\n        val b18 = math.abs(b-c)\n        val c18 = math.abs(c-a)\n        val a19 = \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmprgjhwddt.scala:67:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma19\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprgjhwddt.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprgjhwddt.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprgjhwddt.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprgjhwddt.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bccd = math.pow(bc, c)\n        val bcda = math.pow(bc, a)\n        val cdaa = math.pow(cd, a)\n        val cdaab = math.pow(cd, ab)\n        val cdaabc = math.pow(cd, abc)\n        val cdaabcd = math.pow(cd, abcd)\n        val cdaabbc = math.pow(cd, abbc)\n        val cdaabbcd = math.pow(cd, abbcd)\n        val cdaabbcda = math.pow(cd, abbcda)\n        val cdaabbcdaa = math.pow(cd, abbcdaa)\n        val cdaabbcdaab = math.pow(cd, abbcdaab)\n        val cdaabbcdaabc = math.pow(cd, abbcdaabc)\n        val cdaabbcdaabcd = math.pow(cd, abbcdaabcd)\n        val cdaabbcdaabbc = math.pow(cd, abbcdaabbc)\n        val cdaabbcdaabbcd = math.pow(cd, abbcdaabbcd)\n        val cdaabbcdaabbcc = math.pow(cd, abbcdaabbcc)\n        val cdaabbcdaabbccd = math.pow(cd, abbcdaabbccd)\n        val cdaabbcdaabbccda = math.pow(cd, abbcdaabbccda)\n        val cdaabbcdaabbccdaa = math.pow(cd, abbcdaabbccdaa)\n        val cdaabbcdaabbccdaab = math.pow(cd, abbcdaabbccdaab)\n        val cdaabbcdaabbccdaabc = math.pow(cd, abbcdaabbccdaabc)\n        val cdaabbcdaabbccdaabcd = math.pow(cd, abbcdaabbccdaabcd)\n        val cdaabbcdaabbccda\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv_tsnrlz.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv_tsnrlz.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv_tsnrlz.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv_tsnrlz.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_tsnrlz.scala:29:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdaabbcd\u001b[0m = math.pow(cd, abbcd)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: abbcd\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_tsnrlz.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdaabbcda\u001b[0m = math.pow(cd, abbcda)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: abbcda\n\u001b[31m   |\u001b[0m\n\u001b[3",
      "stdout": "",
      "timestamp": 1659794278
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b1 * c2) - (a2 * b1 * c1) - (a1 * b2 * c1) - (a2 * b2 * c1) > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj_ufuks4.scala:21)\n\tat Problem.main(tmpj_ufuks4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val ac = math.pow(a, 2)\n        val bd = math.pow(b, 2)\n        val cb = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(bc, 2) + math.pow(cd, 2)\n        val bcd = math.pow(bc, 2) + math.pow(cd, 2)\n        val acd = math.pow(ac, 2) + math.pow(bd, 2) + math.pow(cb, 2)\n        val abcd = math.pow(abc, 2) + math.pow(bcd, 2) + math.pow(acd, 2)\n        abc / abcd > 1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphj3q6hrj.scala:25)\n\tat Problem.main(tmphj3q6hrj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val acd = math.pow(a + c + d, 0.5)\n        val bcd = math.pow(b + c + d, 0.5)\n        val abcd = math.pow(abc + acd + bcd, 0.5)\n        abc > 0 && acd > 0 && bcd > 0 && abcd > 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5gbaniqc.scala:16:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36macd\u001b[0m = math.pow(a + c + d, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5gbaniqc.scala:17:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcd\u001b[0m = math.pow(b + c + d, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794276
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        ab == ac && ab == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpajk0j1yo.scala:18)\n\tat Problem.main(tmpajk0j1yo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0cjyiiv.scala:21)\n\tat Problem.main(tmpr0cjyiiv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794255
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a * b - c * c)\n        val a2 = math.abs(a * c - b * b)\n        val a3 = math.abs(a * b + c * c)\n        (a1 + a2 + a3) == math.pow(a1, 2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnycy87hb.scala:18)\n\tat Problem.main(tmpnycy87hb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794278
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2se8xe4y.scala:20)\n\tat Problem.main(tmp2se8xe4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(a-b)\n        val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc = math.abs(a-b)+math.abs(c-a)+math.abs(c-b)\n        ab == abc && ac == bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpanlzofip.scala:19)\n\tat Problem.main(tmpanlzofip.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794278
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, bc)\n        val bcd = math.pow(bc, cd)\n        val abcd = math.pow(abc, bcd) \n        val abcc = math.pow(abc, c)\n        val bcda = math.pow(bc, d)\n        val cdaa = math.pow(c, d)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val bdcd = math.pow(bc, dc)\n        val cdab = math.pow(cd, ab)\n        val abdc = math.pow(ab, bd)\n        val b\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpidc8tkph.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidc8tkph.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabdc\u001b[0m = math.pow(ab, bd)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabdc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabdc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidc8tkph.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbdcd\u001b[0m = math.pow(bc, dc)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbdcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbdcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidc8tkph.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdab\u001b[0m = math.pow(cd, ab)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcdab is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcdab\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidc8tkph.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabdc\u001b[0m = math.pow(ab, bd)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabdc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabdc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidc8tkph.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbdcd\u001b[0m = math.pow(bc, dc)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659794278
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b1 * c1) - (a2 * b2 * c2) - (a1 * b2 * c1) - (a2 * b1 * c2) - (a1 * c2 * b1) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b1) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b1) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfw2u2ok5.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw2u2ok5.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 * b1 * c1) - (a2 * b2 * c2) - (a1 * b2 * c1) - (a2 * b1 * c2) - (a1 * c2 * b1) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c1) - (a2 * b1 * c1) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b2) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b1) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a2 * c2 * b1) - (a1 * b2 * c2) - (a2 * b1 * c2) - (a1 * c2 * b2) - (a2 * c2 * b1) - (a1 * c2 * b2) - (a2 * c1 * b1) - (a\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659794279
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b*b) - (a*a))\n        val bc = math.sqrt((c*c) - (b*b))\n        val ac = math.sqrt((a*a) - (c*c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6z4oo35.scala:18)\n\tat Problem.main(tmpw6z4oo35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794240
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.sqrt((b * b) - (a * a))\n        val bc = math.sqrt((b * b) - (c * c))\n        val ac = math.sqrt((a * a) - (c * c))\n        ab == bc && ab == ac\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdoxgdvka.scala:18)\n\tat Problem.main(tmpdoxgdvka.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a * Math.cos(math.pi/180))\n        val b1 = math.abs(b * Math.cos(math.pi/180))\n        val c1 = math.abs(c * Math.cos(math.pi/180))\n        val a2 = math.abs(a * Math.sin(math.pi/180))\n        val b2 = math.abs(b * Math.sin(math.pi/180))\n        val c2 = math.abs(c * Math.sin(math.pi/180))\n        (a1 + b1 + c1) * (a2 + b2 + c2) <= 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6dl11zu9.scala:12:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma1\u001b[0m = math.abs(a * Math.cos(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6dl11zu9.scala:13:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb1\u001b[0m = math.abs(b * Math.cos(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6dl11zu9.scala:14:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc1\u001b[0m = math.abs(c * Math.cos(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6dl11zu9.scala:15:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma2\u001b[0m = math.abs(a * Math.sin(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6dl11zu9.scala:16:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb2\u001b[0m = math.abs(b * Math.sin(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value pi is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6dl11zu9.scala:17:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc2\u001b[0m = math.abs(c * Math.sin(math.pi/\u001b[31m180\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value",
      "stdout": "",
      "timestamp": 1659794282
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy_zo1wmp.scala:21)\n\tat Problem.main(tmpy_zo1wmp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794258
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        val abd = math.pow(ab + bc, 0.5)\n        val bcd = math.pow(b + cd, 0.5)\n        val cda = math.pow(cd + ab, 0.5)\n        val abda = math.pow(ab + cd, 0.5)\n        val bcda = math.pow(b + cd, 0.5)\n        val cdba = math.pow(cd + ab, 0.5)\n        val abdba = math.pow(ab + cd, 0.5)\n        val bcdba = math.pow(b + cd, 0.5)\n        val cdba = math.pow(cd + ab, 0.5)\n        val abdba = math.pow(ab + cd, 0.5)\n        val bcdbba = math.pow(b + cd, 0.5)\n        val cdbaba = math.pow(cd + ab, 0.5)\n        val abdaba = math.pow(ab + cd, 0.5)\n        val bcdbaba = math.pow(b + cd, 0.5)\n        val cdbcaba = math.pow(cd + ab, 0.5)\n        val abdcaba = math.pow(ab + cd, 0.5)\n        val bcdbcaba = math.pow(b + cd, 0.5)\n        val cdbcba = math.pow(cd + ab, 0.5)\n        val abdcba = math.pow(ab + cd, 0.5)\n        val bcdbcba = math.pow(b + cd, 0.5)\n        val cdbcabba = math.pow(cd + ab, 0.5)\n        val abdcabba = math.pow(ab + cd, 0.5)\n        val bcdbcabba = math.pow(b + cd, 0.5)\n        val cdbcbb = math.pow(cd + ab, 0.5)\n        val abdcbb = math.pow(ab + cd, 0.5)\n        val bcdbcbb = math.pow(b + cd, 0.5)\n        val cdbcabbb = math.pow(cd + ab, 0.5)\n        val abdcabbb = math.pow(ab + cd, 0.5)\n        val bcdbcabbb = math.pow(b + cd, 0.5)\n        val cdbcbbc = math.pow(cd + ab, 0.5)\n        val abdcbbc = math.pow(ab + cd, 0.5)\n        val bcdbcbbc = math.pow(b + cd, 0.5)\n\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpal6356z6.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdba\u001b[0m = math.pow(cd + ab, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcdba is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcdba\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpal6356z6.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabdba\u001b[0m = math.pow(ab + cd, \u001b[31m0.5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabdba is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabdba\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpal6356z6.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpal6356z6.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpal6356z6.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error:",
      "stdout": "",
      "timestamp": 1659794281
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val ad = math.pow(a, 2)\n        math.abs(ab - ac - ad) < 0.0001\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1xf77d5v.scala:18)\n\tat Problem.main(tmp1xf77d5v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794282
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 + b1 + c1) * (a2 + b2 + c2) < 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4yiry7es.scala:21)\n\tat Problem.main(tmp4yiry7es.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a * b - c * c)\n        val a2 = math.abs(a * c - b * b)\n        val a3 = math.abs(a * b + c * c)\n        val a4 = math.abs(a * c + b * b)\n        (a1 + a2 + a3 + a4) == 0 \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpekkhh_mk.scala:19)\n\tat Problem.main(tmpekkhh_mk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, 2) + math.pow(bc, 2) + math.pow(cd, 2)\n        abc > Math.pow(a, 3) * Math.pow(b, 3) * Math.pow(c, 3)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpik_30xk3.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpik_30xk3.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpik_30xk3.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659794272
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.pow(a1, 2)\n        val b2 = math.pow(b1, 2)\n        val c2 = math.pow(c1, 2)\n        val a3 = math.pow(a2, 2)\n        val b3 = math.pow(b2, 2)\n        val c3 = math.pow(c2, 2)\n        val a4 = math.pow(a3, 2)\n        val b4 = math.pow(b3, 2)\n        val c4 = math.pow(c3, 2)\n        val a5 = math.pow(a4, 2)\n        val b5 = math.pow(b4, 2)\n        val c5 = math.pow(c4, 2)\n        val a6 = math.pow(a5, 2)\n        val b6 = math.pow(b5, 2)\n        val c6 = math.pow(c5, 2)\n        val a7 = math.pow(a6, 2)\n        val b7 = math.pow(b6, 2)\n        val c7 = math.pow(c6, 2)\n        val a8 = math.pow(a7, 2)\n        val b8 = math.pow(b7, 2)\n        val c8 = math.pow(c7, 2)\n        val a9 = math.pow(a8, 2)\n        val b9 = math.pow(b8, 2)\n        val c9 = math.pow(c8, 2)\n        val a10 = math.pow(a9, 2)\n        val b10 = math.pow(b9, 2)\n        val c10 = math.pow(c9, 2)\n        val a11 = math.pow(a10, 2)\n        val b11 = math.pow(b10, 2)\n        val c11 = math.pow(c10, 2)\n        val a12 = math.pow(a11, 2)\n        val b12 = math.pow(b11, 2)\n        val c12 = math.pow(c11, 2)\n        val a13 = math.pow(a12, 2)\n        val b13 = math.pow(b12, 2)\n        val c13 = math.pow(c12, 2)\n        val a14 = math.pow(a13, 2)\n        val b14 = math.pow(b13, 2)\n        val c14 = math.pow(c13, 2)\n        val a15 = math.pow(a14, 2)\n        val b15 = math.pow(b14, 2)\n        val c15 = math.pow(c14, 2)\n        val a16 = math.pow(a15, 2)\n        val b16 = math.pow(b15, 2)\n        val c16 = math.pow(c15, 2)\n        val a17 = math.pow(a16, 2)\n        val b17 = math.pow(b16, 2)\n        val c17\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpej4lsi9f.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpej4lsi9f.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b + c + a\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpowiv9_6z.scala:20)\n\tat Problem.main(tmpowiv9_6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bccd = math.pow(bc, c)\n        val bcda = math.pow(bc, a)\n        val cdaa = math.pow(cd, a)\n        val abcda = math.pow(abc, a)\n        val abbca = math.pow(ab, b)\n        val bccda = math.pow(bc, c)\n        val bcdaa = math.pow(bc, a)\n        val cdaaa = math.pow(cd, a)\n        val abcdaa = math.pow(abc, a)\n        val abbcaa = math.pow(ab, b)\n        val bccdaa = math.pow(bc, c)\n        val bcdaaa = math.pow(bc, a)\n        val cdaaaa = math.pow(cd, a)\n        val abcdaaa = math.pow(abc, a)\n        val abbcaaa = math.pow(ab, b)\n        val bccdaaa = math.pow(bc, c)\n        val bcdaaaa = math.pow(bc, a)\n        val cdaaaaa =  math.pow(cd, a)\n        val abcdaaaa = math.pow(abc, a)\n        val abbcaaaa = math.pow(ab, b)\n        val bccdaaaa = math.pow(bc, c)\n        val bcdaaaaa =  math.pow(bc, a)\n        val cdaaaaa = math.pow(cd, a)\n        val abcdaaaaa = math.pow(abc, a)\n        val abbcaaaaa = math.pow(ab, b)\n        val bccdaaaaa = math.pow(bc, c)\n        val bcdaaaaaa =  math.pow(bc, a)\n        val cdaaaaaa = math.pow(cd, a)\n        val abcdaaaaaa = math.pow(abc, a)\n        val abbcaaaaaa = math.pow(ab, b)\n        val bccdaaaaaa = math.pow(bc, c)\n        val bcdaaaaaaa =  math.pow(bc, a)\n        val cdaaaaaaa = math.pow(cd, a)\n        val abcdaaaaaaa = math.pow(abc, a)\n        val abb\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpztoyla9x.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpztoyla9x.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcdaaaaa\u001b[0m = math.pow(cd, a)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcdaaaaa is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcdaaaaa\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpztoyla9x.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpztoyla9x.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpztoyla9x.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpztoyla9x.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-e",
      "stdout": "",
      "timestamp": 1659794282
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b2 && b1 == c2 && c1 == a2) || (a2 == b1 && b2 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c1 == a2) || (a1 == b1 && b2 == c1 && c2 == a2) || (a1 == b2 && b2 == c2 && c2 == a2) || (a2 == b1 && b2 == c1 && c2 == a2) || (a2 == b2 && b2 == c2 && c2 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm_lf665.scala:21)\n\tat Problem.main(tmpsm_lf665.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Write your code here\n        val a1 = a / 2\n        val b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + 1\n        val b2 = b1 + 1\n        val c2 = c1 + 1\n        val a3 = a2 + 1\n        val b3 = b2 + 1\n        val c3 = c2 + 1\n        val a4 = a3 + 1\n        val b4 = b3 + 1\n        val c4 = c3 + 1\n        val a5 = a4 + 1\n        val b5 = b5 + 1\n        val c5 = c5 + 1\n        val a6 = a6 + 1\n        val b6 = b6 + 1\n        val c6 = c6 + 1\n        val a7 = a7 + 1\n        val b7 = b7 + 1\n        val c7 = c7 + 1\n        val a8 = a8 + 1\n        val b8 = b8 + 1\n        val c8 = c8 + 1\n        val a9 = a9 + 1\n        val b9 = b9 + 1\n        val c9 = c9 + 1\n        val a10 = a10 + 1\n        val b10 = b10 + 1\n        val c10 = c10 + 1\n        val a11 = a11 + 1\n        val b11 = b11 + 1\n        val c11 = c11 + 1\n        val a12 = a12 + 1\n        val b12 = b12 + 1\n        val c12 = c12 + 1\n        val a13 = a13 + 1\n        val b13 = b13 + 1\n        val c13 = c13 + 1\n        val a14 = a14 + 1\n        val b14 = b14 + 1\n        val c14 = c14 + 1\n        val a15 = a15 + 1\n        val b15 = b15 + 1\n        val c15 = c15 + 1\n        val a16 = a16 + 1\n        val b16 = b16 + 1\n        val c16 = c16 + 1\n        val a17 = a17 + 1\n        val b17 = b17 + 1\n        val c17 = c17 + 1\n        val a18 = a18 + 1\n        val b18 = b18 + 1\n        val c18 = c18 + 1\n        val a19 = a19 + 1\n        val b19 = b19 + 1\n        val c19 = c19 + 1\n        val a20 = a20 + 1\n        val b20 = b20 + 1\n        val c20 = c20 + 1\n        val a21 = 0\n        val b21 = 0\n        val c21 = 0\n        val a22 = a22 + 1\n        val b22 = b22 + 1\n        val c22 = c22 + 1\n        \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnqca3c37.scala:26:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb5\u001b[0m = b5 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnqca3c37.scala:27:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc5\u001b[0m = c5 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnqca3c37.scala:28:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma6\u001b[0m = a6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35ma6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnqca3c37.scala:29:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb6\u001b[0m = b6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mb6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnqca3c37.scala:30:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc6\u001b[0m = c6 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mc6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnqca3c37.scala:31:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma7\u001b[0m = a7 + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab, b)\n        val bcd = math.pow(bc, c)\n        val abcd = math.pow(abc, c)\n        val abbc = math.pow(ab, b)\n        val bccd = math.pow(bc, c)\n        val abcdb = math.pow(abc, b)\n        val bcdab = math.pow(bc, d)\n        val abcdbc = math.pow(abc, b)\n        val bcdac = math.pow(bc, c)\n        val abcdbd = math.pow(abc, b)\n        val bcdabc = math.pow(bc, c)\n        val abcdbbc = math.pow(abc, b)\n        val bcdabcd = math.pow(bc, c)\n        val abcdbbcd = math.pow(abc, b)\n        val bcdabcbc = math.pow(bc, c)\n        val abcdbbccd = math.pow(abc, b)\n        val bcdabcbcd = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val bcdabcbcd  = math.pow(bc, c)\n        val abcdbbccd  = math.pow(abc, b)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdcv3zqpj.scala:54:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcv3zqpj.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbbccd\u001b[0m  = math.pow(abc, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdbbccd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdbbccd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcv3zqpj.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdabcbcd\u001b[0m  = math.pow(bc, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdabcbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdabcbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcv3zqpj.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcdbbccd\u001b[0m  = math.pow(abc, b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcdbbccd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcdbbccd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcv3zqpj.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbcdabcbcd\u001b[0m  = math.pow(bc, c)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbcdabcbcd is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbcdabcbcd\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Na",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(b, 2)\n        val ac = math.pow(c, 2)\n        val ad = math.pow(a, 2)\n        val bc = math.pow(ab, 2)\n        val cd = math.pow(ac, 2)\n        val da = math.pow(ad, 2)\n        ab == bc && ac == cd && ad == da\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn_i3bar.scala:21)\n\tat Problem.main(tmpyn_i3bar.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1 - b1)\n        val b2 = math.abs(b1 - c1)\n        val c2 = math.abs(c1 - a1)\n        val a3 = math.abs(a2 - b2)\n        val b3 = math.abs(b2 - c2)\n        val c3 = math.abs(c2 - a2)\n        val a4 = math.abs(a3 - b3)\n        val b4 = math.abs(b3 - c3)\n        val c4 = math.abs(c3 - a3)\n        (a1 + b1 + c1 == a2 + b2 + c2 && a1 + b1 + c1 == a3 + b3 + c3 && a2 + b2 + c2 == a3 + b3 + c3 && a2 + b2 + c2 == a4 + b4 + c4 && a3 + b3 + c3 == a4 + b4 + c4 && a3 + b3 + c3 == a1 + b1 + c1) || (a1 + b1 + c1 == a2 + b2 + c2 && a1 + b1 + c1 == a3 + b3 + c3 && a2 + b2 + c2 == a3 + b3 + c3 && a2 + b2 + c2 == a4 + b4 + c4 && a3 + b3 + c3 == a4 + b4 + c4 && a3 + b3 + c3 == a1 + b1 + c1)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwvm9ff7k.scala:27)\n\tat Problem.main(tmpwvm9ff7k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        abc > bcd // if abc > bcd then a is right angle\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp65zmishd.scala:21)\n\tat Problem.main(tmp65zmishd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = ab + bc\n        val bcd = bc + cd\n        val abcd = abc + bcd\n        val abcc = abc + cd\n        val bcda = bc + da\n        val cda = cd + a\n        val da = a\n        val abda = ab + da\n        val bda = bc + da\n        val cda = cd + da\n        val abbc = ab + bc\n        val bcc = bc + c\n        val cc = c\n        val abcc = ab + cc\n        val bcca = bc + ca\n        val ca = a\n        val abca = ab + ca\n        val bca = bc + ca\n        val cba = ca + b\n        val abbca = ab + bca\n        val bcbc = bc + cb\n        val cbc = cb + c\n        val abcbc = ab + cbc\n        val cbca = bc + ca\n        val cbac = ca + b\n        val abcbca = ab + cbca\n        val cbcb = cb + cb\n        val cbab = cb + ab\n        val cbcba = cb + cba\n        val cbaa = ca + ba\n        val abcbca = ab + cbca\n        val cbcb = cb + cb\n        val cbab = cb + ab\n        val cbcba = cb + cba\n        val cbaa = ca + ba\n        val abcbca = ab + cbca\n        val cbcb = cb + cb\n        val cbab = cb + ab\n        val cbcba = cb + cba\n        val cbaa = ca + ba\n        val abcbca = ab + cbca\n        val cbcb = cb + cb\n        val cbab = cb + ab\n        val cbcba = cb + cba\n        val cbaa = ca + ba\n        val abcbca = ab + cbca\n        val cbcb = cb + cb\n        val cbab = cb + ab\n        val cbcba = cb + cba\n        val cbaa = ca + ba\n        val abcbca = ab + cbca\n        val cbcb = cb + cb\n        val cbab = cb + ab\n        val cbcba = \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2jp296s4.scala:68:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcbcba\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2jp296s4.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcda\u001b[0m = cd + da\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcda is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcda\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2jp296s4.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcc\u001b[0m = ab + cc\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcc is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2jp296s4.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mabcbca\u001b[0m = ab + cbca\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mabcbca is already defined as \u001b[33mvalue\u001b[0m \u001b[35mabcbca\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2jp296s4.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcbcb\u001b[0m = cb + cb\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcbcb is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcbcb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2jp296s4.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0",
      "stdout": "",
      "timestamp": 1659794283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc < ab || (ab == abc && bc < b) || (ab == abc && bc == b)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiw9qdenw.scala:19)\n\tat Problem.main(tmpiw9qdenw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794277
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2) || (a1 == b1 && b1 == c1 && c1 == a2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcwu0sd5i.scala:21)\n\tat Problem.main(tmpcwu0sd5i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794284
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.pow(a1, 2)\n        val b2 = math.pow(b1, 2)\n        val c2 = math.pow(c1, 2)\n        val a3 = math.pow(a2, 2)\n        val b3 = math.pow(b2, 2)\n        val c3 = math.pow(c2, 2)\n        val a4 = math.pow(a3, 2)\n        val b4 = math.pow(b3, 2)\n        val c4 = math.pow(c3, 2)\n        val a5 = math.pow(a4, 2)\n        val b5 = math.pow(b4, 2)\n        val c5 = math.pow(c4, 2)\n        val a6 = math.pow(a5, 2)\n        val b6 = math.pow(b5, 2)\n        val c6 = math.pow(c5, 2)\n        val a7 = math.pow(a6, 2)\n        val b7 = math.pow(b6, 2)\n        val c7 = math.pow(c6, 2)\n        val a8 = math.pow(a7, 2)\n        val b8 = math.pow(b7, 2)\n        val c8 = math.pow(c7, 2)\n        val a9 = math.pow(a8, 2)\n        val b9 = math.pow(b8, 2)\n        val c9 = math.pow(c8, 2)\n        val a10 = math.pow(a9, 2)\n        val b10 = math.pow(b9, 2)\n        val c10 = math.pow(c9, 2)\n        val a11 = math.pow(a10, 2)\n        val b11 = math.pow(b10, 2)\n        val c11 = math.pow(c10, 2)\n        val a12 = math.pow(a11, 2)\n        val b12 = math.pow(b11, 2)\n        val c12 = math.pow(c11, 2)\n        val a13 = math.pow(a12, 2)\n        val b13 = math.pow(b12, 2)\n        val c13 = math.pow(c12, 2)\n        val a14 = math.pow(a13, 2)\n        val b14 = math.pow(b13, 2)\n        val c14 = math.pow(c13, 2)\n        val a15 = math.pow(a14, 2)\n        val b15 = math.pow(b14, 2)\n        val c15 = math.pow(c14, 2)\n        val a16 = math.pow(a15, 2)\n        val b16 = math.pow(b15, 2)\n        val c16 = math.pow(c15, 2)\n        val a17 = math.pow(a16, 2)\n        val b17 = math.pow(b16, 2)\n        val c17\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpej4lsi9f.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpej4lsi9f.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659794268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        ab + bc == cd || ab + bc < cd\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_40t9qo3.scala:19)\n\tat Problem.main(tmp_40t9qo3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794284
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a = math.abs(a)\n        val b = math.abs(b)\n        val c = math.abs(c)\n        val a1 = math.pow(a, 2)\n        val b1 = math.pow(b, 2)\n        val c1 = math.pow(c, 2)\n        val a2 = math.pow(a, 3)\n        val b2 = math.pow(b, 3)\n        val c2 = math.pow(c, 3)\n        val a3 = math.pow(a, 4)\n        val b3 = math.pow(b, 4)\n        val c3 = math.pow(c, 4)\n        val a4 = math.pow(a, 5)\n        val b4 = math.pow(b, 5)\n        val c4 = math.pow(c, 5)\n        val a5 = math.pow(a, 6)\n        val b5 = math.pow(b, 6)\n        val c5 = math.pow(c, 6)\n        val a6 = math.pow(a, 7)\n        val b6 = math.pow(b, 7)\n        val c6 = math.pow(c, 7)\n        val a7 = math.pow(a, 8)\n        val b7 = math.pow(b, 8)\n        val c7 = math.pow(c, 8)\n        val a8 = math.pow(a, 9)\n        val b8 = math.pow(b, 9)\n        val c8 = math.pow(c, 9)\n        val a9 = math.pow(a, 10)\n        val b9 = math.pow(b, 10)\n        val c9 = math.pow(c, 10)\n        val a10 = math.pow(a, 11)\n        val b10 = math.pow(b, 11)\n        val c10 = math.pow(c, 11)\n        val a11 = math.pow(a, 12)\n        val b11 = math.pow(b, 12)\n        val c11 = math.pow(c, 12)\n        val a12 = math.pow(a, 13)\n        val b12 = math.pow(b, 13)\n        val c12 = math.pow(c, 13)\n        val a13 = math.pow(a, 14)\n        val b13 = math.pow(b, 14)\n        val c13 = math.pow(c, 14)\n        val a14 = math.pow(a, 15)\n        val b14 = math.pow(b, 15)\n        val c14 = math.pow(c, 15)\n        val a15 = math.pow(a, 16)\n        val b15 = math.pow(b, 16)\n        val c15 = math.pow(c, 16)\n        val a16 = math.pow(a, 17)\n        val b16 = math.pow(b, 17)\n        val c16 = math.pow(c, 17)\n        val a17 = math.pow(a, 18)\n        val b17 = math.pow(b, 18)\n        val c17 = math.pow(c, 18)\n        val a18 = math.pow(a, 19)\n        val b18 = math.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd90zg5gu.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = math.abs(a)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:13:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = math.abs(b)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mb\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd90zg5gu.scala:14:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = math.abs(c)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mc\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd90zg5gu.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659794238
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val ab = math.pow(a, 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n        val abc = math.pow(ab + bc + cd, 0.5)\n        abc < b\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuyrzfk6o.scala:19)\n\tat Problem.main(tmpuyrzfk6o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659794259
    }
  ]
}