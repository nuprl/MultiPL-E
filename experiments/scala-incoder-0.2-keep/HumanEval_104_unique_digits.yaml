name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422,\
  \ 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    //\
  \ []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        val nums = x.map(_.toInt)\n        val evens = nums.filter(x\
    \ => x % 2 == 0)\n        evens.toList.sortBy(x => x)", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) result.+=(x) \n        })\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        if (x(i) % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if(digit\
    \ % 2 == 0) {\n                evenDigit += digit\n            } else {\n    \
    \            result += x(i)\n            }\n        }\n        evenDigit.toList",
  "        val digits = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- x) {\n            digits += i\n        }\n        digits.toList.sortWith(_\
    \ < _).foreach { x =>\n            if (x % 2 == 0) {\n                result +=\
    \ x\n            }\n        }\n        result.toList", "        val result = new\
    \ mutable.LinkedList[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val xs = x.toSet\n\
    \        val ys = xs.filter(_ % 2 == 0)\n        val zs = xs.filter(_ % 2 != 0)\n\
    \        val zsSet = zs.toSet\n        zsSet.filter(_ < ys.size)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort", "   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0).sorted\n      \
    \  val zs = xs.filter(_ % 2 == 1).sorted\n        val zs2 = ys.filter(_ % 2 ==\
    \ 1).sorted\n        val zs3 = zs.filter(_ % 2 == 1).sorted\n        val zs4 =\
    \ zs2.filter(_ % 2 == 1).sorted\n        val zs5 = zs3.filter(_ % 2 == 1).sorted\n\
    \        val zs6 = zs4.filter(_ % 2 == 1).sorted\n        val zs7 = zs5.filter(_\
    \ % 2 == 1).sorted\n        val zs8 = zs6.filter(_ % 2 == 1).sorted\n        val\
    \ zs9 = zs7.filter(_ % 2 == 1).sorted\n        val zs10 = zs8.filter(_ % 2 ==\
    \ 1).sorted\n        val zs11 = zs9.filter(_ % 2 == 1).sorted\n        val zs12\
    \ = zs10.filter(_ % 2 == 1).sorted\n        val zs13 = zs11.filter(_ % 2 == 1).sorted\n\
    \        val zs14 = zs12.filter(_ % 2 == 1).sorted\n        val zs15 = zs13.filter(_\
    \ % 2 == 1).sorted\n        val zs16 = zs14.filter(_ % 2 == 1).sorted\n      \
    \  val zs17 = zs15.filter(_ % 2 == 1).sorted\n        val zs18 = zs16.filter(_\
    \ % 2 == 1).sorted\n        val zs19 = zs17.filter(_ % 2 == 1).sorted\n      \
    \  val zs20 = zs18.filter(_ % 2 == 1).sorted\n        val zs21 = zs19.filter(_\
    \ % 2 == 1).sorted\n        val zs22 = zs20.filter(_ % 2 == 1).sorted\n      \
    \  val zs23 = zs21.filter(_ % 2 == 1).sorted\n        val zs24 = zs22.filter(_\
    \ % 2 == 1).sorted\n        val zs25 = zs23.filter(_ % 2 == 1).sorted\n      \
    \  val zs26 = zs24.filter(_ % 2 == 1).sorted\n        val zs27 = zs25.filter(_\
    \ % 2 == 1).sorted\n        val zs28 = zs26.filter(_ % 2 == 1).sorted\n      \
    \  val zs29 = zs27.filter(_ % 2 == 1).sorted\n        val zs30 = zs28.filter(_\
    \ % 2 == 1).sorted\n        val zs31 = zs29.filter(_ % 2 == 1).sorted\n      \
    \  val zs32 = zs30.filter(_ % 2 == 1).sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val evenDigitCount = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit\
    \ += x\n                evenDigitCount += x\n            } else {\n          \
    \      result += x\n            }\n        })\n        evenDigitCount.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                result += x\n         \
    \   }\n        })\n        result.sortWith(_.compareTo(_) == 0)", "        val\
    \ nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n        evens.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sortWith(_ < _)", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val digit\
    \ = x.toString.toInt\n            if (digit % 2 == 0) {\n                result.add(x)\n\
    \            }\n        })\n        result.sortWith(_ < _)", "        val xs =\
    \ x.toSet\n        val result = new mutable.ListBuffer[Long]()\n        for(i\
    \ <- 0 until xs.size) {\n            val digit = xs(i)\n            if(digit %\
    \ 2 == 0) {\n                result.+=(xs(i))\n            }\n        }\n    \
    \    result.sort", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    x.foreach(x => { \n            if (x % 2 == 0) result.add(x)\n        })\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        x.foreach(x =>\
    \ {\n            val digit = x.toString.toInt\n            if (digit % 2 == 0)\
    \ {\n                evenDigit += digit\n            } else {\n              \
    \  result += x\n            }\n        })\n        evenDigit.foreach(x => result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val str = x.toString\n            val digits = str.split('')\n  \
    \          val evenDigits = digits.filter(x => x % 2 == 0)\n            if (evenDigits.isEmpty)\
    \ result += x\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sortWith(_\
    \ < _)", "        val evenDigitsCount = x.count(x => x % 2 == 0)\n        val\
    \ evenDigitsList = x.filter(x => x % 2 == 0).sorted\n        val oddDigitsList\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigitsList.filter(x => x !=\
    \ evenDigitsList(0))", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val str = x.toString\n            val\
    \ digits = str.dropWhile(_ < '0').dropWhile(_ > '9').toList\n            val evenDigits\
    \ = digits.filter(x => x % 2 == 0)\n            val isEven = evenDigits.isEmpty\n\
    \            if (isEven) {\n                result += x\n            }\n     \
    \   })\n        result.sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        }\n        evenDigit.foreach { x =>\n            if (result.contains(x))\
    \ {\n                result.delete(x)\n            } else {\n                result\
    \ += x\n            }\n        }\n        result.sort", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => result +=\
    \ x }\n        oddDigits.foreach { x => result += x }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.updated(x, result.indexOf(x))\n            else \n\
    \                result += x\n        }\n        result.toList", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n\
    \        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result += x)\n        oddDigits.foreach(x => result\
    \ += x)\n        result.sort", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n      \
    \  evenDigits ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val evenDigitsCount\
    \ = x.count(x => x % 2 == 0)\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        evenDigits.sortBy(x\
    \ => x)", "        val result = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  result.add(x)\n            }\n        })\n        result.sortWith((x, y) =>\
    \ x.toString.toInt < y.toString.toInt)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sort",
  "        val nums = x.toSet\n        val evens = nums.filter(x => x % 2 == 0)\n\
    \        val odd = nums.filter(x => x % 2 != 0)\n        val evenAndOdd = evens.union(odd)\n\
    \        evenAndOdd.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        x.foreach(x =>\
    \ {\n            val str = x.toString\n            val digits = str.split(\"\"\
    ).map(_.toInt)\n            digits.foreach(x => {\n                if (x % 2 ==\
    \ 0) {\n                    evenDigit += x\n                }\n            })\n\
    \        })\n        evenDigit.foreach(x => {\n            if (!result.contains(x))\
    \ {\n                result += x\n            }\n        })\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result += digit\n            }\n        }\n   \
    \     result.sortWith((x, y) => x < y)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        val evenDigitsSortedList = evenDigitsSorted.toList\n        val\
    \ evenDigitsSortedSet = evenDigitsSorted.toSet\n        val evenDigitsSortedSortedSet\
    \ = evenDigitsSortedSet.toSet\n        val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n\
    \        val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n   \
    \     val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n   \
    \     val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n      \
    \  val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n      \
    \  val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val\
    \ evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n        val\
    \ evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList\
    \ = evenDigitsSortedSortedList.toList\n        val evenDigitsSortedSortedSet =\
    \ evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n\
    \        val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n   \
    \     val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n   \
    \     val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n      \
    \  val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n      \
    \  val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val\
    \ evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n        val\
    \ evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList\
    \ = evenDigitsSortedSortedList.toList\n        val evenDigitsSortedSortedSet =\
    \ evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n\
    \        val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n   \
    \     val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n   \
    \     val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n      \
    \  val evenDigitsSortedSortedList = evenDigitsSortedSorted", "        val result\
    \ = new mutable.LinkedList[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        uniqueEvenDigits.foreach(x => result.add(x))\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val temp = x(i)\n            for(j <- 0 until temp.toString.length)\
    \ {\n                if(temp.toString.charAt(j) match {\n                    case\
    \ '0' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case '1' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case '2' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ '3' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case '4' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case '5' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ '6' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case '7' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case '8' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ '9' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case 'a' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case 'b' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ 'c' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case 'd' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case 'e' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ 'f' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case 'A' => \n                        if(result.contains(temp))\
    \ {\n                            result.", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result += x(i)\n         \
    \   }\n        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            if (digits.isEmpty) result += x\n\
    \            else {\n                val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n                if (evenDigits.isEmpty) result += x\n               \
    \ else {\n                    val evenDigit = evenDigits.head\n              \
    \      val otherDigits = evenDigits.tail\n                    result += (x % 10\
    \ * 10 + evenDigit).toLong :: otherDigits\n                }\n            }\n\
    \        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.foreach(x\
    \ => result.add(x))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result.add(x(i))\n          \
    \  }\n        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n       \
    \ val uniqueDigits = uniqueEvenDigits.filter(x => !digits.contains(x))\n     \
    \   uniqueDigits.toList", "        val xs = x.toSet\n        val ys = xs.filter(_\
    \ % 2 == 0)\n        ys.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) result += x\n        }\n        result.sort", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n  \
    \          val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n \
    \               result.+=(x)\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(digit)\n            }\n        })\n        result.sort",
  "        val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until xs.size) {\n            val digit = xs(i).asDigit\n\
    \            if(digit % 2 == 0) {\n                result += digit\n         \
    \   }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)", "    \
    \    val nums = x.map(_.toInt)\n        val evens = nums.filter(x => x % 2 ==\
    \ 0)\n        val odds = nums.filter(x => x % 2 != 0)\n        evens.toList ++\
    \ odds.toList", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        val evenDigitsSortedSet = evenDigitsSorted.toSet\n\
    \        val result = evenDigitsSortedSet.filterNot(x => evenDigitsSortedSet.contains(x))\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val evenDigitCount\
    \ = new mutable.HashMap[Long, Int]()\n        for (i <- x) {\n            if (i\
    \ % 2 == 0) {\n                evenDigit.add(i)\n                evenDigitCount.get(i)\
    \ += 1\n            }\n        }\n        for (i <- evenDigit) {\n           \
    \ if (evenDigitCount.get(i) == 0) {\n                result.add(i)\n         \
    \   }\n        }\n        result.sortWith(_.compareTo(_) == 0)", "        val\
    \ digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x =>\
    \ x % 2 == 0)\n        evenDigits.toList.sortBy(x => x).reverse", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n\
    \            val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.foreach(x\
    \ => result.add(x))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val temp = x(i)\n           \
    \ val digits = temp.toString.reverse.grouped(2).map(_ + \"\").mkString(\"\")\n\
    \            if(digits.isEmpty) result += temp\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        x.foreach { x =>\n            if (x %\
    \ 2 == 0) {\n                evenDigit.add(x)\n            }\n        }\n    \
    \    evenDigit.foreach { x =>\n            if (result.contains(x)) {\n       \
    \         return\n            }\n            result.add(x)\n        }\n      \
    \  result.sorted", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitCount = evenDigits.size\n        val oddDigitCount\
    \ = digits.filter(x => x % 2 != 0).size\n        val evenDigitIndex = evenDigitCount\
    \ - 1\n        val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit =\
    \ evenDigits(evenDigitIndex)\n        val oddDigit = oddDigits(oddDigitIndex)\n\
    \        val evenDigitCount = evenDigitCount - 1\n        val oddDigitCount =\
    \ oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount - 1\n       \
    \ val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n\
    \        val oddDigit = oddDigits(oddDigitIndex)\n        val evenDigitCount =\
    \ evenDigitCount - 1\n        val oddDigitCount = oddDigitCount - 1\n        val\
    \ evenDigitIndex = evenDigitCount - 1\n        val oddDigitIndex = evenDigitIndex\
    \ - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n        val oddDigit\
    \ = oddDigits(oddDigitIndex)\n        val evenDigitCount = evenDigitCount - 1\n\
    \        val oddDigitCount = oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount\
    \ - 1\n        val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit =\
    \ evenDigits(evenDigitIndex)\n        val oddDigit = oddDigits(oddDigitIndex)\n\
    \        val evenDigitCount = evenDigitCount - 1\n        val oddDigitCount =\
    \ oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount - 1\n       \
    \ val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n\
    \        val oddDigit = oddDigits(oddDigitIndex)\n        val evenDigitCount =\
    \ evenDigitCount - 1\n        val oddDigitCount = oddDigitCount - 1\n        val\
    \ evenDigitIndex = evenDigitCount - 1\n        val oddDigitIndex = evenDigitIndex\
    \ - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n        val oddDigit\
    \ = oddDigits(oddDigitIndex)\n        val evenDigitCount = evenDigitCount - 1\n\
    \        val oddDigitCount = oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount\
    \ - 1\n        val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit =\
    \ evenDigits(evenDigitIndex)\n        val oddDigit = oddDigits(oddDigitIndex)\n\
    \        val evenDigitCount = evenDigitCount - 1\n        val oddDigitCount =\
    \ oddDigitCount - 1", "        val nums = x.toSet\n        val evens = nums.filter(_\
    \ % 2 == 0)\n        evens.toList.sortWith(_ < _)", "        val xs = x.toSet\n\
    \        val result = new mutable.ListBuffer[Long]()\n        for(i <- xs.iterator)\
    \ {\n            val digit = i % 10\n            if(digit == 0) {\n          \
    \      result.add(i)\n            }\n        }\n        result.sortWith(_ < _)",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            val y = x.toString.toInt\n            val z = y % 10\n          \
    \  if (z == 0) result.+=(x)\n        })\n        result.sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        if (x(i) % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- x) {\n            if (i\
    \ % 2 == 0) {\n                evenDigit += i\n            } else {\n        \
    \        oddDigit += i\n            }\n        }\n        evenDigit.sortWith(_\
    \ < _)\n        oddDigit.sortWith(_ < _)\n        evenDigit.foreach { i =>\n \
    \           if (result.contains(i)) {\n                result.clear()\n      \
    \      }\n            result += i\n        }\n        oddDigit.foreach { i =>\n\
    \            if (result.contains(i)) {\n                result.clear()\n     \
    \       }\n            result += i\n        }\n        result.sortWith(_ < _)\n\
    \        result.toList", "        val xs = x.toSet\n        val result = new mutable.LinkedList[Long]\n\
    \        for (i <- xs) {\n            if (i % 2 == 0) {\n                result.add(i)\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val len = x.size\n\
    \        for(i <- 0 until len) {\n            val digit = x(i).asDigit\n     \
    \       if(digit % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x => \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) result += x\n        }\n        result.sort", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n \
    \           val str = x.toString\n            val digits = str.filter(x => x !=\
    \ '0').map(x => x - '0').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            if (evenDigits.isEmpty) {\n                result\
    \ += x\n            }\n        })\n        result.sortWith(_.compareTo(_) == 0)",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(x\
    \ => x.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2 == 0)\n\
    \        evenDigits.foreach(x => result += x)\n        result.sortWith(_ < _)",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n           \
    \ val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n        \
    \        evenDigit += digit\n            } else {\n                result += x(i)\n\
    \            }\n        }\n        evenDigit.toList", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val str =\
    \ x.toString\n            val digits = str.split(\"\").map(_.toInt)\n        \
    \    val evenDigits = digits.filter(x => x % 2 == 0)\n            val notEvenDigits\
    \ = digits.filter(x => x % 2 != 0)\n            val notEvenDigitsSorted = notEvenDigits.sorted\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrder = notEvenDigitsSorted.sorted\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSet = notEvenDigitsSortedSortedInIncreasingOrderSet.toSet\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetSize = notEvenDigitsSortedSortedInIncreasingOrderSet.size\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIterator = notEvenDigitsSortedSortedInIncreasingOrderSet.iterator\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorSize = notEvenDigitsSortedSortedInIncreasingOrderSetIterator.size\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIterator.iterator\n         \
    \   val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorSize = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.size\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.iterator\n \
    \           val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.size\n     \
    \       val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.iterator\n \
    \           val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator.size\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator.iterator\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorIterator.size\n\
    \            val not", "        val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val xLen = x.size\n        for (i <- 0 until xLen) {\n            val\
    \ xDigit = xs(i)\n            if (xDigit % 2 == 0) {\n                result.add(xDigit)\n\
    \            }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).asDigit\n \
    \           if (digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n          \
    \  if (x(i) % 2 == 0) {\n                result.add(x(i))\n            }\n   \
    \     }\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => \n         \
    \   if (x % 2 == 0) result.add(x) else result.addAll(uniqueDigits(x / 2)))\n \
    \       result.sort", "        val digits = x.map(x => x.toString.toInt)\n   \
    \     val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        uniqueEvenDigits.sort", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => { \n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => { \n            if\
    \ (result.contains(x)) {\n                return\n            }\n            result.add(x)\n\
    \        })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.updated(x, result.indexOf(x) + 1)\n            else\
    \ \n                result += x\n        }\n        result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        result.+=(uniqueEvenDigits)\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val xs = x.toSet\n\
    \        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ xs.size) {\n            val y = xs.filter(_ % i == 0).size\n            if(y\
    \ == 0) result.add(i)\n        }\n        result.sortWith((x, y) => x < y)", " \
    \       val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n    \
    \    val odds = nums.filter(_ % 2 != 0)\n        evens.union(odds).toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        uniqueEvenDigits.foreach(x => result += x)\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val str = x.toString\n            val digits\
    \ = str.map(x => x.toInt)\n            val evenDigits = digits.filter(x => x %\
    \ 2 == 0)\n            val uniqueEvenDigits = evenDigits.distinct\n          \
    \  val uniqueEvenDigitsString = uniqueEvenDigits.mkString(\",\")\n           \
    \ if (uniqueEvenDigitsString.isEmpty) {\n                result.add(x)\n     \
    \       } else {\n                result.clear()\n            }\n        })\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result += digit\n        \
    \    }\n        }\n        result.sort", "        val evens = x.filter(x => x\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        evensSorted.filter(x\
    \ => x.toString.length == 1).map(x => x.toLong)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n            if (x\
    \ % 2 == 0) {\n                evenDigit += x\n            } else {\n        \
    \        oddDigit += x\n            }\n        }\n        evenDigit.foreach {\
    \ x =>\n            if (!result.contains(x)) {\n                result += x\n\
    \            }\n        }\n        oddDigit.foreach { x =>\n            if (!result.contains(x))\
    \ {\n                result += x\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      } else {\n                result += x\n            }\n        })\n    \
    \    result.toList", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      x.foreach(x => \n            if (x % 2 == 0) result.add(x)\n        )\n\
    \        result.sortWith(_ < _)\n        result.toList", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n       \
    \     val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n    \
    \            result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x < y)", "        val evenDigitsCount = x.count(x => x % 2 == 0)\n   \
    \     val evenDigitsList = x.filter(x => x % 2 == 0).sorted\n        val oddDigitsList\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigitsList.take(evenDigitsCount).union(oddDigitsList)",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => result += x)\n        result.sort",
  "        val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs\
    \ = xs.filter(_ % 2 != 0)\n        val ys_set = ys.toSet\n        val zs_set =\
    \ zs.toSet\n        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_", "    \
    \    val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n       \
    \ val odd = nums.filter(_ % 2 != 0)\n        evens.union(odd)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach(x => result += x)\n        result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result += x\n            }\n        }\n        result.sorted",
  "        val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xs2 = xs.filter(_ % 2 == 0)\n        val x3 = xs.filter(_ % 3 ==\
    \ 0)\n        val x4 = xs.filter(_ % 4 == 0)\n        val x5 = xs.filter(_ % 5\
    \ == 0)\n        val x6 = xs.filter(_ % 6 == 0)\n        val x7 = xs.filter(_\
    \ % 7 == 0)\n        val x8 = xs.filter(_ % 8 == 0)\n        val x9 = xs.filter(_\
    \ % 9 == 0)\n        val x10 = xs.filter(_ % 10 == 0)\n        val x11 = xs.filter(_\
    \ % 11 == 0)\n        val x12 = xs.filter(_ % 12 == 0)\n        val x13 = xs.filter(_\
    \ % 13 == 0)\n        val x14 = xs.filter(_ % 14 == 0)\n        val x15 = xs.filter(_\
    \ % 15 == 0)\n        val x16 = xs.filter(_ % 16 == 0)\n        val x17 = xs.filter(_\
    \ % 17 == 0)\n        val x18 = xs.filter(_ % 18 == 0)\n        val x19 = xs.filter(_\
    \ % 19 == 0)\n        val x20 = xs.filter(_ % 20 == 0)\n        val x21 = xs.filter(_\
    \ % 21 == 0)\n        val x22 = xs.filter(_ % 22 == 0)\n        val x23 = xs.filter(_\
    \ % 23 == 0)\n        val x24 = xs.filter(_ % 24 == 0)\n        val x25 = xs.filter(_\
    \ % 25 == 0)\n        val x26 = xs.filter(_ % 26 == 0)\n        val x27 = xs.filter(_\
    \ % 27 == 0)\n        val x28 = xs.filter(_ % 28 == 0)\n        val x29 = xs.filter(_\
    \ % 29 == 0)\n        val x30 = xs.filter(_ % 30 == 0)\n        val x31 = xs.filter(_\
    \ % 31 == 0)\n        val x32 = xs.filter(_ % 32 == 0)\n        val x33 = xs.filter(_\
    \ % 33 == 0)\n        val x34 = xs.filter(_ % 34 == 0)\n        val x35 = xs.filter(_\
    \ % 35 == 0)\n        val x36 = xs.filter(_ % 36 == 0)\n        val x37 = xs.filter(_\
    \ % 37 == 0)\n        val x38 = xs.filter(_ % 38 == 0)\n        val x39 = xs.filter(_\
    \ % 39 == 0)\n", "        val result = new mutable.LinkedList[Long]()\n      \
    \  val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result += x)\n        oddDigits.foreach(x => result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = new mutable.HashSet[Long]()\n        x.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                evenDigits.add(x)\n      \
    \      }\n        })\n        evenDigits.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.sort", "        val xs = x.toSet\n        val ys = xs.filter(_\
    \ % 2 == 0)\n        val zs = xs.filter(_ % 2 == 1)\n        val zsSorted = zs.sorted\n\
    \        val ys = ys.filterNot(zs.contains)\n        val ys = ys.filterNot(zsSorted.contains)\n\
    \        val ys = ys.filterNot(xs.contains)\n        val ys = ys.filterNot(xs.toSet.contains)\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(zs))\n        val ys = ys.filterNot(xs.toSet.subsetOf(zsSorted))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs))\n        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet))\n        val\
    \ ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet))\n        val ys =\
    \ ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet))\n        val ys\
    \ = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet))\n      \
    \  val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => x % 2 != 0)\n        val notEvenDigitsSet = notEvenDigits.toSet\n\
    \        notEvenDigitsSet.foreach(x => result += x)\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result.add(x)\n        })\n        result.toList", "   \
    \     val nums = x.toSet\n        val evenDigits = nums.filter(_ % 2 == 0)\n \
    \       val oddDigits = nums.filter(_ % 2 != 0)\n        evenDigits.union(oddDigits).toList",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x % 10\n            if (digit == 0) {\n             \
    \   result.add(x)\n            }\n        })\n        result.sortWith(_ < _)",
  "        val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n     \
    \   evens.toList.sortBy(x => x)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sort", "        val xs = x.toSet\n        val\
    \ result = new mutable.ListBuffer[Long]\n        for (i <- xs.iterator) {\n  \
    \          val digit = i % 10\n            if (xs.contains(digit)) {\n       \
    \         result.add(i)\n            }\n        }\n        result.sortWith((a,\
    \ b) => a.compareTo(b) == 0)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val evenDigitsSet = evenDigitsList.distinct\n \
    \       val evenDigitsSortedList = evenDigitsSet.sort\n        evenDigitsSortedList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result += x\n            }\n        })\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach(x\
    \ => if (result.contains(x)) return)\n        result ++= evenDigitsSorted\n  \
    \      result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n\
    \        evenDigitsList.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result.add(x))\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        xs.foreach(x => {\n            val y = x %\
    \ 10\n            if (y % 2 == 0) {\n                result.add(x)\n         \
    \   }\n        })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- x) {\n\
    \            if(i.toString.length == 1) {\n                result.add(i)\n   \
    \         } else {\n                val digit = i.toString.charAt(0)\n       \
    \         if(evenDigit.contains(digit)) {\n                    result.add(i)\n\
    \                } else {\n                    evenDigit.add(digit)\n        \
    \        }\n            }\n        }\n        result.sortWith((x, y) => x.toString.compareTo(y.toString)\
    \ < 0)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').drop(1)\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val isEven = evenDigits.isEmpty\n            if\
    \ (isEven) {\n                result += x\n            }\n        })\n       \
    \ result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        xs.foreach { x =>\n            val digit =\
    \ xs.filter(_ % x == 0).length\n            if (digit == 0) {\n              \
    \  result.add(x)\n            }\n        }\n        result.sortWith(_ < _)", " \
    \       val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n            \
    \    evenDigit.add(digit)\n            }\n        }\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val evenDigitsMap : mutable.Map[Long, Long] = mutable.HashMap.empty[Long,\
    \ Long]\n        val evenDigits : mutable.Set[Long] = mutable.Set.empty[Long]\n\
    \        x.foreach(x => {\n            val digit = x%10\n            val evenDigit\
    \ = digit%2 == 0\n            if (evenDigit) {\n                evenDigitsMap\
    \ += digit -> x\n                evenDigits += digit\n            }\n        })\n\
    \        evenDigitsMap.filter(_._2 != 0).map(_._1).sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n       \
    \     if (x % 2 == 0) result.add(x)\n        })\n        result.sortWith(_ < _)",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach { x => \n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val notEvenDigits = digits.filter(x => x % 2 !=\
    \ 0)\n            val notEvenDigitsSorted = notEvenDigits.sortWith(_ < _)\n  \
    \          val evenDigitsSorted = evenDigits.sortWith(_ < _)\n            val\
    \ notEvenDigitsSortedSorted: mutable.Buffer[Long] = notEvenDigitsSorted.toBuffer\n\
    \            val evenDigitsSortedSorted: mutable.Buffer[Long] = evenDigitsSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSorted: mutable.Buffer[Long] = notEvenDigitsSortedSorted.toBuffer\n\
    \            val evenDigitsSortedSortedSorted: mutable.Buffer[Long] = evenDigitsSortedSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] =\
    \ notEvenDigitsSortedSortedSorted.toBuffer\n            val evenDigitsSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n            val\
    \ notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] = notEvenDigitsSortedSortedSorted.toBuffer\n\
    \            val evenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] =\
    \ notEvenDigitsSortedSortedSorted.toBuffer\n            val evenDigitsSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n            val\
    \ notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] = notEvenDigitsSortedSortedSorted.toBuffer\n\
    \            val evenDigitsSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evenDigitsSortedSortedSorted.toBuffer\n            val notEvenDigitsSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = notEvenDigitsSortedSortedSorted.toBuffer\n          \
    \  val evenDigitsSortedSortedSortedSortedSorted: mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = notEvenDigitsSortedSortedSorted.toBuffer", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result.add(x(i))\n          \
    \  }\n        }\n        result.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        val uniqueEvenDigits = evenDigitsSorted.distinct\n        uniqueEvenDigits.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result += digit\n            }\n        }\n        result\
    \ .toList", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => if (x % 2 == 0) result += x)\n        result.sort", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n       \
    \     val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n    \
    \            result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            val digit = x % 10\n            if (digit % 2 == 0) {\n         \
    \       result.add(x)\n            }\n        })\n        result.sortWith(_ <\
    \ _)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => {\n            val digits = x.toString.reverse.grouped(2).map(_.toInt)\n\
    \            if (digits.length == 1) result += x\n        })\n        result sortBy\
    \ { x => x % 10 }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val uniqueEvenDigits = evenDigits.filter(x => !evenDigitsSet.contains(x))\n\
    \        result.+=(uniqueEvenDigits.toList)\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n        \
    \    val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n       \
    \         result.+=(x)\n            }\n        })\n        result.sortWith(_ <\
    \ _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigits\
    \ = new mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n        \
    \    val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n     \
    \           evenDigits.add(digit)\n            }\n        }\n        for(i <-\
    \ 0 until x.size) {\n            val digit = x(i).toString.toInt\n           \
    \ if(evenDigits.contains(digit)) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        val\
    \ evenDigitsSet = evenDigitsList.distinct\n        val evenDigitsSetList = evenDigitsSet.toList\n\
    \        evenDigitsSetList.filter(x => x.isEmpty).map(x => x.toLong)", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        val\
    \ x3 = xs.filter(_ % 3 == 0)\n        val x4 = xs.filter(_ % 4 == 0)\n       \
    \ val x5 = xs.filter(_ % 5 == 0)\n        val x6 = xs.filter(_ % 6 == 0)\n   \
    \     val x7 = xs.filter(_ % 7 == 0)\n        val x8 = xs.filter(_ % 8 == 0)\n\
    \        val x9 = xs.filter(_ % 9 == 0)\n        val x10 = xs.filter(_ % 10 ==\
    \ 0)\n        val x11 = xs.filter(_ % 11 == 0)\n        val x12 = xs.filter(_\
    \ % 12 == 0)\n        val x13 = xs.filter(_ % 13 == 0)\n        val x14 = xs.filter(_\
    \ % 14 == 0)\n        val x15 = xs.filter(_ % 15 == 0)\n        val x16 = xs.filter(_\
    \ % 16 == 0)\n        val x17 = xs.filter(_ % 17 == 0)\n        val x18 = xs.filter(_\
    \ % 18 == 0)\n        val x19 = xs.filter(_ % 19 == 0)\n        val x20 = xs.filter(_\
    \ % 20 == 0)\n        val x21 = xs.filter(_ % 21 == 0)\n        val x22 = xs.filter(_\
    \ % 22 == 0)\n        val x23 = xs.filter(_ % 23 == 0)\n        val x24 = xs.filter(_\
    \ % 24 == 0)\n        val x25 = xs.filter(_ % 25 == 0)\n        val x26 = xs.filter(_\
    \ % 26 == 0)\n        val x27 = xs.filter(_ % 27 == 0)\n        val x28 = xs.filter(_\
    \ % 28 == 0)\n        val x29 = xs.filter(_ % 29 == 0)\n        val x30 = xs.filter(_\
    \ % 30 == 0)\n        val x31 = xs.filter(_ % 31 == 0)\n        val x32 = xs.filter(_\
    \ % 32 == 0)\n        val x33 = xs.filter(_ % 33 == 0)\n        val x34 = xs.filter(_\
    \ % 34 == 0)\n        val x35 = xs.filter(_ % 35 == 0)\n        val x36 = xs.filter(_\
    \ % 36 == 0)\n        val x37 = xs.filter(_ % 37 == 0)\n        val x38 = xs.filter(_\
    \ % 38 == 0)\n        val x39 = xs.filter(_ % 39 == 0)\n", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val hasEvenDigit = evenDigits.nonEmpty\n       \
    \     if (hasEvenDigit) {\n                result.add(x.toLong)\n            }\n\
    \        })\n        result.sorted", "        val xs = x.toSet\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val evenDigits = xs.filter(_ % 2 ==\
    \ 0)\n        evenDigits.foreach(x => result += x)\n        result.sort", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        xs.foreach { x =>\n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) {\n                result += x\n            }\n    \
    \    }\n        result.sort", "        val xs = x.toSet\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        for (i <- xs) {\n            if (i %\
    \ 2 == 0) {\n                result.add(i)\n            }\n        }\n       \
    \ result.sort", "        val evenDigitsSet = mutable.Set[Long]()\n        val\
    \ oddDigitsSet = mutable.Set[Long]()\n        x.foreach(x => {\n            val\
    \ digit = x % 10\n            if (digit % 2 == 0) {\n                evenDigitsSet\
    \ += digit\n            } else {\n                oddDigitsSet += digit\n    \
    \        }\n        })\n        oddDigitsSet.diff(evenDigitsSet)", "        val\
    \ digits = mutable.Set[Long]()\n        x.foreach(x => digits += x)\n        digits.toList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach\
    \ { x => result += x }\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        val uniqueEvenDigits = evenDigitList.distinct\n\
    \        val uniqueEvenDigitList = uniqueEvenDigits.toList\n        uniqueEvenDigitList.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0).sort\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sort\n        val result = evenDigits.filter(x =>\
    \ oddDigits.contains(x)).sort\n        result", "        val xs = x.toSet\n  \
    \      val ys = xs.filter(_ % 2 == 0)\n        val zs = xs.filter(_ % 2 != 0)\n\
    \        val zsSet = zs.toSet\n        zsSet.subsetOf(ys).toList ++ ys.subsetOf(zsSet).toList",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sort", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      x.foreach(x => {\n            val str = x.toString\n            val digits\
    \ = str.dropWhile(_ < '0').dropWhile(_ > '9').toList\n            if (digits.isEmpty)\
    \ result.add(x)\n            else {\n                val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n                if (evenDigits.isEmpty) result.add(x)\n    \
    \            else {\n                    val evenDigit = evenDigits.head\n   \
    \                 val oddDigits = digits.filter(_ != evenDigit)\n            \
    \        val newEvenDigits = evenDigits.filter(_ != evenDigit)\n             \
    \       val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newOddDigit = evenDigit\
    \ + 2\n                    val newEvenDigits = evenDigits.filter(_ != evenDigit)\n\
    \                    val newOddDigits = oddDigits.filter(_ != evenDigit)\n   \
    \                 val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newEvenDigits =\
    \ evenDigits.filter(_ != evenDigit)\n                    val newOddDigits = oddDigits.filter(_\
    \ != evenDigit)\n                    val newEvenDigit = evenDigit + 2\n      \
    \              val newOddDigits = oddDigits.filter(_ != evenDigit)\n         \
    \           val newEvenDigits = evenDigits.filter(_ != evenDigit)\n          \
    \          val newOddDigits = oddDigits.filter(_ != evenDigit)\n             \
    \       val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newEvenDigits =\
    \ evenDigits.filter(_ != evenDigit)\n                    val newOddDigits = oddDigits.filter(_\
    \ != evenDigit)\n                    val newEvenDigit = evenDigit + 2\n      \
    \              val newOddDigits = oddDigits.filter(_ != evenDigit)\n         \
    \           val newEvenDigits = evenDigits.filter(_ != evenDigit)\n          \
    \          val newOddDigits = oddDigits.filter(_ != evenDigit)\n             \
    \       val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newEvenDigits =\
    \ evenDigits.filter(_ != evenDigit)\n                    val newOddDigits = oddDigits.filter(_\
    \ != evenDigit)\n                    val new"]
stop_tokens:
- "\n    }\n"
