name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422,\
  \ 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    //\
  \ []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        val nums = x.map(_.toInt)\n        val evens = nums.filter(x\
    \ => x % 2 == 0)\n        evens.toList.sortBy(x => x)", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) result.+=(x) \n        })\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        if (x(i) % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if(digit\
    \ % 2 == 0) {\n                evenDigit += digit\n            } else {\n    \
    \            result += x(i)\n            }\n        }\n        evenDigit.toList",
  "        val digits = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- x) {\n            digits += i\n        }\n        digits.toList.sortWith(_\
    \ < _).foreach { x =>\n            if (x % 2 == 0) {\n                result +=\
    \ x\n            }\n        }\n        result.toList", "        val result = new\
    \ mutable.LinkedList[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val xs = x.toSet\n\
    \        val ys = xs.filter(_ % 2 == 0)\n        val zs = xs.filter(_ % 2 != 0)\n\
    \        val zsSet = zs.toSet\n        zsSet.filter(_ < ys.size)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort", "   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0).sorted\n      \
    \  val zs = xs.filter(_ % 2 == 1).sorted\n        val zs2 = ys.filter(_ % 2 ==\
    \ 1).sorted\n        val zs3 = zs.filter(_ % 2 == 1).sorted\n        val zs4 =\
    \ zs2.filter(_ % 2 == 1).sorted\n        val zs5 = zs3.filter(_ % 2 == 1).sorted\n\
    \        val zs6 = zs4.filter(_ % 2 == 1).sorted\n        val zs7 = zs5.filter(_\
    \ % 2 == 1).sorted\n        val zs8 = zs6.filter(_ % 2 == 1).sorted\n        val\
    \ zs9 = zs7.filter(_ % 2 == 1).sorted\n        val zs10 = zs8.filter(_ % 2 ==\
    \ 1).sorted\n        val zs11 = zs9.filter(_ % 2 == 1).sorted\n        val zs12\
    \ = zs10.filter(_ % 2 == 1).sorted\n        val zs13 = zs11.filter(_ % 2 == 1).sorted\n\
    \        val zs14 = zs12.filter(_ % 2 == 1).sorted\n        val zs15 = zs13.filter(_\
    \ % 2 == 1).sorted\n        val zs16 = zs14.filter(_ % 2 == 1).sorted\n      \
    \  val zs17 = zs15.filter(_ % 2 == 1).sorted\n        val zs18 = zs16.filter(_\
    \ % 2 == 1).sorted\n        val zs19 = zs17.filter(_ % 2 == 1).sorted\n      \
    \  val zs20 = zs18.filter(_ % 2 == 1).sorted\n        val zs21 = zs19.filter(_\
    \ % 2 == 1).sorted\n        val zs22 = zs20.filter(_ % 2 == 1).sorted\n      \
    \  val zs23 = zs21.filter(_ % 2 == 1).sorted\n        val zs24 = zs22.filter(_\
    \ % 2 == 1).sorted\n        val zs25 = zs23.filter(_ % 2 == 1).sorted\n      \
    \  val zs26 = zs24.filter(_ % 2 == 1).sorted\n        val zs27 = zs25.filter(_\
    \ % 2 == 1).sorted\n        val zs28 = zs26.filter(_ % 2 == 1).sorted\n      \
    \  val zs29 = zs27.filter(_ % 2 == 1).sorted\n        val zs30 = zs28.filter(_\
    \ % 2 == 1).sorted\n        val zs31 = zs29.filter(_ % 2 == 1).sorted\n      \
    \  val zs32 = zs30.filter(_ % 2 == 1).sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val evenDigitCount = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit\
    \ += x\n                evenDigitCount += x\n            } else {\n          \
    \      result += x\n            }\n        })\n        evenDigitCount.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                result += x\n         \
    \   }\n        })\n        result.sortWith(_.compareTo(_) == 0)", "        val\
    \ nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n        evens.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sortWith(_ < _)", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)"]
stop_tokens:
- "\n    }\n"
