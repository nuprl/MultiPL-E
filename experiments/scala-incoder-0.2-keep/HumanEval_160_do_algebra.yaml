name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val result = operandList.foldLeft(operandList.head) {\n            (acc,\
    \ x) => acc match {\n                case Some(operator) => operator(acc, x)\n\
    \                case None => x\n            }\n        }\n        result", " \
    \       val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opLength = opList.size\n\
    \        val operandIndex = operandList.indexOf(0)\n        val operandLength\
    \ = operandList.size\n        val operand1 = operandList.take(operandIndex).toList\n\
    \        val operand2 = operandList.drop(operandIndex).toList\n        val op1\
    \ = opList.take(opIndex).toList\n        val op2 = opList.drop(opIndex).toList\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"*\")\n        val op2Index = op2.indexOf(\"*\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"/\")\n        val op2Index = op2.indexOf(\"/\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"**\")\n        val op2Index = op2.indexOf(\"**\")\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"+\")\n        val op2Index = op2.indexOf(\"+\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"-\")\n        val op2Index = op2.indexOf(\"-\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"*\")\n        val op2Index = op2.indexOf(\"*\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"//\")\n        val op2Index = op2.indexOf(\"//\")\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"**\")\n        val op2Index = op2.indexOf(\"**\")\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"+\")\n        val op2Index = op2.indexOf(\"+\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op", "        val ops = op.map(_.toUpperCase)\n        val opMap = ops.zip(operand).map(x\
    \ => (x._1, x._2)).toMap\n        val opList = ops.toList\n        val operandList\
    \ = operand.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.filter(_.isDigit)\n\
    \        val operandListSize = operandList.size\n        val operatorListSize\
    \ = operatorList.size\n        val operatorListSize = operatorListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1", " \
    \       val opList = op.mkString(\"+\")\n        val opListLength = opList.length\n\
    \        val operandList = operand.mkString(\"+\")\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength = ",
  "        val ops = op.map(x => x.toLowerCase)\n        val operands = operand.map(x\
    \ => x.toLong)\n        val opMap = ops.zip(operands).toMap\n        val opList\
    \ = ops.toList\n        val opListSize = opList.size\n        val opListSize =\
    \ opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize ", "        val ops =\
    \ op.map(_.toUpperCase)\n        val opArray = ops.toArray\n        val operandArray\
    \ = operand.toArray\n        val length = opArray.length\n        val resultArray\
    \ = new Array[Long](length)\n        var i = 0\n        while (i < length) {\n\
    \            val op = opArray(i)\n            val operand = operandArray(i)\n\
    \            val result = if (op == \"+\") {\n                operandArray(i)\
    \ + operandArray(i + 1)\n            } else if (op == \"-\") {\n             \
    \   operandArray(i) - operandArray(i + 1)\n            } else if (op == \"*\"\
    ) {\n                operandArray(i) * operandArray(i + 1)\n            } else\
    \ if (op == \"/\") {\n                operandArray(i) / operandArray(i + 1)\n\
    \            } else if (op == \"//\") {\n                operandArray(i) // operandArray(i\
    \ + 1)\n            } else if (op == \"**\") {\n                operandArray(i)\
    \ ** operandArray(i + 1)\n            } else {\n                throw new Exception(\"\
    Invalid operator\")\n            }\n            resultArray(i) = result\n    \
    \        i += 1\n        }\n        resultArray(0)", "        val ops = op.map(_.toUpperCase)\n\
    \        val opList = ops.toList\n        val opLen = opList.length\n        val\
    \ operands = operand.map(_.toLong)\n        val operandLen = operands.toList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1\
    \ - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 -\
    \ 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n      \
    \  val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLen - 1 -\
    \ 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    \
    \    val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -\
    \ 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - ", "        val\
    \ ops = op.mkString(\"+\")\n        val opList = ops.split(\"\\\\+\").map(_.toLong)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        ", "        val opList =\
    \ op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Int]()\n        val operandMap\
    \ = new mutable.HashMap[String, Int]()\n        val opMapKeys = opList.map(x =>\
    \ x.toLowerCase)\n        val operandMapKeys = operandList.map(x => x.toString.toInt)\n\
    \        val opMapValues = opList.map(x => opMap.getOrElse(x, 0))\n        val\
    \ operandMapValues = operandList.map(x => operandMap.getOrElse(x, 0))\n      \
    \  val opMapKeysLen = opMapKeys.size\n        val operandMapKeysLen = operandMapKeys.size\n\
    \        val opMapValueLen = opMapValues.size\n        val operandMapValueLen\
    \ = operandMapValues.size\n        val opMapKeysSet = opMapKeys.toSet\n      \
    \  val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValueSet = opMapValues.toSet\n\
    \        val operandMapValueSet = operandMapValues.toSet\n        val opMapKeysSetLen\
    \ = opMapKeysSet.size\n        val operandMapKeysSetLen = operandMapKeysSet.size\n\
    \        val opMapValueSetLen = opMapValueSet.size\n        val operandMapValueSetLen\
    \ = operandMapValueSet.size\n        val opMapKeysSetIntersection = opMapKeysSet.intersect(operandMapKeysSet)\n\
    \        val operandMapKeysSetIntersection = operandMapKeysSet.intersect(opMapKeysSet)\n\
    \        val opMapValueSetIntersection = opMapValueSet.intersect(operandMapValueSet)\n\
    \        val operandMapValueSetIntersection = operandMapValueSet.intersect(opMapValueSet)\n\
    \        val opMapKeysSetDifference = opMapKeysSet.diff(operandMapKeysSet)\n \
    \       val operandMapKeysSetDifference = operandMapKeysSet.diff(opMapKeysSet)\n\
    \        val opMapValueSetDifference = opMapValueSet.diff(operandMapValueSet)\n\
    \        val operandMapValueSetDifference = operandMapValueSet.diff(opMapValueSet)\n\
    \        val opMapKeysSetSymmetricDifference = opMapKeysSet.diff(operandMapKeysSet)\n\
    \        val operandMapKey", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val length = operands.length\
    \ - 1\n        val operators = ops.map(_.toLowerCase).toList\n        val operatorLength\
    \ = operators.length\n        val result = operands.foldLeft(0L) {\n         \
    \   (acc, elem) => acc match {\n                case 0 => elem\n             \
    \   case acc if acc < 0 => 0L\n                case acc if acc >= operatorLength\
    \ => 0L\n                case acc if operators(acc) == operators(0) => acc + operands(length)\n\
    \                case acc if operators(acc) == operators(operatorLength - 1) =>\
    \ acc + operands(length - 1)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 2) => acc + operands(length - 2)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 3) => acc + operands(length - 3)\n           \
    \     case acc if operators(acc) == operators(operatorLength - 4) => acc + operands(length\
    \ - 4)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 5) => acc + operands(length - 5)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 6) => acc + operands(length - 6)\n           \
    \     case acc if operators(acc) == operators(operatorLength - 7) => acc + operands(length\
    \ - 7)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 8) => acc + operands(length - 8)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 9) => acc + operands(length - 9)\n           \
    \     case acc if operators(acc) == operators(operatorLength - 10) => acc + operands(length\
    \ - 10)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 11) => acc + operands(length - 11)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 12) => acc + operands(length - 12)\n         \
    \       case acc if operators(acc) == operators(operatorLength - 13) => acc +\
    \ operands(length - 13)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 14) => acc + operands(length - 14)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 15) => acc + operands(length - 15)\n         \
    \       case acc if operators(acc) == operators(operatorLength - 16) => acc +\
    \ operands(length - 16)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 17) => acc + operands(length - 17)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 18) => acc + operands(length - 18)\n         \
    \       case acc if operators(acc) == operators(operatorLength - 19) => acc +\
    \ operands(length - 19", "        val ops = op.map(_.toUpperCase)\n        val\
    \ opArray = ops.toArray\n        val operandArray = operand.toArray\n        val\
    \ length = opArray.length\n        val operandLength = operandArray.length\n \
    \       val result = operandArray(0)\n        val operator = opArray(0)\n    \
    \    val operand1 = operandArray(1)\n        val operand2 = operandArray(2)\n\
    \        val operand3 = operandArray(3)\n        val operand4 = operandArray(4)\n\
    \        val operand5 = operandArray(5)\n        val operand6 = operandArray(6)\n\
    \        val operand7 = operandArray(7)\n        val operand8 = operandArray(8)\n\
    \        val operand9 = operandArray(9)\n        val operand10 = operandArray(10)\n\
    \        val operand11 = operandArray(11)\n        val operand12 = operandArray(12)\n\
    \        val operand13 = operandArray(13)\n        val operand14 = operandArray(14)\n\
    \        val operand15 = operandArray(15)\n        val operand16 = operandArray(16)\n\
    \        val operand17 = operandArray(17)\n        val operand18 = operandArray(18)\n\
    \        val operand19 = operandArray(19)\n        val operand20 = operandArray(20)\n\
    \        val operand21 = operandArray(21)\n        val operand22 = operandArray(22)\n\
    \        val operand23 = operandArray(23)\n        val operand24 = operandArray(24)\n\
    \        val operand25 = operandArray(25)\n        val operand26 = operandArray(26)\n\
    \        val operand27 = operandArray(27)\n        val operand28 = operandArray(28)\n\
    \        val operand29 = operandArray(29)\n        val operand30 = operandArray(30)\n\
    \        val operand31 = operandArray(31)\n        val operand32 = operandArray(32)\n\
    \        val operand33 = operandArray(33)\n        val operand34 = operandArray(34)\n\
    \        val operand35 = operandArray(35)\n        val operand36 = operandArray(36)\n\
    \        val operand37 = operandArray(37)\n        val operand38 = operandArray(38)\n\
    \        val operand39 = operandArray(39)\n        val operand40 = operandArray(40)\n\
    \        val operand41 = operandArray(41)\n        val operand42 = operandArray(42)\n\
    \        val operand43 = operandArray(43)\n        val operand44 = operandArray(44)\n\
    \        val operand45 = operandArray(45)\n        val operand46 = operandArray(46)\n\
    \        val operand47 = operandArray(47)\n        val operand48 = operandArray(48)\n\
    \        val operand49 = operandArray(49)\n        val ", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.size\n        val operandLen = operandList.size\n \
    \       val opArray = Array.ofDim[String](opLen)\n        val operandArray = Array.ofDim[Long](operandLen)\n\
    \        var i = 0\n        while (i < opLen) {\n            opArray(i) = opList(i)\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < operandLen)\
    \ {\n            operandArray(j) = operandList(j)\n            j += 1\n      \
    \  }\n        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayLenMinusOne = opArrayLen - 1\n        val operandArrayLenMinusOne\
    \ = operandArrayLen - 1\n        val opArrayLenMinusOnePlusOne = opArrayLen +\
    \ 1\n        val operandArrayLenMinusOnePlusOne = operandArrayLen + 1\n      \
    \  val opArrayLenMinusOnePlusOnePlusOne = opArrayLen + 2\n        val operandArrayLenMinusOnePlusOnePlusOne\
    \ = operandArrayLen + 2\n        val opArrayLenMinusOnePlusOnePlusOnePlusOne =\
    \ opArrayLen + 3\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOne = operandArrayLen\
    \ + 3\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOne = opArrayLen\
    \ + 4\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOne = operandArrayLen\
    \ + 4\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne = opArrayLen\
    \ + 5\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandArrayLen + 5\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opArrayLen + 6\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandArrayLen + 6\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opArrayLen + 7\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandArrayLen + 7\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = op", "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n\
    \        val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n    \
    \    val operands = operand.toList\n        val operandLen = operands.size\n \
    \       val operandLenMinusOne = operandLen - 1\n        val operandsLenMinusOne\
    \ = operandLen - 1\n        val operandsLen = operandsLenMinusOne + 1\n      \
    \  val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operands", "        val\
    \ ops = op.map(_.toLowerCase)\n        val opLen = ops.length\n        val operands\
    \ = operand.map(_.toLong)\n        val operandLen = operands.length\n        val\
    \ opMap = ops.zip(operands).toMap\n        val opMapLen = opMap.length\n     \
    \   val opMapKeys = opMap.keys\n        val opMapValues = opMap.values.toList\n\
    \        val opMapKeysLen = opMapKeys.length\n        val opMapValuesLen = opMapValues.length\n\
    \        val opMapKeysMin = opMapKeys.min\n        val opMapValuesMin = opMapValues.min\n\
    \        val opMapKeysMax = opMapKeys.max\n        val opMapValuesMax = opMapValues.max\n\
    \        val opMapKeysSum = opMapKeys.sum\n        val opMapValuesSum = opMapValues.sum\n\
    \        val opMapKeysProduct = opMapKeys.product\n        val opMapValuesProduct\
    \ = opMapValues.product\n        val opMapKeysProductMin = opMapKeys.productMin\n\
    \        val opMapValuesProductMin = opMapValues.productMin\n        val opMapKeysProductMax\
    \ = opMapKeys.productMax\n        val opMapValuesProductMax = opMapValues.productMax\n\
    \        val opMapKeysProductSum = opMapKeys.productSum\n        val opMapValuesProductSum\
    \ = opMapValues.productSum\n        val opMapKeysProductProduct = opMapKeys.productProduct\n\
    \        val opMapValuesProductProduct = opMapValues.productProduct\n        val\
    \ opMapKeysProductProductMin = opMapKeys.productProductMin\n        val opMapValuesProductProductMin\
    \ = opMapValues.productProductMin\n        val opMapKeysProductProductMax = opMapKeys.productProductMax\n\
    \        val opMapValuesProductProductMax = opMapValues.productProductMax\n  \
    \      val opMapKeysProductProductSum = opMapKeys.productProductSum\n        val\
    \ opMapValuesProductProductSum = opMapValues.productProductSum\n        val opMapKeysProductProductProduct\
    \ = opMapKeys.productProductProduct\n        val opMapValuesProductProductProduct\
    \ = opMapValues.productProductProduct\n        val opMapKeysProductProductProductMin\
    \ = opMapKeys.productProductProductMin\n        val opMapValuesProductProductProductMin\
    \ = opMapValues.productProductProductMin\n        val opMapKeysProduct", "   \
    \     val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opIndex = 0\n        val operandIndex = 0\n        val result\
    \ = operands(operandIndex) * operands(operandIndex + 1)\n        while(opIndex\
    \ < opLenMinusOne) {\n            val op = ops(opIndex)\n            val operand\
    \ = operands(operandIndex)\n            val operandNext = operands(operandIndex\
    \ + 1)\n            val operandNextNext = operands(operandIndex + 2)\n       \
    \     val operandNextNextNext = operands(operandIndex + 3)\n            val operandNextNextNextNext\
    \ = operands(operandIndex + 4)\n            val operandNextNextNextNextNext =\
    \ operands(operandIndex + 5)\n            val operandNextNextNextNextNextNext\
    \ = operands(operandIndex + 6)\n            val operandNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 7)\n            val operandNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 8)\n            val operandNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 9)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 10)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 11)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 12)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 13)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 14)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 15)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 16)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 17)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 18)\n            val operandNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 19)\n            val operandNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 20)\n            val operandNextNextNextNextNextNext",
  "        val opList = op.asInstanceOf[List[String]]\n        val operandList = operand.asInstanceOf[List[Long]]\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val result = operandList.foldLeft(0L) {\n            (acc, x) => acc\
    \ + (opList.indexOf(_) * x)\n        }\n        result", "        val ops = op.map(_.toLowerCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val operandLength = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val ", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val length = ops.length\n\
    \        val result = operands.foldLeft(0)(_ + _)\n        ops.zip(operands).foreach\
    \ {\n            case (opStr, operand) =>\n                val opIndex = ops.indexOf(opStr)\n\
    \                val opVal = opIndex.toLong\n                val operandVal =\
    \ operand.toLong\n                val opValInt = opVal % 10\n                val\
    \ operandValInt = operandVal % 10\n                val opValString = ops.apply(opIndex)\n\
    \                val operandValString = operands.apply(operand)\n            \
    \    val opValInt = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opValString = opValString.toUpperCase\n                val\
    \ operandValString = operandValString.toUpperCase\n                val opValInt\
    \ = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opVal = opVal.toLong\n                val operandVal = operandVal.toLong\n\
    \                val opValInt = opVal % 10\n                val operandValInt\
    \ = operandVal % 10\n                val opValString = ops.apply(opIndex)\n  \
    \              val operandValString = operands.apply(operand)\n              \
    \  val opValInt = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opValString = opValString.toUpperCase\n                val\
    \ operandValString = operandValString.toUpperCase\n                val opValInt\
    \ = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opVal = opVal.toLong\n                val operandVal = operandVal.toLong\n\
    \                val opValInt = opVal % 10\n                val operandValInt\
    \ = operandVal % 10\n                val opValString = ops.apply(opIndex)\n  \
    \              val operandValString = operands.apply(operand)\n              \
    \  val opValInt = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opValString = opValString.toUpperCase\n                val\
    \ operandValString = operandValString.toUpperCase\n                val opValInt\
    \ = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opVal = opVal.toLong\n                val operandVal = operandVal.toLong\n\
    \                val opValInt = opVal % 10\n                val ", "        val\
    \ ops = op.map(_.toLowerCase).toSet\n        val operands = operand.map(_.toInt).toSet\n\
    \        val opList = List(\n            \"+\", \"-\", \"*\", \"//\", \"**\"\n\
    \        )\n        val opSet = opList.map(_.toLowerCase).toSet\n        val opSetSize\
    \ = opSet.size + 1 // +1 for the last operator\n        val opSetSize = opSetSize\
    \ * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2)\
    \ \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize\
    \ = opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize "]
stop_tokens:
- "\n    }\n"
