name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val result = operandList.foldLeft(operandList.head) {\n            (acc,\
    \ x) => acc match {\n                case Some(operator) => operator(acc, x)\n\
    \                case None => x\n            }\n        }\n        result", " \
    \       val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opLength = opList.size\n\
    \        val operandIndex = operandList.indexOf(0)\n        val operandLength\
    \ = operandList.size\n        val operand1 = operandList.take(operandIndex).toList\n\
    \        val operand2 = operandList.drop(operandIndex).toList\n        val op1\
    \ = opList.take(opIndex).toList\n        val op2 = opList.drop(opIndex).toList\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"*\")\n        val op2Index = op2.indexOf(\"*\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"/\")\n        val op2Index = op2.indexOf(\"/\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"**\")\n        val op2Index = op2.indexOf(\"**\")\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"+\")\n        val op2Index = op2.indexOf(\"+\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"-\")\n        val op2Index = op2.indexOf(\"-\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"*\")\n        val op2Index = op2.indexOf(\"*\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"//\")\n        val op2Index = op2.indexOf(\"//\")\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"**\")\n        val op2Index = op2.indexOf(\"**\")\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = op1.indexOf(\"+\")\n        val op2Index = op2.indexOf(\"+\")\n \
    \       val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op", "        val ops = op.map(_.toUpperCase)\n        val opMap = ops.zip(operand).map(x\
    \ => (x._1, x._2)).toMap\n        val opList = ops.toList\n        val operandList\
    \ = operand.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opMap.toMap\n        val operandList\
    \ = operandList.toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.filter(_.isDigit)\n\
    \        val operandListSize = operandList.size\n        val operatorListSize\
    \ = operatorList.size\n        val operatorListSize = operatorListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1\n \
    \       val operandListSize = operandListSize - 1\n        val operandListSize\
    \ = operandListSize - 1\n        val operandListSize = operandListSize - 1", " \
    \       val opList = op.mkString(\"+\")\n        val opListLength = opList.length\n\
    \        val operandList = operand.mkString(\"+\")\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength = ",
  "        val ops = op.map(x => x.toLowerCase)\n        val operands = operand.map(x\
    \ => x.toLong)\n        val opMap = ops.zip(operands).toMap\n        val opList\
    \ = ops.toList\n        val opListSize = opList.size\n        val opListSize =\
    \ opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize - 1\n        val opListSize\
    \ = opListSize - 1\n        val opListSize = opListSize ", "        val ops =\
    \ op.map(_.toUpperCase)\n        val opArray = ops.toArray\n        val operandArray\
    \ = operand.toArray\n        val length = opArray.length\n        val resultArray\
    \ = new Array[Long](length)\n        var i = 0\n        while (i < length) {\n\
    \            val op = opArray(i)\n            val operand = operandArray(i)\n\
    \            val result = if (op == \"+\") {\n                operandArray(i)\
    \ + operandArray(i + 1)\n            } else if (op == \"-\") {\n             \
    \   operandArray(i) - operandArray(i + 1)\n            } else if (op == \"*\"\
    ) {\n                operandArray(i) * operandArray(i + 1)\n            } else\
    \ if (op == \"/\") {\n                operandArray(i) / operandArray(i + 1)\n\
    \            } else if (op == \"//\") {\n                operandArray(i) // operandArray(i\
    \ + 1)\n            } else if (op == \"**\") {\n                operandArray(i)\
    \ ** operandArray(i + 1)\n            } else {\n                throw new Exception(\"\
    Invalid operator\")\n            }\n            resultArray(i) = result\n    \
    \        i += 1\n        }\n        resultArray(0)", "        val ops = op.map(_.toUpperCase)\n\
    \        val opList = ops.toList\n        val opLen = opList.length\n        val\
    \ operands = operand.map(_.toLong)\n        val operandLen = operands.toList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1\
    \ - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 -\
    \ 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n      \
    \  val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLen - 1 -\
    \ 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    \
    \    val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -\
    \ 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - ", "        val\
    \ ops = op.mkString(\"+\")\n        val opList = ops.split(\"\\\\+\").map(_.toLong)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        ", "        val opList =\
    \ op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Int]()\n        val operandMap\
    \ = new mutable.HashMap[String, Int]()\n        val opMapKeys = opList.map(x =>\
    \ x.toLowerCase)\n        val operandMapKeys = operandList.map(x => x.toString.toInt)\n\
    \        val opMapValues = opList.map(x => opMap.getOrElse(x, 0))\n        val\
    \ operandMapValues = operandList.map(x => operandMap.getOrElse(x, 0))\n      \
    \  val opMapKeysLen = opMapKeys.size\n        val operandMapKeysLen = operandMapKeys.size\n\
    \        val opMapValueLen = opMapValues.size\n        val operandMapValueLen\
    \ = operandMapValues.size\n        val opMapKeysSet = opMapKeys.toSet\n      \
    \  val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValueSet = opMapValues.toSet\n\
    \        val operandMapValueSet = operandMapValues.toSet\n        val opMapKeysSetLen\
    \ = opMapKeysSet.size\n        val operandMapKeysSetLen = operandMapKeysSet.size\n\
    \        val opMapValueSetLen = opMapValueSet.size\n        val operandMapValueSetLen\
    \ = operandMapValueSet.size\n        val opMapKeysSetIntersection = opMapKeysSet.intersect(operandMapKeysSet)\n\
    \        val operandMapKeysSetIntersection = operandMapKeysSet.intersect(opMapKeysSet)\n\
    \        val opMapValueSetIntersection = opMapValueSet.intersect(operandMapValueSet)\n\
    \        val operandMapValueSetIntersection = operandMapValueSet.intersect(opMapValueSet)\n\
    \        val opMapKeysSetDifference = opMapKeysSet.diff(operandMapKeysSet)\n \
    \       val operandMapKeysSetDifference = operandMapKeysSet.diff(opMapKeysSet)\n\
    \        val opMapValueSetDifference = opMapValueSet.diff(operandMapValueSet)\n\
    \        val operandMapValueSetDifference = operandMapValueSet.diff(opMapValueSet)\n\
    \        val opMapKeysSetSymmetricDifference = opMapKeysSet.diff(operandMapKeysSet)\n\
    \        val operandMapKey", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val length = operands.length\
    \ - 1\n        val operators = ops.map(_.toLowerCase).toList\n        val operatorLength\
    \ = operators.length\n        val result = operands.foldLeft(0L) {\n         \
    \   (acc, elem) => acc match {\n                case 0 => elem\n             \
    \   case acc if acc < 0 => 0L\n                case acc if acc >= operatorLength\
    \ => 0L\n                case acc if operators(acc) == operators(0) => acc + operands(length)\n\
    \                case acc if operators(acc) == operators(operatorLength - 1) =>\
    \ acc + operands(length - 1)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 2) => acc + operands(length - 2)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 3) => acc + operands(length - 3)\n           \
    \     case acc if operators(acc) == operators(operatorLength - 4) => acc + operands(length\
    \ - 4)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 5) => acc + operands(length - 5)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 6) => acc + operands(length - 6)\n           \
    \     case acc if operators(acc) == operators(operatorLength - 7) => acc + operands(length\
    \ - 7)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 8) => acc + operands(length - 8)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 9) => acc + operands(length - 9)\n           \
    \     case acc if operators(acc) == operators(operatorLength - 10) => acc + operands(length\
    \ - 10)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 11) => acc + operands(length - 11)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 12) => acc + operands(length - 12)\n         \
    \       case acc if operators(acc) == operators(operatorLength - 13) => acc +\
    \ operands(length - 13)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 14) => acc + operands(length - 14)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 15) => acc + operands(length - 15)\n         \
    \       case acc if operators(acc) == operators(operatorLength - 16) => acc +\
    \ operands(length - 16)\n                case acc if operators(acc) == operators(operatorLength\
    \ - 17) => acc + operands(length - 17)\n                case acc if operators(acc)\
    \ == operators(operatorLength - 18) => acc + operands(length - 18)\n         \
    \       case acc if operators(acc) == operators(operatorLength - 19) => acc +\
    \ operands(length - 19", "        val ops = op.map(_.toUpperCase)\n        val\
    \ opArray = ops.toArray\n        val operandArray = operand.toArray\n        val\
    \ length = opArray.length\n        val operandLength = operandArray.length\n \
    \       val result = operandArray(0)\n        val operator = opArray(0)\n    \
    \    val operand1 = operandArray(1)\n        val operand2 = operandArray(2)\n\
    \        val operand3 = operandArray(3)\n        val operand4 = operandArray(4)\n\
    \        val operand5 = operandArray(5)\n        val operand6 = operandArray(6)\n\
    \        val operand7 = operandArray(7)\n        val operand8 = operandArray(8)\n\
    \        val operand9 = operandArray(9)\n        val operand10 = operandArray(10)\n\
    \        val operand11 = operandArray(11)\n        val operand12 = operandArray(12)\n\
    \        val operand13 = operandArray(13)\n        val operand14 = operandArray(14)\n\
    \        val operand15 = operandArray(15)\n        val operand16 = operandArray(16)\n\
    \        val operand17 = operandArray(17)\n        val operand18 = operandArray(18)\n\
    \        val operand19 = operandArray(19)\n        val operand20 = operandArray(20)\n\
    \        val operand21 = operandArray(21)\n        val operand22 = operandArray(22)\n\
    \        val operand23 = operandArray(23)\n        val operand24 = operandArray(24)\n\
    \        val operand25 = operandArray(25)\n        val operand26 = operandArray(26)\n\
    \        val operand27 = operandArray(27)\n        val operand28 = operandArray(28)\n\
    \        val operand29 = operandArray(29)\n        val operand30 = operandArray(30)\n\
    \        val operand31 = operandArray(31)\n        val operand32 = operandArray(32)\n\
    \        val operand33 = operandArray(33)\n        val operand34 = operandArray(34)\n\
    \        val operand35 = operandArray(35)\n        val operand36 = operandArray(36)\n\
    \        val operand37 = operandArray(37)\n        val operand38 = operandArray(38)\n\
    \        val operand39 = operandArray(39)\n        val operand40 = operandArray(40)\n\
    \        val operand41 = operandArray(41)\n        val operand42 = operandArray(42)\n\
    \        val operand43 = operandArray(43)\n        val operand44 = operandArray(44)\n\
    \        val operand45 = operandArray(45)\n        val operand46 = operandArray(46)\n\
    \        val operand47 = operandArray(47)\n        val operand48 = operandArray(48)\n\
    \        val operand49 = operandArray(49)\n        val ", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.size\n        val operandLen = operandList.size\n \
    \       val opArray = Array.ofDim[String](opLen)\n        val operandArray = Array.ofDim[Long](operandLen)\n\
    \        var i = 0\n        while (i < opLen) {\n            opArray(i) = opList(i)\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < operandLen)\
    \ {\n            operandArray(j) = operandList(j)\n            j += 1\n      \
    \  }\n        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayLenMinusOne = opArrayLen - 1\n        val operandArrayLenMinusOne\
    \ = operandArrayLen - 1\n        val opArrayLenMinusOnePlusOne = opArrayLen +\
    \ 1\n        val operandArrayLenMinusOnePlusOne = operandArrayLen + 1\n      \
    \  val opArrayLenMinusOnePlusOnePlusOne = opArrayLen + 2\n        val operandArrayLenMinusOnePlusOnePlusOne\
    \ = operandArrayLen + 2\n        val opArrayLenMinusOnePlusOnePlusOnePlusOne =\
    \ opArrayLen + 3\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOne = operandArrayLen\
    \ + 3\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOne = opArrayLen\
    \ + 4\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOne = operandArrayLen\
    \ + 4\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne = opArrayLen\
    \ + 5\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandArrayLen + 5\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opArrayLen + 6\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandArrayLen + 6\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opArrayLen + 7\n        val operandArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandArrayLen + 7\n        val opArrayLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = op", "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n\
    \        val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n    \
    \    val operands = operand.toList\n        val operandLen = operands.size\n \
    \       val operandLenMinusOne = operandLen - 1\n        val operandsLenMinusOne\
    \ = operandLen - 1\n        val operandsLen = operandsLenMinusOne + 1\n      \
    \  val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operandsLen - 1\n     \
    \   val operandsLenMinusOne = operandsLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOne = operands", "        val\
    \ ops = op.map(_.toLowerCase)\n        val opLen = ops.length\n        val operands\
    \ = operand.map(_.toLong)\n        val operandLen = operands.length\n        val\
    \ opMap = ops.zip(operands).toMap\n        val opMapLen = opMap.length\n     \
    \   val opMapKeys = opMap.keys\n        val opMapValues = opMap.values.toList\n\
    \        val opMapKeysLen = opMapKeys.length\n        val opMapValuesLen = opMapValues.length\n\
    \        val opMapKeysMin = opMapKeys.min\n        val opMapValuesMin = opMapValues.min\n\
    \        val opMapKeysMax = opMapKeys.max\n        val opMapValuesMax = opMapValues.max\n\
    \        val opMapKeysSum = opMapKeys.sum\n        val opMapValuesSum = opMapValues.sum\n\
    \        val opMapKeysProduct = opMapKeys.product\n        val opMapValuesProduct\
    \ = opMapValues.product\n        val opMapKeysProductMin = opMapKeys.productMin\n\
    \        val opMapValuesProductMin = opMapValues.productMin\n        val opMapKeysProductMax\
    \ = opMapKeys.productMax\n        val opMapValuesProductMax = opMapValues.productMax\n\
    \        val opMapKeysProductSum = opMapKeys.productSum\n        val opMapValuesProductSum\
    \ = opMapValues.productSum\n        val opMapKeysProductProduct = opMapKeys.productProduct\n\
    \        val opMapValuesProductProduct = opMapValues.productProduct\n        val\
    \ opMapKeysProductProductMin = opMapKeys.productProductMin\n        val opMapValuesProductProductMin\
    \ = opMapValues.productProductMin\n        val opMapKeysProductProductMax = opMapKeys.productProductMax\n\
    \        val opMapValuesProductProductMax = opMapValues.productProductMax\n  \
    \      val opMapKeysProductProductSum = opMapKeys.productProductSum\n        val\
    \ opMapValuesProductProductSum = opMapValues.productProductSum\n        val opMapKeysProductProductProduct\
    \ = opMapKeys.productProductProduct\n        val opMapValuesProductProductProduct\
    \ = opMapValues.productProductProduct\n        val opMapKeysProductProductProductMin\
    \ = opMapKeys.productProductProductMin\n        val opMapValuesProductProductProductMin\
    \ = opMapValues.productProductProductMin\n        val opMapKeysProduct", "   \
    \     val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opIndex = 0\n        val operandIndex = 0\n        val result\
    \ = operands(operandIndex) * operands(operandIndex + 1)\n        while(opIndex\
    \ < opLenMinusOne) {\n            val op = ops(opIndex)\n            val operand\
    \ = operands(operandIndex)\n            val operandNext = operands(operandIndex\
    \ + 1)\n            val operandNextNext = operands(operandIndex + 2)\n       \
    \     val operandNextNextNext = operands(operandIndex + 3)\n            val operandNextNextNextNext\
    \ = operands(operandIndex + 4)\n            val operandNextNextNextNextNext =\
    \ operands(operandIndex + 5)\n            val operandNextNextNextNextNextNext\
    \ = operands(operandIndex + 6)\n            val operandNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 7)\n            val operandNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 8)\n            val operandNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 9)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 10)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 11)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 12)\n            val operandNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 13)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 14)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 15)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 16)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 17)\n            val operandNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 18)\n            val operandNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 19)\n            val operandNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = operands(operandIndex + 20)\n            val operandNextNextNextNextNextNext",
  "        val opList = op.asInstanceOf[List[String]]\n        val operandList = operand.asInstanceOf[List[Long]]\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val result = operandList.foldLeft(0L) {\n            (acc, x) => acc\
    \ + (opList.indexOf(_) * x)\n        }\n        result", "        val ops = op.map(_.toLowerCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val operandLength = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val ", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val length = ops.length\n\
    \        val result = operands.foldLeft(0)(_ + _)\n        ops.zip(operands).foreach\
    \ {\n            case (opStr, operand) =>\n                val opIndex = ops.indexOf(opStr)\n\
    \                val opVal = opIndex.toLong\n                val operandVal =\
    \ operand.toLong\n                val opValInt = opVal % 10\n                val\
    \ operandValInt = operandVal % 10\n                val opValString = ops.apply(opIndex)\n\
    \                val operandValString = operands.apply(operand)\n            \
    \    val opValInt = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opValString = opValString.toUpperCase\n                val\
    \ operandValString = operandValString.toUpperCase\n                val opValInt\
    \ = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opVal = opVal.toLong\n                val operandVal = operandVal.toLong\n\
    \                val opValInt = opVal % 10\n                val operandValInt\
    \ = operandVal % 10\n                val opValString = ops.apply(opIndex)\n  \
    \              val operandValString = operands.apply(operand)\n              \
    \  val opValInt = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opValString = opValString.toUpperCase\n                val\
    \ operandValString = operandValString.toUpperCase\n                val opValInt\
    \ = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opVal = opVal.toLong\n                val operandVal = operandVal.toLong\n\
    \                val opValInt = opVal % 10\n                val operandValInt\
    \ = operandVal % 10\n                val opValString = ops.apply(opIndex)\n  \
    \              val operandValString = operands.apply(operand)\n              \
    \  val opValInt = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opValString = opValString.toUpperCase\n                val\
    \ operandValString = operandValString.toUpperCase\n                val opValInt\
    \ = opValInt.toInt\n                val operandValInt = operandValInt.toInt\n\
    \                val opVal = opVal.toLong\n                val operandVal = operandVal.toLong\n\
    \                val opValInt = opVal % 10\n                val ", "        val\
    \ ops = op.map(_.toLowerCase).toSet\n        val operands = operand.map(_.toInt).toSet\n\
    \        val opList = List(\n            \"+\", \"-\", \"*\", \"//\", \"**\"\n\
    \        )\n        val opSet = opList.map(_.toLowerCase).toSet\n        val opSetSize\
    \ = opSet.size + 1 // +1 for the last operator\n        val opSetSize = opSetSize\
    \ * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2)\
    \ \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize\
    \ = opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize * opSetSize\
    \ // O(n^2) \n        val opSetSize = opSetSize * opSetSize // O(n^2) \n     \
    \   val opSetSize = opSetSize * opSetSize // O(n^2) \n        val opSetSize =\
    \ opSetSize * opSetSize // O(n^2) \n        val opSetSize = opSetSize ", "   \
    \     val ops = op.map(x => x.toDouble)\n        val operands = operand.map(x\
    \ => x.toDouble)\n        val length = ops.length\n        val result = operands.reduceLeft((x,\
    \ y) => ops(length-1) * x + y)\n        result", "        val ops = op.map(_.toUpperCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val result = 0\n        val stack\
    \ = mutable.Stack[Long]()\n        val stackArray = stack.toArray\n        val\
    \ stackLength = stackArray.length\n        val operandStack = mutable.Stack[Long]()\n\
    \        val operandStackArray = operandStack.toArray\n        val operandStackLength\
    \ = operandStackArray.length\n        val operatorStack = mutable.Stack[String]()\n\
    \        val operatorStackArray = operatorStack.toArray\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStackLength = operatorStackArray.length\n        val operatorStackLength\
    \ = operatorStackArray.length\n        val operatorStackLength = operatorStackArray.length\n\
    \        val operatorStack", "        val opList = op.map(_.toUpperCase)\n   \
    \     val operandList = operand.map(_.toInt)\n        val opLen = opList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneInv\
    \ = opLen - 1\n        val operandLenMinusOneInv = operandLen - 1\n        val\
    \ opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv = operandLen\
    \ - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMinusOneInv = opLen - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1\n        val opLenMin", "        val ops = op.map(_.toUpperCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opCount = ops.size\n\
    \        val operandCount = operands.size\n        val opIndex = ops.indexOf(\"\
    +\")\n        val opIndex2 = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"\
    *\")\n        val opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"&\")\n        val opIndex9 = ops.indexOf(\"\
    |\")\n        val opIndex10 = ops.indexOf(\"^\")\n        val opIndex11 = ops.indexOf(\"\
    ~\")\n        val opIndex12 = ops.indexOf(\"<<\")\n        val opIndex13 = ops.indexOf(\"\
    >>\")\n        val opIndex14 = ops.indexOf(\"==\")\n        val opIndex15 = ops.indexOf(\"\
    !=\")\n        val opIndex16 = ops.indexOf(\"<\")\n        val opIndex17 = ops.indexOf(\"\
    >\")\n        val opIndex18 = ops.indexOf(\"<=\")\n        val opIndex19 = ops.indexOf(\"\
    >=\")\n        val opIndex20 = ops.indexOf(\"!~\")\n        val opIndex21 = ops.indexOf(\"\
    !%\")\n        val opIndex22 = ops.indexOf(\"!&\")\n        val opIndex23 = ops.indexOf(\"\
    !|\")\n        val opIndex24 = ops.indexOf(\"!^\")\n        val opIndex25 = ops.indexOf(\"\
    !~\")\n        val opIndex26 = ops.indexOf(\"!<<\")\n        val opIndex27 = ops.indexOf(\"\
    !>>\")\n        val opIndex28 = ops.indexOf(\"!==\")\n        val opIndex29 =\
    \ ops.indexOf(\"!!=\")\n        val opIndex30 = ops.indexOf(\"!<\")\n        val\
    \ opIndex31 = ops.indexOf(\"!>\")\n        val opIndex32 = ops.indexOf(\"!<=\"\
    )\n        val opIndex33 = ops.indexOf(\"!>=\")\n        val opIndex34 = ops.indexOf(\"\
    !~\")\n        val opIndex35 = ops.indexOf(\"!%\")\n        val opIndex36 = ops.indexOf(\"\
    !&\")\n        val opIndex37 = ops.indexOf(\"!|\")\n        val opIndex38 = ops.indexOf(\"\
    !^\")\n        val opIndex39 = ops.indexOf(\"!~\")\n        val opIndex40 = ops.indexOf(\"\
    !", "        val opList = op.map(_.toLowerCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val operatorList = opList.dropRight(1)\n        val operatorLen = operatorList.length\n\
    \        val result = operandList.foldLeft(0L) {\n            (acc, i) => acc\
    \ + operatorList.zip(operandList).map {\n                case (op, i) => if (op\
    \ == \"+\") {\n                    acc + i\n                } else if (op == \"\
    -\") {\n                    acc - i\n                } else if (op == \"*\") {\n\
    \                    acc * i\n                } else if (op == \"/\") {\n    \
    \                if (i == 0) {\n                        throw new ArithmeticException(\"\
    Division by zero\")\n                    }\n                    acc / i\n    \
    \            } else if (op == \"//\") {\n                    if (i == 0) {\n \
    \                       throw new ArithmeticException(\"Division by zero\")\n\
    \                    }\n                    acc // i\n                } else if\
    \ (op == \"**\") {\n                    acc ** i\n                } else {\n \
    \                   throw new ArithmeticException(\"Unknown operator: \" + op)\n\
    \                }\n            }.sum\n        }\n        result", "        val\
    \ ops = op.map(x => x.toLowerCase)\n        val operands = operand.map(x => x.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLen\
    \ - 1 - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 -\
    \ 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n\
    \        val opLenMinusOneMin", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[Long, Long]()\n      \
    \  val result = new mutable.HashMap[String, Long]()\n        val opMapKeys = opList.map(_.toUpperCase)\n\
    \        val operandMapKeys = operandList.map(_.toLong)\n        val opMapValues\
    \ = opList.map(_.toUpperCase)\n        val operandMapValues = operandList.map(_.toLong)\n\
    \        val opMapKeySet = opMap.keySet\n        val operandMapKeySet = operandMap.keySet\n\
    \        val opMapValueSet = opMap.valueSet\n        val operandMapValueSet =\
    \ operandMap.valueSet\n        val opMapKeyIter = opMapKeys.iterator\n       \
    \ val operandMapKeyIter = operandMapKeys.iterator\n        val opMapValueIter\
    \ = opMapValues.iterator\n        val operandMapValueIter = operandMapValues.iterator\n\
    \        var i = 0\n        while (i < opLen) {\n            val opKey = opMapKeyIter.next()\n\
    \            val opValue = opMapValueIter.next()\n            val operandKey =\
    \ operandMapKeyIter.next()\n            val operandValue = operandMapValueIter.next()\n\
    \            val opKeyUpper = opKey.toUpperCase\n            val operandKeyUpper\
    \ = operandKey.toUpperCase\n            val opValueUpper = opValue.toUpperCase\n\
    \            val operandValueUpper = operandValue.toUpperCase\n            val\
    \ opKeyLower = opKey.toLowerCase\n            val operandKeyLower = operandKey.toLowerCase\n\
    \            val opValueLower = opValue.toLowerCase\n            val operandValueLower\
    \ = operandValue.toLowerCase\n            val opKeyEqual = opKeyUpper == opKeyLower\n\
    \            val operandKeyEqual = operandKeyUpper == operandKeyLower\n      \
    \      val opValueEqual = opValueUpper == opValueLower\n            val operandValueEqual\
    \ = operandValueUpper == operandValueLower\n            if (opKeyEqual) {\n  \
    \              if (operandKeyEqual) {\n                    if (opValueEqual) {\n\
    \                        if (operandValueEqual) {\n                          \
    \  result.put(opKey, operandValue)\n                        }\n              \
    \      }\n                }\n            }\n            i += 1\n        }\n  \
    \      operandMapKeys.foreach(operandMapKeyIter.next())\n        operandMapValues.foreach(operandMapValueIter.next())\n\
    \        operandMapKeys.foreach(", "        val opList = op.map(x => x.toChar).toList\n\
    \        val operandList = operand.map(x => x.toLong).toList\n        val opLength\
    \ = opList.length\n        val operandLength = operandList.length - 1\n      \
    \  val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operand", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.filterNot(_.equals(\"\
    *\"))\n        val operandList = operandList.filterNot(_.equals(\"*\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"/\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"/\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    **\"))\n        val operandList = operandList.filterNot(_.equals(\"**\"))\n  \
    \      val operatorList = operatorList.filterNot(_.equals(\"+\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"+\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"-\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    -\"))\n        val operatorList = operatorList.filterNot(_.equals(\"*\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"*\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"//\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    //\"))\n        val operatorList = operatorList.filterNot(_.equals(\"**\"))\n\
    \        val operandList = operandList.filterNot(_.equals(\"**\"))\n        val\
    \ operatorList = operatorList.filterNot(_.equals(\"+\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"+\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    -\"))\n        val operandList = operandList.filterNot(_.equals(\"-\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"*\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"*\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    //\"))\n        val operandList = operandList.filterNot(_.equals(\"//\"))\n  \
    \      val operatorList = operatorList.filterNot(_.equals(\"**\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"**\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"+\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    +\"))\n        val operatorList = operatorList.filterNot(_.equals(\"-\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"-\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"*\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    *\"))\n        val operatorList = operatorList.filterNot(", "        val opList\
    \ = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        var opIndex = 0\n        var\
    \ operandIndex = 0\n        var result = 0L\n        while (operandIndex < operandLen)\
    \ {\n            val opKey = opList(opIndex)\n            val operandValue = operandList(operandIndex)\n\
    \            val operandKey = operandList(operandIndex)\n            opMap.put(opKey,\
    \ operandValue)\n            operandMap.put(operandKey, operandValue)\n      \
    \      operandIndex += 1\n            opIndex += 1\n        }\n        val opKeys\
    \ = opMap.keys\n        val opValues = opMap.values.toList\n        val operandKeys\
    \ = operandMap.keys\n        val operandValues = operandMap.values.toList\n  \
    \      var opIndex = 0\n        var operandIndex = 0\n        while (operandIndex\
    \ < operandLen) {\n            val opKey = opKeys(opIndex)\n            val operandValue\
    \ = opValues(opIndex)\n            val operandKey = operandKeys(operandIndex)\n\
    \            val operandValue = operandValues(operandIndex)\n            val opValue\
    \ = opMap(opKey)\n            val operandValue = operandValue(operandKey)\n  \
    \          result += opValue * operandValue\n            operandIndex += 1\n \
    \           opIndex += 1\n        }\n        result", "        val ops = op.map(_.toLowerCase)\n\
    \        val opList = ops.toList\n        val operands = operand.toList\n    \
    \    val opLen = opList.size\n        val operandLen = operands.size - 1\n   \
    \     val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Long]()\n        val opMap3 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val opMap5 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap6 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap10 = new mutable.HashMap[String, Long]()\n        val opMap11\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap12 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap12 = new mutable.HashMap[String, Long]()\n        val opMap13\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap14 = new mutable.HashMap[String, Long]()\n        val opMap15\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap16 = new ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.filterNot(_.equals(\"\
    *\"))\n        val operandList = operandList.filterNot(_.equals(\"*\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"/\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"/\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    **\"))\n        val operandList = operandList.filterNot(_.equals(\"**\"))\n  \
    \      val operatorList = operatorList.filterNot(_.equals(\"+\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"+\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"-\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    -\"))\n        val operatorList = operatorList.filterNot(_.equals(\"*\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"*\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"//\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    //\"))\n        val operatorList = operatorList.filterNot(_.equals(\"**\"))\n\
    \        val operandList = operandList.filterNot(_.equals(\"**\"))\n        val\
    \ operatorList = operatorList.filterNot(_.equals(\"+\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"+\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    -\"))\n        val operandList = operandList.filterNot(_.equals(\"-\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"*\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"*\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    //\"))\n        val operandList = operandList.filterNot(_.equals(\"//\"))\n  \
    \      val operatorList = operatorList.filterNot(_.equals(\"**\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"**\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"+\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    +\"))\n        val operatorList = operatorList.filterNot(_.equals(\"-\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"-\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"*\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    *\"))\n        val operatorList = operatorList.filterNot(", "        val ops =\
    \ op.map(x => x.toLowerCase)\n        val operands = operand.map(x => x.toLong)\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"-\"\
    )\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    //\")\n        val opIndex7 = ops.indexOf(\"%\")\n        val opIndex8 = ops.indexOf(\"\
    *\")\n        val opIndex9 = ops.indexOf(\"+\")\n        val opIndex10 = ops.indexOf(\"\
    +\")\n        val opIndex11 = ops.indexOf(\"*\")\n        val opIndex12 = ops.indexOf(\"\
    +\")\n        val opIndex13 = ops.indexOf(\"+\")\n        val opIndex14 = ops.indexOf(\"\
    *\")\n        val opIndex15 = ops.indexOf(\"+\")\n        val opIndex16 = ops.indexOf(\"\
    *\")\n        val opIndex17 = ops.indexOf(\"*\")\n        val opIndex18 = ops.indexOf(\"\
    *\")\n        val opIndex19 = ops.indexOf(\"*\")\n        val opIndex20 = ops.indexOf(\"\
    *\")\n        val opIndex21 = ops.indexOf(\"*\")\n        val opIndex22 = ops.indexOf(\"\
    *\")\n        val opIndex23 = ops.indexOf(\"*\")\n        val opIndex24 = ops.indexOf(\"\
    *\")\n        val opIndex25 = ops.indexOf(\"*\")\n        val opIndex26 = ops.indexOf(\"\
    *\")\n        val opIndex27 = ops.indexOf(\"*\")\n        val opIndex28 = ops.indexOf(\"\
    *\")\n        val opIndex29 = ops.indexOf(\"*\")\n        val opIndex30 = ops.indexOf(\"\
    *\")\n        val opIndex31 = ops.indexOf(\"*\")\n        val opIndex32 = ops.indexOf(\"\
    *\")\n        val opIndex33 = ops.indexOf(\"*\")\n        val opIndex34 = ops.indexOf(\"\
    *\")\n        val opIndex35 = ops.indexOf(\"*\")\n        val opIndex36 = ops.indexOf(\"\
    *\")\n        val opIndex37 = ops.indexOf(\"*\")\n        val opIndex38 = ops.indexOf(\"\
    *\")\n        val opIndex39 = ops.indexOf(\"*\")\n        val opIndex40 = ops.indexOf(\"\
    *\")\n        val opIndex41 = ops.indexOf(\"*\")\n        val opIndex42 = ops.indexOf(\"\
    *\")\n        val opIndex43 = ops.indexOf(\"*\")\n        val opIndex44 = ops.",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opArray = opList.map(_.toChar)\n        val operandArray = operandList.map(_.toLong)\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArrayLength\n        val\
    \ operandArrayLength = operandArrayLength\n        val opArrayLength = opArrayLength\n\
    \        val operandArrayLength = operandArrayLength\n        val opArrayLength\
    \ = opArrayLength\n        val operandArrayLength = operandArrayLength\n     \
    \   val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operand",
  "        val ops = op.map(_.toUpperCase)\n        val op1 = ops.head\n        val\
    \ op2 = ops.last\n        val operand1 = operand.head\n        val operand2 =\
    \ operand.last\n        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n\
    \        val operand1Int = operand1.toInt\n        val operand2Int = operand2.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.toInt\n        val op2Int = op2Int.toInt\n      \
    \  val operand1Int = operand1Int.toInt\n        val operand2Int = operand2Int.toInt\n\
    \        val op1Int = op1Int.to", "        val ops = op.map(_.toUpperCase)\n \
    \       val opList = ops.toList\n        val operands = operand.toList\n     \
    \   val operandList = operands.toList\n        val opLen = opList.size\n     \
    \   val operandLen = operandList.size\n        val opIndex = ops.indexOf(\"+\"\
    )\n        val opIndex2 = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"\
    *\")\n        val opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"*\")\n        val opIndex9 = ops.indexOf(\"\
    +\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"*\")\n        val opIndex13 = ops.indexOf(\"\
    +\")\n        val opIndex14 = ops.indexOf(\"+\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    *\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    *\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    *\")\n        val opIndex22 = ops.indexOf(\"*\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"*\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    *\")\n        val opIndex28 = ops.indexOf(\"*\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"*\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"*\")\n        val opIndex33 = ops.indexOf(\"\
    *\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    *\")\n        val opIndex36 = ops.indexOf(\"*\")\n        val opIndex37 = ops.indexOf(\"\
    *\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"*\")\n        val opIndex41 = ops.indexOf(\"\
    *\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ", " \
    \       val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMapKeys = opList.map(x\
    \ => x.toUpperCase)\n        val operandMapKeys = operandList.map(x => x.toUpperCase)\n\
    \        val opMapValues = opList.map(x => x.toUpperCase)\n        val operandMapValues\
    \ = operandList.map(x => x.toUpperCase)\n        val opMapKeysLength = opMapKeys.length\n\
    \        val operandMapKeysLength = operandMapKeys.length\n        val opMapValueLength\
    \ = opMapValues.length\n        val operandMapValueLength = operandMapValues.length\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValueLength = opMapValueLength\n        val operandMapValueLength\
    \ = operandMapValueLength\n        val opMapKeysLength = opMapKeysLength\n   \
    \     val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operandMapValueLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValueLength = opMapValueLength\n        val operandMapValueLength\
    \ = operandMapValueLength\n        val opMapKeysLength = opMapKeysLength\n   \
    \     val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operandMapValueLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValue", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val operatorList = opList.filterNot(_.equals(\"\
    *\"))\n        val operandList = operandList.filterNot(_.equals(\"*\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"/\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"/\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    **\"))\n        val operandList = operandList.filterNot(_.equals(\"**\"))\n  \
    \      val operatorList = operatorList.filterNot(_.equals(\"+\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"+\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"-\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    -\"))\n        val operatorList = operatorList.filterNot(_.equals(\"*\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"*\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"//\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    //\"))\n        val operatorList = operatorList.filterNot(_.equals(\"**\"))\n\
    \        val operandList = operandList.filterNot(_.equals(\"**\"))\n        val\
    \ operatorList = operatorList.filterNot(_.equals(\"+\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"+\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    -\"))\n        val operandList = operandList.filterNot(_.equals(\"-\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"*\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"*\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    //\"))\n        val operandList = operandList.filterNot(_.equals(\"//\"))\n  \
    \      val operatorList = operatorList.filterNot(_.equals(\"**\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"**\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"+\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    +\"))\n        val operatorList = operatorList.filterNot(_.equals(\"-\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"-\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"*\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    *\"))\n        val operatorList = operatorList.filterNot(", "        val ops =\
    \ op.map(_.toLowerCase)\n        val opList = ops.toList\n        val operands\
    \ = operand.toList\n        val length = opList.size\n        val operandsLength\
    \ = operands.size\n        val result = operands(0)\n        val op1 = ops(0)\n\
    \        val op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n\
    \        val op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n\
    \        val op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n\
    \        val op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n\
    \        val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op5", "        val opList = op.mkString(\"\
    +\")\n        val opList2 = op.mkString(\"*\")\n        val opList3 = op.mkString(\"\
    //\")\n        val opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"\
    +\")\n        val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val ops = op.map(x => x.toChar)\n\
    \        val op1 = ops.head\n        val op2 = ops.last\n        val op1Int =\
    \ operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1In", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val operatorList\
    \ = opList.filterNot(_.equals(\"+\")).filterNot(_.equals(\"-\")).filterNot(_.equals(\"\
    *\")).filterNot(_.equals(\"//\")).filterNot(_.equals(\"**\"))\n        val operandListLength\
    \ = operandList.length\n        val operatorListLength = operatorList.length\n\
    \        val result = operandList(0)\n        val operator = operatorList(0)\n\
    \        val operand = operandList(1)\n        val operand2 = operandList(2)\n\
    \        val operand3 = operandList(3)\n        val operand4 = operandList(4)\n\
    \        val operand5 = operandList(5)\n        val operand6 = operandList(6)\n\
    \        val operand7 = operandList(7)\n        val operand8 = operandList(8)\n\
    \        val operand9 = operandList(9)\n        val operand10 = operandList(10)\n\
    \        val operand11 = operandList(11)\n        val operand12 = operandList(12)\n\
    \        val operand13 = operandList(13)\n        val operand14 = operandList(14)\n\
    \        val operand15 = operandList(15)\n        val operand16 = operandList(16)\n\
    \        val operand17 = operandList(17)\n        val operand18 = operandList(18)\n\
    \        val operand19 = operandList(19)\n        val operand20 = operandList(20)\n\
    \        val operand21 = operandList(21)\n        val operand22 = operandList(22)\n\
    \        val operand23 = operandList(23)\n        val operand24 = operandList(24)\n\
    \        val operand25 = operandList(25)\n        val operand26 = operandList(26)\n\
    \        val operand27 = operandList(27)\n        val operand28 = operandList(28)\n\
    \        val operand29 = operandList(29)\n        val operand30 = operandList(30)\n\
    \        val operand31 = operandList(31)\n        val operand32 = operandList(32)\n\
    \        val operand33 = operandList(33)\n        val operand34 = operandList(34)\n\
    \        val operand35 = operandList(35)\n        val operand36 = operandList(36)\n\
    \        val operand37 = operandList(37)\n        val operand38 = operandList(38)\n\
    \        val operand39 = operandList(39)\n        val operand40 = operandList(40)\n\
    \        val operand41 = operandList(41)\n        val operand42 = operandList(42)\n\
    \        val operand43 = operandList(43)\n        val operand44 = operandList(44)\n\
    \        val operand", "        val ops = op.map(_.toUpperCase)\n        val opArray\
    \ = ops.toArray\n        val operandArray = operand.toArray\n        val length\
    \ = opArray.length\n        val result = operandArray(0)\n        val op1 = opArray(0)\n\
    \        val op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 =\
    \ opArray(3)\n        val op5 = opArray(4)\n        val op6 = opArray(5)\n   \
    \     val op7 = opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n\
    \        val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val op51 = opArray(50)\n", "        val\
    \ ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLength = ops.size\n        val operandLength = operands.size -\
    \ 1\n        val result = operands(0)\n        ops.zipWithIndex.foreach { case\
    \ (op, i) =>\n            val op1 = ops(i)\n            val op2 = ops(i + 1)\n\
    \            val operand1 = operands(i)\n            val operand2 = operands(i\
    \ + 1)\n            val op1Length = op1.length\n            val op2Length = op2.length\n\
    \            val operand1Length = operand1.length\n            val operand2Length\
    \ = operand2.length\n            val op1Length = op1Length\n            val op2Length\
    \ = op2Length\n            val operand1Length = operand1Length\n            val\
    \ operand2Length = operand2Length\n            val op1Length = op1Length\n   \
    \         val op2Length = op2Length\n            val operand1Length = operand1Length\n\
    \            val operand2Length = operand2Length\n            val op1Length =\
    \ op1Length\n            val op2Length = op2Length\n            val operand1Length\
    \ = operand1Length\n            val operand2Length = operand2Length\n        \
    \    val op1Length = op1Length\n            val op2Length = op2Length\n      \
    \      val operand1Length = operand1Length\n            val operand2Length = operand2Length\n\
    \            val op1Length = op1Length\n            val op2Length = op2Length\n\
    \            val operand1Length = operand1Length\n            val operand2Length\
    \ = operand2Length\n            val op1Length = op1Length\n            val op2Length\
    \ = op2Length\n            val operand1Length = operand1Length\n            val\
    \ operand2Length = operand2Length\n            val op1Length = op1Length\n   \
    \         val op2Length = op2Length\n            val operand1Length = operand1Length\n\
    \            val operand2Length = operand2Length\n            val op1Length =\
    \ op1Length\n            val op2Length = op2Length\n            val operand1Length\
    \ = operand1Length\n            val operand2Length = operand2Length\n        \
    \    val op1Length = op1Length\n            val op2Length = op2Length\n      \
    \      val operand1Length = operand1Length\n            val operand2Length = operand2Length\n\
    \            val op1Length = op1Length\n            val op2Length = op2Length\n\
    \            val operand1Length = operand1Length\n            val operand2Length\
    \ = operand2Length\n            val op1Length = op1Length\n            val op2Length\
    \ = op2Length\n            val operand", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.dropRight(1)\n\
    \        val operandList = operandList.drop(1)\n        val operatorList = operatorList.map(_.toUpperCase)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operatorList\
    \ = operatorList.dropRight(1)\n        val operandList = operandList.drop(1)\n\
    \        val operatorList = operatorList.map(_.toUpperCase)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operatorList = operatorList.dropRight(1)\n\
    \        val operandList = operandList.drop(1)\n        val operatorList = operatorList.map(_.toUpperCase)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operatorList\
    \ = operatorList.dropRight(1)\n        val operandList = operandList.drop(1)\n\
    \        val operatorList = operatorList.map(_.toUpperCase)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operatorList = operatorList.dropRight(1)\n\
    \        val operandList = operandList.drop(1)\n        val operatorList = operatorList.map(_.toUpperCase)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operatorList\
    \ = operatorList.dropRight(1)\n        val operandList = operandList.drop(1)\n\
    \        val operatorList = operatorList.map(_.toUpperCase)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operatorList = operatorList.dropRight(1)\n\
    \        val operandList = operandList.drop(1)\n        val operatorList = operatorList.map(_.toUpperCase)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operatorList\
    \ = operatorList.dropRight(1)\n        val operandList = operandList.drop(1)\n\
    \        val operatorList = operatorList.map(_.toUpperCase)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operatorList = operatorList.dropRight(1)\n\
    \        val operandList = operandList.drop(1)\n        val operatorList = operatorList.map(_.toUpperCase)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operatorList\
    \ = operatorList.dropRight(1)\n        val operandList = operandList.drop(1)\n\
    \        val operatorList = operatorList.map(_.toUpperCase)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operatorList = operatorList.dropRight(1)\n\
    \        val operandList = operandList.drop(1)\n        val operatorList = operatorList.map(_.toUpperCase)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operatorList\
    \ = operatorList.dropRight(1)\n        val operandList = operandList.", "    \
    \    val ops = op.map(x => x.toChar)\n        val operands = operand.map(x =>\
    \ x.toLong)\n        val opLen = ops.size\n        val operandLen = operands.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operands(operandIndex)\n\
    \        while (operandIndex < operandLen) {\n            val op = ops(opIndex)\n\
    \            val operand = operands(operandIndex)\n            val opResult =\
    \ if (op == '+') result + operand else result - operand\n            val opResult\
    \ = if (op == '*') result * operand else result / operand\n            val opResult\
    \ = if (op == '/') result / operand else result % operand\n            val opResult\
    \ = if (op == '%') result % operand else result ** operand\n            val opResult\
    \ = if (op == '^') result ^ operand else result & operand\n            val opResult\
    \ = if (op == '&') result & operand else result | operand\n            val opResult\
    \ = if (op == '|') result | operand else result ^ operand\n            val opResult\
    \ = if (op == '-') result - operand else result + operand\n            val opResult\
    \ = if (op == '+') result + operand else result - operand\n            val opResult\
    \ = if (op == '*') result * operand else result / operand\n            val opResult\
    \ = if (op == '/') result / operand else result % operand\n            val opResult\
    \ = if (op == '%') result % operand else result ** operand\n            val opResult\
    \ = if (op == '^') result ^ operand else result & operand\n            val opResult\
    \ = if (op == '&') result & operand else result | operand\n            val opResult\
    \ = if (op == '|') result | operand else result ^ operand\n            val opResult\
    \ = if (op == '-') result - operand else result + operand\n            val opResult\
    \ = if (op == '+') result + operand else result - operand\n            val opResult\
    \ = if (op == '*') result * operand else result / operand\n            val opResult\
    \ = if (op == '/') result / operand else result % operand\n            val opResult\
    \ = if (op == '%') result % operand else result ** operand\n            val opResult\
    \ = if (op == '^') result ^ operand else result & operand\n            val opResult\
    \ = if (op == '&') result & operand else result | operand\n            val opResult\
    \ = if (op == '|') result | operand else result ^ operand\n            val opResult\
    \ = if (op == '-') ", "        val ops = op.map(_.toUpperCase)\n        val opLen\
    \ = ops.length\n        val opArray = ops.toArray\n        val operandArray =\
    \ operand.toArray\n        val opArrayLen = opArray.length\n        val operandArrayLen\
    \ = operandArray.length\n        val result = operandArray(0)\n        val op1\
    \ = opArray(0)\n        val op2 = opArray(1)\n        val op3 = opArray(2)\n \
    \       val op4 = opArray(3)\n        val op5 = opArray(4)\n        val op6 =\
    \ opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n   \
    \     val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11 =\
    \ opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val opLength =\
    \ opList.size\n        val operandLength = operandList.size\n        val opIndex\
    \ = 0\n        val operandIndex = 0\n        val opStack = mutable.Stack[String]()\n\
    \        val operandStack = mutable.Stack[Long]()\n        val result = operandStack.last\n\
    \        val opStackSize = opStack.size()\n        val operandStackSize = operandStack.size()\n\
    \        val opStackIndex = opStackSize - 1\n        val operandStackIndex = operandStackSize\
    \ - 1\n        val opStackElement = opStack(opStackIndex)\n        val operandStackElement\
    \ = operandStack(operandStackIndex)\n        while(opStackIndex >= 0 && operandStackIndex\
    \ >= 0) {\n            val opElement = opStack(opStackIndex)\n            val\
    \ operandElement = operandStack(operandStackIndex)\n            val opElementLower\
    \ = opElement.toLowerCase\n            val operandElementLower = operandElement.toString.toLowerCase\n\
    \            if(opElementLower == opStackElement) {\n                opStackIndex\
    \ -= 1\n                operandStackIndex -= 1\n                opStackElement\
    \ = opStack(opStackIndex)\n                operandStackElement = operandStack(operandStackIndex)\n\
    \            } else {\n                val opElementUpper = opElement.toUpperCase\n\
    \                val operandElementUpper = operandElement.toString.toUpperCase\n\
    \                if(opElementUpper == opStackElement) {\n                    opStackIndex\
    \ -= 1\n                    operandStackIndex -= 1\n                    opStackElement\
    \ = opStack(opStackIndex)\n                    operandStackElement = operandStack(operandStackIndex)\n\
    \                } else {\n                    val opElementDigit = opElementDigit(opElementLower)\n\
    \                    val operandElementDigit = operandElementDigit(operandElementLower)\n\
    \                    if(opElementDigit == opStackElement) {\n                \
    \        opStackIndex -= 1\n                        operandStackIndex -= 1\n \
    \                       opStackElement = opStack(opStackIndex)\n             \
    \           operandStackElement = operandStack(operandStackIndex)\n          \
    \          } else {\n                        val opElementDigit2 = opElementDigit(opElementUpper)\n\
    \                        val operandElementDigit2 = operandElementDigit(operandElementUpper)\n\
    \                        if(opElementDigit2 == opStackElement) {\n           \
    \                 opStackIndex -= 1\n                            operandStackIndex\
    \ -= 1\n                            opStackElement = opStack(opStackIndex)\n \
    \                           operandStackElement = operandStack(operandStackIndex)\n\
    \                        } else {\n                            val opElementDigit3\
    \ = opElementDigit(opElementDigit)\n                            val operandElementDigit3\
    \ = operandElementDigit(operandElementDigit", "        val opList = op.map(x =>\
    \ x.toChar)\n        val operandList = operand.map(x => x.toLong)\n        val\
    \ opLength = opList.length\n        val operandLength = operandList.length\n \
    \       val opIndex = 0\n        val operandIndex = 0\n        val result = 0\n\
    \        while(opIndex < opLength && operandIndex < operandLength) {\n       \
    \     val op = opList(opIndex)\n            val operand = operandList(operandIndex)\n\
    \            val opResult = if (op == '+') operand.plus(result) else operand.minus(result)\n\
    \            val operandResult = if (op == '-') operand.minus(result) else operand.plus(result)\n\
    \            val opResultFloor = if (op == '/') operand.floorDiv(result) else\
    \ operand.floorMod(result)\n            val operandResultFloor = if (op == '%')\
    \ operand.floorMod(result) else operand.floorDiv(result)\n            val opResultExp\
    \ = if (op == '**') operand.pow(result) else operand.pow(result)\n           \
    \ val operandResultExp = if (op == '**') operand.pow(result) else operand.pow(result)\n\
    \            val opResultMul = if (op == '*') operand.times(result) else operand.times(result)\n\
    \            val operandResultMul = if (op == '*') operand.times(result) else\
    \ operand.times(result)\n            val opResultAdd = if (op == '+') operand.plus(result)\
    \ else operand.minus(result)\n            val operandResultAdd = if (op == '+')\
    \ operand.plus(result) else operand.minus(result)\n            val opResultSub\
    \ = if (op == '-') operand.minus(result) else operand.plus(result)\n         \
    \   val operandResultSub = if (op == '-') operand.minus(result) else operand.plus(result)\n\
    \            val opResultMulFloor = if (op == '*') operand.floorMod(result) else\
    \ operand.floorDiv(result)\n            val operandResultMulFloor = if (op ==\
    \ '*') operand.floorMod(result) else operand.floorDiv(result)\n            val\
    \ opResultMulExp = if (op == '*') operand.pow(result) else operand.pow(result)\n\
    \            val operandResultMulExp = if (op == '*') operand.pow(result) else\
    \ operand.pow(result)\n            val opResultAddFloor = if (op == '+') operand.plus(result)\
    \ else operand.minus(result)\n            val operandResultAddFloor = if (op ==\
    \ '+') operand.plus(result) else operand.minus(result)\n            val opResultAddExp\
    \ = if (op == '+') operand.plus(result) else ", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val result = operandList.foldLeft(0)((acc,\
    \ x) => acc + (opList.indexOf(x) * operandList(x)))\n        result", "      \
    \  val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 - 1 -\
    \ 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen -\
    \ 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMin", "        val\
    \ opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"+\"\
    )\n        val ops = opList.split(\"\\\\+\")\n        val operands = operandList.split(\"\
    \\\\+\")\n        val opLen = ops.size\n        val opLen2 = opLen/2\n       \
    \ val opLen3 = opLen2/2\n        val opLen4 = opLen2/3\n        val opLen5 = opLen2/4\n\
    \        val opLen6 = opLen2/5\n        val opLen7 = opLen2/6\n        val opLen8\
    \ = opLen2/7\n        val opLen9 = opLen2/8\n        val opLen10 = opLen2/9\n\
    \        val opLen11 = opLen2/10\n        val opLen12 = opLen2/11\n        val\
    \ opLen13 = opLen2/12\n        val opLen14 = opLen2/13\n        val opLen15 =\
    \ opLen2/14\n        val opLen16 = opLen2/15\n        val opLen17 = opLen2/16\n\
    \        val opLen18 = opLen2/17\n        val opLen19 = opLen2/18\n        val\
    \ opLen20 = opLen2/19\n        val opLen21 = opLen2/20\n        val opLen22 =\
    \ opLen2/21\n        val opLen23 = opLen2/22\n        val opLen24 = opLen2/23\n\
    \        val opLen25 = opLen2/24\n        val opLen26 = opLen2/25\n        val\
    \ opLen27 = opLen2/26\n        val opLen28 = opLen2/27\n        val opLen29 =\
    \ opLen2/28\n        val opLen30 = opLen2/29\n        val opLen31 = opLen2/30\n\
    \        val opLen32 = opLen2/31\n        val opLen33 = opLen2/32\n        val\
    \ opLen34 = opLen2/33\n        val opLen35 = opLen2/34\n        val opLen36 =\
    \ opLen2/35\n        val opLen37 = opLen2/36\n        val opLen38 = opLen2/37\n\
    \        val opLen39 = opLen2/38\n        val opLen40 = opLen2/39\n        val\
    \ opLen41 = opLen2/40\n        val opLen42 = opLen2/41\n        val opLen43 =\
    \ opLen2/42\n        val opLen44 = opLen2/43\n        val opLen", "        val\
    \ opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val operatorList = opList.filterNot(_.equals(\"*\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"*\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    /\"))\n        val operandList = operandList.filterNot(_.equals(\"/\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"**\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"**\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"+\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    +\"))\n        val operatorList = operatorList.filterNot(_.equals(\"-\"))\n  \
    \      val operandList = operandList.filterNot(_.equals(\"-\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"*\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    *\"))\n        val operatorList = operatorList.filterNot(_.equals(\"//\"))\n \
    \       val operandList = operandList.filterNot(_.equals(\"//\"))\n        val\
    \ operatorList = operatorList.filterNot(_.equals(\"**\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"**\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    +\"))\n        val operandList = operandList.filterNot(_.equals(\"+\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"-\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"-\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    *\"))\n        val operandList = operandList.filterNot(_.equals(\"*\"))\n    \
    \    val operatorList = operatorList.filterNot(_.equals(\"//\"))\n        val\
    \ operandList = operandList.filterNot(_.equals(\"//\"))\n        val operatorList\
    \ = operatorList.filterNot(_.equals(\"**\"))\n        val operandList = operandList.filterNot(_.equals(\"\
    **\"))\n        val operatorList = operatorList.filterNot(_.equals(\"+\"))\n \
    \       val operandList = operandList.filterNot(_.equals(\"+\"))\n        val\
    \ operatorList = operatorList.filterNot(_.equals(\"-\"))\n        val operandList\
    \ = operandList.filterNot(_.equals(\"-\"))\n        val operatorList = operatorList.filterNot(_.equals(\"\
    *\"))\n        val operandList = operandList.filterNot(_.equals(\"*\"))\n    \
    \    val operatorList = operatorList.filterNo", "        val opList = op.map(x\
    \ => x.toChar).toList\n        val operandList = operand.map(x => x.toLong).toList\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val ", "        val opList = op.map(x => x.toChar)\n      \
    \  val operandList = operand.map(x => x.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opArray = opList.map(x\
    \ => x.toInt)\n        val operandArray = operandList.map(x => x.toInt)\n    \
    \    val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = op", "        val ops = op.map(_.toUpperCase)\n \
    \       val opArr = ops.toArray\n        val opLen = opArr.length\n        val\
    \ opArr_1 = opArr.drop(1)\n        val opArr_2 = opArr.drop(2)\n        val opArr_3\
    \ = opArr.drop(3)\n        val opArr_4 = opArr.drop(4)\n        val opArr_5 =\
    \ opArr.drop(5)\n        val opArr_6 = opArr.drop(6)\n        val opArr_7 = opArr.drop(7)\n\
    \        val opArr_8 = opArr.drop(8)\n        val opArr_9 = opArr.drop(9)\n  \
    \      val opArr_10 = opArr.drop(10)\n        val opArr_11 = opArr.drop(11)\n\
    \        val opArr_12 = opArr.drop(12)\n        val opArr_13 = opArr.drop(13)\n\
    \        val opArr_14 = opArr.drop(14)\n        val opArr_15 = opArr.drop(15)\n\
    \        val opArr_16 = opArr.drop(16)\n        val opArr_17 = opArr.drop(17)\n\
    \        val opArr_18 = opArr.drop(18)\n        val opArr_19 = opArr.drop(19)\n\
    \        val opArr_20 = opArr.drop(20)\n        val opArr_21 = opArr.drop(21)\n\
    \        val opArr_22 = opArr.drop(22)\n        val opArr_23 = opArr.drop(23)\n\
    \        val opArr_24 = opArr.drop(24)\n        val opArr_25 = opArr.drop(25)\n\
    \        val opArr_26 = opArr.drop(26)\n        val opArr_27 = opArr.drop(27)\n\
    \        val opArr_28 = opArr.drop(28)\n        val opArr_29 = opArr.drop(29)\n\
    \        val opArr_30 = opArr.drop(30)\n        val opArr_31 = opArr.drop(31)\n\
    \        val opArr_32 = opArr.drop(32)\n        val opArr_33 = opArr.drop(33)\n\
    \        val opArr_34 = opArr.drop(34)\n        val opArr_35 = opArr.drop(35)\n",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val operatorList = opList.filter(_.contains(\"+\"))\n        val operatorList2\
    \ = opList.filter(_.contains(\"-\"))\n        val operatorList3 = opList.filter(_.contains(\"\
    *\"))\n        val operatorList4 = opList.filter(_.contains(\"//\"))\n       \
    \ val operatorList5 = opList.filter(_.contains(\"**\"))\n        val operatorList6\
    \ = opList.filter(_.contains(\"%\"))\n        val operatorList7 = opList.filter(_.contains(\"\
    &\"))\n        val operatorList8 = opList.filter(_.contains(\"|\"))\n        val\
    \ operatorList9 = opList.filter(_.contains(\"^\"))\n        val operatorList10\
    \ = opList.filter(_.contains(\"~\"))\n        val operatorList11 = opList.filter(_.contains(\"\
    ?\"))\n        val operatorList12 = opList.filter(_.contains(\":\"))\n       \
    \ val operatorList13 = opList.filter(_.contains(\",\"))\n        val operatorList14\
    \ = opList.filter(_.contains(\".\"))\n        val operatorList15 = opList.filter(_.contains(\"\
    :=\"))\n        val operatorList16 = opList.filter(_.contains(\";\"))\n      \
    \  val operatorList17 = opList.filter(_.contains(\":!\"))\n        val operatorList18\
    \ = opList.filter(_.contains(\":<\"))\n        val operatorList19 = opList.filter(_.contains(\"\
    :>\"))\n        val operatorList20 = opList.filter(_.contains(\":=\"))\n     \
    \   val operatorList21 = opList.filter(_.contains(\":!=\"))\n        val operatorList22\
    \ = opList.filter(_.contains(\":<=\"))\n        val operatorList23 = opList.filter(_.contains(\"\
    :>=\"))\n        val operatorList24 = opList.filter(_.contains(\":=\"))\n    \
    \    val operatorList25 = opList.filter(_.contains(\":!=\"))\n        val operatorList26\
    \ = opList.filter(_.contains(\":<=\"))\n        val operatorList27 = opList.filter(_.contains(\"\
    :>=\"))\n        val operatorList28 = opList.filter(_.contains(\":=\"))\n    \
    \    val operatorList29 = opList.filter(_.contains(\":!=\"))\n        val operatorList30\
    \ = opList.filter(_.contains(\":<=\"))\n        val operatorList31 = opList.filter(_.contains(\"\
    :>=\"))\n        val operatorList32 = opList.filter(_.contain", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    -\")\n        val opIndex3 = opList.indexOf(\"*\")\n        val opIndex4 = opList.indexOf(\"\
    /\")\n        val opIndex5 = opList.indexOf(\"**\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"//\")\n        val opIndex8 = opList.indexOf(\"\
    &\")\n        val opIndex9 = opList.indexOf(\"|\")\n        val opIndex10 = opList.indexOf(\"\
    ^\")\n        val opIndex11 = opList.indexOf(\"~\")\n        val opIndex12 = opList.indexOf(\"\
    <<\")\n        val opIndex13 = opList.indexOf(\">>\")\n        val opIndex14 =\
    \ opList.indexOf(\"==\")\n        val opIndex15 = opList.indexOf(\"!=\")\n   \
    \     val opIndex16 = opList.indexOf(\"<\")\n        val opIndex17 = opList.indexOf(\"\
    >\")\n        val opIndex18 = opList.indexOf(\"<=\")\n        val opIndex19 =\
    \ opList.indexOf(\">=\")\n        val opIndex20 = opList.indexOf(\"==\")\n   \
    \     val opIndex21 = opList.indexOf(\"!=\")\n        val opIndex22 = opList.indexOf(\"\
    &\")\n        val opIndex23 = opList.indexOf(\"|\")\n        val opIndex24 = opList.indexOf(\"\
    ^\")\n        val opIndex25 = opList.indexOf(\"~\")\n        val opIndex26 = opList.indexOf(\"\
    <<\")\n        val opIndex27 = opList.indexOf(\">>\")\n        val opIndex28 =\
    \ opList.indexOf(\"==\")\n        val opIndex29 = opList.indexOf(\"!=\")\n   \
    \     val opIndex30 = opList.indexOf(\"<\")\n        val opIndex31 = opList.indexOf(\"\
    >\")\n        val opIndex32 = opList.indexOf(\"<<\")\n        val opIndex33 =\
    \ opList.indexOf(\">>\")\n        val opIndex34 = opList.indexOf(\"==\")\n   \
    \     val opIndex35 = opList.indexOf(\"!=\")\n        val opIndex36 = opList.indexOf(\"\
    <\")\n        val opIndex37 = opList.indexOf(\">\")\n        val opIndex38 = opList.indexOf(\"\
    <<\")\n        val opIndex39 = ", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLength\
    \ = opList.length\n        val operandLength = operandList.length - 1\n      \
    \  val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[String, Long]()\n        val opMapKeys = opList.map(x => x.toLowerCase)\n\
    \        val operandMapKeys = operandList.map(x => x.toLong)\n        val opMapValues\
    \ = opList.map(x => x.toLong)\n        val operandMapValues = operandList.map(x\
    \ => x.toLong)\n        val opMapKeySet = opMapKeys.toSet\n        val operandMapKeySet\
    \ = operandMapKeys.toSet\n        val opMapValueSet = opMapValues.toSet\n    \
    \    val operandMapValueSet = operandMapValues.toSet\n        val opMapKeysLength\
    \ = opMapKeySet.size\n        val operandMapKeysLength = operandMapKeySet.size\n\
    \        val opMapValuesLength = opMapValueSet.size\n        val operandMapValuesLength\
    \ = operandMapValueSet.size\n        val opMapKeysSet = opMapKeySet.toSet\n  \
    \      val operandMapKeysSet = operandMapKeySet.toSet\n        val opMapValuesSet\
    \ = opMapValueSet.toSet\n        val operandMapValuesSet = operandMapValueSet.toSet\n\
    \        val opMapKeysSetLength = opMapKeysSet.size\n        val operandMapKeysSetLength\
    \ = operandMapKeysSet.size\n        val opMapValuesSetLength = opMapValuesSet.size\n\
    \        val operandMapValuesSetLength = operandMapValuesSet.size\n        val\
    \ opMapKeysSetSet = opMapKeysSet.toSet\n        val operandMapKeysSetSet = operandMapKeysSet.toSet\n\
    \        val opMapValuesSetSet = opMapValuesSet.toSet\n        val operandMapValuesSetSet\
    \ = operandMapValuesSet.toSet\n        val opMapKeysSetSetLength = opMapKeysSetSet.size\n\
    \        val operandMapKeysSetSetLength = operandMapKeysSetSet.size\n        val\
    \ opMapValuesSetSetLength = opMapValuesSetSet.size\n        val operandMapValuesSetSetLength\
    \ = operandMapValuesSetSet.size\n        val opMapKeysSetSetSet = opMapKeysSetSet.toSet\n\
    \        val operandMapKeysSetSetSet = operandMapKeysSet", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opArray = Array.ofDim[String](opLength)\n        val operandArray\
    \ = Array.ofDim[Long](operandLength)\n        var i = 0\n        while (i < opLength)\
    \ {\n            opArray(i) = opList(i)\n            i += 1\n        }\n     \
    \   var j = 0\n        while (j < operandLength) {\n            operandArray(j)\
    \ = operandList(j)\n            j += 1\n        }\n        val opArrayLength =\
    \ opArray.length\n        val operandArrayLength = operandArray.length\n     \
    \   val opArrayLength = opArrayLength - 1\n        val operandArrayLength = operandArrayLength\
    \ - 1\n        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength", " \
    \       val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n      \
    \  val opList = ops.toList\n        val operandList = operand.toList\n       \
    \ val operandLen = operandList.size\n        val operandList = operandList.toList\n\
    \        val operandListLen = operandList.size\n        val operandListLenMinusOne\
    \ = operandListLen - 1\n        val operandListLenMinusOneMinusOne = operandListLen\
    \ - 2\n        val operandListLenMinusOneMinusOneMinusOne = operandListLen - 3\n\
    \        val operandListLenMinusOneMinusOneMinusOneMinusOne = operandListLen -\
    \ 4\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandListLen\
    \ - 5\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 6\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 7\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 8\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 9\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 10\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 11\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 12\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 13\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val ops = op.map(_.toLowerCase)\n        val opArray = ops.toArray\n  \
    \      val operandArray = operand.toArray\n        val length = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val result = operandArray(0)\n\
    \        val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n        val op50 = opArray(49)\n        ", " \
    \       val ops = op.map(_.toLowerCase).toList\n        val opArray = ops.toArray\n\
    \        val operandArray = operand.toArray\n        val length = opArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val op51 = opArray(50)\n", "        val\
    \ ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opCount = ops.size\n        val operandCount = operands.size\n  \
    \      val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"\
    -\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    //\")\n        val opIndex7 = ops.indexOf(\"%\")\n        val opIndex8 = ops.indexOf(\"\
    *\")\n        val opIndex9 = ops.indexOf(\"+\")\n        val opIndex10 = ops.indexOf(\"\
    *\")\n        val opIndex11 = ops.indexOf(\"+\")\n        val opIndex12 = ops.indexOf(\"\
    *\")\n        val opIndex13 = ops.indexOf(\"+\")\n        val opIndex14 = ops.indexOf(\"\
    *\")\n        val opIndex15 = ops.indexOf(\"+\")\n        val opIndex16 = ops.indexOf(\"\
    *\")\n        val opIndex17 = ops.indexOf(\"+\")\n        val opIndex18 = ops.indexOf(\"\
    *\")\n        val opIndex19 = ops.indexOf(\"+\")\n        val opIndex20 = ops.indexOf(\"\
    *\")\n        val opIndex21 = ops.indexOf(\"+\")\n        val opIndex22 = ops.indexOf(\"\
    *\")\n        val opIndex23 = ops.indexOf(\"+\")\n        val opIndex24 = ops.indexOf(\"\
    *\")\n        val opIndex25 = ops.indexOf(\"+\")\n        val opIndex26 = ops.indexOf(\"\
    *\")\n        val opIndex27 = ops.indexOf(\"+\")\n        val opIndex28 = ops.indexOf(\"\
    *\")\n        val opIndex29 = ops.indexOf(\"+\")\n        val opIndex30 = ops.indexOf(\"\
    *\")\n        val opIndex31 = ops.indexOf(\"+\")\n        val opIndex32 = ops.indexOf(\"\
    *\")\n        val opIndex33 = ops.indexOf(\"+\")\n        val opIndex34 = ops.indexOf(\"\
    *\")\n        val opIndex35 = ops.indexOf(\"+\")\n        val opIndex36 = ops.indexOf(\"\
    *\")\n        val opIndex37 = ops.indexOf(\"+\")\n        val opIndex38 = ops.indexOf(\"\
    *\")\n        val opIndex39 = ops.indexOf(\"+\")\n        val opIndex40 = ops.indexOf(\"\
    *\")\n        val opIndex41 = ops.indexOf(\"+\")\n        val opIndex42 = ops.indexOf(\"\
    *\")\n        val opIndex43 = ops.indexOf(\"+\")\n        val opIndex44 = ops.indexOf(\"\
    *\")\n        val ", "        val ops = op.map(_.toUpperCase)\n        val operands\
    \ = operand.map(_.toLong)\n        val opLen = ops.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLen = operands.size - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n      \
    \  val opLenMinusOneMinusOneMinusOne = opLen - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n      \
    \  val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -\
    \ 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMin",
  "        val ops = op.map(_.toLowerCase)\n        val opList = ops.toList\n    \
    \    val opLen = opList.size\n        val operandList = operand.toList\n     \
    \   val operandLen = operandList.size\n        val opLenMinusOne = opLen - 1\n\
    \        val operandLenMinusOne = operandLen - 1\n        val result = operandList(0)\n\
    \        val op1 = operandList(1)\n        val op2 = operandList(2)\n        val\
    \ op3 = operandList(3)\n        val op4 = operandList(4)\n        val op5 = operandList(5)\n\
    \        val op6 = operandList(6)\n        val op7 = operandList(7)\n        val\
    \ op8 = operandList(8)\n        val op9 = operandList(9)\n        val op10 = operandList(10)\n\
    \        val op11 = operandList(11)\n        val op12 = operandList(12)\n    \
    \    val op13 = operandList(13)\n        val op14 = operandList(14)\n        val\
    \ op15 = operandList(15)\n        val op16 = operandList(16)\n        val op17\
    \ = operandList(17)\n        val op18 = operandList(18)\n        val op19 = operandList(19)\n\
    \        val op20 = operandList(20)\n        val op21 = operandList(21)\n    \
    \    val op22 = operandList(22)\n        val op23 = operandList(23)\n        val\
    \ op24 = operandList(24)\n        val op25 = operandList(25)\n        val op26\
    \ = operandList(26)\n        val op27 = operandList(27)\n        val op28 = operandList(28)\n\
    \        val op29 = operandList(29)\n        val op30 = operandList(30)\n    \
    \    val op31 = operandList(31)\n        val op32 = operandList(32)\n        val\
    \ op33 = operandList(33)\n        val op34 = operandList(34)\n        val op35\
    \ = operandList(35)\n        val op36 = operandList(36)\n        val op37 = operandList(37)\n\
    \        val op38 = operandList(38)\n        val op39 = operandList(39)\n    \
    \    val op40 = operandList(40)\n        val op41 = operandList(41)\n        val\
    \ op42 = operandList(42)\n        val op43 = operandList(43)\n        val op44\
    \ = operandList(44)\n        val op45 = operandList(45)\n        val op46 = operandList(46)\n\
    \        val op47 = operandList(47)\n        val op48 = operand", "        val\
    \ ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toInt).toList\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"*\")\n        val opLenMinusOne = opLen - 1\n \
    \       val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n\
    \        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        var result = 0L\n        val\
    \ opIndex = 0\n        val operandIndex = 0\n        while(operandIndex < operandLength)\
    \ {\n            val opKey = opList(opIndex)\n            val operandValue = operandList(operandIndex)\n\
    \            val opValue = opMap.get(opKey)\n            if(opValue == null) {\n\
    \                opMap.put(opKey, operandValue)\n            } else {\n      \
    \          operandMap.put(opKey, operandValue)\n            }\n            operandIndex\
    \ += 1\n            opIndex += 1\n        }\n        val opKeys = opMap.keySet\n\
    \        val opValues = opMap.values.toList\n        val operandKeys = operandMap.keySet\n\
    \        val operandValues = operandMap.values.toList\n        val opLength =\
    \ opValues.length\n        val operandLength = operandValues.length\n        val\
    \ opIndex = 0\n        val operandIndex = 0\n        while(operandIndex < operandLength)\
    \ {\n            val opKey = opKeys(opIndex)\n            val operandValue = operandValues(operandIndex)\n\
    \            val opValue = opValues.get(opIndex)\n            result += opValue\
    \ * operandValue\n            operandIndex += 1\n            opIndex += 1\n  \
    \      }\n        result", "        val ops = op.map(_.toUpperCase)\n        val\
    \ opLen = ops.length\n        val opList = ops.map(_.toUpperCase)\n        val\
    \ opLen = opList.length\n        val operandLen = operand.length\n        val\
    \ operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val opListLen = opList.length\n        val opListLen = opListLen\n  \
    \      val opListLen = opListLen\n        val opListLen = opListLen\n        val\
    \ opListLen = opListLen\n        val opListLen = opListLen\n        val opListLen\
    \ = opListLen\n        val opListLen = opListLen\n        val opListLen = opListLen\n\
    \        val opListLen = opListLen\n        val opListLen = opListLen\n      \
    \  val opListLen = opListLen\n        val opListLen = opListLen\n        val opListLen\
    \ = opListLen\n        val opListLen = opListLen\n        val opListLen = opListLen\n\
    \        val opListLen = opListLen\n        val opListLen = opListLen\n      \
    \  val opListLen = opListLen\n        val opListLen = opListLen\n        val opListLen\
    \ = opListLen\n        val opListLen = opListLen\n        val opListLen = opListLen\n\
    \        val opListLen = opListLen\n        val opListLen = opListLen\n      \
    \  val opListLen = opListLen\n        val opListLen = opListLen\n        val opListLen\
    \ = opListLen\n        val opListLen = opListLen\n        val opListLen = opListLen\n\
    \        val opListLen = opListLen\n        val opListLen = opListLen\n      \
    \  val opListLen = opListLen\n        val opListLen = opListLen\n        val opListLen\
    \ = opListLen\n        val opListLen = opListLen\n        val opListLen = opListLen\n\
    \        val opListLen = opListLen\n        val opListLen = opListLen\n      \
    \  val opListLen = opListLen\n        val opListLen = opListLen\n        val opListLen\
    \ = opListLen\n        val opListLen = opListLen\n        val opListLen = opListLen\n\
    \        val opList", "        val ops = op.map(_.toLowerCase)\n        val opLen\
    \ = ops.size\n        val opLenMinusOne = opLen - 1\n        val operandLen =\
    \ operand.size\n        val operandLenMinusOne = operandLen - 1\n        val ops\
    \ = ops.toList\n        val operands = operand.toList\n        val operandsLen\
    \ = operands.size\n        val operandsLenMinusOne = operandsLen - 1\n       \
    \ val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne = operandsLen\
    \ - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val opLenMinusOne", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = ops.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n      \
    \  val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n\
    \        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne", "        val\
    \ ops = op.map(x => x.toChar)\n        val operands = operand.map(x => x.toLong)\n\
    \        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val result = operands.foldLeft(operands.head) { (result, operand) =>\n\
    \            val op = ops.head\n            val operand1 = operand\n         \
    \   val operand2 = result\n            val op1 = operand1 match {\n          \
    \      case '+' => operand1 + operand2\n                case '-' => operand1 -\
    \ operand2\n                case '*' => operand1 * operand2\n                case\
    \ '/' => operand1 / operand2\n                case '%' => operand1 % operand2\n\
    \                case '^' => operand1 ^ operand2\n            }\n            val\
    \ op2 = operand1 match {\n                case '+' => operand1 + operand2\n  \
    \              case '-' => operand1 - operand2\n                case '*' => operand1\
    \ * operand2\n                case '/' => operand1 / operand2\n              \
    \  case '%' => operand1 % operand2\n                case '^' => operand1 ^ operand2\n\
    \            }\n            val op3 = operand1 match {\n                case '+'\
    \ => operand1 + operand2\n                case '-' => operand1 - operand2\n  \
    \              case '*' => operand1 * operand2\n                case '/' => operand1\
    \ / operand2\n                case '%' => operand1 % operand2\n              \
    \  case '^' => operand1 ^ operand2\n            }\n            val op4 = operand1\
    \ match {\n                case '+' => operand1 + operand2\n                case\
    \ '-' => operand1 - operand2\n                case '*' => operand1 * operand2\n\
    \                case '/' => operand1 / operand2\n                case '%' =>\
    \ operand1 % operand2\n                case '^' => operand1 ^ operand2\n     \
    \       }\n            val op5 = operand1 match {\n                case '+' =>\
    \ operand1 + operand2\n                case '-' => operand1 - operand2\n     \
    \           case '*' => operand1 * operand2\n                case '/' => operand1\
    \ / operand2\n                case '%' => operand1 % operand2\n              \
    \  case '^' => operand1 ^ operand2\n            }\n            val op6 = operand1\
    \ match {\n                case '+' => operand1 + operand2\n                case\
    \ '-' => operand1 - operand2\n                case '*' => operand1 * operand2\n\
    \                case '/' => operand1 / operand2\n                case '%' =>\
    \ operand1 % operand2\n                case '^' => operand1 ^ operand2\n     \
    \       }\n            val op7 = operand1 match {\n                case '+' =>\
    \ operand1 + operand2\n                case '-' => operand1 - operand2\n     \
    \           case '*' => operand1 * operand2\n                case '/' => operand1\
    \ / operand2\n                case '%' => operand1 % operand2\n              \
    \  case '^' => operand1 ^ operand2\n            }\n            val op8 = operand1\
    \ match {\n                case '+' => operand1 + ", "        val ops = op.map(_.toUpperCase)\n\
    \        val opList = ops.toList\n        val opLen = opList.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operands = operand.toList\n        val\
    \ operandLen = operands.size\n        val operandLenMinusOne = operandLen - 1\n\
    \        val operandsLenMinusOne = operandLen - 2\n        val operandsLen = operandLen\
    \ + 1\n        val operandsLenMinusTwo = operandLen + 2\n        val operandsLenMinusThree\
    \ = operandLen + 3\n        val operandsLenMinusFour = operandLen + 4\n      \
    \  val operandsLenMinusFive = operandLen + 5\n        val operandsLenMinusSix\
    \ = operandLen + 6\n        val operandsLenMinusSeven = operandLen + 7\n     \
    \   val operandsLenMinusEight = operandLen + 8\n        val operandsLenMinusNine\
    \ = operandLen + 9\n        val operandsLenMinusTen = operandLen + 10\n      \
    \  val operandsLenMinusEleven = operandLen + 11\n        val operandsLenMinusTwelve\
    \ = operandLen + 12\n        val operandsLenMinusThirteen = operandLen + 13\n\
    \        val operandsLenMinusFourteen = operandLen + 14\n        val operandsLenMinusFifteen\
    \ = operandLen + 15\n        val operandsLenMinusSixteen = operandLen + 16\n \
    \       val operandsLenMinusSeventeen = operandLen + 17\n        val operandsLenMinusEighteen\
    \ = operandLen + 18\n        val operandsLenMinusNineteen = operandLen + 19\n\
    \        val operandsLenMinusTwenty = operandLen + 20\n        val operandsLenMinusThirty\
    \ = operandLen + 21\n        val operandsLenMinusFourty = operandLen + 22\n  \
    \      val operandsLenMinusFifty = operandLen + 23\n        val operandsLenMinusSixty\
    \ = operandLen + 24\n        val operandsLenMinusSeventy = operandLen + 25\n \
    \       val operandsLenMinusEighty = operandLen + 26\n        val operandsLenMinusNinety\
    \ = operandLen + 27\n        val operandsLenMinusTwentyOne = operandLen + 28\n\
    \        val operandsLenMinusTw", "        val ops = op.map(_.toLowerCase)\n \
    \       val operands = operand.map(_.toLong)\n        val opLength = ops.size\n\
    \        val operandLength = operands.size\n        val result = operands.foldLeft(operands.head)\
    \ { (acc, op) =>\n            val opIndex = ops.indexOf(op)\n            val opLength\
    \ = ops.size\n            val operandLength = operands.size\n            val opLength\
    \ = ops.size\n            val operandLength = operands.size\n            val opIndex\
    \ = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n  \
    \          val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(acc)\n\
    \            val opIndex = ops.indexOf(op)", "        val ops = op.mkString(\"\
    +\")\n        val opArray = ops.split(\"\\\\+\")\n        val opArrayLength =\
    \ opArray.length\n        val operandArray = operand.mkString(\"+\")\n       \
    \ val operandArrayLength = operandArray.length\n        val opArrayLength = opArrayLength\
    \ - 1\n        val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength\n        val operandArrayLength = operandArrayLength\n     \
    \   val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operand", "        val\
    \ ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n        val opArray\
    \ = ops.toArray\n        val operandLen = operand.size\n        val operandArray\
    \ = operand.toArray\n        val result = operandArray(0)\n        val opIndex\
    \ = 0\n        val operandIndex = 1\n        while (operandIndex < operandLen)\
    \ {\n            val opVal = ops(opIndex)\n            val opValInt = opArray[opIndex]\n\
    \            val operandVal = operandArray(operandIndex)\n            val operandValInt\
    \ = operandArray[operandIndex]\n            val opValInt = opVal.toLong\n    \
    \        val operandValInt = operandVal.toLong\n            val opValInt = opVal.toInt\n\
    \            val operandValInt = operandVal.toInt\n            val opValInt =\
    \ opVal.toFloat\n            val operandValInt = operandVal.toFloat\n        \
    \    val opValInt = opVal.toDouble\n            val operandValInt = operandVal.toDouble\n\
    \            val opValInt = opVal.toBoolean\n            val operandValInt = operandVal.toBoolean\n\
    \            val opValInt = opVal.toChar\n            val operandValInt = operandVal.toChar\n\
    \            val opValInt = opVal.toByte\n            val operandValInt = operandVal.toByte\n\
    \            val opValInt = opVal.toShort\n            val operandValInt = operandVal.toShort\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toLong\n            val operandValInt = operandVal.toLong\n\
    \            val opValInt = opVal.toFloat\n            val operandValInt = operandVal.toFloat\n\
    \            val opValInt = opVal.toDouble\n            val operandValInt = operandVal.toDouble\n\
    \            val opValInt = opVal.toBoolean\n            val operandValInt = operandVal.toBoolean\n\
    \            val opValInt = opVal.toChar\n            val operandValInt = operandVal.toChar\n\
    \            val opValInt = opVal.toByte\n            val operandValInt = operandVal.toByte\n\
    \            val opValInt = opVal.toShort\n            val operandValInt = operandVal.toShort\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toLong\n            val operandValInt = operandVal.toLong\n",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    //\")\n        val opIndex5 = opList.indexOf(\"**\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"&\")\n        val opIndex8 = opList.indexOf(\"\
    |\")\n        val opIndex9 = opList.indexOf(\"^\")\n        val opIndex10 = opList.indexOf(\"\
    ~\")\n        val opIndex11 = opList.indexOf(\"<<\")\n        val opIndex12 =\
    \ opList.indexOf(\">>\")\n        val opIndex13 = opList.indexOf(\"==\")\n   \
    \     val opIndex14 = opList.indexOf(\"!=\")\n        val opIndex15 = opList.indexOf(\"\
    <\")\n        val opIndex16 = opList.indexOf(\">\")\n        val opIndex17 = opList.indexOf(\"\
    <=\")\n        val opIndex18 = opList.indexOf(\">=\")\n        val opIndex19 =\
    \ opList.indexOf(\"==\")\n        val opIndex20 = opList.indexOf(\"!=\")\n   \
    \     val opIndex21 = opList.indexOf(\"+\")\n        val opIndex22 = opList.indexOf(\"\
    *\")\n        val opIndex23 = opList.indexOf(\"/\")\n        val opIndex24 = opList.indexOf(\"\
    //\")\n        val opIndex25 = opList.indexOf(\"**\")\n        val opIndex26 =\
    \ opList.indexOf(\"%\")\n        val opIndex27 = opList.indexOf(\"&\")\n     \
    \   val opIndex28 = opList.indexOf(\"|\")\n        val opIndex29 = opList.indexOf(\"\
    ^\")\n        val opIndex30 = opList.indexOf(\"~\")\n        val opIndex31 = opList.indexOf(\"\
    <<\")\n        val opIndex32 = opList.indexOf(\">>\")\n        val opIndex33 =\
    \ opList.indexOf(\"==\")\n        val opIndex34 = opList.indexOf(\"!=\")\n   \
    \     val opIndex35 = opList.indexOf(\"<\")\n        val opIndex36 = opList.indexOf(\"\
    >\")\n        val opIndex37 = opList.indexOf(\"<=\")\n        val opIndex38 =\
    \ opList.indexOf(\">=\")\n        val opIndex", "        val ops = op.mkString(\"\
    +\")\n        val opArray = ops.split(\"\\\\+\")\n        val opArrayLength =\
    \ opArray.length\n        val operandArray = operand.map(_.toLong)\n        val\
    \ operandArrayLength = operandArray.length\n        val result = operandArray(0)\n\
    \        val operandArrayIndex = 1\n        val operandArrayIndexLength = operandArrayIndex.length\n\
    \        val operandArrayIndexArray = Array.ofDim[Int](operandArrayIndexLength)\n\
    \        val operandArrayIndexArrayLength = operandArrayIndexArray.length\n  \
    \      val operandArrayIndexArrayIndex = 0\n        val operandArrayIndexArrayIndexLength\
    \ = operandArrayIndexArray.length\n        val operandArrayIndexArrayIndexArray\
    \ = Array.ofDim[Int](operandArrayIndexArrayIndexLength)\n        val operandArrayIndexArrayIndexArrayLength\
    \ = operandArrayIndexArrayIndexArray.length\n        val operandArrayIndexArrayIndexArrayIndex\
    \ = 0\n        val operandArrayIndexArrayIndexArrayIndexLength = operandArrayIndexArrayIndexArray.length\n\
    \        val operandArrayIndexArrayIndexArrayIndexArray = Array.ofDim[Int](operandArrayIndexArrayIndexArrayIndexLength)\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayLength = operandArrayIndexArrayIndexArrayIndexArray.length\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayIndex = 0\n        val\
    \ operandArrayIndexArrayIndexArrayIndexArrayIndexLength = operandArrayIndexArrayIndexArrayIndexArray.length\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayIndexArray = Array.ofDim[Int](operandArrayIndexArrayIndexArrayIndexArrayIndexLength)\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayLength = operandArrayIndexArrayIndexArrayIndexArrayIndexArray.length\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0\n \
    \       val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexLength =\
    \ operandArrayIndexArrayIndexArrayIndexArrayIndexArray.length\n        val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex\
    \ = 0\n        val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexLength\
    \ = operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArray.length\n  \
    \      val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArray = Array.ofDim[Int](operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexLength)\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayLength\
    \ = operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArray.length\n\
    \        val operandArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex\
    \ = 0\n        val operandArrayIndex", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap3 = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap5 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap9 = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap11 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap12 = new mutable.HashMap[String, Long]()\n        val opMap13 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap15 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap16 = new mutable.HashMap[String, Long]()\n        val opMap17 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap18 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap19 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap20 = new mutable.HashMap[String, Long]()\n        val opMap21 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap22 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap23 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap24 = new mutable.HashMap[String, Long]()\n        val opMap25 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap26 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap27 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap28 = new mutable.HashMap[String, Long]()\n        val opMap29 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap30 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap31 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap", "        val ops = op.map(_.toLowerCase).toList\n        val opLen\
    \ = ops.size\n        val opLenMinusOne = opLen - 1\n        val operandLen =\
    \ operand.size\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOnePlusOne\
    \ = opLen + 1\n        val operandLenMinusOnePlusOne = operandLen + 1\n      \
    \  val opLenMinusOnePlusTwo = opLen + 2\n        val operandLenMinusOnePlusTwo\
    \ = operandLen + 2\n        val opLenMinusOnePlusThree = opLen + 3\n        val\
    \ operandLenMinusOnePlusThree = operandLen + 3\n        val opLenMinusOnePlusFour\
    \ = opLen + 4\n        val operandLenMinusOnePlusFour = operandLen + 4\n     \
    \   val opLenMinusOnePlusFive = opLen + 5\n        val operandLenMinusOnePlusFive\
    \ = operandLen + 5\n        val opLenMinusOnePlusSix = opLen + 6\n        val\
    \ operandLenMinusOnePlusSix = operandLen + 6\n        val opLenMinusOnePlusSeven\
    \ = opLen + 7\n        val operandLenMinusOnePlusSeven = operandLen + 7\n    \
    \    val opLenMinusOnePlusEight = opLen + 8\n        val operandLenMinusOnePlusEight\
    \ = operandLen + 8\n        val opLenMinusOnePlusNine = opLen + 9\n        val\
    \ operandLenMinusOnePlusNine = operandLen + 9\n        val opLenMinusOnePlusTen\
    \ = opLen + 10\n        val operandLenMinusOnePlusTen = operandLen + 10\n    \
    \    val opLenMinusOnePlusEleven = opLen + 11\n        val operandLenMinusOnePlusEleven\
    \ = operandLen + 11\n        val opLenMinusOnePlusTwelve = opLen + 12\n      \
    \  val operandLenMinusOnePlusTwelve = operandLen + 12\n        val opLenMinusOnePlusThirteen\
    \ = opLen + 13\n        val operandLenMinusOnePlusThirteen = operandLen + 13\n\
    \        val opLenMinusOnePlusFourteen = opLen + 14\n        val operandLenMinusOnePlusFourteen\
    \ = operandLen + 14\n        val opLenMinusOnePlusFifteen = opLen + 15\n     \
    \   val operandLenMinusOnePlus", "        val ops = op.map(x => x.toChar)\n  \
    \      val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opLen = opArray.length\n        val operandLen = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = op", "        val ops = op.map(_.toLowerCase)\n        val\
    \ opMap = ops.zip(operand).map(x => (x._1, x._2)).toMap\n        val opList =\
    \ ops.toList\n        val operandList = operand.toList\n        val operandCount\
    \ = operandList.size\n        val opCount = opList.size\n        val opMapCount\
    \ = opMap.values.toList\n        val opMapCount = opMapCount.size\n        val\
    \ opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n \
    \       val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMapCount.toInt\n\
    \        val opMapCount = opMapCount.toInt\n        val opMapCount = opMap", " \
    \       val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val length = ops.length\n        val operators = ops(0 until length-1)\n\
    \        val operandsLength = operands.length\n        val result = operands(0)\n\
    \        val operator = operators(0)\n        val operand1 = operands(1)\n   \
    \     val operand2 = operands(2)\n        val operator1 = operators(1)\n     \
    \   val operator2 = operators(2)\n        val operand3 = operands(3)\n       \
    \ val operand4 = operands(4)\n        val operator3 = operators(3)\n        val\
    \ operator4 = operators(4)\n        val operand5 = operands(5)\n        val operand6\
    \ = operands(6)\n        val operator5 = operators(5)\n        val operator6 =\
    \ operators(6)\n        val operand7 = operands(7)\n        val operand8 = operands(8)\n\
    \        val operator7 = operators(7)\n        val operator8 = operators(8)\n\
    \        val operand9 = operands(9)\n        val operand10 = operands(10)\n  \
    \      val operator9 = operators(9)\n        val operator10 = operators(10)\n\
    \        val operand11 = operands(11)\n        val operand12 = operands(12)\n\
    \        val operator11 = operators(11)\n        val operator12 = operators(12)\n\
    \        val operand13 = operands(13)\n        val operand14 = operands(14)\n\
    \        val operator13 = operators(13)\n        val operator14 = operators(14)\n\
    \        val operand15 = operands(15)\n        val operand16 = operands(16)\n\
    \        val operator15 = operators(15)\n        val operator16 = operators(16)\n\
    \        val operand17 = operands(17)\n        val operand18 = operands(18)\n\
    \        val operator17 = operators(17)\n        val operator18 = operators(18)\n\
    \        val operand19 = operands(19)\n        val operand20 = operands(20)\n\
    \        val operator19 = operators(19)\n        val operator20 = operators(20)\n\
    \        val operand21 = operands(21)\n        val operand22 = operands(22)\n\
    \        val operator21 = operators(21)\n        val operator22 = operators(22)\n\
    \        val operand23 = operands(23)\n        val operand24 = operands(24)\n\
    \        val operator23 = operators(23)\n        val operator24 = operators(24)\n\
    \        val operand25 = operands(25)\n        val operand26 = operands(26)\n\
    \        val operator25 = operators(25)\n        val operator26 = operators(26)\n",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = operandList.foldLeft(0)\
    \ { (sum, operand) =>\n            val op = opList.head\n            val operand2\
    \ = operandList.tail.head\n            val operand1 = operandList.tail.tail.head\n\
    \            val operand3 = operandList.tail.tail.tail.head\n            val operand4\
    \ = operandList.tail.tail.tail.tail.head\n            val operand5 = operandList.tail.tail.tail.tail.tail.head\n\
    \            val operand6 = operandList.tail.tail.tail.tail.tail.tail.head\n \
    \           val operand7 = operandList.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand8 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand9 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand10 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand11 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand12 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand13 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand14 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand15 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand16 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val ops = op.map(_.toUpperCase)\n        val opMap = ops.zip(operand).map(x\
    \ => (x._1, x._2)).toMap\n        val opList = ops.toList\n        val operandList\
    \ = operand.toList\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opMapLen = opMap.values.toList.size\n        val\
    \ operandMapLen = operandMap.values.toList.size\n        val opMapKeys = opMap.keys.toList\n\
    \        val operandMapKeys = operandMap.keys.toList\n        val opMapValues\
    \ = opMap.values.toList\n        val operandMapValues = operandMap.values.toList\n\
    \        val opMapKeysLen = opMapKeys.size\n        val operandMapKeysLen = operandMapKeys.size\n\
    \        val opMapValuesLen = opMapValues.size\n        val operandMapValuesLen\
    \ = operandMapValues.size\n        val opMapKeysVal = opMapKeys.map(x => x.toLong).toList\n\
    \        val operandMapKeysVal = operandMapKeys.map(x => x.toLong).toList\n  \
    \      val opMapValuesVal = opMapValues.map(x => x.toLong).toList\n        val\
    \ operandMapValuesVal = operandMapValues.map(x => x.toLong).toList\n        val\
    \ opMapKeysValLen = opMapKeysVal.size\n        val operandMapKeysValLen = operandMapKeysVal.size\n\
    \        val opMapValuesValLen = opMapValuesVal.size\n        val operandMapValuesValLen\
    \ = operandMapValuesVal.size\n        val opMapKeysValVal = opMapKeysVal.map(x\
    \ => x.toLong).toList\n        val operandMapKeysValVal = operandMapKeysVal.map(x\
    \ => x.toLong).toList\n        val opMapValuesValVal = opMapValuesVal.map(x =>\
    \ x.toLong).toList\n        val operandMapValuesValVal = operandMapValuesVal.map(x\
    \ => x.toLong).toList\n        val opMapKeysValValLen = opMapKeysValVal.size\n\
    \        val operandMapKeysValValLen = operandMapKeysValVal.size\n        val\
    \ opMapValuesValValLen = opMapValuesValVal.size\n        val operandMapValuesValValLen\
    \ = operandMapValuesValVal.size\n        val opMapKeysValValVal = opMapKeysValVal.map(x ",
  "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n    \
    \    val opLen = opList.size\n        val operands = operand.map(_.toLong)\n \
    \       val operandLen = operands.size\n        val opLenMinusOne = opLen - 1\n\
    \        val operandLenMinusOne = operandLen - 1\n        val operandsLenMinusOne\
    \ = operandsLen - 1\n        val operandsLenMinusOneMinusOne = operandsLenMinusOne\
    \ - 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n      \
    \  val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n\
    \        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOne", "        val opList = op.mkString(\"\
    +\")\n        val opListLength = opList.size\n        val operandList = operand.mkString(\"\
    +\")\n        val operandListLength = operandList.size\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = ", "        val ops = op.map(_.toLowerCase)\n\
    \        val opLen = ops.size\n        val opArray = ops.toArray\n        val\
    \ operandArray = operand.toArray\n        val operandLen = operandArray.length\n\
    \        val opArrayLen = opArray.length\n        val result = operandArray(0)\n\
    \        val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val opLength =\
    \ opList.length\n        val operandLength = operandList.length\n        val opIndex\
    \ = 0\n        val operandIndex = 0\n        val result = operand(0)\n       \
    \ while(opIndex < opLength && operandIndex < operandLength) {\n            val\
    \ op = opList(opIndex)\n            val operand = operandList(operandIndex)\n\
    \            val opResult = if (op == \"+\") {\n                result + operand\n\
    \            } else if (op == \"-\") {\n                result - operand\n   \
    \         } else if (op == \"*\") {\n                result * operand\n      \
    \      } else if (op == \"/\") {\n                result / operand\n         \
    \   } else if (op == \"//\") {\n                result // operand\n          \
    \  } else if (op == \"**\") {\n                result ** operand\n           \
    \ } else {\n                throw new Exception(\"Invalid operator: \" + op)\n\
    \            }\n            result += opResult\n            opIndex += 1\n   \
    \         operandIndex += 1\n        }\n        result", "        val opList =\
    \ op.map(_.toLowerCase)\n        val operandList = operand.map(_.toLong)\n   \
    \     val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap16 = new mutable.HashMap[", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val operatorList = opList.take(operandList.length-1)\n        val result\
    \ = operandList.foldLeft(0)((sum, operand) => {\n            val op = operatorList.head\n\
    \            val operand = operandList.tail.head\n            val operand2 = operandList.tail.tail.head\n\
    \            val operand3 = operandList.tail.tail.tail.head\n            val operand4\
    \ = operandList.tail.tail.tail.tail.head\n            val operand5 = operandList.tail.tail.tail.tail.tail.head\n\
    \            val operand6 = operandList.tail.tail.tail.tail.tail.tail.head\n \
    \           val operand7 = operandList.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand8 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand9 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand10 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand11 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand12 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand13 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand14 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand15 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand16 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand17 = ", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.length\n        val opMap : Map[String, Long] = opList.zipWithIndex.map(x\
    \ => (x._1, x._2)).toMap\n        val operandList = operand.map(_.toLong)\n  \
    \      val operandLen = operandList.length\n        val operandMap : Map[String,\
    \ Long] = operandList.zipWithIndex.map(x => (x._1, x._2)).toMap\n        val opMapKeys\
    \ = opMap.keys\n        val operandMapKeys = operandMap.keys\n        val opMapValues\
    \ = opMap.values.toList\n        val operandMapValues = operandMap.values.toList\n\
    \        val opMapKeysLen = opMapKeys.length\n        val operandMapKeysLen =\
    \ operandMapKeys.length\n        val opMapValuesLen = opMapValues.length\n   \
    \     val operandMapValuesLen = operandMapValues.length\n        val opMapKeysSet\
    \ = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n  \
    \      val opMapValuesSet = opMapValues.toSet\n        val operandMapValuesSet\
    \ = operandMapValues.toSet\n        val opMapKeysSetLen = opMapKeysSet.size\n\
    \        val operandMapKeysSetLen = operandMapKeysSet.size\n        val opMapValuesSetLen\
    \ = opMapValuesSet.size\n        val operandMapValuesSetLen = operandMapValuesSet.size\n\
    \        val opMapKeysSetIntersection = opMapKeysSet.intersect(operandMapKeysSet)\n\
    \        val operandMapKeysSetIntersection = operandMapKeysSet.intersect(opMapKeysSet)\n\
    \        val opMapValuesSetIntersection = opMapValuesSet.intersect(operandMapValuesSet)\n\
    \        val operandMapValuesSetIntersection = operandMapValuesSet.intersect(opMapValuesSet)\n\
    \        val opMapKeysSetDifference = opMapKeysSet.diff(operandMapKeysSet)\n \
    \       val operandMapKeysSetDifference = operandMapKeysSet.diff(opMapKeysSet)\n\
    \        val opMapValuesSetDifference = opMapValuesSet.diff(operandMapValuesSet)\n\
    \        val operandMapValuesSetDifference = operandMapValuesSet.diff(opMapValuesSet)\n\
    \        val opMapKeysSetSymmetricDifference = opMapKeysSet.diff(opMapKeysSet)\n\
    \        val operandMapKey", "        val opList = op.asInstanceOf[List[String]]\n\
    \        val operandList = operand.asInstanceOf[List[Long]]\n        val opLen\
    \ = opList.size\n        val opLenMinusOne = opLen - 1\n        val operandLen\
    \ = operandList.size\n        val operandLenMinusOne = operandLen - 1\n      \
    \  val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[", "        val opList = op.map(_.toUpperCase)\n     \
    \   val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val result = operandList.foldLeft(operandList.head)\
    \ { (acc, x) => \n            val opIndex = opList.indexOf(x(0))\n           \
    \ val opVal = opIndex.toLong\n            val opVal2 = opIndex.toLong + 1\n  \
    \          val opVal3 = opIndex.toLong + 2\n            val opVal4 = opIndex.toLong\
    \ + 3\n            val opVal5 = opIndex.toLong + 4\n            val opVal6 = opIndex.toLong\
    \ + 5\n            val opVal7 = opIndex.toLong + 6\n            val opVal8 = opIndex.toLong\
    \ + 7\n            val opVal9 = opIndex.toLong + 8\n            val opVal10 =\
    \ opIndex.toLong + 9\n            val opVal11 = opIndex.toLong + 10\n        \
    \    val opVal12 = opIndex.toLong + 11\n            val opVal13 = opIndex.toLong\
    \ + 12\n            val opVal14 = opIndex.toLong + 13\n            val opVal15\
    \ = opIndex.toLong + 14\n            val opVal16 = opIndex.toLong + 15\n     \
    \       val opVal17 = opIndex.toLong + 16\n            val opVal18 = opIndex.toLong\
    \ + 17\n            val opVal19 = opIndex.toLong + 18\n            val opVal20\
    \ = opIndex.toLong + 19\n            val opVal21 = opIndex.toLong + 20\n     \
    \       val opVal22 = opIndex.toLong + 21\n            val opVal23 = opIndex.toLong\
    \ + 22\n            val opVal24 = opIndex.toLong + 23\n            val opVal25\
    \ = opIndex.toLong + 24\n            val opVal26 = opIndex.toLong + 25\n     \
    \       val opVal27 = opIndex.toLong + 26\n            val opVal28 = opIndex.toLong\
    \ + 27\n            val opVal29 = opIndex.toLong + 28\n            val opVal30\
    \ = opIndex.toLong + 29\n            val opVal31 = opIndex.toLong + 30\n     \
    \       val opVal32 = opIndex.toLong + 31\n            val opVal33 = opIndex.toLong\
    \ + 32\n            val opVal34 = opIndex.toLong + 33\n            val opVal35\
    \ = opIndex.toLong + 34\n            val opVal", "        val opList = op.map(_.toLowerCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.filterNot(_\
    \ == \"*\")\n        val operatorListSize = operatorList.size\n        val operandListSize\
    \ = operandList.size\n        val result = operandList(0)\n        val operator\
    \ = operatorList(0)\n        val operand1 = operandList(1)\n        val operand2\
    \ = operandList(2)\n        val operand3 = operandList(3)\n        val operand4\
    \ = operandList(4)\n        val operand5 = operandList(5)\n        val operand6\
    \ = operandList(6)\n        val operand7 = operandList(7)\n        val operand8\
    \ = operandList(8)\n        val operand9 = operandList(9)\n        val operand10\
    \ = operandList(10)\n        val operand11 = operandList(11)\n        val operand12\
    \ = operandList(12)\n        val operand13 = operandList(13)\n        val operand14\
    \ = operandList(14)\n        val operand15 = operandList(15)\n        val operand16\
    \ = operandList(16)\n        val operand17 = operandList(17)\n        val operand18\
    \ = operandList(18)\n        val operand19 = operandList(19)\n        val operand20\
    \ = operandList(20)\n        val operand21 = operandList(21)\n        val operand22\
    \ = operandList(22)\n        val operand23 = operandList(23)\n        val operand24\
    \ = operandList(24)\n        val operand25 = operandList(25)\n        val operand26\
    \ = operandList(26)\n        val operand27 = operandList(27)\n        val operand28\
    \ = operandList(28)\n        val operand29 = operandList(29)\n        val operand30\
    \ = operandList(30)\n        val operand31 = operandList(31)\n        val operand32\
    \ = operandList(32)\n        val operand33 = operandList(33)\n        val operand34\
    \ = operandList(34)\n        val operand35 = operandList(35)\n        val operand36\
    \ = operandList(36)\n        val operand37 = operandList(37)\n        val operand38\
    \ = operandList(38)\n        val operand39 = operandList(39)\n        val operand40\
    \ = operandList(40)\n        val operand41 = operandList(41)\n        val operand42\
    \ = operandList(42)\n        val operand43 = operandList(43)\n        val operand44\
    \ = operandList(44)\n        val operand45 = operandList(45)\n        val operand46\
    \ = operandList(46)\n        val operand47 = operandList(47)\n        val operand48\
    \ = operandList(48)\n        val operand", "        val ops = op.map(_.toLowerCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val operandLength = operandArray.length\n\
    \        val result = 0\n        var i = 0\n        while (i < length) {\n   \
    \         val op = opArray(i)\n            val operand = operandArray(i)\n   \
    \         val operand2 = operandArray(i + 1)\n            val operand3 = operandArray(i\
    \ + 2)\n            val operand4 = operandArray(i + 3)\n            val operand5\
    \ = operandArray(i + 4)\n            val operand6 = operandArray(i + 5)\n    \
    \        val operand7 = operandArray(i + 6)\n            val operand8 = operandArray(i\
    \ + 7)\n            val operand9 = operandArray(i + 8)\n            val operand10\
    \ = operandArray(i + 9)\n            val operand11 = operandArray(i + 10)\n  \
    \          val operand12 = operandArray(i + 11)\n            val operand13 = operandArray(i\
    \ + 12)\n            val operand14 = operandArray(i + 13)\n            val operand15\
    \ = operandArray(i + 14)\n            val operand16 = operandArray(i + 15)\n \
    \           val operand17 = operandArray(i + 16)\n            val operand18 =\
    \ operandArray(i + 17)\n            val operand19 = operandArray(i + 18)\n   \
    \         val operand20 = operandArray(i + 19)\n            val operand21 = operandArray(i\
    \ + 20)\n            val operand22 = operandArray(i + 21)\n            val operand23\
    \ = operandArray(i + 22)\n            val operand24 = operandArray(i + 23)\n \
    \           val operand25 = operandArray(i + 24)\n            val operand26 =\
    \ operandArray(i + 25)\n            val operand27 = operandArray(i + 26)\n   \
    \         val operand28 = operandArray(i + 27)\n            val operand29 = operandArray(i\
    \ + 28)\n            val operand30 = operandArray(i + 29)\n            val operand31\
    \ = operandArray(i + 30)\n            val operand32 = operandArray(i + 31)\n \
    \           val operand33 = operandArray(i + 32)\n            val operand34 =\
    \ operandArray(i + 33)\n            val operand35 = operandArray(i + 34)\n   \
    \         val operand36 = operandArray(i + 35)\n            val operand37 = operandArray(i\
    \ + 36)\n            val operand38 = operandArray(i + 37)\n            val operand39\
    \ = operandArray(i + 38)\n            val operand40 = operandArray(i + 39)\n \
    \           val operand41 = operandArray(i + 40)\n", "        val ops = op.map(_.toUpperCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val result = operandArray(0)\n \
    \       val opIndex = 0\n        val operandIndex = 1\n        while(opIndex <\
    \ length) {\n            val op = ops(opIndex)\n            val operand = operandArray(operandIndex)\n\
    \            val opResult = opArray(opIndex)(operand)\n            result += opResult\n\
    \            opIndex += 1\n            operandIndex += 1\n        }\n        result",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val opResult =\
    \ 0\n        val operandResult = 0\n        val opResultIndex = 0\n        val\
    \ operandResultIndex = 0\n        while(opIndex < opLength && operandIndex < operandLength)\
    \ {\n            val opChar = opList(opIndex)\n            val operandChar = operandList(operandIndex)\n\
    \            val opResultChar = opResultChar(operandResultIndex)\n           \
    \ val operandResultChar = operandResultChar(operandResultIndex)\n            if(opChar\
    \ == \"+\") {\n                opResult += operandChar\n                opResultIndex\
    \ += 1\n            } else if(opChar == \"-\") {\n                opResult -=\
    \ operandChar\n                opResultIndex += 1\n            } else if(opChar\
    \ == \"*\") {\n                opResult *= operandChar\n                opResultIndex\
    \ += 1\n            } else if(opChar == \"//\") {\n                opResult /=\
    \ operandChar\n                opResultIndex += 1\n            } else if(opChar\
    \ == \"**\") {\n                opResult **= operandChar\n                opResultIndex\
    \ += 1\n            }\n            operandIndex += 1\n        }\n        opResult",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val opMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap5 = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap7 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap11 = new mutable.HashMap[String, Long]()\n        val opMap12 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap15 = new mutable.HashMap[String, Long]()\n        val opMap16 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap17 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap18 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap19 = new mutable.HashMap[String, Long]()\n        val opMap20 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap21 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap22 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap23 = new mutable.HashMap[String, Long]()\n        val opMap24 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap25 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap26 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap27 = new mutable.HashMap[String, Long]()\n        val opMap28 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap29 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap30 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap31 = new mutable.HashMap[String, Long]()\n        val opMap", "   \
    \     val opList = op.map(_.toUpperCase)\n        val opSet = opList.map(_.toChar)\n\
    \        val operandList = operand.map(_.toLong)\n        val operandSet = operandList.map(_.toChar)\n\
    \        val opSetSize = opSet.size\n        val operandSetSize = operandSet.size\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = opSetSize.toLong\n        val operandSetSize = operandSetSize.toLong\n\
    \        val opSetSize = ", "        val ops = op.map(x => x.toLowerCase)\n  \
    \      val op1 = ops.head\n        val op2 = ops.last\n        val op1Index =\
    \ ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val operand1\
    \ = operand(op1Index)\n        val operand2 = operand(op2Index)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Index\
    \ = ops.indexOf(op", "        val ops = op.map(_.toUpperCase)\n        val opList\
    \ = ops.toList\n        val opLen = opList.size\n        val opLenMinusOne = opLen\
    \ - 1\n        val operands = operand.map(_.toLong)\n        val operandLen =\
    \ operands.size\n        val operandLenMinusOne = operandLen - 1\n        val\
    \ operandsLen = operandLen + opLenMinusOne\n        val operandsLenMinusOne =\
    \ operandsLen - 1\n        val operandsLenMinusOneMinusOne = operandsLenMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOne = operandsLenMinusOneMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOneMinusOne = operandsLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandsLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"-\"\
    )\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    //\")\n        val opIndex7 = ops.indexOf(\"%\")\n        val opIndex8 = ops.indexOf(\"\
    *\")\n        val opIndex9 = ops.indexOf(\"+\")\n        val opIndex10 = ops.indexOf(\"\
    +\")\n        val opIndex11 = ops.indexOf(\"+\")\n        val opIndex12 = ops.indexOf(\"\
    +\")\n        val opIndex13 = ops.indexOf(\"+\")\n        val opIndex14 = ops.indexOf(\"\
    +\")\n        val opIndex15 = ops.indexOf(\"+\")\n        val opIndex16 = ops.indexOf(\"\
    +\")\n        val opIndex17 = ops.indexOf(\"+\")\n        val opIndex18 = ops.indexOf(\"\
    +\")\n        val opIndex19 = ops.indexOf(\"+\")\n        val opIndex20 = ops.indexOf(\"\
    +\")\n        val opIndex21 = ops.indexOf(\"+\")\n        val opIndex22 = ops.indexOf(\"\
    +\")\n        val opIndex23 = ops.indexOf(\"+\")\n        val opIndex24 = ops.indexOf(\"\
    +\")\n        val opIndex25 = ops.indexOf(\"+\")\n        val opIndex26 = ops.indexOf(\"\
    +\")\n        val opIndex27 = ops.indexOf(\"+\")\n        val opIndex28 = ops.indexOf(\"\
    +\")\n        val opIndex29 = ops.indexOf(\"+\")\n        val opIndex30 = ops.indexOf(\"\
    +\")\n        val opIndex31 = ops.indexOf(\"+\")\n        val opIndex32 = ops.indexOf(\"\
    +\")\n        val opIndex33 = ops.indexOf(\"+\")\n        val opIndex34 = ops.indexOf(\"\
    +\")\n        val opIndex35 = ops.indexOf(\"+\")\n        val opIndex36 = ops.indexOf(\"\
    +\")\n        val opIndex37 = ops.indexOf(\"+\")\n        val opIndex38 = ops.indexOf(\"\
    +\")\n        val opIndex39 = ops.indexOf(\"+\")\n        val opIndex40 = ops.indexOf(\"\
    +\")\n        val opIndex41 = ops.indexOf(\"+\")\n        val opIndex42 = ops.indexOf(\"\
    +\")\n        val opIndex43 = ops.indexOf(\"+\")\n        val opIndex44 = ops.indexOf(\"\
    +\")", "        val ops = op.map(_.toUpperCase)\n        val opArray = ops.toArray\n\
    \        val operandArray = operand.toArray\n        val length = opArray.length\n\
    \        val operandLength = operandArray.length\n        val result = operandArray(0)\n\
    \        val op1 = operandArray(1)\n        val op2 = operandArray(2)\n      \
    \  val op3 = operandArray(3)\n        val op4 = operandArray(4)\n        val op5\
    \ = operandArray(5)\n        val op6 = operandArray(6)\n        val op7 = operandArray(7)\n\
    \        val op8 = operandArray(8)\n        val op9 = operandArray(9)\n      \
    \  val op10 = operandArray(10)\n        val op11 = operandArray(11)\n        val\
    \ op12 = operandArray(12)\n        val op13 = operandArray(13)\n        val op14\
    \ = operandArray(14)\n        val op15 = operandArray(15)\n        val op16 =\
    \ operandArray(16)\n        val op17 = operandArray(17)\n        val op18 = operandArray(18)\n\
    \        val op19 = operandArray(19)\n        val op20 = operandArray(20)\n  \
    \      val op21 = operandArray(21)\n        val op22 = operandArray(22)\n    \
    \    val op23 = operandArray(23)\n        val op24 = operandArray(24)\n      \
    \  val op25 = operandArray(25)\n        val op26 = operandArray(26)\n        val\
    \ op27 = operandArray(27)\n        val op28 = operandArray(28)\n        val op29\
    \ = operandArray(29)\n        val op30 = operandArray(30)\n        val op31 =\
    \ operandArray(31)\n        val op32 = operandArray(32)\n        val op33 = operandArray(33)\n\
    \        val op34 = operandArray(34)\n        val op35 = operandArray(35)\n  \
    \      val op36 = operandArray(36)\n        val op37 = operandArray(37)\n    \
    \    val op38 = operandArray(38)\n        val op39 = operandArray(39)\n      \
    \  val op40 = operandArray(40)\n        val op41 = operandArray(41)\n        val\
    \ op42 = operandArray(42)\n        val op43 = operandArray(43)\n        val op44\
    \ = operandArray(44)\n        val op45 = operandArray(45)\n        val op46 =\
    \ operandArray(46)\n        val op47 = operandArray(47)\n        val op48 = operandArray(48)\n\
    \        val op49 = operandArray(49)\n        val op50 = operandArray(50)\n  \
    \      ", "        val ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48",
  "        val ops = op.map(_.toLowerCase)\n        val opList = ops.toList\n    \
    \    val operandList = operand.toList\n        val opLen = opList.size\n     \
    \   val operandLen = operandList.size\n        val opIndex = 0\n        val operandIndex\
    \ = 0\n        val result = operandList(0)\n        val op1 = opList(opIndex)\n\
    \        val op2 = opList(opIndex + 1)\n        val op3 = opList(opIndex + 2)\n\
    \        val op4 = opList(opIndex + 3)\n        val op5 = opList(opIndex + 4)\n\
    \        val op6 = opList(opIndex + 5)\n        val op7 = opList(opIndex + 6)\n\
    \        val op8 = opList(opIndex + 7)\n        val op9 = opList(opIndex + 8)\n\
    \        val op10 = opList(opIndex + 9)\n        val op11 = opList(opIndex + 10)\n\
    \        val op12 = opList(opIndex + 11)\n        val op13 = opList(opIndex +\
    \ 12)\n        val op14 = opList(opIndex + 13)\n        val op15 = opList(opIndex\
    \ + 14)\n        val op16 = opList(opIndex + 15)\n        val op17 = opList(opIndex\
    \ + 16)\n        val op18 = opList(opIndex + 17)\n        val op19 = opList(opIndex\
    \ + 18)\n        val op20 = opList(opIndex + 19)\n        val op21 = opList(opIndex\
    \ + 20)\n        val op22 = opList(opIndex + 21)\n        val op23 = opList(opIndex\
    \ + 22)\n        val op24 = opList(opIndex + 23)\n        val op25 = opList(opIndex\
    \ + 24)\n        val op26 = opList(opIndex + 25)\n        val op27 = opList(opIndex\
    \ + 26)\n        val op28 = opList(opIndex + 27)\n        val op29 = opList(opIndex\
    \ + 28)\n        val op30 = opList(opIndex + 29)\n        val op31 = opList(opIndex\
    \ + 30)\n        val op32 = opList(opIndex + 31)\n        val op33 = opList(opIndex\
    \ + 32)\n        val op34 = opList(opIndex + 33)\n        val op35 = opList(opIndex\
    \ + 34)\n        val op36 = opList(opIndex + 35)\n        val op37 = opList(opIndex\
    \ + 36)\n        val op38 = opList(opIndex", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListSize = opList.size\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListSize = operandList.size\n        val result = operandList(0)\n\
    \        val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n\
    \        val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op5", "        val ops = op.map(x\
    \ => x.toChar)\n        val opArray = ops.toArray\n        val operandArray =\
    \ operand.toArray\n        val opLen = opArray.length\n        val operandLen\
    \ = operandArray.length\n        val opArrayLen = opLen - 1\n        val operandArrayLen\
    \ = operandLen - 1\n        val opArrayLen2 = opArrayLen / 2\n        val operandArrayLen2\
    \ = operandArrayLen / 2\n        val opArrayLen3 = opArrayLen / 3\n        val\
    \ operandArrayLen3 = operandArrayLen / 3\n        val opArrayLen4 = opArrayLen\
    \ / 4\n        val operandArrayLen4 = operandArrayLen / 4\n        val opArrayLen5\
    \ = opArrayLen / 5\n        val operandArrayLen5 = operandArrayLen / 5\n     \
    \   val opArrayLen6 = opArrayLen / 6\n        val operandArrayLen6 = operandArrayLen\
    \ / 6\n        val opArrayLen7 = opArrayLen / 7\n        val operandArrayLen7\
    \ = operandArrayLen / 7\n        val opArrayLen8 = opArrayLen / 8\n        val\
    \ operandArrayLen8 = operandArrayLen / 8\n        val opArrayLen9 = opArrayLen\
    \ / 9\n        val operandArrayLen9 = operandArrayLen / 9\n        val opArrayLen10\
    \ = opArrayLen / 10\n        val operandArrayLen10 = operandArrayLen / 10\n  \
    \      val opArrayLen11 = opArrayLen / 11\n        val operandArrayLen11 = operandArrayLen\
    \ / 11\n        val opArrayLen12 = opArrayLen / 12\n        val operandArrayLen12\
    \ = operandArrayLen / 12\n        val opArrayLen13 = opArrayLen / 13\n       \
    \ val operandArrayLen13 = operandArrayLen / 13\n        val opArrayLen14 = opArrayLen\
    \ / 14\n        val operandArrayLen14 = operandArrayLen / 14\n        val opArrayLen15\
    \ = opArrayLen / 15\n        val operandArrayLen15 = operandArrayLen / 15\n  \
    \      val opArrayLen16 = opArrayLen / 16\n        val operandArrayLen16 = operandArrayLen\
    \ / 16\n        val opArrayLen17 = opArrayLen / 17\n        val operandArrayLen17\
    \ = operandArrayLen / 17\n        val opArrayLen18 = opArrayLen / 18\n       \
    \ val operandArrayLen18 = operandArrayLen / 18\n        val opArrayLen19 = opArrayLen\
    \ / 19\n        val operandArrayLen19 = operandArrayLen ", "        val ops =\
    \ op.map(_.toUpperCase)\n        val opLen = ops.length\n        val operandLen\
    \ = operand.length\n        val opArray = ops.toArray\n        val operandArray\
    \ = operand.toArray\n        val opArrayLen = opArray.length\n        val operandArrayLen\
    \ = operandArray.length\n        val opArrayLenMinusOne = opArrayLen - 1\n   \
    \     val operandArrayLenMinusOne = operandArrayLen - 1\n        val opArrayLenMinusTwo\
    \ = opArrayLen - 2\n        val operandArrayLenMinusTwo = operandArrayLen - 2\n\
    \        val opArrayLenMinusThree = opArrayLen - 3\n        val operandArrayLenMinusThree\
    \ = operandArrayLen - 3\n        val opArrayLenMinusFour = opArrayLen - 4\n  \
    \      val operandArrayLenMinusFour = operandArrayLen - 4\n        val opArrayLenMinusFive\
    \ = opArrayLen - 5\n        val operandArrayLenMinusFive = operandArrayLen - 5\n\
    \        val opArrayLenMinusSix = opArrayLen - 6\n        val operandArrayLenMinusSix\
    \ = operandArrayLen - 6\n        val opArrayLenMinusSeven = opArrayLen - 7\n \
    \       val operandArrayLenMinusSeven = operandArrayLen - 7\n        val opArrayLenMinusEight\
    \ = opArrayLen - 8\n        val operandArrayLenMinusEight = operandArrayLen -\
    \ 8\n        val opArrayLenMinusNine = opArrayLen - 9\n        val operandArrayLenMinusNine\
    \ = operandArrayLen - 9\n        val opArrayLenMinusTen = opArrayLen - 10\n  \
    \      val operandArrayLenMinusTen = operandArrayLen - 10\n        val opArrayLenMinusEleven\
    \ = opArrayLen - 11\n        val operandArrayLenMinusEleven = operandArrayLen\
    \ - 11\n        val opArrayLenMinusTwelve = opArrayLen - 12\n        val operandArrayLenMinusTwelve\
    \ = operandArrayLen - 12\n        val opArrayLenMinusThirteen = opArrayLen - 13\n\
    \        val operandArrayLenMinusThirteen = operandArrayLen - 13\n        val\
    \ opArrayLenMinusFourteen = opArrayLen - 14\n        val operandArrayLenMinusFourteen\
    \ = operandArrayLen - 14\n        val opArrayLenMinusFifteen = ", "        val\
    \ opList = op.map(x => x.toUpperCase)\n        val opLen = opList.length\n   \
    \     val operandList = operand.map(x => x.toLong)\n        val operandLen = operandList.length\n\
    \        val result = operandList.foldLeft(operandList(0)) { (sum, operand) =>\n\
    \            val opIndex = opList.indexOf(operand.asInstanceOf[String])\n    \
    \        val opVal = opIndex.toLong\n            val opVal2 = opIndex.toLong +\
    \ 1\n            val opVal3 = opIndex.toLong + 2\n            val opVal4 = opIndex.toLong\
    \ + 3\n            val opVal5 = opIndex.toLong + 4\n            val opVal6 = opIndex.toLong\
    \ + 5\n            val opVal7 = opIndex.toLong + 6\n            val opVal8 = opIndex.toLong\
    \ + 7\n            val opVal9 = opIndex.toLong + 8\n            val opVal10 =\
    \ opIndex.toLong + 9\n            val opVal11 = opIndex.toLong + 10\n        \
    \    val opVal12 = opIndex.toLong + 11\n            val opVal13 = opIndex.toLong\
    \ + 12\n            val opVal14 = opIndex.toLong + 13\n            val opVal15\
    \ = opIndex.toLong + 14\n            val opVal16 = opIndex.toLong + 15\n     \
    \       val opVal17 = opIndex.toLong + 16\n            val opVal18 = opIndex.toLong\
    \ + 17\n            val opVal19 = opIndex.toLong + 18\n            val opVal20\
    \ = opIndex.toLong + 19\n            val opVal21 = opIndex.toLong + 20\n     \
    \       val opVal22 = opIndex.toLong + 21\n            val opVal23 = opIndex.toLong\
    \ + 22\n            val opVal24 = opIndex.toLong + 23\n            val opVal25\
    \ = opIndex.toLong + 24\n            val opVal26 = opIndex.toLong + 25\n     \
    \       val opVal27 = opIndex.toLong + 26\n            val opVal28 = opIndex.toLong\
    \ + 27\n            val opVal29 = opIndex.toLong + 28\n            val opVal30\
    \ = opIndex.toLong + 29\n            val opVal31 = opIndex.toLong + 30\n     \
    \       val opVal32 = opIndex.toLong + 31\n            val opVal33 = opIndex.toLong\
    \ + 32\n            val opVal34 = opIndex.toLong + 33\n            val opVal",
  "        val ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n       \
    \ val opArray = ops.toArray\n        val operandLen = operand.size\n        val\
    \ operandArray = operand.toArray\n        val opArrayLen = opArray.length\n  \
    \      val operandArrayLen = operandArray.length\n        val opArrayIndex = 0\n\
    \        val operandArrayIndex = 0\n        val result = operandArray(0)\n   \
    \     val opArrayIndex2 = 0\n        val operandArrayIndex2 = 0\n        while(opArrayIndex\
    \ < opArrayLen && operandArrayIndex < operandArrayLen){\n            val op =\
    \ ops(opArrayIndex)\n            val operand = operandArray(operandArrayIndex)\n\
    \            val opArrayIndex2 = opArrayIndex + 1\n            val operandArrayIndex2\
    \ = operandArrayIndex + 1\n            val opArrayIndex3 = opArrayIndex2 + 1\n\
    \            val operandArrayIndex3 = operandArrayIndex2 + 1\n            val\
    \ opArrayIndex4 = opArrayIndex3 + 1\n            val operandArrayIndex4 = operandArrayIndex3\
    \ + 1\n            val opArrayIndex5 = opArrayIndex4 + 1\n            val operandArrayIndex5\
    \ = operandArrayIndex4 + 1\n            val opArrayIndex6 = opArrayIndex5 + 1\n\
    \            val operandArrayIndex6 = operandArrayIndex5 + 1\n            val\
    \ opArrayIndex7 = opArrayIndex6 + 1\n            val operandArrayIndex7 = operandArrayIndex6\
    \ + 1\n            val opArrayIndex8 = opArrayIndex7 + 1\n            val operandArrayIndex8\
    \ = operandArrayIndex7 + 1\n            val opArrayIndex9 = opArrayIndex8 + 1\n\
    \            val operandArrayIndex9 = operandArrayIndex8 + 1\n            val\
    \ opArrayIndex10 = opArrayIndex9 + 1\n            val operandArrayIndex10 = operandArrayIndex9\
    \ + 1\n            val opArrayIndex11 = opArrayIndex10 + 1\n            val operandArrayIndex11\
    \ = operandArrayIndex10 + 1\n            val opArrayIndex12 = opArrayIndex11 +\
    \ 1\n            val operandArrayIndex12 = operandArrayIndex11 + 1\n         \
    \   val opArrayIndex13 = opArrayIndex12 + 1\n            val operandArrayIndex13\
    \ = operandArrayIndex12 + 1\n            val opArrayIndex14 = opArrayIndex13 +\
    \ 1\n            val operandArrayIndex14 = operandArrayIndex13 + 1\n         \
    \   val opArrayIndex15 = opArrayIndex14 + 1\n            val operandArrayIndex15\
    \ = operandArrayIndex14 + 1\n            val opArrayIndex16 = opArrayIndex15 +\
    \ 1\n            val operandArrayIndex16 = operandArrayIndex15 + 1\n         \
    \   val opArrayIndex17", "        val ops = op.map(_.toLowerCase)\n        val\
    \ opArray = ops.toArray\n        val operandArray = operand.toArray\n        val\
    \ length = opArray.length\n        val result = operandArray(0)\n        val op1\
    \ = opArray(0)\n        val op2 = opArray(1)\n        val op3 = opArray(2)\n \
    \       val op4 = opArray(3)\n        val op5 = opArray(4)\n        val op6 =\
    \ opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n   \
    \     val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11 =\
    \ opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n        val op50 = opArray(49)\n        val op51\
    \ = opArray(50)\n        ", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val operandLength = operandArray.length\n        val opLength = opArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n", "        val ops = op.map(x => x.toDouble)\n\
    \        val operands = operand.map(x => x.toDouble)\n        val opArray = ops.toArray\n\
    \        val operandArray = operands.toArray\n        val opLen = opArray.length\n\
    \        val operandLen = operandArray.length\n        val opArrayLen = opLen\
    \ + 1\n        val operandArrayLen = operandLen + 1\n        val opArrayLenMinusOne\
    \ = opArrayLen - 1\n        val operandArrayLenMinusOne = operandArrayLen - 1\n\
    \        val opArrayLenMinusOneMinusOne = opArrayLenMinusOne - 1\n        val\
    \ operandArrayLenMinusOneMinusOne = operandArrayLenMinusOne - 1\n        val opArrayLenMinusOneMinusOneMinusOne\
    \ = opArrayLenMinusOneMinusOne - 1\n        val operandArrayLenMinusOneMinusOneMinusOne\
    \ = operandArrayLenMinusOneMinusOne - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLenMinusOneMinusOneMinusOne - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLenMinusOneMinusOneMinusOne - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n    \
    \    val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMin",
  "        val opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"\
    +\")\n        val opArray = opList.split(\"\\\\+\")\n        val operandArray\
    \ = operandList.split(\"\\\\+\")\n        val opLen = opArray.length\n       \
    \ val operandLen = operandArray.length\n        val opArray1 = opArray.take(operandLen\
    \ - 1)\n        val operandArray1 = operandArray.take(operandLen - 1)\n      \
    \  val opArray2 = opArray.drop(operandLen - 1)\n        val operandArray2 = operandArray.drop(operandLen\
    \ - 1)\n        val opArray3 = opArray.take(operandLen - 2)\n        val operandArray3\
    \ = operandArray.take(operandLen - 2)\n        val opArray4 = opArray.drop(operandLen\
    \ - 2)\n        val operandArray4 = operandArray.drop(operandLen - 2)\n      \
    \  val opArray5 = opArray.take(operandLen - 3)\n        val operandArray5 = operandArray.take(operandLen\
    \ - 3)\n        val opArray6 = opArray.drop(operandLen - 3)\n        val operandArray6\
    \ = operandArray.drop(operandLen - 3)\n        val opArray7 = opArray.take(operandLen\
    \ - 4)\n        val operandArray7 = operandArray.take(operandLen - 4)\n      \
    \  val opArray8 = opArray.drop(operandLen - 4)\n        val operandArray8 = operandArray.drop(operandLen\
    \ - 4)\n        val opArray9 = opArray.take(operandLen - 5)\n        val operandArray9\
    \ = operandArray.take(operandLen - 5)\n        val opArray10 = opArray.drop(operandLen\
    \ - 5)\n        val operandArray10 = operandArray.drop(operandLen - 5)\n     \
    \   val opArray11 = opArray.take(operandLen - 6)\n        val operandArray11 =\
    \ operandArray.take(operandLen - 6)\n        val opArray12 = opArray.drop(operandLen\
    \ - 6)\n        val operandArray12 = operandArray.drop(operandLen - 6)\n     \
    \   val opArray13 = opArray.take(operandLen - 7)\n        val operandArray13 =\
    \ operandArray.take(operandLen - 7)\n        val opArray14 = opArray.drop(operandLen\
    \ - 7)\n        val operandArray14 = operandArray.drop(operandLen - 7)\n     \
    \   val opArray15 = opArray.take(operandLen - 8)\n        val operandArray15 =\
    \ operandArray.take(operandLen - 8)\n        val opArray16 = opArray.drop(operandLen\
    \ - 8)\n        val operandArray16 = operandArray.drop(operandLen ", "       \
    \ val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val opStack =\
    \ mutable.Stack[String]()\n        val operandStack = mutable.Stack[Long]()\n\
    \        val result = operandStack.last\n        while(operandIndex < operandLength)\
    \ {\n            val op = ops(opIndex)\n            val operand = operands(operandIndex)\n\
    \            val opResult = opStack.last\n            val operandResult = operandStack.last\n\
    \            val opResultInt = opResult.toInt\n            val operandResultInt\
    \ = operandResult.toInt\n            val opResultDouble = opResult.toDouble\n\
    \            val operandResultDouble = operandResult.toDouble\n            val\
    \ opResultLong = opResult.toLong\n            val operandResultLong = operandResult.toLong\n\
    \            val opResultFloat = opResult.toFloat\n            val operandResultFloat\
    \ = operandResult.toFloat\n            val opResultInt = opResult.toInt\n    \
    \        val operandResultInt = operandResult.toInt\n            val opResultLong\
    \ = opResult.toLong\n            val operandResultLong = operandResult.toLong\n\
    \            val opResultFloat = opResult.toFloat\n            val operandResultFloat\
    \ = operandResult.toFloat\n            val opResultDouble = opResult.toDouble\n\
    \            val operandResultDouble = operandResult.toDouble\n            val\
    \ opResultInt = opResult.toInt\n            val operandResultInt = operandResult.toInt\n\
    \            val opResultLong = opResult.toLong\n            val operandResultLong\
    \ = operandResult.toLong\n            val opResultFloat = opResult.toFloat\n \
    \           val operandResultFloat = operandResult.toFloat\n            val opResultDouble\
    \ = opResult.toDouble\n            val operandResultDouble = operandResult.toDouble\n\
    \            val opResultInt = opResult.toInt\n            val operandResultInt\
    \ = operandResult.toInt\n            val opResultLong = opResult.toLong\n    \
    \        val operandResultLong = operandResult.toLong\n            val opResultFloat\
    \ = opResult.toFloat\n            val operandResultFloat = operandResult.toFloat\n\
    \            val opResultDouble = opResult.toDouble\n            val operandResultDouble\
    \ = operandResult.toDouble\n            val opResultInt = opResult.toInt\n   \
    \         val operandResultInt = operandResult.toInt\n            val opResultLong\
    \ = opResult.toLong", "        val ops = op.map(_.toLowerCase)\n        val operands\
    \ = operand.map(_.toLong)\n        val opLen = ops.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne\
    \ = opLenMinusOne - 1\n        val operandLenMinusOne = operandLen - 1\n     \
    \   val opLenMinusOneMinusOneMinusOne = opLenMinusOneMinusOne - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne - 1\n      \
    \  val opLenMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val ops = op.map(_.toLowerCase).toList\n        val opLen = ops.length\n\
    \        val operands = operand.map(_.toLong).toList\n        val operandLen =\
    \ operands.length\n        val opIndex = ops.indexOf(\"+\")\n        val opIndex2\
    \ = ops.indexOf(\"*\")\n        val opIndex3 = ops.indexOf(\"/\")\n        val\
    \ opIndex4 = ops.indexOf(\"**\")\n        val opIndex5 = ops.indexOf(\"//\")\n\
    \        val opIndex6 = ops.indexOf(\"%\")\n        val opIndex7 = ops.indexOf(\"\
    *\")\n        val opIndex8 = ops.indexOf(\"+\")\n        val opIndex9 = ops.indexOf(\"\
    -\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"/\")\n        val opIndex13 = ops.indexOf(\"\
    **\")\n        val opIndex14 = ops.indexOf(\"//\")\n        val opIndex15 = ops.indexOf(\"\
    %\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    +\")\n        val opIndex18 = ops.indexOf(\"-\")\n        val opIndex19 = ops.indexOf(\"\
    +\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    /\")\n        val opIndex22 = ops.indexOf(\"**\")\n        val opIndex23 = ops.indexOf(\"\
    //\")\n        val opIndex24 = ops.indexOf(\"%\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"+\")\n        val opIndex27 = ops.indexOf(\"\
    -\")\n        val opIndex28 = ops.indexOf(\"+\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"/\")\n        val opIndex31 = ops.indexOf(\"\
    **\")\n        val opIndex32 = ops.indexOf(\"//\")\n        val opIndex33 = ops.indexOf(\"\
    %\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    +\")\n        val opIndex36 = ops.indexOf(\"-\")\n        val opIndex37 = ops.indexOf(\"\
    +\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    /\")\n        val opIndex40 = ops.indexOf(\"**\")\n        val opIndex41 = ops.indexOf(\"\
    //\")\n        val opIndex42 = ops.indexOf(\"%\")\n        val opIndex43 = ops.indexOf",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLength = opList.length\n        val operandLength = operandList.length - 1\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = opList.length\n        val operandMapLength = operandList.length\n\
    \        val opMapLength = op", "        val ops = op.map(_.toUpperCase)\n   \
    \     val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val result = 0L\n        val stack\
    \ = mutable.Stack[Long]()\n        val stackArray = stack.toArray\n        val\
    \ stackLength = stackArray.length\n        val stackIndex = stackLength - 1\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        while(opIndex\
    \ < opArray.length && operandIndex < operandArray.length) {\n            val op\
    \ = ops(opIndex)\n            val operand = operands(operandIndex)\n         \
    \   val operandValue = operands(operandIndex)\n            val opValue = opArray(opIndex)\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operand", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = {\n    \
    \        val opMap = new mutable.HashMap[String, Long]()\n            opList.foreach(op\
    \ => {\n                opMap.put(op, 0L)\n            })\n            opMap\n\
    \        }\n        val operandMap = {\n            val operandMap = new mutable.HashMap[Long,\
    \ Long]()\n            operandList.foreach(operand => {\n                operandMap.put(operand,\
    \ 0L)\n            })\n            operandMap\n        }\n        val opMap2 =\
    \ {\n            val opMap2 = new mutable.HashMap[String, Long]()\n          \
    \  opList.foreach(op => {\n                opMap2.put(op, 0L)\n            })\n\
    \            opMap2\n        }\n        val operandMap2 = {\n            val operandMap2\
    \ = new mutable.HashMap[Long, Long]()\n            operandList.foreach(operand\
    \ => {\n                operandMap2.put(operand, 0L)\n            })\n       \
    \     operandMap2\n        }\n        val opMap3 = {\n            val opMap3 =\
    \ new mutable.HashMap[String, Long]()\n            opList.foreach(op => {\n  \
    \              opMap3.put(op, 0L)\n            })\n            opMap3\n      \
    \  }\n        val operandMap3 = {\n            val operandMap3 = new mutable.HashMap[Long,\
    \ Long]()\n            operandList.foreach(operand => {\n                operandMap3.put(operand,\
    \ 0L)\n            })\n            operandMap3\n        }\n        val opMap4\
    \ = {\n            val opMap4 = new mutable.HashMap[String, Long]()\n        \
    \    opList.foreach(op => {\n                opMap4.put(op, 0L)\n            })\n\
    \            opMap4\n        }\n        val operandMap4 = {\n            val operandMap4\
    \ = new mutable.HashMap[Long, Long]()\n            operandList.foreach(operand\
    \ => {\n                operandMap4.put(operand, 0L)\n            })\n       \
    \     operandMap4\n        }\n        val opMap5 = {\n            val opMap5 =\
    \ new mutable.HashMap[String, Long]()\n            opList.foreach(op => {\n  \
    \              opMap5.put(op, 0L)\n            })\n            opMap5\n      \
    \  }\n        val operandMap5 = {\n            val operandMap5 = new mutable.HashMap[Long,\
    \ Long]()\n            operandList.foreach(operand => {\n                operandMap5.put(operand,\
    \ 0L)\n            })\n            operandMap5", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val length = operands.length\
    \ - 1\n        val operators = ops.dropRight(1)\n        val result = operands.foldLeft(operands.head)\
    \ { (res, op) =>\n            val index = ops.indexOf(op)\n            val operand\
    \ = operands(index)\n            val operator = operators(index)\n           \
    \ val newRes = res * operand + operator\n            newRes\n        }\n     \
    \   result", "        val opList = op.map(_.toUpperCase)\n        val opListLength\
    \ = opList.length\n        val operandList = operand.map(_.toLong)\n        val\
    \ operandListLength = operandList.length\n        val result = 0L\n        val\
    \ opIndex = 0\n        val operandIndex = 0\n        while(opIndex < opListLength\
    \ && operandIndex < operandListLength) {\n            val op = opList(opIndex)\n\
    \            val operand = operandList(operandIndex)\n            val result =\
    \ if (op == \"+\") {\n                result + operand\n            } else if\
    \ (op == \"-\") {\n                result - operand\n            } else if (op\
    \ == \"*\") {\n                result * operand\n            } else if (op ==\
    \ \"/\") {\n                result / operand\n            } else if (op == \"\
    //\") {\n                result // operand\n            } else if (op == \"**\"\
    ) {\n                result ** operand\n            }\n            opIndex +=\
    \ 1\n            operandIndex += 1\n        }\n        result", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val operatorList = opList.dropRight(1)\n        val operator = operatorList.mkString(\"\
    +\")\n        val operand = operandList.mkString(\"+\")\n        val expression\
    \ = s\"$operator $operand\"\n        val result = eval(expression)\n        result",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opArray = opList.map(_.toChar)\n        val operandArray =\
    \ operandList.map(_.toLong)\n        val opArrayLength = opArray.length\n    \
    \    val operandArrayLength = operandArray.length\n        val opArrayLength =\
    \ opArrayLength\n        val operandArrayLength = operandArrayLength\n       \
    \ val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = ",
  "        val opList = op.map(x => x.toChar).toList\n        val operandList = operand.map(x\
    \ => x.toLong).toList\n        val opLength = opList.length\n        val operandLength\
    \ = operandList.length\n        val opIndex = opList.indexOf(\"+\")\n        val\
    \ opIndex2 = opList.indexOf(\"-\")\n        val opIndex3 = opList.indexOf(\"*\"\
    )\n        val opIndex4 = opList.indexOf(\"/\")\n        val opIndex5 = opList.indexOf(\"\
    **\")\n        val opIndex6 = opList.indexOf(\"%\")\n        val opIndex7 = opList.indexOf(\"\
    //\")\n        val opIndex8 = opList.indexOf(\"&\")\n        val opIndex9 = opList.indexOf(\"\
    |\")\n        val opIndex10 = opList.indexOf(\"^\")\n        val opIndex11 = opList.indexOf(\"\
    ~\")\n        val opIndex12 = opList.indexOf(\"<<\")\n        val opIndex13 =\
    \ opList.indexOf(\">>\")\n        val opIndex14 = opList.indexOf(\"==\")\n   \
    \     val opIndex15 = opList.indexOf(\"!=\")\n        val opIndex16 = opList.indexOf(\"\
    <\")\n        val opIndex17 = opList.indexOf(\">\")\n        val opIndex18 = opList.indexOf(\"\
    <=\")\n        val opIndex19 = opList.indexOf(\">=\")\n        val opIndex20 =\
    \ opList.indexOf(\"+\")\n        val opIndex21 = opList.indexOf(\"-\")\n     \
    \   val opIndex22 = opList.indexOf(\"*\")\n        val opIndex23 = opList.indexOf(\"\
    /\")\n        val opIndex24 = opList.indexOf(\"**\")\n        val opIndex25 =\
    \ opList.indexOf(\"%\")\n        val opIndex26 = opList.indexOf(\"//\")\n    \
    \    val opIndex27 = opList.indexOf(\"&\")\n        val opIndex28 = opList.indexOf(\"\
    |\")\n        val opIndex29 = opList.indexOf(\"^\")\n        val opIndex30 = opList.indexOf(\"\
    ~\")\n        val opIndex31 = opList.indexOf(\"<<\")\n        val opIndex32 =\
    \ opList.indexOf(\">>\")\n        val opIndex33 = opList.indexOf(\"==\")\n   \
    \     val opIndex34 = opList.indexOf(\"!=\")\n        val opIndex35 = opList.indexOf(\"\
    <\")\n        val opIndex36 = opList.indexOf(\">\")\n        val opIndex37 = opList.indexOf(\"\
    <=\")\n        val opIndex38 = opList.indexOf(\">=\")\n        val opIndex", " \
    \       val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = opList.zipWithIndex.toMap\n        val operandMap =\
    \ operandList.zipWithIndex.toMap\n        val opKeys = opMap.keys\n        val\
    \ operandKeys = operandMap.keys\n        val opKeysLen = opKeys.length\n     \
    \   val operandKeysLen = operandKeys.length\n        val opKeysMap = opKeys.zipWithIndex.toMap\n\
    \        val operandKeysMap = operandKeys.zipWithIndex.toMap\n        val opKeysMapLen\
    \ = opKeysMap.length\n        val operandKeysMapLen = operandKeysMap.length\n\
    \        val opKeysMapMap = opKeysMap.zipWithIndex.toMap\n        val operandKeysMapMap\
    \ = operandKeysMap.zipWithIndex.toMap\n        val opKeysMapMapLen = opKeysMapMap.length\n\
    \        val operandKeysMapMapLen = operandKeysMapMap.length\n        val opKeysMapMapMap\
    \ = opKeysMapMap.zipWithIndex.toMap\n        val operandKeysMapMapMap = operandKeysMapMap.zipWithIndex.toMap\n\
    \        val opKeysMapMapMapLen = opKeysMapMapMap.length\n        val operandKeysMapMapMapLen\
    \ = operandKeysMapMapMap.length\n        val opKeysMapMapMapMap = opKeysMapMapMap.zipWithIndex.toMap\n\
    \        val operandKeysMapMapMapMap = operandKeysMapMapMap.zipWithIndex.toMap\n\
    \        val opKeysMapMapMapMapLen = opKeysMapMapMapMap.length\n        val operandKeysMapMapMapMapLen\
    \ = operandKeysMapMapMapMap.length\n        val opKeysMapMapMapMapMap = opKeysMapMapMapMap.zipWithIndex.toMap\n\
    \        val operandKeysMapMapMapMapMap = operandKeysMapMapMapMap.zipWithIndex.toMap\n\
    \        val opKeysMapMapMapMapMapLen = opKeysMapMapMapMapMap.length\n       \
    \ val operandKeysMapMapMapMapMapLen = operandKeysMapMapMapMapMap.length\n    \
    \    val opKeysMapMapMapMapMapMap = opKeysMapMapMapMapMap.zipWithIndex.toMap\n\
    \        val operandKeysMapMapMapMapMapMap = operandKey", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n  \
    \      val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Int]()\n        val opMap2\
    \ = new mutable.HashMap[String, Int]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap4 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap5 = new mutable.HashMap[String, Int]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap7 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap8 = new mutable.HashMap[String, Int]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap10 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap11 = new mutable.HashMap[String, Int]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap13 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap14 = new mutable.HashMap[String, Int]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap16 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap17 = new mutable.HashMap[String, Int]()\n        val opMap18 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap19 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap20 = new mutable.HashMap[String, Int]()\n        val opMap21 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap22 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap23 = new mutable.HashMap[String, Int]()\n        val opMap24 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap25 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap26 = new mutable.HashMap[String, Int]()\n        val opMap27 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap28 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap29 = new mutable.HashMap[String, Int]()\n        val opMap30 = new mutable.HashMap[String,\
    \ Int]()\n        val opMap31 = new mutable.HashMap[String, Int]()\n        val\
    \ opMap", "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val length = ops.size - 1\n        val result = operands.foldLeft(operands.head)\
    \ { (acc, op) =>\n            val index = ops.indexOf(op)\n            val value\
    \ = acc + operands(index)\n            operands(index) = value\n            value\n\
    \        }\n        result", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val opLength = ops.size\n\
    \        val operandLength = operands.size - 1\n        val opIndex = 0\n    \
    \    val operandIndex = 0\n        val result = operands(operandIndex)\n     \
    \   while(opIndex < opLength) {\n            val op = ops(opIndex)\n         \
    \   val operand = operands(operandIndex)\n            val opResult = operand match\
    \ {\n                case 0 => 0\n                case 1 => operand\n        \
    \        case _ => operand match {\n                    case 0 => 0\n        \
    \            case 1 => operand\n                    case _ => operand match {\n\
    \                        case 0 => 0\n                        case 1 => operand\n\
    \                        case _ => operand match {\n                         \
    \   case 0 => 0\n                            case 1 => operand\n             \
    \               case _ => operand match {\n                                case\
    \ 0 => 0\n                                case 1 => operand\n                \
    \                case _ => operand match {\n                                 \
    \   case 0 => 0\n                                    case 1 => operand\n     \
    \                               case _ => operand match {\n                  \
    \                      case 0 => 0\n                                        case\
    \ 1 => operand\n                                        case _ => operand match\
    \ {\n                                            case 0 => 0\n               \
    \                             case 1 => operand\n                            \
    \                case _ => operand match {\n                                 \
    \               case 0 => 0\n                                                case\
    \ 1 => operand\n                                                case _ => operand\
    \ match {\n                                                    case 0 => 0\n \
    \                                                   case 1 => operand\n      \
    \                                              case _ => operand match {\n   \
    \                                                     case 0 => 0\n          \
    \                                              case 1 => operand\n           \
    \                                             case _ => operand match {\n    \
    \                                                        case 0 => 0\n       \
    \                                                     case 1 => operand\n    \
    \                                                        case _ => operand match\
    \ {\n                                                                case 0 =>\
    \ 0\n                                                                case 1 =>\
    \ operand\n                                                                case\
    \ _ => operand match {\n                                                     \
    \               case 0 => 0\n                                                \
    \                    case 1 => operand\n                                     \
    \                               case _ => operand match {\n                  \
    \                                                      case 0 => 0\n         \
    \                                                               case 1 => operand\n\
    \                                                                        case\
    \ _ => operand match {\n                                                     \
    \                       case 0 => 0\n                                        \
    \                                    case 1 => operand\n                     \
    \                                                       case _ => operand match\
    \ {\n                                                                        \
    \        case 0 => 0\n                                                       \
    \                         case 1 => operand\n                                \
    \                                                case _ => operand match {\n \
    \                                                                            \
    \       case 0 => 0\n                                                        \
    \                            case 1 => operand\n                             \
    \                                                       case _ => operand match\
    \ {\n                                                                        \
    \                case 0 => 0\n                                               \
    \                                         case 1 => operand\n                \
    \                                                                        case\
    \ _ => operand match {\n                                                     \
    \                                       case 0 => 0\n                        \
    \                                                                    case 1 =>\
    \ operand\n                                                                  \
    \                          case _ => operand match {\n                       \
    \                                                                         case\
    \ 0 => 0\n                                                                   \
    \                             case 1 ", "        val ops = op.map(_.toLowerCase)\n\
    \        val opLen = ops.length\n        val operands = operand.map(_.toLong)\n\
    \        val operandLen = operands.length\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val result2 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3 =\
    \ new mutable.HashMap[String, Long]()\n        val result3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val result4 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val result5 = new mutable.HashMap[String, Long]()\n        val opMap6 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val result6 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7 =\
    \ new mutable.HashMap[String, Long]()\n        val result7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val result8 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val result9 = new mutable.HashMap[String, Long]()\n        val opMap10 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val result10 = new mutable.HashMap[String, Long]()\n      \
    \  val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val result11 = new mutable.",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"-\"\
    )\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    //\")\n        val opIndex7 = ops.indexOf(\"%\")\n        val opIndex8 = ops.indexOf(\"\
    *\")\n        val opIndex9 = ops.indexOf(\"+\")\n        val opIndex10 = ops.indexOf(\"\
    +\")\n        val opIndex11 = ops.indexOf(\"*\")\n        val opIndex12 = ops.indexOf(\"\
    +\")\n        val opIndex13 = ops.indexOf(\"*\")\n        val opIndex14 = ops.indexOf(\"\
    +\")\n        val opIndex15 = ops.indexOf(\"*\")\n        val opIndex16 = ops.indexOf(\"\
    +\")\n        val opIndex17 = ops.indexOf(\"*\")\n        val opIndex18 = ops.indexOf(\"\
    +\")\n        val opIndex19 = ops.indexOf(\"*\")\n        val opIndex20 = ops.indexOf(\"\
    +\")\n        val opIndex21 = ops.indexOf(\"*\")\n        val opIndex22 = ops.indexOf(\"\
    +\")\n        val opIndex23 = ops.indexOf(\"*\")\n        val opIndex24 = ops.indexOf(\"\
    +\")\n        val opIndex25 = ops.indexOf(\"*\")\n        val opIndex26 = ops.indexOf(\"\
    +\")\n        val opIndex27 = ops.indexOf(\"*\")\n        val opIndex28 = ops.indexOf(\"\
    +\")\n        val opIndex29 = ops.indexOf(\"*\")\n        val opIndex30 = ops.indexOf(\"\
    +\")\n        val opIndex31 = ops.indexOf(\"*\")\n        val opIndex32 = ops.indexOf(\"\
    +\")\n        val opIndex33 = ops.indexOf(\"*\")\n        val opIndex34 = ops.indexOf(\"\
    +\")\n        val opIndex35 = ops.indexOf(\"*\")\n        val opIndex36 = ops.indexOf(\"\
    +\")\n        val opIndex37 = ops.indexOf(\"*\")\n        val opIndex38 = ops.indexOf(\"\
    +\")\n        val opIndex39 = ops.indexOf(\"*\")\n        val opIndex40 = ops.indexOf(\"\
    +\")\n        val opIndex41 = ops.indexOf(\"*\")\n        val opIndex42 = ops.indexOf(\"\
    +\")\n        val opIndex43 = ops.indexOf(\"*\")\n        val opIndex44 = ops.indexOf(\"",
  "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 - 1 -\
    \ 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen -\
    \ 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMin",
  "        val ops = op.map(x => x.toLowerCase)\n        val operands = operand.map(x\
    \ => x.toLong)\n        val opCount = ops.size\n        val operandCount = operands.size\n\
    \        val result = operands.foldLeft(0L) {\n            (acc, x) => acc + (ops(x)\
    \ * x)\n        }\n        result", "        val ops = op.map(x => x.toChar)\n\
    \        val operands = operand.map(x => x.toLong)\n        val opLen = ops.size\n\
    \        val operandLen = operands.size\n        val opIndex = ops.indexOf(\"\
    +\")\n        val opIndex2 = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"\
    *\")\n        val opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"*\")\n        val opIndex9 = ops.indexOf(\"\
    +\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"*\")\n        val opIndex13 = ops.indexOf(\"\
    +\")\n        val opIndex14 = ops.indexOf(\"*\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    *\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    *\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    *\")\n        val opIndex22 = ops.indexOf(\"*\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"*\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    *\")\n        val opIndex28 = ops.indexOf(\"*\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"*\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"*\")\n        val opIndex33 = ops.indexOf(\"\
    *\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    *\")\n        val opIndex36 = ops.indexOf(\"*\")\n        val opIndex37 = ops.indexOf(\"\
    *\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"*\")\n        val opIndex41 = ops.indexOf(\"\
    *\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ops.indexOf(\"\
    *\")\n        val opIndex44 = ", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMapKeys = opList.map(x => x.toUpperCase)\n        val operandMapKeys\
    \ = operandList.map(x => x.toLong)\n        val opMapValues = opList.map(x =>\
    \ x.toUpperCase.charAt(0).toLong)\n        val operandMapValues = operandList.map(x\
    \ => x.toLong)\n        opMapKeys.zip(opMapValues).foreach(x => opMap += x)\n\
    \        operandMapKeys.zip(operandMapValues).foreach(x => operandMap += x)\n\
    \        val opMapKeySet = opMap.keySet\n        val operandMapKeySet = operandMap.keySet\n\
    \        val opMapValueSet = opMap.valueSet\n        val operandMapValueSet =\
    \ operandMap.valueSet\n        val opMapKeySetSize = opMapKeySet.size\n      \
    \  val operandMapKeySetSize = operandMapKeySet.size\n        val opMapValueSetSize\
    \ = opMapValueSet.size\n        val operandMapValueSetSize = operandMapValueSet.size\n\
    \        val opMapKeySetIterator = opMapKeySet.iterator\n        val operandMapKeySetIterator\
    \ = operandMapKeySet.iterator\n        val opMapValueSetIterator = opMapValueSet.iterator\n\
    \        val operandMapValueSetIterator = operandMapValueSet.iterator\n      \
    \  val opMapKeySetIteratorSize = opMapKeySetIterator.size\n        val operandMapKeySetIteratorSize\
    \ = operandMapKeySetIterator.size\n        val opMapValueSetIteratorSize = opMapValueSetIterator.size\n\
    \        val operandMapValueSetIteratorSize = operandMapValueSetIterator.size\n\
    \        val opMapKeySetIteratorIterator = opMapKeySetIterator.iterator\n    \
    \    val operandMapKeySetIteratorIterator = operandMapKeySetIterator.iterator\n\
    \        val opMapValueSetIteratorIterator = opMapValueSetIterator.iterator\n\
    \        val operandMapValueSetIteratorIterator = operandMapValueSetIterator.iterator\n\
    \        val opMapKeySetIteratorIteratorSize = opMapKeySetIteratorIterator.size\n\
    \        val operandMapKeySetIteratorIteratorSize = operandMapKeySetIteratorIterator.size\n\
    \        val opMapValueSetIteratorIteratorSize = opMapValueSetIteratorIter", " \
    \       val ops = op.mkString(\"+\")\n        val opArray = ops.split(\"\\\\+\"\
    )\n        val operands = operand.mkString(\"+\")\n        val operandArray =\
    \ operands.split(\"\\\\+\")\n        val opArrayLength = opArray.length\n    \
    \    val operandArrayLength = operandArray.length\n        val opArrayLength =\
    \ opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArrayLength\
    \ = operandArrayLength - 1\n        val opArrayLength = opArrayLength - 1\n  \
    \      val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength - 1\n        val operandArrayLength = operandArrayLength - 1\n\
    \        val opArrayLength = opArrayLength - 1\n        val operandArray", " \
    \       val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val opStack =\
    \ new mutable.Stack[String]()\n        val operandStack = new mutable.Stack[Long]()\n\
    \        val result = operandStack.head\n        while (operandIndex < operandLength)\
    \ {\n            while (opIndex < opLength) {\n                opStack.push(opList(opIndex))\n\
    \                opIndex += 1\n            }\n            while (operandIndex\
    \ < operandLength) {\n                operandStack.push(operandList(operandIndex))\n\
    \                operandIndex += 1\n            }\n            val op1 = opStack.mkString\n\
    \            val op2 = operandStack.mkString\n            val opResult = op1 match\
    \ {\n                case \"+\" => op2\n                case \"-\" => op2\n  \
    \              case \"*\" => op2\n                case \"/\" => op2\n        \
    \        case \"%\" => op2\n                case \"^\" => op2\n              \
    \  case \"**\" => op2\n                case _ => throw new Exception(\"Invalid\
    \ operator: \" + op1)\n            }\n            result += opResult\n       \
    \ }\n        result", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val result = operandList.foldLeft(0)((acc,\
    \ x) => acc + (opList(x) * operandList(x)))\n        result", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = 0L\n        val\
    \ opIndex = 0\n        val operandIndex = 0\n        while(opIndex < opLength\
    \ && operandIndex < operandLength) {\n            val op = opList(opIndex)\n \
    \           val operand = operandList(operandIndex)\n            val operandValue\
    \ = operandMap(operand)\n            opMap(op) = operandValue\n            operandIndex\
    \ += 1\n            opIndex += 1\n        }\n        val opKeys = opMap.keys.toList\n\
    \        val opValues = opMap.values.toList\n        val operandKeys = operandMap.keys.toList\n\
    \        val operandValues = operandMap.values.toList\n        val opKeyIndex\
    \ = opKeys.indexOf(op(0))\n        val operandKeyIndex = operandKeys.indexOf(operand(0))\n\
    \        val opValue = opValues(opKeyIndex)\n        val operandValue = operandValues(operandKeyIndex)\n\
    \        val opValueInt = opValue.toInt\n        val operandValueInt = operandValue.toInt\n\
    \        val opValueLong = opValue.toLong\n        val operandValueLong = operandValue.toLong\n\
    \        val opValueFloat = opValue.toFloat\n        val operandValueFloat = operandValue.toFloat\n\
    \        val opValueDouble = opValue.toDouble\n        val operandValueDouble\
    \ = operandValue.toDouble\n        val opValueString = opValue.toString\n    \
    \    val operandValueString = operandValue.toString\n        val opValueBoolean\
    \ = opValue.toBoolean\n        val operandValueBoolean = operandValue.toBoolean\n\
    \        val opValueInt = opValue.toInt\n        val operandValueInt = operandValue.toInt\n\
    \        val opValueLong = opValue.toLong\n        val operandValueLong = operandValue.toLong\n\
    \        val opValueFloat = opValue.toFloat\n        val operandValueFloat = operandValue.toFloat\n\
    \        val opValueDouble = opValue.toDouble\n        val operandValueDouble\
    \ = operandValue.toDouble\n        val opValueString = opValue.toString\n    \
    \    val operandValueString = operandValue.toString\n        val opValueBoolean\
    \ = opValue.toBoolean\n        val operandValueBoolean = operandValue.toBoolean\n\
    \        val opValueInt = opValue.toInt\n        val operandValueInt = operandValue.toInt\n\
    \        ", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toLong).toList\n        val operatorList = opList.filterNot(_.equals(\"\
    +\")).filterNot(_.equals(\"-\")).filterNot(_.equals(\"*\")).filterNot(_.equals(\"\
    //\")).filterNot(_.equals(\"**\"))\n        val operandListSize = operandList.size\n\
    \        val operatorListSize = operatorList.size\n        val result = operandListSize\
    \ match {\n            case 1 => operandList(0)\n            case 2 => operandList(0)\
    \ + operandList(1) * (operandListSize - 1)\n            case 3 => operandList(0)\
    \ + operandList(1) * operandList(2) * (operandListSize - 2)\n            case\
    \ 4 => operandList(0) + operandList(1) * operandList(2) * operandList(3) * (operandListSize\
    \ - 3)\n            case 5 => operandList(0) + operandList(1) * operandList(2)\
    \ * operandList(3) * operandList(4) * (operandListSize - 4)\n            case\
    \ 6 => operandList(0) + operandList(1) * operandList(2) * operandList(3) * operandList(4)\
    \ * operandList(5) * (operandListSize - 5)\n            case 7 => operandList(0)\
    \ + operandList(1) * operandList(2) * operandList(3) * operandList(4) * operandList(5)\
    \ * operandList(6) * (operandListSize - 6)\n            case 8 => operandList(0)\
    \ + operandList(1) * operandList(2) * operandList(3) * operandList(4) * operandList(5)\
    \ * operandList(6) * operandList(7) * (operandListSize - 7)\n            case\
    \ 9 => operandList(0) + operandList(1) * operandList(2) * operandList(3) * operandList(4)\
    \ * operandList(5) * operandList(6) * operandList(7) * operandList(8) * (operandListSize\
    \ - 8)\n            case 10 => operandList(0) + operandList(1) * operandList(2)\
    \ * operandList(3) * operandList(4) * operandList(5) * operandList(6) * operandList(7)\
    \ * operandList(8) * operandList(9) * (operandListSize - 9)\n            case\
    \ 11 => operandList(0) + operandList(1) * operandList(2) * operandList(3) * operandList(4)\
    \ * operandList(5) * operandList(6) * operandList(7) * operandList(8) * operandList(9)\
    \ * operandList(10) * (operandListSize - 10)\n            case 12 => operandList(0)\
    \ + operandList(1) * operandList(2) * operandList(3) * operandList(4) * operandList(5)\
    \ * operandList(6) * operandList(7) * operandList(8) * operandList(9) * operandList(10)\
    \ * operandList(11) * (operandListSize - 11)\n            case 13 => operandList(0)\
    \ + operandList(1) * operandList(2) * operandList(", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opSet = opList.map(x =>\
    \ x.toUpperCase)\n        val opSetLen = opSet.size\n        val operandSet =\
    \ operandList.map(x => x.toLong)\n        val operandSetLen = operandSet.size\n\
    \        val opSetSet = opSet.map(x => x.toUpperCase)\n        val opSetSetLen\
    \ = opSetSet.size\n        val operandSetSet = operandSet.map(x => x.toLong)\n\
    \        val operandSetSetLen = operandSetSet.size\n        val opSetSetSet =\
    \ opSetSet.map(x => x.toUpperCase)\n        val opSetSetSetLen = opSetSetSet.size\n\
    \        val operandSetSetSet = operandSetSet.map(x => x.toLong)\n        val\
    \ operandSetSetSetLen = operandSetSetSet.size\n        val opSetSetSetSet = opSetSetSet.map(x\
    \ => x.toUpperCase)\n        val opSetSetSetSetLen = opSetSetSetSet.size\n   \
    \     val operandSetSetSetSet = operandSetSetSet.map(x => x.toLong)\n        val\
    \ operandSetSetSetSetLen = operandSetSetSetSet.size\n        val opSetSetSetSetSet\
    \ = opSetSetSetSet.map(x => x.toUpperCase)\n        val opSetSetSetSetSetLen =\
    \ opSetSetSetSetSet.size\n        val operandSetSetSetSetSet = operandSetSetSetSet.map(x\
    \ => x.toLong)\n        val operandSetSetSetSetSetLen = operandSetSetSetSetSet.size\n\
    \        val opSetSetSetSetSetSet = opSetSetSetSetSet.map(x => x.toUpperCase)\n\
    \        val opSetSetSetSetSetSetLen = opSetSetSetSetSetSet.size\n        val\
    \ operandSetSetSetSetSetSet = operandSetSetSetSetSet.map(x => x.toLong)\n    \
    \    val operandSetSetSetSetSetSetLen = operandSetSetSetSetSetSetSet.size\n  \
    \      val opSetSetSetSetSetSetSet = opSetSetSetSetSetSet.map(x => x.toUpperCase)\n\
    \        val opSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSet.size\n     \
    \   val operandSetSetSetSetSetSetSet = operand", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opArray = opList.map(_.toChar)\n\
    \        val operandArray = operandList.map(_.toChar)\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArrayArray = opArray.map(_.toChar)\n        val operandArrayArray = operandArray.map(_.toChar)\n\
    \        val opArrayArrayLen = opArrayArray.length\n        val operandArrayArrayLen\
    \ = operandArrayArray.length\n        val opArrayArrayArray = opArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArray = operandArrayArray.map(_.toChar)\n      \
    \  val opArrayArrayArrayLen = opArrayArrayArray.length\n        val operandArrayArrayArrayLen\
    \ = operandArrayArrayArray.length\n        val opArrayArrayArrayArray = opArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArray = operandArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayLen = opArrayArrayArrayArray.length\n     \
    \   val operandArrayArrayArrayArrayLen = operandArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArray = opArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArray = operandArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayArrayLen = ", "        val ops\
    \ = op.map(x => x.toLowerCase)\n        val opLen = ops.size\n        val opArray\
    \ = ops.toArray\n        val operandArray = operand.toArray\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArrayLenMinusOne = opArrayLen - 1\n        val operandArrayLenMinusOne\
    \ = operandArrayLen - 1\n        val opArrayLenMinusOneMinusOne = opArrayLenMinusOne\
    \ - 1\n        val operandArrayLenMinusOneMinusOne = operandArrayLenMinusOne -\
    \ 1\n        val opArrayLenMinusOneMinusOneMinusOne = opArrayLenMinusOneMinusOne\
    \ - 1\n        val operandArrayLenMinusOneMinusOneMinusOne = operandArrayLenMinusOneMinusOne\
    \ - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOne = opArrayLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOne = operandArrayLenMinusOneMinusOneMinusOne\
    \ - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne = opArrayLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandArrayLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n    \
    \    val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus", " \
    \       val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opSet = opList.map(_.toChar)\n        val opSetLen = opSet.length\n\
    \        val operandSet = operandList.map(_.toChar)\n        val operandSetLen\
    \ = operandSet.length\n        val opSetSet = opSet.zip(operandSet).map(x => x._1\
    \ + x._2)\n        val opSetSetLen = opSetSet.length\n        val opSetSetSet\
    \ = opSet.zip(opSet).map(x => x._1 + x._2)\n        val opSetSetSetLen = opSetSetSet.length\n\
    \        val opSetSetSetSet = opSet.zip(opSet).zip(operandSet).map(x => x._1 +\
    \ x._2)\n        val opSetSetSetSetLen = opSetSetSetSet.length\n        val opSetSetSetSetSet\
    \ = opSet.zip(opSet).zip(opSet).zip(operandSet).map(x => x._1 + x._2 + x._3)\n\
    \        val opSetSetSetSetSetLen = opSetSetSetSetSet.length\n        val opSetSetSetSetSetSet\
    \ = opSet.zip(opSet).zip(opSet).zip(opSet).zip(operandSet).map(x => x._1 + x._2\
    \ + x._3 + x._4)\n        val opSetSetSetSetSetSetLen = opSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSet = opSet.zip(opSet).zip(opSet).zip(opSet).zip(opSet).zip(operandSet).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5)\n        val opSetSetSetSetSetSetLen =\
    \ opSetSetSetSetSetSet.length\n        val opSetSetSetSetSetSetSet = opSet.zip(opSet).zip(opSet).zip(opSet).zip(opSet).zip(opSet).zip(operandSet).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5 + x._6)\n        val opSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSet.length\n        val opSetSetSetSetSetSetSetSet = opSet.zip(opSet).zip(opSet).zip(opSet).zip(opSet).zip(opSet).zip(opSet).zip(",
  "        val opList = op.mkString(\"+\")\n        val opListLength = opList.length\n\
    \        val operandList = operand.mkString(\"+\")\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength = ",
  "        val ops = op.map(_.toUpperCase)\n        val opArray = ops.toArray\n  \
    \      val operandArray = operand.toArray\n        val opLength = opArray.length\n\
    \        val operandLength = operandArray.length\n        val opArrayLength =\
    \ opArray.length\n        val operandArrayLength = operandArray.length\n     \
    \   val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length", " \
    \       val ops = op.map(_.toUpperCase)\n        val opNames = ops.map(_.toString)\n\
    \        val opNamesLength = opNames.map(_.length).sum\n        val opNamesLength\
    \ = opNamesLength.toInt\n        val opNamesLength = opNamesLength + 1\n     \
    \   val opNamesLength = opNamesLength.toInt\n        val opNamesLength = opNamesLength\
    \ + 1\n        val opNamesLength = opNamesLength.toInt\n        val opNamesLength\
    \ = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n     \
    \   val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        val opNamesLength = opNamesLength.toInt\n\
    \        val opNamesLength = opNamesLength + 1\n        ", "        val ops =\
    \ op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n      \
    \  val opLen = ops.size\n        val operandLen = operands.size\n        val opArray\
    \ = ops.toArray\n        val operandArray = operands.toArray\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArrayIndex = 0\n        val operandArrayIndex = 0\n        var result\
    \ = 0L\n        while(opArrayIndex < opArrayLen && operandArrayIndex < operandArrayLen)\
    \ {\n            val op = ops(opArrayIndex)\n            val operand = operands(operandArrayIndex)\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(operand)\n\
    \            val opValue = (opIndex < opArrayLen) ? opArray(opIndex) : 0L\n  \
    \          val operandValue = (operandIndex < operandArrayLen) ? operandArray(operandIndex)\
    \ : 0L\n            val opValueLen = opValue.length\n            val operandValueLen\
    \ = operandValue.length\n            val opValueIndex = 0\n            val operandValueIndex\
    \ = 0\n            val opValueArray = Array(opValueLen)\n            val operandValueArray\
    \ = Array(operandValueLen)\n            val opValueArrayLen = opValueArray.length\n\
    \            val operandValueArrayLen = operandValueArray.length\n           \
    \ val opValueArrayIndex = 0\n            val operandValueArrayIndex = 0\n    \
    \        val opValueArrayIndex2 = 0\n            val operandValueArrayIndex2 =\
    \ 0\n            val opValueArrayIndex3 = 0\n            val operandValueArrayIndex3\
    \ = 0\n            val opValueArrayIndex4 = 0\n            val operandValueArrayIndex4\
    \ = 0\n            val opValueArrayIndex5 = 0\n            val operandValueArrayIndex5\
    \ = 0\n            val opValueArrayIndex6 = 0\n            val operandValueArrayIndex6\
    \ = 0\n            val opValueArrayIndex7 = 0\n            val operandValueArrayIndex7\
    \ = 0\n            val opValueArrayIndex8 = 0\n            val operandValueArrayIndex8\
    \ = 0\n            val opValueArrayIndex9 = 0\n            val operandValueArrayIndex9\
    \ = 0\n            val opValueArrayIndex10 = 0\n            val operandValueArrayIndex10\
    \ = 0\n            val opValueArrayIndex11 = 0\n            val operandValueArrayIndex11\
    \ = 0\n            val opValueArrayIndex12 = 0\n            val operandValueArrayIndex12\
    \ = 0\n            val opValueArrayIndex13 = 0\n            val operandValueArrayIndex13\
    \ = 0\n            val opValueArray", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap : Map[String,\
    \ Long] = opList.zip(operandList).map(x => (x._1, x._2)).toMap\n        val opVal\
    \ = opMap(\"+\")\n        val opVal2 = opMap(\"*\")\n        val opVal3 = opMap(\"\
    -\")\n        val opVal4 = opMap(\"/\")\n        val opVal5 = opMap(\"**\")\n\
    \        val opVal6 = opMap(\"//\")\n        val opVal7 = opMap(\"%\")\n     \
    \   val opVal8 = opMap(\"*\")\n        val opVal9 = opMap(\"+\")\n        val\
    \ opVal10 = opMap(\"+\")\n        val opVal11 = opMap(\"*\")\n        val opVal12\
    \ = opMap(\"*\")\n        val opVal13 = opMap(\"*\")\n        val opVal14 = opMap(\"\
    *\")\n        val opVal15 = opMap(\"*\")\n        val opVal16 = opMap(\"*\")\n\
    \        val opVal17 = opMap(\"*\")\n        val opVal18 = opMap(\"*\")\n    \
    \    val opVal19 = opMap(\"*\")\n        val opVal20 = opMap(\"*\")\n        val\
    \ opVal21 = opMap(\"*\")\n        val opVal22 = opMap(\"*\")\n        val opVal23\
    \ = opMap(\"*\")\n        val opVal24 = opMap(\"*\")\n        val opVal25 = opMap(\"\
    *\")\n        val opVal26 = opMap(\"*\")\n        val opVal27 = opMap(\"*\")\n\
    \        val opVal28 = opMap(\"*\")\n        val opVal29 = opMap(\"*\")\n    \
    \    val opVal30 = opMap(\"*\")\n        val opVal31 = opMap(\"*\")\n        val\
    \ opVal32 = opMap(\"*\")\n        val opVal33 = opMap(\"*\")\n        val opVal34\
    \ = opMap(\"*\")\n        val opVal35 = opMap(\"*\")\n        val opVal36 = opMap(\"\
    *\")\n        val opVal37 = opMap(\"*\")\n        val opVal38 = opMap(\"*\")\n\
    \        val opVal39 = opMap(\"*\")\n        val opVal40 = opMap(\"*\")\n    \
    \    val opVal41 = opMap(\"*\")\n        ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length\n        val result = operandList.foldLeft(operandList.head)\
    \ { (acc, x) => \n            val opIndex = opList.indexOf(\"*\")\n          \
    \  val opIndex = opList.indexOf(\"//\")\n            val opIndex = opList.indexOf(\"\
    **\")\n            val opIndex = opList.indexOf(\"-\")\n            val opIndex\
    \ = opList.indexOf(\"+\")\n            val opIndex = opList.indexOf(\"/\")\n \
    \           val opIndex = opList.indexOf(\"%\")\n            val opIndex = opList.indexOf(\"\
    ^\")\n            val opIndex = opList.indexOf(\"&\")\n            val opIndex\
    \ = opList.indexOf(\"|\")\n            val opIndex = opList.indexOf(\"~\")\n \
    \           val opIndex = opList.indexOf(\"<<\")\n            val opIndex = opList.indexOf(\"\
    >>\")\n            val opIndex = opList.indexOf(\"|=\")\n            val opIndex\
    \ = opList.indexOf(\"==\")\n            val opIndex = opList.indexOf(\"!=\")\n\
    \            val opIndex = opList.indexOf(\"<\")\n            val opIndex = opList.indexOf(\"\
    >\")\n            val opIndex = opList.indexOf(\"<=\")\n            val opIndex\
    \ = opList.indexOf(\">=\")\n            val opIndex = opList.indexOf(\"==\")\n\
    \            val opIndex = opList.indexOf(\"!=\")\n            val opIndex = opList.indexOf(\"\
    &&\")\n            val opIndex = opList.indexOf(\"||\")\n            val opIndex\
    \ = opList.indexOf(\"??\")\n            val opIndex = opList.indexOf(\"??=\")\n\
    \            val opIndex = opList.indexOf(\"???\")\n            val opIndex =\
    \ opList.indexOf(\"????\")\n            val opIndex = opList.indexOf(\"????=\"\
    )\n            val opIndex = opList.indexOf(\"?????\")\n            val opIndex\
    \ = opList.indexOf(\"??????\")\n            val opIndex = opList.indexOf(\"??????=\"\
    )\n            val opIndex = opList.indexOf(\"???????\")\n            val opIndex\
    \ = opList.indexOf(\"????????\")\n            val opIndex = opList.indexOf(\"\
    ????????=\")\n            val opIndex = opList.indexOf(\"?????????\")\n      \
    \      val opIndex = opList.indexOf(\"??????????\")\n            val opIndex =\
    \ opList.indexOf(\"??????????=\")\n            val opIndex = opList.indexOf(\"\
    ???????????\")\n            val opIndex = ", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(_.toUpperCase)\n        val opMapValues = opList.map(_.toUpperCase)\n\
    \        val operandMapKeys = operandList.map(_.toLong)\n        val operandMapValues\
    \ = operandList.map(_.toLong)\n        val opMapKeySet = opMapKeys.toSet\n   \
    \     val opMapValueSet = opMapValues.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n\
    \        val operandMapValueSet = operandMapValues.toSet\n        val opMapKeysSet\
    \ = opMapKeys.toSet\n        val opMapValuesSet = opMapValues.toSet\n        val\
    \ operandMapKeysSet = operandMapKeys.toSet\n        val operandMapValuesSet =\
    \ operandMapValues.toSet\n        val opMapKeysSet2 = opMapKeys.toSet\n      \
    \  val opMapValuesSet2 = opMapValues.toSet\n        val operandMapKeysSet2 = operandMapKeys.toSet\n\
    \        val operandMapValuesSet2 = operandMapValues.toSet\n        val opMapKeysSet3\
    \ = opMapKeys.toSet\n        val opMapValuesSet3 = opMapValues.toSet\n       \
    \ val operandMapKeysSet3 = operandMapKeys.toSet\n        val operandMapValuesSet3\
    \ = operandMapValues.toSet\n        val opMapKeysSet4 = opMapKeys.toSet\n    \
    \    val opMapValuesSet4 = opMapValues.toSet\n        val operandMapKeysSet4 =\
    \ operandMapKeys.toSet\n        val operandMapValuesSet4 = operandMapValues.toSet\n\
    \        val opMapKeysSet5 = opMapKeys.toSet\n        val opMapValuesSet5 = opMapValues.toSet\n\
    \        val operandMapKeysSet5 = operandMapKeys.toSet\n        val operandMapValuesSet5\
    \ = operandMapValues.toSet\n        val opMapKeysSet6 = opMapKeys.toSet\n    \
    \    val opMapValuesSet6 = opMapValues.toSet\n        val operandMapKeysSet6 =\
    \ operandMapKeys.to", "        val ops = op.map(_.toLowerCase)\n        val opList\
    \ = ops.toList\n        val operands = operand.toList\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opMap = opList.zip(operands).toMap\n\
    \        val opMapLen = opMap.size\n        val opMapKeys = opMap.keys\n     \
    \   val opMapValues = opMap.values.toList\n        val opMapValuesLen = opMapValues.size\n\
    \        val opMapValuesSum = opMapValues.sum\n        val opMapValuesSumLen =\
    \ opMapValuesSum.size\n        val opMapValuesSumSum = opMapValuesSum.sum\n  \
    \      val opMapValuesSumSumLen = opMapValuesSumSum.size\n        val opMapValuesSumSumSum\
    \ = opMapValuesSumSum.sum\n        val opMapValuesSumSumSumLen = opMapValuesSumSumSum.size\n\
    \        val opMapValuesSumSumSumSum = opMapValuesSumSumSum.sum\n        val opMapValuesSumSumSumSumLen\
    \ = opMapValuesSumSumSumSum.size\n        val opMapValuesSumSumSumSumSum = opMapValuesSumSumSumSum.sum\n\
    \        val opMapValuesSumSumSumSumLen = opMapValuesSumSumSumSumSum.size\n  \
    \      val opMapValuesSumSumSumSumSum = opMapValuesSumSumSumSumSum.sum\n     \
    \   val opMapValuesSumSumSumSumSumLen = opMapValuesSumSumSumSumSumSum.size\n \
    \       val opMapValuesSumSumSumSumSumSum = opMapValuesSumSumSumSumSumSum.sum\n\
    \        val opMapValuesSumSumSumSumSumSumLen = opMapValuesSumSumSumSumSumSumSum.size\n\
    \        val opMapValuesSumSumSumSumSumSumSum = opMapValuesSumSumSumSumSumSumSum.sum\n\
    \        val opMapValuesSumSumSumSumSumSumLen = opMapValuesSumSumSumSumSumSumSumSum.size\n\
    \        val opMapValuesSumSumSumSumSumSumSumSum = opMapValuesSumSumSumSumSumSumSumSum.sum\n\
    \        val opMapValuesSumSumSumSumSumSumSumLen = opMapValuesSumSumSumSumSumSumSumSumSum.size\n\
    \        val opMapValuesSumSumSumSumSumSumSumSum = opMapValuesSumSumSumSumSumSumSumSumSum.sum\n\
    \        val opMapValues", "        val opList = op.map(_.toUpperCase)\n     \
    \   val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val result = operandList.foldLeft(operandList.head)\
    \ {\n            (acc, x) => acc match {\n                case 0 => x\n      \
    \          case 1 => acc\n                case _ => acc + x * opList(0)\n    \
    \        }\n        }\n        result * operandList(0)", "        val opList =\
    \ op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n   \
    \     val opLen = opList.size\n        val operandLen = operandList.size\n   \
    \     val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    **\")\n        val opIndex7 = opList.indexOf(\"+\")\n        val opIndex8 = opList.indexOf(\"\
    *\")\n        val opIndex9 = opList.indexOf(\"/\")\n        val opIndex10 = opList.indexOf(\"\
    **\")\n        val opIndex11 = opList.indexOf(\"//\")\n        val opIndex12 =\
    \ opList.indexOf(\"**\")\n        val opIndex13 = opList.indexOf(\"+\")\n    \
    \    val opIndex14 = opList.indexOf(\"*\")\n        val opIndex15 = opList.indexOf(\"\
    /\")\n        val opIndex16 = opList.indexOf(\"**\")\n        val opIndex17 =\
    \ opList.indexOf(\"//\")\n        val opIndex18 = opList.indexOf(\"**\")\n   \
    \     val opIndex19 = opList.indexOf(\"+\")\n        val opIndex20 = opList.indexOf(\"\
    *\")\n        val opIndex21 = opList.indexOf(\"/\")\n        val opIndex22 = opList.indexOf(\"\
    **\")\n        val opIndex23 = opList.indexOf(\"//\")\n        val opIndex24 =\
    \ opList.indexOf(\"**\")\n        val opIndex25 = opList.indexOf(\"+\")\n    \
    \    val opIndex26 = opList.indexOf(\"*\")\n        val opIndex27 = opList.indexOf(\"\
    /\")\n        val opIndex28 = opList.indexOf(\"**\")\n        val opIndex29 =\
    \ opList.indexOf(\"//\")\n        val opIndex30 = opList.indexOf(\"**\")\n   \
    \     val opIndex31 = opList.indexOf(\"+\")\n        val opIndex32 = opList.indexOf(\"\
    *\")\n        val opIndex33 = opList.indexOf(\"/\")\n        val opIndex34 = opList.indexOf(\"\
    **\")\n        val opIndex35 = opList.indexOf(\"//\")\n        val opIndex36 =\
    \ opList.indexOf(\"**\")\n        val opIndex37 = opList.indexOf(\"+\")\n    \
    \    val opIndex38 = opList.indexOf(\"*\")\n        val opIndex39 = opList.indexOf(\"\
    /", "        val ops = op.map(x => x.toChar).map(x => x.toInt)\n        val operands\
    \ = operand.map(x => x.toLong)\n        val opLength = ops.size\n        val operandLength\
    \ = operands.size\n        val result = operands.foldLeft(0)(_ + _)\n        val\
    \ opIndex = 0\n        val operandIndex = 0\n        while(opIndex < opLength\
    \ && operandIndex < operandLength) {\n            val op = ops(opIndex)\n    \
    \        val operand = operands(operandIndex)\n            val opResult = if (op\
    \ == '+') result + operand else result - operand\n            val opIndex = opIndex\
    \ + 1\n            val operandIndex = operandIndex + 1\n            result = opResult\n\
    \        }\n        result", "        val ops = op.map(_.toLowerCase)\n      \
    \  val operands = operand.map(_.toLong)\n        val length = operands.length\n\
    \        val operators = ops.dropRight(1)\n        val operandsLength = operands.length\n\
    \        val result = operands.foldLeft(operands(0)) { (acc, x) => \n        \
    \    val opIndex = ops.indexOf(x)\n            val opLength = ops.length\n   \
    \         val op = (opIndex + opLength) % opLength\n            val operand =\
    \ operands(opIndex)\n            val result = acc + operand * op\n           \
    \ result\n        }\n        result", "        val ops = op.map(x => x.toUpperCase)\n\
    \        val opLen = ops.size\n        val opArray = ops.toArray\n        val\
    \ opArrayLen = opArray.length\n        val operandLen = operand.size\n       \
    \ val operandArray = operand.toArray\n        val operandArrayLen = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        ", "        val ops = op.map(x => x.toChar)\n        val op1 =\
    \ ops.head\n        val op2 = ops.last\n        val op3 = ops.dropRight(1)\n \
    \       val op4 = ops.dropRight(2)\n        val op5 = ops.dropRight(3)\n     \
    \   val op6 = ops.dropRight(4)\n        val op7 = ops.dropRight(5)\n        val\
    \ op8 = ops.dropRight(6)\n        val op9 = ops.dropRight(7)\n        val op10\
    \ = ops.dropRight(8)\n        val op11 = ops.dropRight(9)\n        val op12 =\
    \ ops.dropRight(10)\n        val op13 = ops.dropRight(11)\n        val op14 =\
    \ ops.dropRight(12)\n        val op15 = ops.dropRight(13)\n        val op16 =\
    \ ops.dropRight(14)\n        val op17 = ops.dropRight(15)\n        val op18 =\
    \ ops.dropRight(16)\n        val op19 = ops.dropRight(17)\n        val op20 =\
    \ ops.dropRight(18)\n        val op21 = ops.dropRight(19)\n        val op22 =\
    \ ops.dropRight(20)\n        val op23 = ops.dropRight(21)\n        val op24 =\
    \ ops.dropRight(22)\n        val op25 = ops.dropRight(23)\n        val op26 =\
    \ ops.dropRight(24)\n        val op27 = ops.dropRight(25)\n        val op28 =\
    \ ops.dropRight(26)\n        val op29 = ops.dropRight(27)\n        val op30 =\
    \ ops.dropRight(28)\n        val op31 = ops.dropRight(29)\n        val op32 =\
    \ ops.dropRight(30)\n        val op33 = ops.dropRight(31)\n        val op34 =\
    \ ops.dropRight(32)\n        val op35 = ops.dropRight(33)\n        val op36 =\
    \ ops.dropRight(34)\n        val op37 = ops.dropRight(35)\n        val op38 =\
    \ ops.dropRight(36)\n        val op39 = ops.dropRight(37)\n        val op40 =\
    \ ops.dropRight(38)\n        val op41 = ops.dropRight(39)\n        val op42 =\
    \ ops.dropRight(40)\n        val op43 = ops.dropRight(41)\n        val op44 =\
    \ ops.dropRight(42)\n        val op45 = ops.dropRight(43)\n        val op46 =\
    \ ops.dropRight(44)\n        val ", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = ops.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1 - 1\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1 - 1\n\
    \        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 - 1 - 1 - 1\n\
    \        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen - 1 - 1 -\
    \ 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne = opLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n\
    \        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = ", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toInt).toList\n        val opLength = opList.size\n        val\
    \ operandLength = operandList.size\n        val opIndex = opList.indexOf(\"+\"\
    )\n        val opIndex2 = opList.indexOf(\"*\")\n        val opIndex3 = opList.indexOf(\"\
    /\")\n        val opIndex4 = opList.indexOf(\"**\")\n        val opIndex5 = opList.indexOf(\"\
    //\")\n        val opIndex6 = opList.indexOf(\"%\")\n        val opIndex7 = opList.indexOf(\"\
    |\")\n        val opIndex8 = opList.indexOf(\"&\")\n        val opIndex9 = opList.indexOf(\"\
    ^\")\n        val opIndex10 = opList.indexOf(\"~\")\n        val opIndex11 = opList.indexOf(\"\
    <<\")\n        val opIndex12 = opList.indexOf(\">>\")\n        val opIndex13 =\
    \ opList.indexOf(\"==\")\n        val opIndex14 = opList.indexOf(\"!=\")\n   \
    \     val opIndex15 = opList.indexOf(\"<\")\n        val opIndex16 = opList.indexOf(\"\
    >\")\n        val opIndex17 = opList.indexOf(\"<=\")\n        val opIndex18 =\
    \ opList.indexOf(\">=\")\n        val opIndex19 = opList.indexOf(\"!<\")\n   \
    \     val opIndex20 = opList.indexOf(\"!>\")\n        val opIndex21 = opList.indexOf(\"\
    !<=\")\n        val opIndex22 = opList.indexOf(\"!>\")\n        val opIndex23\
    \ = opList.indexOf(\"&&\")\n        val opIndex24 = opList.indexOf(\"||\")\n \
    \       val opIndex25 = opList.indexOf(\"!&&\")\n        val opIndex26 = opList.indexOf(\"\
    !||\")\n        val opIndex27 = opList.indexOf(\"|=\")\n        val opIndex28\
    \ = opList.indexOf(\"&=\")\n        val opIndex29 = opList.indexOf(\"^=\")\n \
    \       val opIndex30 = opList.indexOf(\"~=\")\n        val opIndex31 = opList.indexOf(\"\
    <<=\")\n        val opIndex32 = opList.indexOf(\">>=\")\n        val opIndex33\
    \ = opList.indexOf(\"==\")\n        val opIndex34 = opList.indexOf(\"!=\")\n \
    \       val opIndex35 = opList.indexOf(\"<\")\n        val opIndex36 = opList.indexOf(\"\
    >\")\n        val opIndex37 = opList.indexOf(\"<=\")\n        val opIndex38 =\
    \ opList.indexOf(\">", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLength = opList.size\n  \
    \      val operandLength = operandList.size\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n        val operandListIndex = 0\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListIndex =\
    \ 0\n", "        val opList = op.map(_.toUpperCase)\n        val operandList =\
    \ operand.map(_.toInt)\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length - 1\n        val opMap = opList.zip(operandList)\n    \
    \    val opMapLen = opMap.length\n        val opMapMap = opMap.map(x => (x._1,\
    \ x._2))\n        val opMapMapLen = opMapMap.length\n        val opMapMapMap =\
    \ opMapMap.map(x => (x._1, x._2))\n        val opMapMapMapLen = opMapMapMap.length\n\
    \        val opMapMapMapMap = opMapMapMap.map(x => (x._1, x._2))\n        val\
    \ opMapMapMapMapLen = opMapMapMap.length\n        val opMapMapMapMapMap = opMapMapMap.map(x\
    \ => (x._1, x._2))\n        val opMapMapMapMapMapLen = opMapMapMapMap.length\n\
    \        val opMapMapMapMapMapMap = opMapMapMap.map(x => (x._1, x._2))\n     \
    \   val opMapMapMapMapMapMapLen = opMapMapMapMap.length\n        val opMapMapMapMapMapMapMap\
    \ = opMapMapMap.map(x => (x._1, x._2))\n        val opMapMapMapMapMapMapLen =\
    \ opMapMapMapMap.length\n        val opMapMapMapMapMapMapMap = opMapMapMap.map(x\
    \ => (x._1, x._2))\n        val opMapMapMapMapMapMapLen = opMapMapMapMapMap.length\n\
    \        val opMapMapMapMapMapMapMapMap = opMapMapMap.map(x => (x._1, x._2))\n\
    \        val opMapMapMapMapMapMapLen = opMapMapMapMapMap.length\n        val opMapMapMapMapMapMapMap\
    \ = opMapMapMap.map(x => (x._1, x._2))\n        val opMapMapMapMapMapMapLen =\
    \ opMapMapMapMapMap.length\n        val opMapMapMapMapMapMapMap = opMapMapMap.map(x\
    \ => (x._1, x._2))\n        val opMapMapMapMapMapMapLen = opMapMapMapMapMap.length\n\
    \        val opMapMapMapMapMapMapMap = opMapMapMap.map(x => (x._1, x._2))\n  \
    \      val opMapMapMapMapMapMapLen = opMapMapMapMapMap.length\n        val opMapMapMapMapMapMapMap\
    \ = opMapMapMap.", "        val ops = op.map(_.toLowerCase)\n        val opLen\
    \ = ops.size\n        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toInt).toList\n\
    \        val length = ops.length\n        val result = operands.foldLeft(operands(0))((acc,\
    \ x) => acc + x * ops(length - 1))\n        result", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = ops.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen\
    \ - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n  \
    \      val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - ", "        val ops = op.map(_.toLowerCase)\n\
    \        val opList = ops.toList\n        val operandList = operand.toList\n \
    \       val opLen = opList.size\n        val operandLen = operandList.size\n \
    \       val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"\
    -\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    //\")\n        val opIndex7 = ops.indexOf(\"%\")\n        val opIndex8 = ops.indexOf(\"\
    &\")\n        val opIndex9 = ops.indexOf(\"|\")\n        val opIndex10 = ops.indexOf(\"\
    ^\")\n        val opIndex11 = ops.indexOf(\"~\")\n        val opIndex12 = ops.indexOf(\"\
    <<\")\n        val opIndex13 = ops.indexOf(\">>\")\n        val opIndex14 = ops.indexOf(\"\
    ==\")\n        val opIndex15 = ops.indexOf(\"!=\")\n        val opIndex16 = ops.indexOf(\"\
    <\")\n        val opIndex17 = ops.indexOf(\">\")\n        val opIndex18 = ops.indexOf(\"\
    <=\")\n        val opIndex19 = ops.indexOf(\">=\")\n        val opIndex20 = ops.indexOf(\"\
    ==\")\n        val opIndex21 = ops.indexOf(\"!=\")\n        val opIndex22 = ops.indexOf(\"\
    &\")\n        val opIndex23 = ops.indexOf(\"|\")\n        val opIndex24 = ops.indexOf(\"\
    ^\")\n        val opIndex25 = ops.indexOf(\"~\")\n        val opIndex26 = ops.indexOf(\"\
    <<\")\n        val opIndex27 = ops.indexOf(\">>\")\n        val opIndex28 = ops.indexOf(\"\
    ==\")\n        val opIndex29 = ops.indexOf(\"!=\")\n        val opIndex30 = ops.indexOf(\"\
    <\")\n        val opIndex31 = ops.indexOf(\">\")\n        val opIndex32 = ops.indexOf(\"\
    <=\")\n        val opIndex33 = ops.indexOf(\">=\")\n        val opIndex34 = ops.indexOf(\"\
    ==\")\n        val opIndex35 = ops.indexOf(\"!=\")\n        val opIndex36 = ops.indexOf(\"\
    &\")\n        val opIndex37 = ops.indexOf(\"|\")\n        val opIndex38 = ops.indexOf(\"\
    ^\")\n        val opIndex39 = ops.indexOf(\"~\")\n        val opIndex40 = ops.indexOf(\"\
    <<\")\n        val opIndex41 = ops.indexOf(\">>\")\n        val opIndex", "  \
    \      val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val operatorList = opList.take(operandList.length-1)\n        val operandList2\
    \ = operandList.drop(1)\n        val operatorList2 = opList.drop(operandList.length-1)\n\
    \        val operatorList3 = opList.drop(operandList.length-1)\n        val operandList3\
    \ = operandList.drop(1)\n        val operatorList4 = opList.drop(operandList.length-1)\n\
    \        val operandList4 = operandList.drop(1)\n        val operatorList5 = opList.drop(operandList.length-1)\n\
    \        val operandList5 = operandList.drop(1)\n        val operatorList6 = opList.drop(operandList.length-1)\n\
    \        val operandList6 = operandList.drop(1)\n        val operatorList7 = opList.drop(operandList.length-1)\n\
    \        val operandList7 = operandList.drop(1)\n        val operatorList8 = opList.drop(operandList.length-1)\n\
    \        val operandList8 = operandList.drop(1)\n        val operatorList9 = opList.drop(operandList.length-1)\n\
    \        val operandList9 = operandList.drop(1)\n        val operatorList10 =\
    \ opList.drop(operandList.length-1)\n        val operandList10 = operandList.drop(1)\n\
    \        val operatorList11 = opList.drop(operandList.length-1)\n        val operandList11\
    \ = operandList.drop(1)\n        val operatorList12 = opList.drop(operandList.length-1)\n\
    \        val operandList12 = operandList.drop(1)\n        val operatorList13 =\
    \ opList.drop(operandList.length-1)\n        val operandList13 = operandList.drop(1)\n\
    \        val operatorList14 = opList.drop(operandList.length-1)\n        val operandList14\
    \ = operandList.drop(1)\n        val operatorList15 = opList.drop(operandList.length-1)\n\
    \        val operandList15 = operandList.drop(1)\n        val operatorList16 =\
    \ opList.drop(operandList.length-1)\n        val operandList16 = operandList.drop(1)\n\
    \        val operatorList17 = opList.drop(operandList.length-1)\n        val operandList17\
    \ = operandList.drop(1)\n        val operatorList18 = opList.drop(operandList.length-1)\n\
    \        val operandList18 = operandList.drop(1)\n        val operatorList19 =\
    \ opList.drop(operandList.length-1)\n        val operandList19 = operandList.drop(1)\n\
    \        val operatorList20 = opList.drop(operandList.length-1)\n        val operandList20\
    \ = operandList.drop(1)\n        val operatorList", "        val ops = op.map(_.toLowerCase)\n\
    \        val opList = ops.toList\n        val operandList = operand.toList\n \
    \       val opLen = opList.size\n        val operandLen = operandList.size\n \
    \       val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneOpLen = opLenMinusOne * opLen\n        val operandLenMinusOneOpLen\
    \ = operandLenMinusOne * operandLen\n        val opLenMinusOneOpLenMinusOne =\
    \ opLenMinusOneOpLen - 1\n        val operandLenMinusOneOpLenMinusOne = operandLenMinusOneOpLen\
    \ - 1\n        val opLenMinusOneOpLenMinusOneOpLen = opLenMinusOneOpLenMinusOne\
    \ * opLenMinusOne\n        val operandLenMinusOneOpLenMinusOneOpLen = operandLenMinusOneOpLenMinusOne\
    \ * operandLenMinusOne\n        val opLenMinusOneOpLenMinusOneOpLenMinusOne =\
    \ opLenMinusOneOpLenMinusOneOpLen * opLenMinusOneOpLen\n        val operandLenMinusOneOpLenMinusOneOpLenMinusOne\
    \ = operandLenMinusOneOpLenMinusOneOpLen * operandLenMinusOneOpLenMinusOne\n \
    \       val opLenMinusOneOpLenMinusOneOpLenMinusOneOpLen = opLenMinusOneOpLenMinusOneOpLenMinusOne\
    \ * opLenMinusOneOpLenMinusOneOpLen\n        val operandLenMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ = operandLenMinusOneOpLenMinusOneOpLenMinusOne * operandLenMinusOneOpLenMinusOneOpLenMinusOne\n\
    \        val opLenMinusOneOpLenMinusOneOpLenMinusOneOpLenMinusOne = opLenMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ * opLenMinusOneOpLenMinusOneOpLenMinusOneOpLen\n        val operandLenMinusOneOpLenMinusOneOpLenMinusOneOpLenMinusOne\
    \ = operandLenMinusOneOpLenMinusOneOpLenMinusOneOpLen * operandLenMinusOneOpLenMinusOneOpLenMinusOneOp",
  "        val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n       \
    \ val opArray = ops.toArray\n        val operandArray = operand.toArray\n    \
    \    val operandLen = operandArray.length\n        val opArrayLen = opArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opLenMinusOne = opLen\
    \ - 1\n        val operandIndexMinusOne = operandLen - 1\n        val opIndexMinusOne\
    \ = opIndex - 1\n        val opIndexMinusTwo = opIndex - 1\n        val opIndexMinusThree\
    \ = opIndex - 1\n        val opIndexMinusFour = opIndex - 1\n        val opIndexMinusFive\
    \ = opIndex - 1\n        val opIndexMinusSix = opIndex - 1\n        val opIndexMinusSeven\
    \ = opIndex - 1\n        val opIndexMinusEight = opIndex - 1\n        val opIndexMinusNine\
    \ = opIndex - 1\n        val opIndexMinusTen = opIndex - 1\n        val opIndexMinusEleven\
    \ = opIndex - 1\n        val opIndexMinusTwelve = opIndex - 1\n        val opIndexMinusThirteen\
    \ = opIndex - 1\n        val opIndexMinusFourteen = opIndex - 1\n        val opIndexMinusFifteen\
    \ = opIndex - 1\n        val opIndexMinusSixteen = opIndex - 1\n        val opIndexMinusSeventeen\
    \ = opIndex - 1\n        val opIndexMinusEighteen = opIndex - 1\n        val opIndexMinusNineteen\
    \ = opIndex - 1\n        val opIndexMinusTwenty = opIndex - 1\n        val opIndexMinusThirty\
    \ = opIndex - 1\n        val opIndexMinusFourty = opIndex - 1\n        val opIndexMinusFifty\
    \ = opIndex - 1\n        val opIndexMinusSixty = opIndex - 1\n        val opIndexMinusSeventy\
    \ = opIndex - 1\n        val opIndexMinusEighty = opIndex - 1\n        val opIndexMinusNinety\
    \ = opIndex - 1\n        val opIndexMinusOne = opIndex - 1\n        val opIndexMinusTwo\
    \ = opIndex - 1\n        val opIndexMinusThree = opIndex - 1\n        val opIndexMinusFour\
    \ = opIndex - 1\n        val opIndexMinusFive = opIndex - 1\n        val opIndexMinusSix\
    \ = opIndex - 1\n        val opIndexMinusSeven = ", "        val ops = op.map(x\
    \ => x.toChar)\n        val opList = ops.toList\n        val operands = operand.toList\n\
    \        val opLen = opList.size\n        val operandLen = operands.size\n   \
    \     val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusTwo = opLen - 2\n        val operandLenMinusTwo =\
    \ operandLen - 2\n        val opLenMinusThree = opLen - 3\n        val operandLenMinusThree\
    \ = operandLen - 3\n        val opLenMinusFour = opLen - 4\n        val operandLenMinusFour\
    \ = operandLen - 4\n        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive\
    \ = operandLen - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix\
    \ = operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operand", "        val ops = op.map(_.toUpperCase)\n\
    \        val opList = ops.toList\n        val opLen = opList.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLen = operand.size\n        val\
    \ operandLenMinusOne = operandLen - 1\n        val operandList = new mutable.MutableList[Long]()\n\
    \        val operandListLen = operandList.size\n        val operandListLenMinusOne\
    \ = operandListLen - 1\n        val operandList2 = new mutable.MutableList[Long]()\n\
    \        val operandList2Len = operandList2.size\n        val operandList2LenMinusOne\
    \ = operandList2Len - 1\n        val operandList3 = new mutable.MutableList[Long]()\n\
    \        val operandList3Len = operandList3.size\n        val operandList3LenMinusOne\
    \ = operandList3Len - 1\n        val operandList4 = new mutable.MutableList[Long]()\n\
    \        val operandList4Len = operandList4.size\n        val operandList4LenMinusOne\
    \ = operandList4Len - 1\n        val operandList5 = new mutable.MutableList[Long]()\n\
    \        val operandList5Len = operandList5.size\n        val operandList5LenMinusOne\
    \ = operandList5Len - 1\n        val operandList6 = new mutable.MutableList[Long]()\n\
    \        val operandList6Len = operandList6.size\n        val operandList6LenMinusOne\
    \ = operandList6Len - 1\n        val operandList7 = new mutable.MutableList[Long]()\n\
    \        val operandList7Len = operandList7.size\n        val operandList7LenMinusOne\
    \ = operandList7Len - 1\n        val operandList8 = new mutable.MutableList[Long]()\n\
    \        val operandList8Len = operandList8.size\n        val operandList8LenMinusOne\
    \ = operandList8Len - 1\n        val operandList9 = new mutable.MutableList[Long]()\n\
    \        val operandList9Len = operandList9.size\n        val operandList9LenMinusOne\
    \ = operandList9Len - 1\n        val operandList10 = new mutable.MutableList[Long]()\n\
    \        val operandList10Len = operandList10.size\n        val operandList10LenMinusOne\
    \ = operandList10Len - 1\n        val operandList11 = new mutable.MutableList[Long]()\n\
    \        val operandList11Len = operandList11.size\n        val operandList11LenMinusOne\
    \ = operand", "        val opList = op.map(_.toLowerCase).toList\n        val\
    \ operandList = operand.map(_.toInt).toList\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMapKeys = opList.map(_.toLowerCase)\n        val operandMapKeys = operandList.map(_.toInt)\n\
    \        val opMapValues = opList.map(x => opMap.getOrElse(x, 0L))\n        val\
    \ operandMapValues = operandList.map(x => operandMap.getOrElse(x, 0L))\n     \
    \   val opMapKeysLen = opMapKeys.size\n        val opMapValuesLen = opMapValues.size\n\
    \        val operandMapKeysLen = operandMapKeys.size\n        val operandMapValuesLen\
    \ = operandMapValues.size\n        val opMapKeysMinusOne = opMapKeysLen - 1\n\
    \        val opMapValuesMinusOne = opMapValuesLen - 1\n        val operandMapKeysMinusOne\
    \ = operandMapKeysLen - 1\n        val operandMapValuesMinusOne = operandMapValuesLen\
    \ - 1\n        val opMapKeysMinusOneOpLen = opMapKeysMinusOne + opMapValuesMinusOne\n\
    \        val opMapKeysMinusOneOpLenMinusOne = opMapKeysMinusOneOpLen - 1\n   \
    \     val opMapKeysMinusOneOpLenMinusOneOpLen = opMapKeysMinusOneOpLenMinusOne\
    \ + opMapKeysMinusOneOpLenMinusOne\n        val opMapKeysMinusOneOpLenMinusOneOpLenMinusOne\
    \ = opMapKeysMinusOneOpLenMinusOneOpLen - 1\n        val opMapKeysMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ = opMapKeysMinusOneOpLenMinusOneOpLenMinusOne + opMapKeysMinusOneOpLenMinusOneOpLenMinusOneOpLen\n\
    \        val opMapKeysMinusOneOpLenMinusOneOpLenMinusOneOpLenMinusOne = opMapKeysMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ - 1", "        val opList = op.map(_.toUpperCase)\n        val operandList =\
    \ operand.map(_.toLong)\n        val opLength = opList.size\n        val operandLength\
    \ = operandList.size\n        val opIndex = 0\n        val operandIndex = 0\n\
    \        val opResult = 0\n        val operandResult = 0\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        ", "  \
    \      val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val opArray = Array.ofDim[String](opLen)\n        val operandArray =\
    \ Array.ofDim[Long](operandLen)\n        var i = 0\n        while (i < opLen)\
    \ {\n            opArray(i) = opList(i)\n            i += 1\n        }\n     \
    \   var j = 0\n        while (j < operandLen) {\n            operandArray(j) =\
    \ operandList(j)\n            j += 1\n        }\n        val opArrayLen = opArray.length\n\
    \        val operandArrayLen = operandArray.length\n        val opArrayLen2 =\
    \ opArrayLen / 2\n        val opArrayLen3 = opArrayLen - opArrayLen2\n       \
    \ val operandArrayLen2 = operandArrayLen / 2\n        val operandArrayLen3 = operandArrayLen\
    \ - operandArrayLen2\n        val opArray2 = Array.ofDim[String](opArrayLen2)\n\
    \        val opArray3 = Array.ofDim[String](opArrayLen3)\n        val operandArray2\
    \ = Array.ofDim[Long](operandArrayLen2)\n        val operandArray3 = Array.ofDim[Long](operandArrayLen3)\n\
    \        var k = 0\n        while (k < (opArrayLen2 + opArrayLen3)) {\n      \
    \      opArray2(k) = opArray(k)\n            opArray3(k) = opArray(k)\n      \
    \      operandArray2(k) = operandArray(k)\n            operandArray3(k) = operandArray(k)\n\
    \            k += 1\n        }\n        val opArray2Len = opArray2.length\n  \
    \      val opArray3Len = opArray3.length\n        val operandArray2Len = operandArray2.length\n\
    \        val operandArray3Len = operandArray3.length\n        val opArray2Len2\
    \ = opArray2Len / 2\n        val opArray2Len3 = opArray2Len - opArray2Len2\n \
    \       val opArray3Len2 = opArray3Len / 2\n        val opArray3Len3 = opArray3Len\
    \ - opArray3Len2\n        val operandArray2Len2 = operandArray2Len / 2\n     \
    \   val operandArray2Len3 = operandArray2Len - operandArray2Len2\n        val\
    \ operandArray3Len2 = operandArray3Len / 2\n        val operandArray3Len3 = operandArray3Len\
    \ - operandArray3Len2\n        val opArray4 = Array.ofDim[String](opArray2Len2)\n\
    \        val ", "        val ops = op.map(_.toLowerCase)\n        val op1 = ops(0)\n\
    \        val op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n\
    \        val op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n\
    \        val op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n\
    \        val op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n\
    \        val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op52 = ops(51)\n\
    \        val op53 = ops(52)\n        val op54 = ops(53)\n        val op", "  \
    \      val ops = op.map(x => x.toLowerCase)\n        val opLen = ops.length\n\
    \        val operandLen = operand.length - 1\n        val opMap = ops.zip(operand)\n\
    \        val opMapLen = opMap.length\n        val opMapSet = opMap.map(x => x._1)\n\
    \        val opMapSetLen = opMapSet.length\n        val opMapSetSet = opMapSet.map(x\
    \ => x._1)\n        val opMapSetSetLen = opMapSetSet.length\n        val opMapSetSetSet\
    \ = opMapSetSet.map(x => x._1)\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSet",
  "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"*\"\
    )\n        val opIndex3 = ops.indexOf(\"/\")\n        val opIndex4 = ops.indexOf(\"\
    **\")\n        val opIndex5 = ops.indexOf(\"//\")\n        val opIndex6 = ops.indexOf(\"\
    %\")\n        val opIndex7 = ops.indexOf(\"&\")\n        val opIndex8 = ops.indexOf(\"\
    |\")\n        val opIndex9 = ops.indexOf(\"^\")\n        val opIndex10 = ops.indexOf(\"\
    ~\")\n        val opIndex11 = ops.indexOf(\"<<\")\n        val opIndex12 = ops.indexOf(\"\
    >>\")\n        val opIndex13 = ops.indexOf(\"==\")\n        val opIndex14 = ops.indexOf(\"\
    !=\")\n        val opIndex15 = ops.indexOf(\"<\")\n        val opIndex16 = ops.indexOf(\"\
    >\")\n        val opIndex17 = ops.indexOf(\"<=\")\n        val opIndex18 = ops.indexOf(\"\
    >=\")\n        val opIndex19 = ops.indexOf(\"==\")\n        val opIndex20 = ops.indexOf(\"\
    !=\")\n        val opIndex21 = ops.indexOf(\"<<\")\n        val opIndex22 = ops.indexOf(\"\
    >>\")\n        val opIndex23 = ops.indexOf(\"&\")\n        val opIndex24 = ops.indexOf(\"\
    |\")\n        val opIndex25 = ops.indexOf(\"^\")\n        val opIndex26 = ops.indexOf(\"\
    ~\")\n        val opIndex27 = ops.indexOf(\"<<\")\n        val opIndex28 = ops.indexOf(\"\
    >>\")\n        val opIndex29 = ops.indexOf(\"&\")\n        val opIndex30 = ops.indexOf(\"\
    |\")\n        val opIndex31 = ops.indexOf(\"^\")\n        val opIndex32 = ops.indexOf(\"\
    ~\")\n        val opIndex33 = ops.indexOf(\"<<\")\n        val opIndex34 = ops.indexOf(\"\
    >>\")\n        val opIndex35 = ops.indexOf(\"&\")\n        val opIndex36 = ops.indexOf(\"\
    |\")\n        val opIndex37 = ops.indexOf(\"^\")\n        val opIndex38 = ops.indexOf(\"\
    ~\")\n        val opIndex39 = ops.indexOf(\"<<\")\n        val opIndex40 = ops.indexOf(\"\
    >>\")\n        val opIndex41 = ops.indexOf(\"&\")\n        val opIndex42 = ",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val length = operands.length - 1\n        val stack = mutable.Stack[Long]()\n\
    \        val result = operands.head\n        val operator = ops.head\n       \
    \ val operators = ops.tail\n        val operand = operands.tail\n\n        while(operand.length\
    \ > 0) {\n            val operandValue = operand.head\n            val operatorValue\
    \ = operator.head\n            val operatorValues = operators.tail\n         \
    \   val operandValues = operands.tail\n\n            val operatorResult = operatorValues.foldLeft(operandValue){\n\
    \                case (acc, value) => acc + value\n            }\n\n         \
    \   val operandResult = operandValues.foldLeft(operatorResult){\n            \
    \    case (acc, value) => acc * value\n            }\n\n            val operatorStack\
    \ = stack.push(operatorResult)\n            val operandStack = stack.push(operandResult)\n\
    \n            val operatorResult = operandStack.foldLeft(operatorStack){\n   \
    \             case (acc, value) => acc // + value\n            }\n\n         \
    \   val operandResult = operatorStack.foldLeft(operandStack){\n              \
    \  case (acc, value) => acc // - value\n            }\n\n            val operatorStack\
    \ = stack.push(operatorResult)\n            val operandStack = stack.push(operandResult)\n\
    \n            val operatorResult = operandStack.foldLeft(operatorStack){\n   \
    \             case (acc, value) => acc // + value\n            }\n\n         \
    \   val operandResult = operatorStack.foldLeft(operandStack){\n              \
    \  case (acc, value) => acc // - value\n            }\n\n            val operatorStack\
    \ = stack.push(operatorResult)\n            val operandStack = stack.push(operandResult)\n\
    \n            val operatorResult = operandStack.foldLeft(operatorStack){\n   \
    \             case (acc, value) => acc // + value\n            }\n\n         \
    \   val operandResult = operatorStack.foldLeft(operandStack){\n              \
    \  case (acc, value) => acc // - value\n            }\n\n            val operatorStack\
    \ = stack.push(operatorResult)\n            val operandStack = stack.push(operandResult)\n\
    \n            val operatorResult = operandStack.foldLeft(operatorStack){\n   \
    \             case (acc, value) => acc // + value\n            }\n\n         \
    \   val operandResult = operatorStack.foldLeft(operandStack){\n              \
    \  case (acc, value) => acc // - value\n            }\n\n            val operatorStack\
    \ = stack.push(operatorResult)\n            val operandStack = stack.push(operandResult)\n\
    \n            val operatorResult = operandStack.foldLeft(operator", "        val\
    \ ops = op.map(x => x.toChar)\n        val operands = operand.map(x => x.toLong)\n\
    \        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        var result = 0L\n\
    \        while(operandIndex < operandLength) {\n            val opChar = ops(opIndex)\n\
    \            val operand = operands(operandIndex)\n            val opFunc = opChar.toDouble\n\
    \            val operandFunc = operand.toDouble\n            val opResult = opFunc(operand)\n\
    \            result += opResult\n            opIndex += 1\n            operandIndex\
    \ += 1\n        }\n        result", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val result = operandList.foldLeft(0L)\
    \ { (acc, x) =>\n            val opIndex = opList.indexOf(x.toUpperCase)\n   \
    \         val opVal = opIndex.toLong\n            val opVal2 = opIndex.toLong\
    \ + 1\n            val opVal3 = opIndex.toLong + 2\n            val opVal4 = opIndex.toLong\
    \ + 3\n            val opVal5 = opIndex.toLong + 4\n            val opVal6 = opIndex.toLong\
    \ + 5\n            val opVal7 = opIndex.toLong + 6\n            val opVal8 = opIndex.toLong\
    \ + 7\n            val opVal9 = opIndex.toLong + 8\n            val opVal10 =\
    \ opIndex.toLong + 9\n            val opVal11 = opIndex.toLong + 10\n        \
    \    val opVal12 = opIndex.toLong + 11\n            val opVal13 = opIndex.toLong\
    \ + 12\n            val opVal14 = opIndex.toLong + 13\n            val opVal15\
    \ = opIndex.toLong + 14\n            val opVal16 = opIndex.toLong + 15\n     \
    \       val opVal17 = opIndex.toLong + 16\n            val opVal18 = opIndex.toLong\
    \ + 17\n            val opVal19 = opIndex.toLong + 18\n            val opVal20\
    \ = opIndex.toLong + 19\n            val opVal21 = opIndex.toLong + 20\n     \
    \       val opVal22 = opIndex.toLong + 21\n            val opVal23 = opIndex.toLong\
    \ + 22\n            val opVal24 = opIndex.toLong + 23\n            val opVal25\
    \ = opIndex.toLong + 24\n            val opVal26 = opIndex.toLong + 25\n     \
    \       val opVal27 = opIndex.toLong + 26\n            val opVal28 = opIndex.toLong\
    \ + 27\n            val opVal29 = opIndex.toLong + 28\n            val opVal30\
    \ = opIndex.toLong + 29\n            val opVal31 = opIndex.toLong + 30\n     \
    \       val opVal32 = opIndex.toLong + 31\n            val opVal33 = opIndex.toLong\
    \ + 32\n            val opVal34 = opIndex.toLong + 33\n            val opVal35\
    \ = opIndex.toLong + 34\n            val op", "        val ops = op.map(x => x.toChar)\n\
    \        val op1 = ops.head\n        val op2 = ops.last\n        val op3 = ops.dropRight(1)\n\
    \        val op4 = ops.dropRight(2)\n        val op5 = ops.dropRight(3)\n    \
    \    val op6 = ops.dropRight(4)\n        val op7 = ops.dropRight(5)\n        val\
    \ op8 = ops.dropRight(6)\n        val op9 = ops.dropRight(7)\n        val op10\
    \ = ops.dropRight(8)\n        val op11 = ops.dropRight(9)\n        val op12 =\
    \ ops.dropRight(10)\n        val op13 = ops.dropRight(11)\n        val op14 =\
    \ ops.dropRight(12)\n        val op15 = ops.dropRight(13)\n        val op16 =\
    \ ops.dropRight(14)\n        val op17 = ops.dropRight(15)\n        val op18 =\
    \ ops.dropRight(16)\n        val op19 = ops.dropRight(17)\n        val op20 =\
    \ ops.dropRight(18)\n        val op21 = ops.dropRight(19)\n        val op22 =\
    \ ops.dropRight(20)\n        val op23 = ops.dropRight(21)\n        val op24 =\
    \ ops.dropRight(22)\n        val op25 = ops.dropRight(23)\n        val op26 =\
    \ ops.dropRight(24)\n        val op27 = ops.dropRight(25)\n        val op28 =\
    \ ops.dropRight(26)\n        val op29 = ops.dropRight(27)\n        val op30 =\
    \ ops.dropRight(28)\n        val op31 = ops.dropRight(29)\n        val op32 =\
    \ ops.dropRight(30)\n        val op33 = ops.dropRight(31)\n        val op34 =\
    \ ops.dropRight(32)\n        val op35 = ops.dropRight(33)\n        val op36 =\
    \ ops.dropRight(34)\n        val op37 = ops.dropRight(35)\n        val op38 =\
    \ ops.dropRight(36)\n        val op39 = ops.dropRight(37)\n        val op40 =\
    \ ops.dropRight(38)\n        val op41 = ops.dropRight(39)\n        val op42 =\
    \ ops.dropRight(40)\n        val op43 = ops.dropRight(41)\n        val op44 =\
    \ ops.dropRight(42)\n        val op45 = ops.dropRight(43)\n        val op46 =\
    \ ops.dropRight(44)\n        val ", "        val opList = op.map(x => x.toLowerCase)\n\
    \        val operandList = operand.map(x => x.toLong)\n        val opLength =\
    \ opList.length\n        val operandLength = operandList.length\n        val opIndex\
    \ = 0\n        val operandIndex = 0\n        val result = operandList(0)\n   \
    \     while (operandIndex < operandLength) {\n            val op1 = opList(opIndex)\n\
    \            val op2 = opList(opIndex + 1)\n            val op3 = opList(opIndex\
    \ + 2)\n            val op4 = opList(opIndex + 3)\n            val op5 = opList(opIndex\
    \ + 4)\n            val op6 = opList(opIndex + 5)\n            val op7 = opList(opIndex\
    \ + 6)\n            val op8 = opList(opIndex + 7)\n            val op9 = opList(opIndex\
    \ + 8)\n            val op10 = opList(opIndex + 9)\n            val op11 = opList(opIndex\
    \ + 10)\n            val op12 = opList(opIndex + 11)\n            val op13 = opList(opIndex\
    \ + 12)\n            val op14 = opList(opIndex + 13)\n            val op15 = opList(opIndex\
    \ + 14)\n            val op16 = opList(opIndex + 15)\n            val op17 = opList(opIndex\
    \ + 16)\n            val op18 = opList(opIndex + 17)\n            val op19 = opList(opIndex\
    \ + 18)\n            val op20 = opList(opIndex + 19)\n            val op21 = opList(opIndex\
    \ + 20)\n            val op22 = opList(opIndex + 21)\n            val op23 = opList(opIndex\
    \ + 22)\n            val op24 = opList(opIndex + 23)\n            val op25 = opList(opIndex\
    \ + 24)\n            val op26 = opList(opIndex + 25)\n            val op27 = opList(opIndex\
    \ + 26)\n            val op28 = opList(opIndex + 27)\n            val op29 = opList(opIndex\
    \ + 28)\n            val op30 = opList(opIndex + 29)\n            val op31 = opList(opIndex\
    \ + 30)\n            val op32 = opList(opIndex + 31)\n            val op33 = opList(opIndex\
    \ + 32)\n            val op34 = opList(opIndex + 33)\n            val op35 = opList(opIndex\
    \ + 34)\n            val op36 = opList(opIndex + 35)\n            val op37 = opList(opIndex\
    \ + 36)\n            val op", "        val opList = op.mkString(\"+\")\n     \
    \   val opListLength = opList.length\n        val operandList = operand.mkString(\"\
    +\")\n        val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opList.length\n        val\
    \ operandListLength = operandList.length\n        val operandListLength = operandList.length\n\
    \        val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList.length\n        val operandListLength\
    \ = operandList.length\n        val operandListLength = operandList.length\n \
    \       val operandListLength = operandList", "        val ops = op.map(_.toLowerCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val operandLength = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opArray = opList.map(_.toChar)\n\
    \        val operandArray = operandList.map(_.toChar)\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArraySum = opArray.reduceLeft(_ + _)\n        val operandArraySum = operandArray.reduceLeft(_\
    \ + _)\n        val opArrayDiff = opArrayLen - opArraySum\n        val operandArrayDiff\
    \ = operandArrayLen - operandArraySum\n        val opArrayMul = opArrayLen - opArrayDiff\n\
    \        val operandArrayMul = operandArrayLen - operandArrayDiff\n        val\
    \ opArrayDiv = opArrayLen - opArrayMul\n        val operandArrayDiv = operandArrayLen\
    \ - operandArrayMul\n        val opArrayExp = opArrayLen - opArrayDiv\n      \
    \  val operandArrayExp = operandArrayLen - operandArrayDiv\n        val opArraySumExp\
    \ = opArrayLen - opArrayExp\n        val operandArraySumExp = operandArrayLen\
    \ - operandArrayExp\n        val opArrayDiffExp = opArrayLen - opArraySumExp\n\
    \        val operandArrayDiffExp = operandArrayLen - operandArraySumExp\n    \
    \    val opArrayMulExp = opArrayLen - opArrayDiffExp\n        val operandArrayMulExp\
    \ = operandArrayLen - operandArrayDiffExp\n        val opArrayDivExp = opArrayLen\
    \ - opArrayMulExp\n        val operandArrayDivExp = operandArrayLen - operandArrayMulExp\n\
    \        val opArrayExp2 = opArrayLen - opArrayDivExp\n        val operandArrayExp2\
    \ = operandArrayLen - operandArrayDivExp\n        val opArraySumExp2 = opArrayLen\
    \ - opArrayExp2\n        val operandArraySumExp2 = operandArrayLen - operandArrayExp2\n\
    \        val opArrayDiffExp2 = opArrayLen - opArraySumExp2\n        val operandArrayDiffExp2\
    \ = operandArrayLen - operandArraySumExp2\n        val opArrayMulExp2 = opArrayLen\
    \ - opArrayDiffExp2\n        val operandArrayMulExp2 = operandArrayLen - operandArrayDiffExp2\n\
    \        val opArrayDivExp2 = opArrayLen - opArrayMulExp2\n        val operandArray",
  "        val ops = op.map(_.toLowerCase).toList\n        val opLen = ops.size\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val operandLen = operandArray.length\n        val opArrayLen = opArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)",
  "        val ops = op.map(x => x.toChar)\n        val op1 = ops(0)\n        val\
    \ op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n        val\
    \ op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n        val\
    \ op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n        val\
    \ op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n   \
    \     val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op52 = ops(51)\n\
    \        val op53 = ops(52)\n        val op54 = ops(53)\n", "        val ops =\
    \ op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n      \
    \  val opLen = ops.size\n        val operandLen = operands.size - 1\n        val\
    \ opArray = ops.toArray\n        val operandArray = operands.toArray\n       \
    \ val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val result = operandArray(0)\n        val opIndex = 0\n        val operandIndex\
    \ = 1\n        while(opIndex < opArrayLen && operandIndex < operandArrayLen) {\n\
    \            val op = ops(opIndex)\n            val operand = operands(operandIndex)\n\
    \            val opVal = opArray(opIndex)\n            val operandVal = operandArray(operandIndex)\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValBool = opVal.toBoolean\n\
    \            val operandValBool = operandVal.toBoolean\n            val opValString\
    \ = opVal.toString\n            val operandValString = operandVal.toString\n \
    \           val opValChar = opVal.toChar\n            val operandValChar = operandVal.toChar\n\
    \            val opValByte = opVal.toByte\n            val operandValByte = operandVal.toByte\n\
    \            val opValShort = opVal.toShort\n            val operandValShort =\
    \ operandVal.toShort\n            val opValInt = opVal.toInt\n            val\
    \ operandValInt = operandVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val operandValLong = operandVal.toLong\n            val opValFloat\
    \ = opVal.toFloat\n            val operandValFloat = operandVal.toFloat\n    \
    \        val opValDouble = opVal.toDouble\n            val operandValDouble =\
    \ operandVal.toDouble\n            val opValBool = opVal.toBoolean\n         \
    \   val operandValBool = operandVal.toBoolean\n            val opValString = opVal.toString\n\
    \            val operandValString = operandVal.toString\n            val opValChar\
    \ = opVal.toChar\n            val operandValChar = operandVal.toChar\n       \
    \     val opValByte = opVal.toByte\n            val operandValByte", "       \
    \ val opList = op.mkString(\"+\")\n        val opList = opList.split(\"\\\\+\"\
    ).map(_.trim).toList\n        val opList = opList.filter(_ != \"\")\n        val\
    \ operandList = operand.mkString(\"+\")\n        val operandList = operandList.split(\"\
    \\\\+\").map(_.trim).toList\n        val operandList = operandList.filter(_ !=\
    \ \"\")\n        val opListLength = opList.size\n        val operandListLength\
    \ = operandList.size\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        ", "        val ops =\
    \ op.map(_.toUpperCase)\n        val opList = ops.toList\n        val operandList\
    \ = operand.toList\n        val length = opList.size\n        val operandLength\
    \ = operandList.size\n        val result = operandList.foldLeft(operandList.head)\
    \ { (acc, elem) =>\n            val op = opList.head\n            val operand\
    \ = operandList.head\n            val opIndex = ops.indexOf(op)\n            val\
    \ operandIndex = operandList.indexOf(operand)\n            val opLength = opList.size\n\
    \            val operandLength = operandList.size\n            val opLength =\
    \ ops.size\n            val operandLength = operandList.size\n            val\
    \ opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opLength = ops.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.size\n\
    \            val opIndex = ops.indexOf(op)\n            val operandIndex = operandList.indexOf(operand)\n\
    \            val opLength = opList.size\n            val operandLength = operandList.",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"^\")\n        val opIndex8 = opList.indexOf(\"\
    |\")\n        val opIndex9 = opList.indexOf(\"&\")\n        val opIndex10 = opList.indexOf(\"\
    ==\")\n        val opIndex11 = opList.indexOf(\"!=\")\n        val opIndex12 =\
    \ opList.indexOf(\"<\")\n        val opIndex13 = opList.indexOf(\">\")\n     \
    \   val opIndex14 = opList.indexOf(\"<=\")\n        val opIndex15 = opList.indexOf(\"\
    >=\")\n        val opIndex16 = opList.indexOf(\"!\")\n        val opIndex17 =\
    \ opList.indexOf(\"&&\")\n        val opIndex18 = opList.indexOf(\"||\")\n   \
    \     val opIndex19 = opList.indexOf(\"?\")\n        val opIndex20 = opList.indexOf(\"\
    :\")\n        val opIndex21 = opList.indexOf(\",\")\n        val opIndex22 = opList.indexOf(\"\
    ;\")\n        val opIndex23 = opList.indexOf(\"(\")\n        val opIndex24 = opList.indexOf(\"\
    )\")\n        val opIndex25 = opList.indexOf(\"[\")\n        val opIndex26 = opList.indexOf(\"\
    ]\")\n        val opIndex27 = opList.indexOf(\"{\")\n        val opIndex28 = opList.indexOf(\"\
    }\")\n        val opIndex29 = opList.indexOf(\"(\")\n        val opIndex30 = opList.indexOf(\"\
    )\")\n        val opIndex31 = opList.indexOf(\",\")\n        val opIndex32 = opList.indexOf(\"\
    ;\")\n        val opIndex33 = opList.indexOf(\"(\")\n        val opIndex34 = opList.indexOf(\"\
    )\")\n        val opIndex35 = opList.indexOf(\"[\")\n        val opIndex36 = opList.indexOf(\"\
    ]\")\n        val opIndex37 = opList.indexOf(\"{\")\n        val opIndex38 = opList.indexOf(\"\
    }\")\n        val opIndex39 = opList.", "        val ops = op.map(x => x.toChar)\n\
    \        val operands = operand.map(x => x.toLong)\n        val opMap = ops.zip(operands).toMap\n\
    \        val opList = ops.toList\n        val operandList = operands.toList\n\
    \        val opLen = opList.size\n        val opMapLen = opMap.length\n      \
    \  val operandLen = operandList.size\n        val opMapIndex = 0\n        val\
    \ operandIndex = 0\n        val opMapValue = opMap.get(opList(0))\n        val\
    \ operandValue = operandList(0)\n        val result = opMapValue\n        val\
    \ opMapKeys = opMap.keys\n        val operandKeys = operandList.tail\n       \
    \ while(operandIndex < operandLen) {\n            val opMapValue = opMap.get(opList(0))\n\
    \            val operandValue = operandList(0)\n            val opMapKeys = opMap.keys\n\
    \            val operandKeys = operandList.tail\n            val opMapValue =\
    \ opMap.get(opList(0))\n            val operandValue = operandList(0)\n      \
    \      val opMapKeys = opMap.keys\n            val operandKeys = operandList.tail\n\
    \            val opMapValue = opMap.get(opList(0))\n            val operandValue\
    \ = operandList(0)\n            val opMapKeys = opMap.keys\n            val operandKeys\
    \ = operandList.tail\n            val opMapValue = opMap.get(opList(0))\n    \
    \        val operandValue = operandList(0)\n            val opMapKeys = opMap.keys\n\
    \            val operandKeys = operandList.tail\n            val opMapValue =\
    \ opMap.get(opList(0))\n            val operandValue = operandList(0)\n      \
    \      val opMapKeys = opMap.keys\n            val operandKeys = operandList.tail\n\
    \            val opMapValue = opMap.get(opList(0))\n            val operandValue\
    \ = operandList(0)\n            val opMapKeys = opMap.keys\n            val operandKeys\
    \ = operandList.tail\n            val opMapValue = opMap.get(opList(0))\n    \
    \        val operandValue = operandList(0)\n            val opMapKeys = opMap.keys\n\
    \            val operandKeys = operandList.tail\n            val opMapValue =\
    \ opMap.get(opList(0))\n            val operandValue = operandList(0)\n      \
    \      val opMapKeys = opMap.keys\n            val operandKeys = operandList.tail\n\
    \            val opMapValue = opMap.get(opList(0))\n            val operandValue\
    \ = operandList(0)\n            val opMapKeys = opMap.keys\n            val operandKeys\
    \ = operandList.tail\n            val opMapValue = opMap.get(opList", "      \
    \  val ops = op.map(x => x.toChar)\n        val opLen = ops.length\n        val\
    \ opArray = ops.map(x => x.toLong)\n        val opArrayLen = opArray.length\n\
    \        val operandArray = operand.map(x => x.toLong)\n        val operandArrayLen\
    \ = operandArray.length\n        val result = operandArray(0)\n        val op1\
    \ = opArray(0)\n        val op2 = opArray(1)\n        val op3 = opArray(2)\n \
    \       val op4 = opArray(3)\n        val op5 = opArray(4)\n        val op6 =\
    \ opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n   \
    \     val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11 =\
    \ opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = ", "     \
    \   val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"-\"\
    )\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    %\")\n        val opIndex7 = ops.indexOf(\"&\")\n        val opIndex8 = ops.indexOf(\"\
    |\")\n        val opIndex9 = ops.indexOf(\"~\")\n        val opIndex10 = ops.indexOf(\"\
    ^\")\n        val opIndex11 = ops.indexOf(\"<<\")\n        val opIndex12 = ops.indexOf(\"\
    >>\")\n        val opIndex13 = ops.indexOf(\"==\")\n        val opIndex14 = ops.indexOf(\"\
    !=\")\n        val opIndex15 = ops.indexOf(\"<\")\n        val opIndex16 = ops.indexOf(\"\
    >\")\n        val opIndex17 = ops.indexOf(\"<=\")\n        val opIndex18 = ops.indexOf(\"\
    >=\")\n        val opIndex19 = ops.indexOf(\"==\")\n        val opIndex20 = ops.indexOf(\"\
    !=\")\n        val opIndex21 = ops.indexOf(\"&&\")\n        val opIndex22 = ops.indexOf(\"\
    ||\")\n        val opIndex23 = ops.indexOf(\"??\")\n        val opIndex24 = ops.indexOf(\"\
    ??=\")\n        val opIndex25 = ops.indexOf(\"???\")\n        val opIndex26 =\
    \ ops.indexOf(\"????\")\n        val opIndex27 = ops.indexOf(\"????=\")\n    \
    \    val opIndex28 = ops.indexOf(\"?????\")\n        val opIndex29 = ops.indexOf(\"\
    ??????\")\n        val opIndex30 = ops.indexOf(\"??????=\")\n        val opIndex31\
    \ = ops.indexOf(\"???????\")\n        val opIndex32 = ops.indexOf(\"????????\"\
    )\n        val opIndex33 = ops.indexOf(\"????????=\")\n        val opIndex34 =\
    \ ops.indexOf(\"?????????\")\n        val opIndex35 = ops.indexOf(\"??????????\"\
    )\n        val opIndex36 = ops.indexOf(\"??????????=\")\n        val opIndex37\
    \ = ops.indexOf(\"???????????\")\n        val opIndex38 = ops.indexOf(\"????????????\"\
    )\n        val "]
stop_tokens:
- "\n    }\n"
