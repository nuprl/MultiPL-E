language: scala
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        val numsCopy5 = numsCopy4.filter(_ >\
    \ 10 && _ % 2 == 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp9ktqe_4b.scala:15:41 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy5\e[0m = numsCopy4.filter(_\
    \ > \e[31m10\e[0m && _ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1659800091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u0pvdra.scala:22)\n\tat Problem.main(tmp4u0pvdra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        var\
    \ firstOdd = 0\n        var lastOdd = 0\n        var firstEven = 0\n        var\
    \ lastEven = 0\n        for (i <- 0 until numsCopy.size) {\n            val num\
    \ = numsCopy(i)\n            if (num > 10) {\n                if (num % 2 == 0)\
    \ {\n                    firstEven += 1\n                }\n                if\
    \ (num % 2 != 0) {\n                    lastEven += 1\n                }\n   \
    \         }\n            if (num < 10) {\n                if (num % 2 == 0) {\n\
    \                    firstOdd += 1\n                }\n                if (num\
    \ % 2 != 0) {\n                    lastOdd += 1\n                }\n         \
    \   }\n        }\n        count = firstEven + lastEven + firstOdd + lastOdd\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2j0ome_r.scala:40)\n\tat Problem.main(tmp2j0ome_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfj1un41.scala:21)\n\tat Problem.main(tmppfj1un41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfj1un41.scala:21)\n\tat Problem.main(tmppfj1un41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val even = numsCopy.filter(x\
    \ => x % 2 == 0)\n        val odd = numsCopy.filter(x => x % 2 != 0)\n       \
    \ val firstOdd = odd.head\n        val lastOdd = odd.last\n        val firstEven\
    \ = even.head\n        val lastEven = even.last\n        val firstOddAndLastOdd\
    \ = firstOdd * lastOdd\n        val firstEvenAndLastEven = firstEven * lastEven\n\
    \        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd * lastEven\n \
    \       val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven * lastOdd\n\
    \        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEven * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEven * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastOdd\n        val\
    \ firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven *\
    \ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbpx3a_yg.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpx3a_yg.scala:28:118\
    \ --------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\e\
    [0m = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ * lastEven\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbpx3a_yg.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n\
    \        for (i <- 0 until numsSorted.length) {\n            val num = numsSorted(i)\n\
    \            if (num > 10) {\n                val firstDigit = num / 10\n    \
    \            val lastDigit = num % 10\n                if (firstDigit % 2 == 1\
    \ && lastDigit % 2 == 1) {\n                    count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_xh_hyq.scala:28)\n\tat Problem.main(tmpw_xh_hyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmponkymkra.scala:20)\n\tat Problem.main(tmponkymkra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.size) {\n        \
    \    val num = nums(i)\n            val firstDigit = num / 10\n            val\
    \ lastDigit = num % 10\n            val firstOdd = firstDigit % 2 != 0\n     \
    \       val lastOdd = lastDigit % 2 != 0\n            if(firstOdd && lastOdd)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpja49zkqq.scala:26)\n\tat Problem.main(tmpja49zkqq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var firstOdd = 0\n        var lastOdd =\
    \ 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 10) {\n\
    \                if (nums(i) % 2 == 0) {\n                    count += 1\n   \
    \             }\n                if (nums(i) % 2 != 0) {\n                   \
    \ if (nums(i) < 10) {\n                        firstOdd += 1\n               \
    \     }\n                    if (nums(i) > 10) {\n                        lastOdd\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count + firstOdd + lastOdd\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppv1rjqto.scala:33)\n\tat Problem.main(tmppv1rjqto.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmponkymkra.scala:20)\n\tat Problem.main(tmponkymkra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val oddNums = numsSorted.filter(_\
    \ % 2 != 0)\n        val firstOddNum = oddNums.head\n        val lastOddNum =\
    \ oddNums.last\n        val firstOddNumOddDigit = firstOddNum.toString.charAt(0)\n\
    \        val lastOddNumOddDigit = lastOddNum.toString.charAt(0)\n        val firstOddNumEvenDigit\
    \ = firstOddNum.toString.charAt(1)\n        val lastOddNumEvenDigit = lastOddNum.toString.charAt(1)\n\
    \        val firstOddNumEvenDigitsOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenEvenOdd = firstOddNumEvenDigit +\
    \ lastOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEven =\
    \ firstOddNumEvenDigit + firstOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenOdd\
    \ = firstOddNumEvenDigit + lastOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenEven\
    \ = firstOddNumEvenDigit + firstOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = firstOddNumEvenDigit + lastOddNumEvenDigit\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0avklmoq.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var lastNum = nums.last\n        for(i <-\
    \ nums.indices) {\n            if(nums(i) > 10 && lastNum % 2 == 1 && nums(i)\
    \ < 1000) {\n                count += 1\n            }\n            lastNum =\
    \ nums(i)\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcskkd6ov.scala:23)\n\tat Problem.main(tmpcskkd6ov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val odds = nums.filter(x => x % 2 == 1).length\n        val evens\
    \ = nums.filter(x => x % 2 == 0).length\n        odds + evens\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyf776e1.scala:16)\n\tat Problem.main(tmptyf776e1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrhgtrme.scala:19)\n\tat Problem.main(tmprrhgtrme.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n \
    \           if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81vzfhly.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var last = 0\n        var first = 0\n  \
    \      for (i <- nums) {\n            if (i > 10) {\n                count +=\
    \ 1\n                if (first % 2 == 1 && last % 2 == 1) {\n                \
    \    count += 1\n                }\n            }\n            first = i\n   \
    \         last = i\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpae05jbdb.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            first = i\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (i : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpae05jbdb.scala:22:19 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            last = i\n\e[31m\e[31m   |\e[0m         \
    \          ^\e[0m\n\e[31m   |\e[0m                   Found:    (i : Long)\n\e\
    [31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val evens = numsSorted.filter(x\
    \ => x % 2 == 0)\n        val odds = numsSorted.filter(x => x % 2 != 0)\n    \
    \    val firstOdds = evens.takeWhile(x => x % 2 != 0)\n        val lastOdds =\
    \ evens.drop(evens.size - evens.filter(x => x % 2 == 0).size)\n        val firstEvens\
    \ = evens.takeWhile(x => x % 2 == 0)\n        val lastEvens = evens.drop(evens.size\
    \ - evens.filter(x => x % 2 == 0).size)\n        val firstOddsAndEvens = firstOdds.zip(lastEvens)\n\
    \        val lastOddsAndEvens = lastOdds.zip(firstEvens)\n        val firstOddsAndEvensCount\
    \ = firstOddsAndEvens.count(x => x._1 > 10)\n        val lastOddsAndEvensCount\
    \ = lastOddsAndEvens.count(x => x._1 > 10)\n        val firstOddsAndEvensCountAndLastOddsCount\
    \ = firstOddsAndEvensCount + lastOddsAndEvensCount\n        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCount\
    \ = firstOddsAndEvensCountAndLastOddsCount + firstEvens.count(x => x._1 > 10)\n\
    \        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCount\
    \ = firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCount + lastOddsAndEvens.count(x\
    \ => x._1 > 10)\n        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCountAndFirstOddsAndEvensCount\
    \ = firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCount +\
    \ firstOddsAndEvens.count(x => x._1 > 10)\n        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCountAndFirstOddsAndEvensCountAndLastOddsCount\
    \ = firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCountAndFirstOddsAndEvensCount\
    \ + lastOddsAndEvens.count(x => x._1 > 10)\n        val firstOddsAnd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_5n2_1_q.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_5n2_1_q.scala:23:136\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddsAndEvensCountAndLastOddsCountAndFirstEvensCount\e[0m = firstOddsAndEvensCountAndLastOddsCount\
    \ + firstEvens.count(\e[36mx\e[0m => x._1 > \e[31m10\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                            ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        value _1 is not a member of\
    \ Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5n2_1_q.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90qttoi1.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_.isLessThan(_))\n        val even\
    \ = numsSorted.filter(x => x.isEven)\n        val odd = numsSorted.filter(x =>\
    \ !x.isEven)\n        val firstOdd = odd.takeWhile(x => x.isOdd).last\n      \
    \  val lastOdd = odd.drop(1).takeWhile(x => x.isOdd).last\n        val firstEven\
    \ = even.takeWhile(x => x.isEven).last\n        val lastEven = even.drop(1).takeWhile(x\
    \ => x.isEven).last\n        val firstOddAndEven = firstOdd + firstEven\n    \
    \    val lastOddAndEven = lastOdd + lastEven\n        val firstOddAndEvenEven\
    \ = firstOddAndEven + lastOddAndEven\n        val firstOddAndEvenEvenEven = firstOddAndEvenEven\
    \ + lastOddAndEvenEven\n        val firstOddAndEvenEvenEvenEven = firstOddAndEvenEvenEven\
    \ + lastOddAndEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEven =\
    \ firstOddAndEvenEvenEvenEven + lastOddAndEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEvenEvenEven + lastOddAndEvenEvenEvenEvenEven\n       \
    \ val firstOddAndEvenEvenEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEvenEvenEvenEvenEven + lastOddAndEvenEvenEvenEvenEvenEvenEven\n\
    \        val firstOddAndEvenEvenEvenEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEvenEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEvenEvenEvenEvenEvenEvenEvenEven + lastOddAndEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val firstOddAndEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphec69__k.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndEvenEvenEvenEvenEven\e\
    [0m = firstOddAndEvenEvenEvenEven + lastOddAndEvenEvenEvenEven\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndEvenEvenEvenEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35mfirstOddAndEvenEvenEvenEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphec69__k.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddAndEvenEvenEvenEvenEvenEvenEven\e[0m = firstOddAndEvenEvenEvenEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEvenEvenEvenEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndEvenEvenEvenEvenEvenEvenEven is already defined\
    \ as \e[33mvalue\e[0m \e[35mfirstOddAndEvenEvenEvenEvenEvenEvenEven\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphec69__k.scala:11:41 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sortWith(_.isLessThan(_))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLessThan is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphec69__k.scala:12:44\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = numsSorted.filter(\e[36mx\e[0m => x.isEven)\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                  value isEven is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphec69__k.scala:13:44 --------"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrhgtrme.scala:19)\n\tat Problem.main(tmprrhgtrme.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            if(numsCopy(i) > 10 && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n                count += 1\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp018kjp04.scala:14:47 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(numsCopy(i) > \e[31m10\e[0m\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value isOdd is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp018kjp04.scala:14:68 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(numsCopy(i) > \e[31m10\e[0m\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp018kjp04.scala:14:89\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(numsCopy(i)\
    \ > \e[31m10\e[0m && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd)\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                          value isOdd is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        numsCopy10.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp40e5su3i.scala:26)\n\tat Problem.main(tmp40e5su3i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp77alcya3.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp77alcya3.scala:13:57 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp77alcya3.scala:13:74 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) \n      \
    \      if (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) \n          \
    \      count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwfycny1.scala:19)\n\tat Problem.main(tmpxwfycny1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var firstOdd = false\n        var lastOdd\
    \ = false\n        for (i <- 0 until nums.length) {\n            if (nums(i) >\
    \ 10) {\n                if (firstOdd) {\n                    lastOdd = true\n\
    \                } else {\n                    firstOdd = true\n             \
    \   }\n                count += 1\n            }\n        }\n        if (firstOdd\
    \ && lastOdd) {\n            count += 1\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsq8ko4ot.scala:31)\n\tat Problem.main(tmpsq8ko4ot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n        \
    \    if (num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n             \
    \   count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvtiqszv.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value isOdd is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvtiqszv.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m                             \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                    value isOdd is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659800106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u0pvdra.scala:22)\n\tat Problem.main(tmp4u0pvdra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qvmc3iy.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m        \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         value isOdd is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3qvmc3iy.scala:15:60 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd &&\
    \ numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m           \
    \                                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value isOdd is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qvmc3iy.scala:15:81 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m        \
    \                                                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i<- 0 until nums.length) {\n      \
    \      if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) % 2 != 0) {\n         \
    \       count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpouj6b54p.scala:22)\n\tat Problem.main(tmpouj6b54p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1)\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmp627yfwpx.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmp627yfwpx.scala:18)\n\
    \tat Problem$.main(tmp627yfwpx.scala:23)\n\tat Problem.main(tmp627yfwpx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val odds = nums.filter(_ % 2 == 1).length\n        val firstOdd\
    \ = nums.filter(_ % 2 == 1).head\n        val lastOdd = nums.filter(_ % 2 == 1).last\n\
    \        val firstOddAndLastOdd = firstOdd * lastOdd\n        nums.filter(_ >\
    \ 10 && _ % 2 == 1 && _ % 2 == 1 && _ % 2 == 1).length + odds + firstOddAndLastOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqd1jdl99.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        nums.filter(_ > \e[31m10\e[0m && _ % \e[31m2\e\
    [0m == \e[31m1\e[0m && _ % \e[31m2\e[0m == \e[31m1\e[0m && _ % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m).length + odds + firstOddAndLastOdd\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Wrong number of parameters, expected: 1\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i<- nums) {\n            if (i > 10\
    \ && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy1dhh80q.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i\
    \ > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     Found:    (i : Long)\n\e[31m   |\e[0m                  \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy1dhh80q.scala:13:48 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mif\e[0m (i > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                                 \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \          Found:    (i : Long)\n\e[31m   |\e[0m                             \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy1dhh80q.scala:13:65 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mif\e[0m (i > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                                 \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                               Found:    (i : Long)\n\e[31m   |\e[0m        \
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n \
    \           if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81vzfhly.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.length){\n       \
    \     val num = nums(i)\n            if(num > 10 && num % 2 == 1 && num % 2 ==\
    \ 1){\n                count += 1\n            }\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8zds9az8.scala:23)\n\tat Problem.main(tmp8zds9az8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.size) {\n        \
    \    if(nums(i) > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n \
    \               count += 1\n            }\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf8osqpqe.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf8osqpqe.scala:13:56 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf8osqpqe.scala:13:73 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10\
    \ && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq7mker0c.scala:16)\n\tat Problem.main(tmpq7mker0c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ ( i <- 0 until numsCopy.length ) {\n            val num = numsCopy(i)\n    \
    \        if ( num > 10 ) {\n                val first = num % 10\n           \
    \     val last = num / 10\n                if ( first % 2 == 1 && last % 2 ==\
    \ 1 ) {\n                    count += 1\n                }\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfa65_25.scala:28)\n\tat Problem.main(tmpjfa65_25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.length){\n       \
    \     if(nums(i) > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n \
    \               count += 1\n            }\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwrwfn0c2.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwrwfn0c2.scala:13:56 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwrwfn0c2.scala:13:73 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        numsCopy9.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1gxsda0f.scala:25)\n\tat Problem.main(tmp1gxsda0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n\
    \        for (i <- 0 until numsSorted.length) {\n            if (numsSorted(i)\
    \ > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:75\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (numsSorted(i) > \e[31m10\e[0m && numsSorted(i).isOdd && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd) {\n\e[31m\e[31m   |\e[0m                           \
    \                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    value isOdd is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:98 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val evens = numsCopy.filter(x\
    \ => x % 2 == 0)\n        val odds = numsCopy.filter(x => x % 2 != 0)\n      \
    \  val firstOdds = evens.filter(x => x % 2 == 1)\n        val lastOdds = evens.filter(x\
    \ => x % 2 == 0)\n        val firstEvens = odds.filter(x => x % 2 == 0)\n    \
    \    val lastEvens = odds.filter(x => x % 2 == 1)\n        val firstOddsLastEvens\
    \ = firstOdds.last\n        val lastOddsFirstEvens = lastOdds.first\n        val\
    \ firstEvensLastOdds = firstEvens.last\n        val lastEvensFirstOdds = lastEvens.first\n\
    \        val firstOddsLastEvensLastOdds = firstOddsLastEvens.last\n        val\
    \ lastOddsFirstEvensLastOdds = lastOddsFirstEvens.first\n        val firstEvensLastOddsLastEvens\
    \ = firstEvensLastOdds.last\n        val lastEvensFirstOddsLastEvens = lastEvensFirstOdds.first\n\
    \        val firstOddsLastEvensLastOddsLastEvens = firstOddsLastEvensLastOdds.last\n\
    \        val lastOddsFirstEvensLastOddsLastEvens = lastOddsFirstEvensLastOdds.first\n\
    \        val firstEvensLastOddsLastEvensLastOdds = firstEvensLastOddsLastEvens.last\n\
    \        val lastEvensFirstOddsLastEvensLastOdds = lastEvensFirstOddsLastEvens.first\n\
    \        val firstOddsLastEvensLastOddsLastEvensLastOdds = firstOddsLastEvensLastOddsLastEvens.last\n\
    \        val lastOddsFirstEvensLastOddsLastEvensLastOdds = lastOddsFirstEvensLastOddsLastEvens.first\n\
    \        val firstEvensLastOddsLastEvensLastOddsLastEvensLastOdds = firstEvensLastOddsLastEvensLastOddsLastEvens.last\n\
    \        val lastEvensFirstOddsLastEvensLastOddsLastEvensLastOdds = lastEvensFirstOddsLastEvensLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcp5hcvia.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastOddsFirstEvens\e[0m\
    \ = lastOdds.first\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m value first is not a member of List[Long] - did you mean\
    \ lastOdds.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcp5hcvia.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mlastEvensFirstOdds\e[0m = lastEvens.first\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue first is not\
    \ a member of List[Long] - did you mean lastEvens.find?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcp5hcvia.scala:22:60 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsLastEvensLastOdds\e\
    [0m = firstOddsLastEvens.last\n\e[31m\e[31m   |\e[0m                         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       value last is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcp5hcvia.scala:24:61 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfirstEvensLastOddsLastEvens\e\
    [0m = firstEvensLastOdds.last\n\e[31m\e[31m   |\e[0m                         \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                        value last is not a member of Long\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcp5hcvia.scala:32:67 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfirstEvensLastOddsLastEvensLastOddsLastEvensLastOdds\e\
    [0m = firstEvensLastOddsLastEvensLastOddsLastEvens.last\n\e[31m\e[31m   |\e[0m\
    \                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: firstEvensLastOddsLastEvensLastOddsLastEvens\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcp5hcvia.scala:33:67\
    \ -------------------"
  stdout: ''
  timestamp: 1659800108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith((x, y) => x > y)\n        val even\
    \ = numsSorted.filter(x => x % 2 == 0)\n        val odd = numsSorted.filter(x\
    \ => x % 2 != 0)\n        val firstOdd = odd.takeWhile(x => x % 2 != 0)\n    \
    \    val lastOdd = odd.drop(odd.length - 1)\n        val firstEven = even.takeWhile(x\
    \ => x % 2 == 0)\n        val lastEven = even.drop(even.length - 1)\n        val\
    \ firstOddAndEven = firstOdd ++ firstEven\n        val lastOddAndEven = lastOdd\
    \ ++ lastEven\n        val firstOddAndEvenCount = firstOddAndEven.count\n    \
    \    val lastOddAndEvenCount = lastOddAndEven.count\n        val firstOddAndEvenEvenCount\
    \ = firstOddAndEven.count(x => x % 2 == 0)\n        val lastOddAndEvenEvenCount\
    \ = lastOddAndEven.count(x => x % 2 == 0)\n        val firstOddAndEvenEvenEvenCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0)\n        val lastOddAndEvenEvenEvenCount\
    \ = lastOddAndEvenEven.count(x => x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0)\n        val lastOddAndEvenEvenEvenCountCount\
    \ = lastOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCountCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n \
    \       val lastOddAndEvenEvenEvenCountCountCount = lastOddAndEvenEven.count(x\
    \ => x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCountCountCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0 && x % 2 != 0 && x\
    \ % 2 != 0)\n        val lastOddAndEvenEvenEvenCountCountCountCount = lastOddAndEvenEven.count(x\
    \ => x % 2 != 0 && x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbj1adg3m.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbj1adg3m.scala:24:43\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddAndEvenEvenEvenCount\e[0m = firstOddAndEvenEven.count(\e[36mx\e[0m\
    \ => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                  Not found: firstOddAndEvenEven\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbj1adg3m.scala:25:42 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndEvenEvenEvenCount\e\
    [0m = lastOddAndEvenEven.count(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: lastOddAndEvenEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbj1adg3m.scala:26:48\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddAndEvenEvenEvenCountCount\e[0m = firstOddAndEvenEven.count(\e[36mx\e\
    [0m => x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: firstOddAndEvenEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbj1adg3m.scala:27:47\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mlastOddAndEvenEvenEvenCountCount\e[0m = lastOddAndEvenEven.count(\e[36mx\e\
    [0m => x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1659800106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90qttoi1.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.length){\n       \
    \     val num = nums(i)\n            if(num > 10 && num % 2 == 1 && num % 2 ==\
    \ 0){\n                count += 1\n            }\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputh8z_e1.scala:22)\n\tat Problem.main(tmputh8z_e1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val even = numsCopy.filter(x\
    \ => x % 2 == 0)\n        val odd = numsCopy.filter(x => x % 2 != 0)\n       \
    \ val evenFirst = even.filter(x => x % 2 == 0 && x % 10 == 0)\n        val evenLast\
    \ = even.filter(x => x % 2 == 0 && x % 10 != 0)\n        val oddFirst = odd.filter(x\
    \ => x % 2 != 0 && x % 10 == 0)\n        val oddLast = odd.filter(x => x % 2 !=\
    \ 0 && x % 10 != 0)\n        val firstOddEven = evenFirst.filter(x => x % 2 ==\
    \ 0 && x % 10 != 0)\n        val firstOddOdd = oddFirst.filter(x => x % 2 != 0\
    \ && x % 10 == 0)\n        val lastOddEven = evenLast.filter(x => x % 2 == 0 &&\
    \ x % 10 != 0)\n        val lastOddOdd = oddLast.filter(x => x % 2 != 0 && x %\
    \ 10 == 0)\n        val firstOddEvenOdd = firstOddEven.filter(x => x % 2 != 0\
    \ && x % 10 != 0)\n        val firstOddOddOdd = firstOddOdd.filter(x => x % 2\
    \ != 0 && x % 10 == 0)\n        val lastOddEvenOdd = lastOddEven.filter(x => x\
    \ % 2 != 0 && x % 10 != 0)\n        val lastOddOddOdd = lastOddOdd.filter(x =>\
    \ x % 2 != 0 && x % 10 == 0)\n        val firstOddEvenOddOdd = firstOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 != 0)\n        val firstOddOddEvenOdd = firstOddOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 == 0)\n        val lastOddEvenOddOdd = lastOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 != 0)\n        val lastOddOddEvenOdd = lastOddOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 == 0)\n        val firstOddEvenOddOddOdd = firstOddEvenOddOdd.filter(x\
    \ => x % 2 != 0 && x % 10 != 0)\n        val firstOddO\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp262_zw3.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp262_zw3.scala:27:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddOddEvenOdd\e[0m = firstOddOddEvenOdd.filter(\e[36mx\e[0m => x\
    \ % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m10\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                   Recursive \e[33mvalue\e[0m \e[35mfirstOddOddEvenOdd\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp262_zw3.scala:29:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastOddOddEvenOdd\e[0m = lastOddOddEvenOdd.filter(\e[36mx\e[0m => x %\
    \ \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m10\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                   Recursive \e[33mvalue\e[0m \e[35mlastOddOddEvenOdd\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp262_zw3.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val even = numsSorted.filter(_\
    \ % 2 == 0)\n        val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd\
    \ = odd.takeWhile(_ < 10)\n        val lastOdd = odd.drop(10).reverse\n      \
    \  val firstEven = even.takeWhile(_ < 10)\n        val lastEven = even.drop(10).reverse\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstEvenAndLastEven\
    \ = firstEven ++ lastEven\n        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd\
    \ ++ lastEven\n        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastEven\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd =\
    \ firstOddAndLastEvenAndLastOddAndLastEven ++ lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastEven\n        val\
    \ firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven ++ lastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n\
    \        val firstOddAndLastEvenAndLastOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp76qigysm.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp76qigysm.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        numsCopy5.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyd7v_loe.scala:21)\n\tat Problem.main(tmpyd7v_loe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.length){\n       \
    \     if(nums(i) > 10 && (nums(i) % 2 == 1 || (nums(i) % 2 == 0 && nums(i-1) %\
    \ 2 == 1))){\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5fj_0sf.scala:22)\n\tat Problem.main(tmpa5fj_0sf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x\
    \ => x % 2 == 1)\n        val evens = numsSorted.filter(x => x % 2 == 0)\n   \
    \     val firstOdds = evens.takeWhile(x => x % 2 == 1).length\n        val lastOdds\
    \ = evens.drop(evens.size - 1).takeWhile(x => x % 2 == 1).length\n        val\
    \ firstEvens = odds.length - firstOdds\n        val lastEvens = odds.length -\
    \ lastOdds\n        val firstOddsOdds = evens.takeWhile(x => x % 2 == 1 && x %\
    \ 2 == 1).length\n        val lastOddsOdds = evens.drop(evens.size - 1).takeWhile(x\
    \ => x % 2 == 1 && x % 2 == 1).length\n        val firstEvensEvens = odds.length\
    \ - firstOddsOdds\n        val lastEvensEvens = odds.length - lastOddsOdds\n \
    \       val firstOddsEvens = evens.takeWhile(x => x % 2 == 1 && x % 2 == 0).length\n\
    \        val lastOddsEvens = evens.drop(evens.size - 1).takeWhile(x => x % 2 ==\
    \ 1 && x % 2 == 0).length\n        val firstEvensOdds = odds.length - firstOddsEvens\n\
    \        val lastEvensOdds = odds.length - lastOddsEvens\n        val firstOddsEvens\
    \ = evens.takeWhile(x => x % 2 == 0 && x % 2 == 1).length\n        val lastOddsEvens\
    \ = evens.drop(evens.size - 1).takeWhile(x => x % 2 == 0 && x % 2 == 1).length\n\
    \        val firstEvensEvens = odds.length - firstOddsOdds\n        val lastEvensEvens\
    \ = odds.length - lastOddsOdds\n        val firstOddsOdds = evens.takeWhile(x\
    \ => x % 2 == 0 && x % 2 == 0).length\n        val lastOddsOdds = evens.drop(evens.size\
    \ - 1).takeWhile(x => x % 2 == 0 && x % 2 == 0).length\n        val firstEvensOdds\
    \ = odds.length - firstOddsEvens\n        val lastEvensOdds = odds.length - lastOddsEvens\n\
    \        val firstOddsEvens = evens.takeWhile(x => x % 2 == 1 && x % 2 == 0).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4zrpr6j.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq4zrpr6j.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvens\e[0m = evens.takeWhile(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m && x % \e[31m2\e[0m == \e[31m1\e\
    [0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddsEvens is already defined as \e[33mvalue\e[0m \e[35mfirstOddsEvens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4zrpr6j.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mlastOddsEvens\e[0m = evens.drop(evens.size\
    \ - \e[31m1\e[0m).takeWhile(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m &&\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastOddsEvens is already defined as \e[33mvalue\e[0m \e[35mlastOddsEvens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4zrpr6j.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mfirstEvensEvens\e[0m = odds.length -\
    \ firstOddsOdds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstEvensEvens is already defined as \e[33mvalue\e[0m \e\
    [35mfirstEvensEvens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq4zrpr6j.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastEvensEvens\e[0m = odds.length\
    \ - lastOddsOd"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrhgtrme.scala:19)\n\tat Problem.main(tmprrhgtrme.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ val firstDigit = num / 10\n            val lastDigit = num % 10\n          \
    \  if(firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwopf0xki.scala:25)\n\tat Problem.main(tmpwopf0xki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var last = 0\n        var first = 0\n  \
    \      for (i <- nums) {\n            if (i > 10 && last % 2 == 1 && first % 2\
    \ == 1) {\n                count += 1\n            }\n            last = i\n \
    \           first = i\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mpn3tg5.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            last = i\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (i : Long)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mpn3tg5.scala:19:20 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            first = i\n\e[31m\e[31m   |\e[0m        \
    \            ^\e[0m\n\e[31m   |\e[0m                    Found:    (i : Long)\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var lastNum = 0\n        var firstNum =\
    \ 0\n        var oddFirstNum = 0\n        var oddLastNum = 0\n        var evenFirstNum\
    \ = 0\n        var evenLastNum = 0\n        for (i <- nums) {\n            if\
    \ (i > 10) {\n                count += 1\n                if (lastNum % 2 == 1)\
    \ {\n                    oddLastNum += 1\n                }\n                if\
    \ (firstNum % 2 == 1) {\n                    oddFirstNum += 1\n              \
    \  }\n                if (evenFirstNum % 2 == 1) {\n                    evenFirstNum\
    \ += 1\n                }\n                if (evenLastNum % 2 == 1) {\n     \
    \               evenLastNum += 1\n                }\n            }\n         \
    \   lastNum = i\n            firstNum = i\n            if (i % 2 == 0) {\n   \
    \             evenFirstNum += 1\n            }\n            if (i % 2 == 1) {\n\
    \                evenLastNum += 1\n            }\n        }\n        count + oddFirstNum\
    \ + oddLastNum + evenFirstNum + evenLastNum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8y6l48x.scala:34:22\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            lastNum = i\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (i : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8y6l48x.scala:35:23\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            firstNum = i\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (i : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u0pvdra.scala:22)\n\tat Problem.main(tmp4u0pvdra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n\
    \        var lastOdd = 0\n        var firstOdd = 0\n        for (i <- 0 until\
    \ numsSorted.length) {\n            if (numsSorted(i) > 10 && lastOdd % 2 == 1\
    \ && firstOdd % 2 == 1) {\n                count += 1\n            }\n       \
    \     lastOdd = numsSorted(i)\n            firstOdd = numsSorted(i)\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaczngung.scala:19:32\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            lastOdd = numsSorted(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaczngung.scala:20:33\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            firstOdd = numsSorted(i)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfj1un41.scala:21)\n\tat Problem.main(tmppfj1un41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) \n      \
    \      if (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) \n          \
    \      count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwfycny1.scala:19)\n\tat Problem.main(tmpxwfycny1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n \
    \           if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81vzfhly.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkqb5lie.scala:19)\n\tat Problem.main(tmpjkqb5lie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).count(_\
    \ % 2 == 1).count(_ % 2 == 0) + 1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptr1eaibu.scala:12:50 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsCopy.filter(_ > \e[31m10\e[0m).count(_ %\
    \ \e[31m2\e[0m == \e[31m1\e[0m).count(_ % \e[31m2\e[0m == \e[31m0\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value count is not a member of Int - did you mean\
    \ Int.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1659800117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => if (x\
    \ > 10 && x % 2 == 1 && x % 2 == 1) numsCopy.remove(x))\n        numsCopy.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_opok0by.scala:12:79 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsCopy.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > \e[31m10\e[0m && x % \e[31m2\e[0m == \e[31m1\e[0m && x % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m) numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m                   \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue remove is not a member of List[Long] - did you mean numsCopy.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i<- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxfgayxuj.scala:22)\n\tat Problem.main(tmpxfgayxuj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) != nums(i) / 2) {\n  \
    \              count += 1\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdbtpx_6.scala:22)\n\tat Problem.main(tmphdbtpx_6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 != 0).filter(_ % 2 != 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphs_ep80.scala:16)\n\tat Problem.main(tmpphs_ep80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) % 2 == 1) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3dmdnmq5.scala:22)\n\tat Problem.main(tmp3dmdnmq5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppmvshpyj.scala:19)\n\tat Problem.main(tmppmvshpyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1)\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmp627yfwpx.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmp627yfwpx.scala:18)\n\
    \tat Problem$.main(tmp627yfwpx.scala:23)\n\tat Problem.main(tmp627yfwpx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var last = 0\n        var first = 0\n  \
    \      for (i <- nums) {\n            if (i > 10) {\n                count +=\
    \ 1\n                if (i % 2 == 0) {\n                    first += 1\n     \
    \           }\n                if (i % 2 == 1) {\n                    last +=\
    \ 1\n                }\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrtqcdkl.scala:29)\n\tat Problem.main(tmpfrtqcdkl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val even = numsCopy.filter(x\
    \ => x % 2 == 0)\n        val odd = numsCopy.filter(x => x % 2 != 0)\n       \
    \ val firstOdd = odd.filter(x => x % 2 == 1)\n        val lastOdd = odd.filter(x\
    \ => x % 2 == 0)\n        val firstEven = even.filter(x => x % 2 == 1)\n     \
    \   val lastEven = even.filter(x => x % 2 == 0)\n        val firstOddEven = firstOdd.filter(x\
    \ => x % 2 == 1)\n        val lastOddEven = lastOdd.filter(x => x % 2 == 0)\n\
    \        val firstEvenOdd = firstEven.filter(x => x % 2 == 1)\n        val lastEvenOdd\
    \ = lastEven.filter(x => x % 2 == 0)\n        val firstOddEvenLastOdd = firstOddEven.filter(x\
    \ => x % 2 == 1)\n        val lastOddEvenLastOdd = lastOddEven.filter(x => x %\
    \ 2 == 0)\n        val firstEvenOddLastOdd = firstEvenOdd.filter(x => x % 2 ==\
    \ 1)\n        val lastEvenOddLastOdd = lastEvenOdd.filter(x => x % 2 == 0)\n \
    \       val firstOddEvenLastOddLastOdd = firstOddEvenLastOdd.filter(x => x % 2\
    \ == 1)\n        val lastOddEvenLastOddLastOdd = lastOddEvenLastOdd.filter(x =>\
    \ x % 2 == 0)\n        val firstEvenOddLastOddLastOdd = firstEvenOddLastOdd.filter(x\
    \ => x % 2 == 1)\n        val lastEvenOddLastOddLastOdd = lastEvenOddLastOdd.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenLastOddLastOddLastOdd = firstOddEvenLastOddLastOdd.filter(x\
    \ => x % 2 == 1)\n        val lastOddEvenLastOddLastOddLastOdd = lastOddEvenLastOddLastOdd.filter(x\
    \ => x % 2 == 0)\n        val firstEvenOddLastOddLastOddLastOdd = firstEvenOddLastOddLastOdd.filter(x\
    \ => x % 2 == 1)\n        val lastEvenOddLastOddLastOddLastOdd = lastEvenO\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf3f8egs_.scala:33:47 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mlastEvenOddLastOddLastOddLastOdd\e\
    [0m = lastEvenO\n\e[31m\e[31m   |\e[0m                                       \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \          Not found: lastEvenO\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf3f8egs_.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n      \
    \          if (numsCopy(i) mod 2 != 0) {\n                    if (numsCopy(i)\
    \ mod 2 != 1) {\n                        count += 1\n                    }\n \
    \               }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk8nx4ni.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (numsCopy(i) mod \e[31m2\e\
    [0m != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk8nx4ni.scala:16:36\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    \e[33mif\e\
    [0m (numsCopy(i) mod \e[31m2\e[0m != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a\
    \ member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i<- 0 until nums.length){\n       \
    \     if (nums(i) > 10){\n                if (nums(i) % 2 == 1){\n           \
    \         if (nums(i-1) % 2 == 1){\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmp6c3rq5xa.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmp6c3rq5xa.scala:20)\n\
    \tat Problem$.main(tmp6c3rq5xa.scala:25)\n\tat Problem.main(tmp6c3rq5xa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.map(x => (x, 1)).toMap\n        val numsMap2\
    \ = nums.map(x => (x, 1)).toMap\n        val numsMap3 = nums.map(x => (x, 1)).toMap\n\
    \        val numsMap4 = nums.map(x => (x, 1)).toMap\n        val numsMap5 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap6 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap7 = nums.map(x => (x, 1)).toMap\n        val numsMap8 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap9 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap10 = nums.map(x => (x, 1)).toMap\n        val numsMap11 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap12 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap13 = nums.map(x => (x, 1)).toMap\n        val numsMap14 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap15 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap16 = nums.map(x => (x, 1)).toMap\n        val numsMap17 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap18 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap19 = nums.map(x => (x, 1)).toMap\n        val numsMap20 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap21 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap22 = nums.map(x => (x, 1)).toMap\n        val numsMap23 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap24 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap25 = nums.map(x => (x, 1)).toMap\n        val numsMap26 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap27 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap28 = nums.map(x => (x, 1)).toMap\n        val numsMap29 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap30 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap31 = nums.map(x => (x, 1)).to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzapy7ytw.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val evens = numsSorted.filter(_\
    \ % 2 == 0)\n        val odds = numsSorted.filter(_ % 2 != 0)\n        val firstOdds\
    \ = evens.takeWhile(_ % 2 == 0).reverse\n        val lastOdds = evens.takeWhile(_\
    \ % 2 != 0).reverse\n        val firstEvens = odds.takeWhile(_ % 2 == 0)\n   \
    \     val lastEvens = odds.takeWhile(_ % 2 != 0)\n        val firstOddsEvens =\
    \ firstOdds ++ firstEvens\n        val lastOddsEvens = lastOdds ++ lastEvens\n\
    \        val firstOddsEvensLastOdds = firstOddsEvens ++ lastOdds\n        val\
    \ lastOddsEvensFirstOdds = lastOddsEvens ++ firstOdds\n        val firstOddsEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOdds ++ lastEvens\n        val lastOddsEvensFirstOddsLastEvens\
    \ = lastOddsEvensFirstOdds ++ firstEvens\n        val firstOddsEvensLastOddsLastEvensLastOdds\
    \ = firstOddsEvensLastOddsLastEvens ++ lastOdds\n        val lastOddsEvensFirstOddsLastEvensLastOdds\
    \ = lastOddsEvensFirstOddsLastEvens ++ firstOdds\n        val firstOddsEvensLastOddsLastEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOddsLastEvensLastOdds ++ lastEvens\n        val lastOddsEvensFirstOddsLastEvensLastOddsLastEvens\
    \ = lastOddsEvensFirstOddsLastEvensLastOdds ++ firstOdds\n        val firstOddsEvensLastOddsLastEvensLastOddsLastEvensLastOdds\
    \ = firstOddsEvensLastOddsLastEvensLastOddsLastEvens ++ lastOdds\n        val\
    \ lastOddsEvensFirstOddsLastEvensLastOddsLastEvensLastOdds = lastOddsEvensFirstOddsLastEvensLastOddsLastEvens\
    \ ++ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphyhg8xt_.scala:29:122 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastOddsEvensFirstOddsLastEvensLastOddsLastEvensLastOdds\e\
    [0m = lastOddsEvensFirstOddsLastEvensLastOddsLastEvens ++ \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                  expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphyhg8xt_.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var last = 0\n        var first = 0\n  \
    \      for (i <- 0 until nums.size) {\n            val num = nums(i)\n       \
    \     if (num > 10) {\n                count += 1\n                last = num\
    \ % 10\n                first = last % 2\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu32f6cvg.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                last = num %\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val even = numsSorted.filter(x\
    \ => x % 2 == 0)\n        val odd = numsSorted.filter(x => x % 2 != 0)\n     \
    \   val firstOdd = odd.takeWhile(x => x % 2 == 1).length\n        val lastOdd\
    \ = odd.takeWhile(x => x % 2 != 1).length\n        val firstEven = even.takeWhile(x\
    \ => x % 2 == 1).length\n        val lastEven = even.takeWhile(x => x % 2 != 1).length\n\
    \        val firstOddAndEven = firstOdd + firstEven\n        val lastOddAndEven\
    \ = lastOdd + lastEven\n        val firstOddAndEvenAndLastOdd = firstOddAndEven\
    \ + lastOdd\n        val lastOddAndEvenAndFirstOdd = lastOddAndEven + firstOdd\n\
    \        val firstOddAndEvenAndLastOddAndFirstEven = firstOddAndEvenAndLastOdd\
    \ + firstEven\n        val lastOddAndEvenAndFirstOddAndLastEven = lastOddAndEvenAndFirstOdd\
    \ + lastEven\n        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOdd = firstOddAndEvenAndLastOddAndFirstEven\n\
    \        val lastOddAndEvenAndFirstOddAndLastEvenAndFirstOdd = lastOddAndEvenAndFirstOddAndLastEven\n\
    \        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven = firstOddAndEvenAndLastOddAndFirstEvenAndLastOdd\n\
    \        val lastOddAndEvenAndFirstOddAndLastEvenAndFirstOddAndLastEven = lastOddAndEvenAndFirstOddAndLastEvenAndFirstOdd\n\
    \        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven\n        val lastOddAndEvenAndFirstOddAndLastEvenAndFirstOddAndLastEvenAndFirstOdd\
    \ = lastOddAndEvenAndFirstOddAndLastEvenAndFirstOddAndLastEven\n        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzxo6eqc.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprzxo6eqc.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ val firstDigit = num / 10\n            val lastDigit = num % 10\n          \
    \  val firstDigitOdd = firstDigit % 2 == 1\n            val lastDigitOdd = lastDigit\
    \ % 2 == 1\n            if(firstDigitOdd && lastDigitOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc_6or224.scala:28)\n\tat Problem.main(tmpc_6or224.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (ns <- nums) {\n            if (ns >\
    \ 10 && ns % 2 == 1 && ns % 2 == 0) {\n                count += 1\n          \
    \  }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cmedj19.scala:21)\n\tat Problem.main(tmp8cmedj19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i<- 0 until nums.length)\n        \
    \    if (nums(i) > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n  \
    \              count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9tt7ftm_.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9tt7ftm_.scala:13:57 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m                  \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9tt7ftm_.scala:13:74 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m    \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        numsCopy3.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfx9oobf9.scala:19)\n\tat Problem.main(tmpfx9oobf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.toMap\n        val numsMapKeys = numsMap.keys\n\
    \        val numsMapValues = numsMap.values.toList\n        val numsMapValuesLength\
    \ = numsMapValues.length\n        val numsMapValuesLength = numsMapValuesLength.toLong\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpimg29qsn.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpimg29qsn.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpimg29qsn.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpimg29qsn.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpimg29qsn.scala:19:12 ---------------------------"
  stdout: ''
  timestamp: 1659800129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val oddNums = numsSorted.filter(_\
    \ % 2 != 0)\n        val evenNums = numsSorted.filter(_ % 2 == 0)\n        val\
    \ firstOddNum = oddNums.head\n        val lastOddNum = oddNums.last\n        val\
    \ firstEvenNum = evenNums.head\n        val lastEvenNum = evenNums.last\n    \
    \    val firstNum = nums.head\n        val lastNum = nums.last\n        val firstNumOdd\
    \ = firstNum % 2 != 0\n        val lastNumOdd = lastNum % 2 != 0\n        val\
    \ firstNumEven = firstNum % 2 == 0\n        val lastNumEven = lastNum % 2 == 0\n\
    \        val firstNumOddEven = firstNumOdd && firstNumEven\n        val lastNumOddEven\
    \ = lastNumOdd && lastNumEven\n        val firstNumOddOdd = firstNumOdd && lastNumOdd\n\
    \        val lastNumOddOdd = lastNumOdd && firstNumOdd\n        val firstNumEvenEven\
    \ = firstNumEven && lastNumEven\n        val lastNumEvenEven = lastNumEven &&\
    \ firstNumEven\n        val firstNumEvenOdd = firstNumEven && lastNumOdd\n   \
    \     val lastNumEvenOdd = lastNumEven && firstNumOdd\n        val firstNumOddEvenOdd\
    \ = firstNumOdd && lastNumEvenOdd\n        val lastNumOddEvenOdd = lastNumOdd\
    \ && firstNumEvenOdd\n        val firstNumEvenEvenOdd = firstNumEven && lastNumOddEvenOdd\n\
    \        val lastNumEvenEvenOdd = lastNumEven && firstNumOddEvenOdd\n        val\
    \ firstNumOddOddEvenOdd = firstNumOdd && lastNumEvenEvenOdd\n        val lastNumOddOddEvenOdd\
    \ = lastNumOdd && firstNumEvenEvenOdd\n        val firstNumEvenEvenEvenOdd = firstNumEven\
    \ && lastNumOddOddEvenOdd\n        val lastNumEvenEvenEvenOdd = lastNumEven &&\
    \ firstNumOddOddEvenOdd\n        val firstNumOddOddEvenEvenOdd = firstNumOdd &&\
    \ lastNumEvenEvenEvenOdd\n        val lastNumOddOdd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphlbvy8mn.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphlbvy8mn.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9u9hyoqz.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value isOdd is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9u9hyoqz.scala:15:60 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m                             \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                   value isOdd is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659800128
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) != nums(i)) {\n      \
    \          count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5_ets4jz.scala:21)\n\tat Problem.main(tmp5_ets4jz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ ( i <- 0 until numsCopy.length ) {\n            if ( numsCopy(i) > 10 && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd ) {\n                count += 1\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__a28yku.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m ( numsCopy(i) > \e[31m10\e\
    [0m && numsCopy(i).isOdd && numsCopy(i).isOdd ) {\n\e[31m\e[31m   |\e[0m     \
    \                                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                value isOdd is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp__a28yku.scala:14:70 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m ( numsCopy(i) > \e[31m10\e\
    [0m && numsCopy(i).isOdd && numsCopy(i).isOdd ) {\n\e[31m\e[31m   |\e[0m     \
    \                                                     ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value isOdd is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659800129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sort\n        var count = 0\n        for(i\
    \ <- 0 until numsSorted.length){\n            val num = numsSorted(i)\n      \
    \      if(num > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd){\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzo5pe0ph.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800128
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.size) {\n       \
    \     if (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n          \
    \      count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgskqnoqw.scala:21)\n\tat Problem.main(tmpgskqnoqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- nums) {\n            if(i.toString.length\
    \ == 1 && i.toString.charAt(0).toInt == 1) {\n                count += 1\n   \
    \         }\n            if(i.toString.length == 2 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(1).toInt == 1) {\n                count += 1\n   \
    \         }\n            if(i.toString.length == 3 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt == 1)\
    \ {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 4 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt == 1) {\n    \
    \            count += 1\n            }\n            if(i.toString.length == 5\
    \ && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt\
    \ == 1 && i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt == 1)\
    \ {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 6 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt\
    \ == 1 && i.toString.charAt(5).toInt == 1) {\n                count += 1\n   \
    \         }\n            if(i.toString.length == 7 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt == 1 &&\
    \ i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt == 1 && i.toString.charAt(5).toInt\
    \ == 1 && i.toString.charAt(6).toInt == 1) {\n                count += 1\n   \
    \         }\n            if(i.toString.length == 8 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt == 1 &&\
    \ i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt == 1 && i.toString.charAt(5).toInt\
    \ == 1 && i.toString.charAt(6).toInt == 1 && i.toString.charAt(7).toInt == 1)\
    \ {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 9 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt\
    \ == 1 && i.toString.charAt(5).toInt == 1 && i.toString.charAt(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz3ucnn5x.scala:37:269 --------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mif\e[0m(i.toString.length == \e[31m9\e\
    [0m && i.toString.charAt(\e[31m0\e[0m).toInt == \e[31m1\e[0m && i.toString.charAt(\e\
    [31m1\e[0m).toInt == \e[31m1\e[0m && i.toString.charAt(\e[31m2\e[0m).toInt ==\
    \ \e[31m1\e[0m && i.toString.charAt(\e[31m3\e[0m).toInt == \e[31m1\e[0m && i.toString.charAt(\e\
    [31m4\e[0m).toInt == \e[31m1\e[0m && i.toString.charAt(\e[31m5\e[0m).toInt ==\
    \ \e[31m1\e[0m && i.toString.charAt(\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpz3ucnn5x.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ucnn5x.scala:49:1\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpz3ucnn5x.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10 && numsCopy(i)\
    \ %2 == 1 && numsCopy(i) %2 == 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplu_nf6q7.scala:23)\n\tat Problem.main(tmplu_nf6q7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10\
    \ && numsCopy.last.mod(2).equals(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn5nk2mg0.scala:12:53 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsCopy.filter(\e[36mx\e[0m => x > \e[31m10\e\
    [0m && numsCopy.last.mod(\e[31m2\e[0m).equals(\e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue mod is not a member of Long, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n \
    \           if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81vzfhly.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length)\n       \
    \     if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) != nums(i) / 2)\n      \
    \          count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7xn15bu.scala:20)\n\tat Problem.main(tmph7xn15bu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90qttoi1.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n\
    \        for (i <- 0 until numsSorted.length) {\n            if (numsSorted(i)\
    \ > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:75\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (numsSorted(i) > \e[31m10\e[0m && numsSorted(i).isOdd && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd) {\n\e[31m\e[31m   |\e[0m                           \
    \                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    value isOdd is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:98 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var firstOdd = 0\n        var lastOdd =\
    \ 0\n        for(i <- nums) {\n            val n = i.toInt\n            val firstDigit\
    \ = n % 10\n            val lastDigit = n % 100\n            val firstOddDigit\
    \ = firstDigit % 2\n            val lastOddDigit = lastDigit % 2\n           \
    \ if((firstOddDigit == 1) && (lastOddDigit == 1)) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj6kff3a.scala:27)\n\tat Problem.main(tmpfj6kff3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvf52ctlg.scala:21)\n\tat Problem.main(tmpvf52ctlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        numsCopy3.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv65vjov.scala:19)\n\tat Problem.main(tmpfv65vjov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for(i <- 0 until nums.size) {\n        \
    \    val num = nums(i)\n            if(num > 10 && num % 2 == 1 && nums(i-1) %\
    \ 2 == 1) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpgij2jwpv.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpgij2jwpv.scala:17)\n\
    \tat Problem$.main(tmpgij2jwpv.scala:22)\n\tat Problem.main(tmpgij2jwpv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u0pvdra.scala:22)\n\tat Problem.main(tmp4u0pvdra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        val numsCopy5 = numsCopy4.filter(_ >\
    \ 10 && _ % 2 == 0)\n        val numsCopy6 = numsCopy5.filter(_ > 10 && _ % 2\
    \ != 0)\n        numsCopy6.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkbl8ihyr.scala:15:41 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy5\e[0m = numsCopy4.filter(_\
    \ > \e[31m10\e[0m && _ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkbl8ihyr.scala:16:41 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy6\e[0m = numsCopy5.filter(_\
    \ > \e[31m10\e[0m && _ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val even = numsCopy.filter(x\
    \ => x % 2 == 0)\n        val odd = numsCopy.filter(x => x % 2 != 0)\n       \
    \ val evenFirst = even.filter(x => x % 2 == 0 && x != 0)\n        val evenLast\
    \ = even.filter(x => x % 2 == 0 && x == 0)\n        val oddFirst = odd.filter(x\
    \ => x % 2 != 0 && x != 0)\n        val oddLast = odd.filter(x => x % 2 != 0 &&\
    \ x == 0)\n        val firstOdd = evenFirst.filter(x => x % 2 == 1)\n        val\
    \ lastOdd = evenLast.filter(x => x % 2 == 1)\n        val firstEven = oddFirst.filter(x\
    \ => x % 2 != 1)\n        val lastEven = oddLast.filter(x => x % 2 != 1)\n   \
    \     val firstOddAndEven = firstOdd.union(firstEven)\n        val lastOddAndEven\
    \ = lastOdd.union(lastEven)\n        val firstOddAndEvenEven = firstOddAndEven.union(lastOddAndEven)\n\
    \        val firstOddAndEvenEvenEven = firstOddAndEvenEven.filter(x => x % 2 ==\
    \ 1)\n        val lastOddAndEvenEven = lastOddAndEven.filter(x => x % 2 == 1)\n\
    \        val firstOddAndEvenEvenEven = firstOddAndEvenEven.filter(x => x % 2 !=\
    \ 1)\n        val lastOddAndEvenEven = lastOddAndEven.filter(x => x % 2 != 1)\n\
    \        val firstOddAndEvenEvenEvenEven = firstOddAndEvenEvenEven.filter(x =>\
    \ x % 2 == 1)\n        val lastOddAndEvenEvenEven = lastOddAndEvenEven.filter(x\
    \ => x % 2 == 1)\n        val firstOddAndEvenEvenEvenEven = firstOddAndEvenEvenEven.filter(x\
    \ => x % 2 != 1)\n        val lastOddAndEvenEvenEven = lastOddAndEvenEven.filter(x\
    \ => x % 2 != 1)\n        val firstOddAndEvenEvenEvenEven = firstOddAndEvenEvenEven.filter(x\
    \ => x % 2 == 1)\n        val lastOddAndEvenEvenEvenEven = lastOddAndEvenEvenEven.filter(x\
    \ => x % 2 == 1)\n        val firstOddAndEvenEvenEvenEvenEven = first\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyb9aigxi.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndEvenEvenEven\e\
    [0m = firstOddAndEvenEven.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndEvenEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35mfirstOddAndEvenEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyb9aigxi.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndEvenEven\e[0m\
    \ = lastOddAndEven.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastOddAndEvenEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mlastOddAndEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyb9aigxi.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndEvenEvenEvenEven\e\
    [0m = firstOddAndEvenEvenEven.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndEvenEvenEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35mfirstOddAndEvenEvenEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyb9aigxi.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndEvenEvenEven\e\
    [0m = lastOddAndEvenEven.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659800131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10 && numsCopy(i)\
    \ %2 == 1 && numsCopy(i) %2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjztv85xl.scala:23)\n\tat Problem.main(tmpjztv85xl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.map(x => (x % 10, x)).toMap\n        numsMap.values.filter(x\
    \ => x > 10 && x._1 % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3epmzhna.scala:12:47 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsMap.values.filter(\e[36mx\e[0m => x > \e\
    [31m10\e[0m && x._1 % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                     value _1 is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10\
    \ && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq7mker0c.scala:16)\n\tat Problem.main(tmpq7mker0c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n \
    \           if (x > 10 && x % 2 != 0 && x % 2 != 1) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5_x5429_.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_\
    \ % 2 == 1)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.drop(evens.size - 10)\n\
    \        val firstEvens = odds.takeWhile(_ < 10)\n        val lastEvens = odds.drop(odds.size\
    \ - 10)\n        val numsGreaterThan10 = evens.size + odds.size\n        val firstOddsEvens\
    \ = firstEvens.size + firstOdds.size\n        val lastOddsEvens = lastEvens.size\
    \ + lastOdds.size\n        val firstEvensOdds = firstOddsEvens.size + firstEvens.size\n\
    \        val lastEvensOdds = lastOddsEvens.size + lastEvens.size\n        val\
    \ firstOddsEvensOdds = firstOddsEvens.size + firstEvensOdds.size\n        val\
    \ lastOddsEvensOdds = lastOddsEvens.size + lastEvensOdds.size\n        val firstEvensOddsOdds\
    \ = firstEvensOdds.size + firstOddsEvens.size\n        val lastEvensOddsOdds =\
    \ lastEvensOdds.size + lastOddsEvens.size\n        val firstOddsEvensOddsOdds\
    \ = firstOddsEvensOdds.size + firstEvensOddsOdds.size\n        val lastOddsEvensOddsOdds\
    \ = lastOddsEvensOdds.size + lastEvensOddsOdds.size\n        val firstEvensOddsOddsOdds\
    \ = firstEvensOddsOdds.size + firstOddsEvensOdds.size\n        val lastEvensOddsOddsOdds\
    \ = lastEvensOddsOdds.size + lastOddsEvensOdds.size\n        val firstOddsEvensOddsOddsOdds\
    \ = firstOddsEvensOddsOdds.size + firstEvensOddsOddsOdds.size\n        val lastOddsEvensOddsOddsOdds\
    \ = lastOddsEvensOddsOdds.size + lastEvensOddsOddsOdds.size\n        val firstEvens\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmcq1puin.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmcq1puin.scala:21:44\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvensOdds\e[0m = firstOddsEvens.size + firstEvens.size\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value size is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmcq1puin.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastEvensOdds\e[0m = lastOddsEvens.size\
    \ + lastEvens.size\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value size is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmcq1puin.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensOdds\e[0m\
    \ = firstOddsEvens.size + firstEvensOdds.size\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      value size is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmcq1puin.scala:24:46 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastOddsEvensOdds\e[0m = lastOddsEvens.size\
    \ + lastEvensOdds.size\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value size is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmcq1puin.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659800134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (ns <- nums) {\n            if (ns >\
    \ 10 && ns % 2 == 1 && ns % 2 == 0) {\n                count += 1\n          \
    \  }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cmedj19.scala:21)\n\tat Problem.main(tmp8cmedj19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val even = numsSorted.filter(_\
    \ % 2 == 0)\n        val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd\
    \ = odd.takeWhile(_ < 10)\n        val lastOdd = odd.dropWhile(_ < 10).last\n\
    \        val firstEven = even.takeWhile(_ < 10)\n        val lastEven = even.dropWhile(_\
    \ < 10).last\n        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val\
    \ firstEvenAndLastEven = firstEven ++ lastEven\n        val firstOddAndLastEvenAndLastOdd\
    \ = firstOddAndLastOdd ++ lastEven\n        val firstEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastEven ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOdd ++ lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastEven\n        val\
    \ firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n\
    \        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph11vorra.scala:18:45\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndLastOdd\e\
    [0m = firstOdd ++ lastOdd\n\e[31m\e[31m   |\e[0m                             \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \             Found:    (lastOdd : Long)\n\e[31m   |\e[0m                    \
    \                        Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph11vorra.scala:19:48 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfirstEvenAndLastEven\e[0m\
    \ = firstEven ++ lastEven\n\e[31m\e[31m   |\e[0m                             \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                 Found:    (lastEven : Long)\n\e[31m   |\e[0m               \
    \                             Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph11vorra.scala:20:66 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndLastEvenAndLastOdd\e\
    [0m = firstOddAndLastOdd ++ lastEven\n\e[31m\e[31m   |\e[0m                  \
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                            Found:    (lastEven : Long)\n\e[31m\
    \   |\e[0m                                            Required: IterableOnce[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph11vorra.scala:21:69\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfirstEvenAndLastOddAndLastEven\e\
    [0m = firstEvenAndLastEven ++ lastOdd\n\e[31m\e[31m   |\e[0m                 \
    \                                                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    (lastOdd : Long)\n\e\
    [31m   |\e[0m                                           "
  stdout: ''
  timestamp: 1659800137
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmponkymkra.scala:20)\n\tat Problem.main(tmponkymkra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppmvshpyj.scala:19)\n\tat Problem.main(tmppmvshpyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n      \
    \          if (numsCopy(i) mod 2 != 0) {\n                    if (numsCopy(i)\
    \ mod 2 != 1) {\n                        count += 1\n                    }\n \
    \               }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk8nx4ni.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (numsCopy(i) mod \e[31m2\e\
    [0m != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk8nx4ni.scala:16:36\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    \e[33mif\e\
    [0m (numsCopy(i) mod \e[31m2\e[0m != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a\
    \ member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        numsCopy3.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv65vjov.scala:19)\n\tat Problem.main(tmpfv65vjov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.map(x => (x, 1)).toMap\n        nums.count(x\
    \ => x > 10 && numsMap.getOrElse(x, 0) % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4d1rdame.scala:16)\n\tat Problem.main(tmp4d1rdame.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var lastDigit = 0\n        var firstDigit\
    \ = 0\n        for (i <- 0 until nums.size) {\n            val num = nums(i)\n\
    \            if (num > 10) {\n                count += 1\n                lastDigit\
    \ = num % 10\n                firstDigit = num / 10\n            }\n        }\n\
    \        if (count > 0 && firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n     \
    \       count\n        } else {\n            0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfnjig3cz.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                lastDigit = num\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfnjig3cz.scala:19:29 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                firstDigit = num / \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qvmc3iy.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m        \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         value isOdd is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3qvmc3iy.scala:15:60 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd &&\
    \ numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m           \
    \                                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value isOdd is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qvmc3iy.scala:15:81 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m        \
    \                                                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.map(x => (x, 1)).toMap\n        numsMap.filter(_._1\
    \ > 10).filter(_._1.isOdd).filter(_._1.isOdd).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4l8ocv0.scala:12:46 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsMap.filter(_._1 > \e[31m10\e[0m).filter(_._1.isOdd).filter(_._1.isOdd).length\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value isOdd is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4l8ocv0.scala:12:65\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        numsMap.filter(_._1\
    \ > \e[31m10\e[0m).filter(_._1.isOdd).filter(_._1.isOdd).length\n\e[31m\e[31m\
    \   |\e[0m                                                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659800140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmponkymkra.scala:20)\n\tat Problem.main(tmponkymkra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) \n      \
    \      if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) % 2 == 1) \n          \
    \      count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxb70vobk.scala:20)\n\tat Problem.main(tmpxb70vobk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.size) {\n       \
    \     if (nums(i) > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1) %\
    \ 2 == 1) {\n                    count += 1\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmp45yezxlm.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmp45yezxlm.scala:18)\n\
    \tat Problem$.main(tmp45yezxlm.scala:23)\n\tat Problem.main(tmp45yezxlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10) {\n                val firstDigit = num / 10\n                val\
    \ lastDigit = num % 10\n                if(firstDigit % 2 == 1 && lastDigit %\
    \ 2 == 1) {\n                    count += 1\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjno6npdw.scala:28)\n\tat Problem.main(tmpjno6npdw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10) {\n                if(numsCopy(i-1) % 2 == 1 && numsCopy(i+1) %\
    \ 2 == 1) {\n                    count += 1\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpu8lmlxth.scala:16)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpu8lmlxth.scala:20)\n\
    \tat Problem$.main(tmpu8lmlxth.scala:25)\n\tat Problem.main(tmpu8lmlxth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n\
    \        for (i <- 0 until numsSorted.length) {\n            if (numsSorted(i)\
    \ > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:75\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (numsSorted(i) > \e[31m10\e[0m && numsSorted(i).isOdd && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd) {\n\e[31m\e[31m   |\e[0m                           \
    \                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    value isOdd is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp29uaua8i.scala:14:98 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvf52ctlg.scala:21)\n\tat Problem.main(tmpvf52ctlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val evens = numsCopy.filter(x\
    \ => x % 2 == 0)\n        val odds = numsCopy.filter(x => x % 2 != 0)\n      \
    \  val evensAndOdds = evens.zip(odds)\n        val evensAndOddsCount = evensAndOdds.filter(x\
    \ => x._1 == x._2).length\n        val evensAndOddsFirstAndLast = evensAndOdds.filter(x\
    \ => x._1 == x._2 && x._2 == x._1)\n        val evensAndOddsFirstAndLastCount\
    \ = evensAndOddsFirstAndLast.length\n        val evensAndOddsFirstAndLastFirstAndLast\
    \ = evensAndOddsFirstAndLast.filter(x => x._1 == x._2 && x._2 == x._1 && x._2\
    \ == x._1)\n        val evensAndOddsFirstAndLastFirstAndLastCount = evensAndOddsFirstAndLastFirstAndLast.length\n\
    \        val evensAndOddsFirstAndLastFirstAndLastFirstAndLast = evensAndOddsFirstAndLastFirstAndLast.filter(x\
    \ => x._1 == x._2 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1)\n        val\
    \ evensAndOddsFirstAndLastFirstAndLastFirstAndLastCount = evensAndOddsFirstAndLastFirstAndLastFirstAndLast.length\n\
    \        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLast = evensAndOddsFirstAndLastFirstAndLastFirstAndLast.filter(x\
    \ => x._1 == x._2 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1)\n\
    \        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastCount\
    \ = evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLast.length\n    \
    \    val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastFirstAndLast\
    \ = evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLast.filter(x => x._1\
    \ == x._2 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1 && x._2\
    \ == x._1)\n        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastFirstAndLastCount\
    \ = evensAndOdd\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1rksj5s.scala:25:92 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastFirstAndLastCount\e\
    [0m = evensAndOdd\n\e[31m\e[31m   |\e[0m                                     \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Not found: evensAndOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy1rksj5s.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var lastNum = 0\n        var firstNum =\
    \ 0\n        for(num <- nums) {\n            if(num > 10) {\n                if(lastNum\
    \ % 2 == 1 && firstNum % 2 == 1) {\n                    count += 1\n         \
    \       }\n                lastNum = num\n                firstNum = num\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7_g6ume.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastNum = num\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Found:    (num : Long)\n\e[31m   |\e[0m                \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps7_g6ume.scala:20:27 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                firstNum = num\n\e[31m\e[31m   |\e[0m                \
    \           ^^^\e[0m\n\e[31m   |\e[0m                           Found:    (num\
    \ : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ > 9)\n        val numsCopy5 = numsCopy4.filter(_ % 2 !=\
    \ 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgg56l9mm.scala:21)\n\tat Problem.main(tmpgg56l9mm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvf52ctlg.scala:21)\n\tat Problem.main(tmpvf52ctlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppmvshpyj.scala:19)\n\tat Problem.main(tmppmvshpyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qvmc3iy.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m        \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         value isOdd is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3qvmc3iy.scala:15:60 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd &&\
    \ numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m           \
    \                                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value isOdd is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qvmc3iy.scala:15:81 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n\e[31m\e[31m   |\e[0m        \
    \                                                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n     \
    \       if (nums(i) > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp77alcya3.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp77alcya3.scala:13:57 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp77alcya3.scala:13:74 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u0pvdra.scala:22)\n\tat Problem.main(tmp4u0pvdra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmf4wk1k.scala:16)\n\tat Problem.main(tmphmf4wk1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith((x, y) => x > y)\n        val oddNums\
    \ = numsSorted.filter(_ % 2 == 1)\n        val firstOddNum = oddNums.head\n  \
    \      val lastOddNum = oddNums.last\n        val firstOddNumOdd = firstOddNum\
    \ % 2 == 1\n        val lastOddNumOdd = lastOddNum % 2 == 1\n        val firstAndLastOddNumOdd\
    \ = firstOddNumOdd && lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd && lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd\n\
    \        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zadqh3l.scala:22:260\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfirstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\e\
    [0m = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd\
    \ && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                    ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                           Found:    (lastOddNum : Long)\n\
    \e[31m   |\e[0m                                           Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zadqh3l.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n\
    \        for (i <- 0 until numsSorted.length) {\n            if (numsSorted(i)\
    \ > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw08f1gju.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value isOdd is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpw08f1gju.scala:14:75 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (numsSorted(i) > \e[31m10\e\
    [0m && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                           ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_\
    \ % 2 == 1)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.dropWhile(_ < 10)\n\
    \        val firstEvens = odds.takeWhile(_ < 10)\n        val lastEvens = odds.dropWhile(_\
    \ < 10)\n        val firstOddsEvens = firstOdds.zip(lastEvens)\n        val firstEvensOdds\
    \ = firstEvens.zip(lastOdds)\n        val firstOddsEvensOdds = firstOddsEvens.filter(x\
    \ => x._1 < x._2)\n        val firstEvensOddsOdds = firstEvensOdds.filter(x =>\
    \ x._1 < x._2)\n        val firstOddsEvensOddsOdds = firstOddsEvensOdds.filter(x\
    \ => x._1 < x._2)\n        val firstEvensOddsOddsOddsOdds = firstEvensOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstOddsEvensOddsOddsOddsOdds = firstOddsEvensOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstEvensOddsOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstOddsEvensOddsOddsOddsOddsOddsOdds = firstOddsEvensOddsOddsOddsOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstEvensOddsOddsOddsOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOddsOddsOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstOddsEvensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = firstOddsEvensO\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodqhhnck.scala:26:53 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensOddsOddsOddsOddsOddsOdds\e\
    [0m = firstOddsEvensOddsOddsOddsOddsOdds.filter(\e[36mx\e[0m => x._1 < x._2)\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: firstOddsEvensOddsOddsOddsOddsOdds\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodqhhnck.scala:27:57\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvensOddsOddsOddsOddsOddsOddsOddsOdds\e[0m = firstEvensOddsOddsOddsOddsOddsOddsOdds.filter(\e\
    [36mx\e[0m => x._1 < x._2)\n\e[31m\e[31m   |\e[0m                            \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: firstEvensOddsOddsOddsOddsOddsOddsOdds\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodqhhnck.scala:28:73\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddsEvensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\e[0m = firstOddsEvensO\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                        Not found: firstOddsEvensO\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpodqhhnck.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.map(x => (x, 1)).toMap\n        numsMap.filter(_._1\
    \ > 10).filter(_._2._1 % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8nu7bd2j.scala:12:46 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsMap.filter(_._1 > \e[31m10\e[0m).filter(_._2._1\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                     value _1 is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val odd = numsSorted.filter(_\
    \ % 2 == 1)\n        val even = numsSorted.filter(_ % 2 == 0)\n        val first\
    \ = even.head\n        val last = even.last\n        val firstOdd = odd.filter(_\
    \ % 2 == 1)\n        val lastOdd = odd.filter(_ % 2 == 0)\n        val firstEven\
    \ = even.filter(_ % 2 == 0)\n        val lastEven = even.filter(_ % 2 == 1)\n\
    \        val firstOddEven = firstOdd.filter(_ % 2 == 0)\n        val lastOddEven\
    \ = lastOdd.filter(_ % 2 == 0)\n        val firstOddEvenLastOdd = firstOddEven.last\n\
    \        val lastOddEvenLastOdd = lastOddEven.last\n        val firstEvenLastOdd\
    \ = firstEven.last\n        val lastEvenLastOdd = lastEven.last\n        val firstEvenLastOddEven\
    \ = firstEvenLastOdd.filter(_ % 2 == 0)\n        val lastEvenLastOddEven = lastEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val firstEvenLastOddEvenLastOdd = firstEvenLastOddEven.last\n\
    \        val lastEvenLastOddEvenLastOdd = lastEvenLastOddEven.last\n        val\
    \ firstEvenLastOddEvenLastOddEven = firstEvenLastOddEvenLastOdd.filter(_ % 2 ==\
    \ 0)\n        val lastEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val firstEvenLastOddEvenLastOddEvenLastOdd = firstEvenLastOddEvenLastOddEven.last\n\
    \        val lastEvenLastOddEvenLastOddEvenLastOdd = lastEvenLastOddEvenLastOddEven.last\n\
    \        val firstEvenLastOddEvenLastOddEvenLastOddEven = firstEvenLastOddEvenLastOddEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val lastEvenLastOddEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOddEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val firstEvenLastOddEvenLastOddEvenLastOddEvenLastOdd = firstEvenLastOddEvenLastOddEvenLastOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdl9g8qtg.scala:26:52 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfirstEvenLastOddEven\e[0m\
    \ = firstEvenLastOdd.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value filter is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdl9g8qtg.scala:27:50 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlastEvenLastOddEven\e[0m\
    \ = lastEvenLastOdd.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  value filter is not a member of Long\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl9g8qtg.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        var count = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n      \
    \          if (numsCopy(i) mod 2 != 0) {\n                    if (numsCopy(i)\
    \ mod 2 != 1) {\n                        count += 1\n                    }\n \
    \               }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk8nx4ni.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (numsCopy(i) mod \e[31m2\e\
    [0m != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk8nx4ni.scala:16:36\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    \e[33mif\e\
    [0m (numsCopy(i) mod \e[31m2\e[0m != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a\
    \ member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var lastDigit = 0\n        var firstDigit\
    \ = 0\n        for (i <- nums) {\n            if (i > 10) {\n                count\
    \ += 1\n                lastDigit = i\n            } else {\n                if\
    \ (i % 2 == 1) {\n                    firstDigit = i\n                }\n    \
    \        }\n        }\n        if (count == 0) {\n            return 0\n     \
    \   }\n        if (lastDigit % 2 == 1 && firstDigit % 2 == 1) {\n            count\
    \ += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplrnfwzca.scala:17:28\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                lastDigit = i\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (i : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplrnfwzca.scala:20:33 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    firstDigit = i\n\e[31m\e[31m   |\e[0m            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    (i : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val numsFiltered\
    \ = numsSorted.filter(_ > 10)\n        val firstOddNum = numsFiltered.head\n \
    \       val lastOddNum = numsFiltered.last\n        val firstOddNumIsOdd = firstOddNum\
    \ % 2 != 0\n        val lastOddNumIsOdd = lastOddNum % 2 != 0\n        if (firstOddNumIsOdd\
    \ && lastOddNumIsOdd) {\n            numsSorted.length\n        } else {\n   \
    \         numsSorted.length + 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.specialFilter(tmpkqd66ava.scala:13)\n\
    \tat Problem$.main(tmpkqd66ava.scala:24)\n\tat Problem.main(tmpkqd66ava.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith((x, y) => x > y)\n        val oddNums\
    \ = numsSorted.filter(_ % 2 != 0)\n        val firstOddNum = oddNums.head\n  \
    \      val lastOddNum = oddNums.last\n        val firstOddNumOddNum = firstOddNum\
    \ * lastOddNum\n        val firstOddNumEvenNum = firstOddNum * evenNums(firstOddNum)\n\
    \        val firstOddNumOddNumEvenNum = firstOddNumOddNum * evenNums(firstOddNumEvenNum)\n\
    \        val firstOddNumOddNumEvenNumEvenNum = firstOddNumOddNumEvenNum * evenNums(firstOddNumEvenNum)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNum = firstOddNumOddNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNum)\n        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNum\
    \ = firstOddNumOddNumEvenNumEvenNumEvenNum * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNum)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum)\n        val\
    \ firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEven)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEven)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEven\
    \ = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl_qsvlau.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_qsvlau.scala:16:47\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddNumEvenNum\e[0m = firstOddNum * evenNums(firstOddNum)\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Not found: evenNums\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_qsvlau.scala:17:59\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddNumOddNumEvenNum\e[0m = firstOddNumOddNum * evenNums(firstOddNumEvenNum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \          Not found: evenNums\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpl_qsvlau.scala:21:67 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfirstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum\e\
    [0m = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mfirstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl_qsvlau.scala:22:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\e[0m = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEve"
  stdout: ''
  timestamp: 1659800143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkqb5lie.scala:19)\n\tat Problem.main(tmpjkqb5lie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        var last = 0\n        var first = 0\n  \
    \      var odd = 0\n        for (i <- 0 until nums.size) {\n            val n\
    \ = nums(i)\n            if (n > 10) {\n                count += 1\n         \
    \       if (n % 2 == 1) {\n                    odd += 1\n                }\n \
    \               if (n % 2 == 0) {\n                    first += 1\n          \
    \      }\n                if (n % 2 == 0) {\n                    last += 1\n \
    \               }\n            }\n        }\n        count + odd\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqsk4rg0v.scala:34)\n\tat Problem.main(tmpqsk4rg0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90qttoi1.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsMap = nums.map(x => (x, 1)).toMap\n        val numsMap2\
    \ = nums.map(x => (x, 1)).toMap\n        val numsMap3 = nums.map(x => (x, 1)).toMap\n\
    \        val numsMap4 = nums.map(x => (x, 1)).toMap\n        val numsMap5 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap6 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap7 = nums.map(x => (x, 1)).toMap\n        val numsMap8 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap9 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap10 = nums.map(x => (x, 1)).toMap\n        val numsMap11 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap12 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap13 = nums.map(x => (x, 1)).toMap\n        val numsMap14 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap15 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap16 = nums.map(x => (x, 1)).toMap\n        val numsMap17 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap18 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap19 = nums.map(x => (x, 1)).toMap\n        val numsMap20 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap21 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap22 = nums.map(x => (x, 1)).toMap\n        val numsMap23 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap24 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap25 = nums.map(x => (x, 1)).toMap\n        val numsMap26 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap27 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap28 = nums.map(x => (x, 1)).toMap\n        val numsMap29 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap30 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap31 = nums.map(x => (x, 1)).to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzapy7ytw.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_\
    \ % 2 == 1)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.dropWhile(_ < 10).reverse\n\
    \        odds.length + firstOdds.length + lastOdds.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81uo2w_w.scala:19)\n\tat Problem.main(tmp81uo2w_w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        numsCopy.foreach(x => if (x\
    \ > 10 && x % 2 == 1 && x % 2 == 0) numsCopy.remove(x))\n        numsCopy.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp404zteey.scala:12:79 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numsCopy.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > \e[31m10\e[0m && x % \e[31m2\e[0m == \e[31m1\e[0m && x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m                   \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue remove is not a member of List[Long] - did you mean numsCopy.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i<- nums) {\n            if (i > 10\
    \ && i % 2 == 1 && i % 2 == 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe1np2nh.scala:21)\n\tat Problem.main(tmpqe1np2nh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for ( n <- nums ) {\n            if ( n\
    \ > 10 && n % 2 == 1 && n % 10 == 5 ) {\n                count += 1\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3d5safna.scala:22)\n\tat Problem.main(tmp3d5safna.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ > 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 !=\
    \ 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxej3zgth.scala:21)\n\tat Problem.main(tmpxej3zgth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abfza5f.scala:19)\n\tat Problem.main(tmp6abfza5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long\
    \ = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 10\
    \ && i % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzmpxnt5.scala:21)\n\tat Problem.main(tmphzmpxnt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
