language: scala
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        for(i <- 0 until N) {\n  \
    \          remainder = i % 10\n            sum += remainder\n            binary\
    \ += remainder\n        }\n        binary.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbj151mg.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbbj151mg.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ digit = binary.charAt(i)\n            sum += digit.toInt\n        }\n      \
    \  binary.reverse\n        binary.reverse.takeWhile(x => x != '0').mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7bvvxzt.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        for(i <- 0 until N){\n   \
    \         sum += i\n            binary = sum.toString(2)\n            remainder\
    \ = sum % 2\n            sum = sum / 2\n        }\n        if(remainder == 0){\n\
    \            binary = sum.toString(2)\n        }\n        binary\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8oeahey2.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8oeahey2.scala:20:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            binary = sum.toString(\e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \  too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- Error: /tmp/tmp8oeahey2.scala:25:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     binary = sum.toString(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                     ^\e[0m\n\e[31m   |\e[0m         too many arguments for \e\
    [33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sums = mutable.ArrayBuffer.empty[Int]\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ sumOfDigits = digits.foldLeft(0)(_ + _)\n        sums += sumOfDigits\n     \
    \   val binary = sums.map(x => x % 2).mkString(\"\")\n        binary.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2pj2uvc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\"\n\
    \        for(i <- 0 until N) {\n            sum += i\n            sumStr += i\n\
    \            remainder = sum % 2\n            remainderStr += remainder\n    \
    \    }\n        if(sumStr.length == 1) {\n            sumStr = \"0\" + sumStr\n\
    \        }\n        if(remainderStr.length == 1) {\n            remainderStr =\
    \ \"0\" + remainderStr\n        }\n        sumStr + remainderStr\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmslgdwt.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdmslgdwt.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val result = sums.foldLeft(\"\"\
    )(_ + _)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg8wkx1xc.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   var remainder3 = N\n        var remainder4 = N\n        var remainder5 = N\n\
    \        var remainder6 = N\n        var remainder7 = N\n        var remainder8\
    \ = N\n        var remainder9 = N\n        var remainder10 = N\n        var remainder11\
    \ = N\n        var remainder12 = N\n        var remainder13 = N\n        var remainder14\
    \ = N\n        var remainder15 = N\n        var remainder16 = N\n        var remainder17\
    \ = N\n        var remainder18 = N\n        var remainder19 = N\n        var remainder20\
    \ = N\n        var remainder21 = N\n        var remainder22 = N\n        var remainder23\
    \ = N\n        var remainder24 = N\n        var remainder25 = N\n        var remainder26\
    \ = N\n        var remainder27 = N\n        var remainder28 = N\n        var remainder29\
    \ = N\n        var remainder30 = N\n        var remainder31 = N\n        var remainder32\
    \ = N\n        var remainder33 = N\n        var remainder34 = N\n        var remainder35\
    \ = N\n        var remainder36 = N\n        var remainder37 = N\n        var remainder38\
    \ = N\n        var remainder39 = N\n        var remainder40 = N\n        var remainder41\
    \ = N\n        var remainder42 = N\n        var remainder43 = N\n        var remainder44\
    \ = N\n        var remainder45 = N\n        var remainder46 = N\n        var remainder47\
    \ = N\n        var remainder48 = N\n        var remainder49 = N\n        var remainder50\
    \ = N\n        var remainder51 = N\n        var remainder52 = N\n        var remainder53\
    \ = N\n        var remainder54 = N\n        var remainder55 = N\n        var remainder56\
    \ = N\n        var remainder57 = N\n        var remainder58 = N\n        var remainder59\
    \ = N\n        var remainder60 = N\n        var remainder61 = N\n        var remainder62\
    \ = N\n        var remainder63 = N\n        var remainder64 = N\n        var remainder65\
    \ = N\n        var remainder66 = N\n        var remainder67 = N\n        var remainder68\
    \ = N\n        var remainder69 = N\n        var remainder70 = N\n        var remainder71\
    \ = N\n        var remainder72 = N\n        var remainder73 = N\n        var remainder74\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp51rm2qwt.scala:90:25 ---------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m        \e[33mvar\e[0m \e[36mremainder74\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51rm2qwt.scala:91:5 ---------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        for(i <- 0 until N) {\n \
    \           val remainder = i rem 2\n            val digit = i / 2\n         \
    \   sum += digit\n            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6qvs28m.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6qvs28m.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn6qvs28m.scala:18:30 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mremainder\e[0m = i rem \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value rem is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn6qvs28m.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\"\n\
    \        var remainderStr2 = \"\"\n        var remainderStr3 = \"\"\n        var\
    \ remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n        var remainderStr6\
    \ = \"\"\n        var remainderStr7 = \"\"\n        var remainderStr8 = \"\"\n\
    \        var remainderStr9 = \"\"\n        var remainderStr10 = \"\"\n       \
    \ var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\n        var remainderStr13\
    \ = \"\"\n        var remainderStr14 = \"\"\n        var remainderStr15 = \"\"\
    \n        var remainderStr16 = \"\"\n        var remainderStr17 = \"\"\n     \
    \   var remainderStr18 = \"\"\n        var remainderStr19 = \"\"\n        var\
    \ remainderStr20 = \"\"\n        var remainderStr21 = \"\"\n        var remainderStr22\
    \ = \"\"\n        var remainderStr23 = \"\"\n        var remainderStr24 = \"\"\
    \n        var remainderStr25 = \"\"\n        var remainderStr26 = \"\"\n     \
    \   var remainderStr27 = \"\"\n        var remainderStr28 = \"\"\n        var\
    \ remainderStr29 = \"\"\n        var remainderStr30 = \"\"\n        var remainderStr31\
    \ = \"\"\n        var remainderStr32 = \"\"\n        var remainderStr33 = \"\"\
    \n        var remainderStr34 = \"\"\n        var remainderStr35 = \"\"\n     \
    \   var remainderStr36 = \"\"\n        var remainderStr37 = \"\"\n        var\
    \ remainderStr38 = \"\"\n        var remainderStr39 = \"\"\n        var remainderStr40\
    \ = \"\"\n        var remainderStr41 = \"\"\n        var remainderStr42 = \"\"\
    \n        var remainderStr43 = \"\"\n        var remainderStr44 = \"\"\n     \
    \   var remainderStr45 = \"\"\n        var remainderStr46 = \"\"\n        var\
    \ remainderStr47 = \"\"\n        var remainderStr48 = \"\"\n        var remainderStr49\
    \ = \"\"\n        var remainderStr50 = \"\"\n        var remainderStr51 = \"\"\
    \n        var remainderStr52 = \"\"\n        var remainderStr53 = \"\"\n     \
    \   var remainderStr54 = \"\"\n        var remainderStr55 = \"\"\n        var\
    \ remainderStr56 = \"\"\n        var remainderStr57 = \"\"\n        var remainderStr58\
    \ = \"\"\n        var remainderStr59 = \"\"\n        var remainderStr60 = \"\"\
    \n        var remainderStr61 = \"\"\n        var remainderStr62 = \"\"\n     \
    \   var remainderStr63 = \"\"\n        var remainderStr64 = \"\"\n        var\
    \ remainderStr65 = \"\"\n        var remainderStr66 = \"\"\n        var remainderStr67\
    \ = \"\"\n        var remainderStr68 = \"\"\n        var remainderStr69 = \"\"\
    \n        var remain\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1oiy4138.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1oiy4138.scala:88:5 ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumOfDigits = 0\n        var binaryString = \"\"\n        for(i <- 0 until N)\
    \ {\n            val digit = math.abs(N % 10)\n            sum += digit\n    \
    \        sumOfDigits += digit\n            binaryString += digit\n           \
    \ N /= 10\n        }\n        val result = if (sumOfDigits == sum) binaryString\
    \ else \"\"\n        result + sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplkbueqpl.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmplkbueqpl.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplkbueqpl.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sumOfDigits +=\
    \ digit\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplkbueqpl.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            N /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean N.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        binary.append(sum)\n        binary.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwpif2fo3.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N /= \e[31m10\e[0m) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              value /= is\
    \ not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwpif2fo3.scala:18:16 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwpif2fo3.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]\n        while(N /= 10) {\n       \
    \     val remainder = N % 10\n            sum += remainder\n            binary.append(remainder)\n\
    \            N = (N - remainder) / 10\n        }\n        val result = binary.reverse.mkString(\"\
    \")\n        val result = binary.reverse.mkString(\"\")\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp12ryp60u.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = binary.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp12ryp60u.scala:16:25 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp12ryp60u.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N /= \e[31m10\e[0m) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              value /= is\
    \ not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp12ryp60u.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp12ryp60u.scala:21:14 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            N = (N - remainder) / \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n         \
    \   val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcf34z1bb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcf34z1bb.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcf34z1bb.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >=0){\n         \
    \   val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq66tul3o.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq66tul3o.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpq66tul3o.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]\n  \
    \      for(i <- 0 to binary.length-1){\n            val c = binary.charAt(i)\n\
    \            val d = c.toInt\n            sum += d\n            result += (d +\"\
    \")\n        }\n        val result = sum.toString.reverse\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzhc8nb60.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = sum.toString.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzhc8nb60.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzhc8nb60.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += d\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ temp = binary.charAt(i).toInt\n            sum += temp\n        }\n        binary.reverse\n\
    \        binary.reverse.takeWhile(x => x != '0').reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdajhu0ko.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += temp\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        var remainder = N\n        while (remainder > 0) {\n\
    \            sum += remainder % 2\n            remainder = remainder / 2\n   \
    \     }\n        sumStr += sum.toString\n        sumStr.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu10ibbar.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainderSum = 0\n   \
    \     var remainderSum2 = 0\n        var remainderSum3 = 0\n        var remainderSum4\
    \ = 0\n        var remainderSum5 = 0\n        var remainderSum6 = 0\n        var\
    \ remainderSum7 = 0\n        var remainderSum8 = 0\n        var remainderSum9\
    \ = 0\n        var remainderSum10 = 0\n        var remainderSum11 = 0\n      \
    \  var remainderSum12 = 0\n        var remainderSum13 = 0\n        var remainderSum14\
    \ = 0\n        var remainderSum15 = 0\n        var remainderSum16 = 0\n      \
    \  var remainderSum17 = 0\n        var remainderSum18 = 0\n        var remainderSum19\
    \ = 0\n        var remainderSum20 = 0\n        var remainderSum21 = 0\n      \
    \  var remainderSum22 = 0\n        var remainderSum23 = 0\n        var remainderSum24\
    \ = 0\n        var remainderSum25 = 0\n        var remainderSum26 = 0\n      \
    \  var remainderSum27 = 0\n        var remainderSum28 = 0\n        var remainderSum29\
    \ = 0\n        var remainderSum30 = 0\n        var remainderSum31 = 0\n      \
    \  var remainderSum32 = 0\n        var remainderSum33 = 0\n        var remainderSum34\
    \ = 0\n        var remainderSum35 = 0\n        var remainderSum36 = 0\n      \
    \  var remainderSum37 = 0\n        var remainderSum38 = 0\n        var remainderSum39\
    \ = 0\n        var remainderSum40 = 0\n        var remainderSum41 = 0\n      \
    \  var remainderSum42 = 0\n        var remainderSum43 = 0\n        var remainderSum44\
    \ = 0\n        var remainderSum45 = 0\n        var remainderSum46 = 0\n      \
    \  var remainderSum47 = 0\n        var remainderSum48 = 0\n        var remainderSum49\
    \ = 0\n        var remainderSum50 = 0\n        var remainderSum51 = 0\n      \
    \  var remainderSum52 = 0\n        var remainderSum53 = 0\n        var remainderSum54\
    \ = 0\n        var remainderSum55 = 0\n        var remainderSum56 = 0\n      \
    \  var remainderSum57 = 0\n        var remainderSum58 = 0\n        var remainderSum59\
    \ = 0\n        var remainderSum60 = 0\n        var remainderSum61 = 0\n      \
    \  var remainderSum62 = 0\n        var remainderSum63 = 0\n        var remainderSum64\
    \ = 0\n        var remainderSum65 = 0\n        var remainderSum66 = 0\n      \
    \  var remainderSum67 = 0\n        var remainderSum68 = 0\n        var remainderSum69\
    \ = 0\n        var remainderSum70 = 0\n        var remainderSum71 = 0\n      \
    \  var remain\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpffxtr5iy.scala:90:4 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpffxtr5iy.scala:90:5 ---------------------\e[0m\e[0m\n\e[31m90 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n         \
    \   val digit = N % 10\n            sum += digit\n            N /= 10\n      \
    \      binary.append(digit.toString)\n        }\n        val result = sum.toBinaryString\n\
    \        binary.reverse.foreach(x => result += x)\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6d4z_3_.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi6d4z_3_.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpi6d4z_3_.scala:20:14 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            N /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        while(N !=0){\n          \
    \  remainder = N % 2\n            N = N / 2\n            sum = sum + remainder\n\
    \            binary = binary + remainder\n        }\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0n0c_zyn.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            remainder = N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Found:    Long\n\e[31m   |\e[0m              \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp0n0c_zyn.scala:20:14 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0n0c_zyn.scala:89:15 --------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m        binary = binary.reverse\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = N\n        while(remainder > 0) {\n \
    \           sum += remainder % 2\n            remainder = remainder / 2\n    \
    \    }\n        while(sum > 0) {\n            binary += sum % 2\n            sum\
    \ = sum / 2\n        }\n        binary\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tjnwqo7.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var remainder = N\n        while(remainder > 0) {\n \
    \           val digit = remainder % 10\n            sum += digit\n           \
    \ binary = digit + binary\n            remainder = remainder / 10\n        }\n\
    \        binary = sum.toString + binary\n        binary\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl9pzmvsu.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\"\n\
    \        for(i <- 0 until N) {\n            remainder = i % 2\n            sum\
    \ = sum + remainder\n            sumStr = sumStr + remainderStr + sum\n      \
    \      remainderStr = if (remainder == 0) \"0\" else \"1\"\n        }\n      \
    \  sumStr\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcoc40vpq.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpcoc40vpq.scala:21:16 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            sum = sum + remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuvvj1_k.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = sum + remainder2\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuuvvj1_k.scala:23:23 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        binary = binary(sum)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Char\n\e[31m   |\e[0m         \
    \        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuuvvj1_k.scala:26:18 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            sum = sum + remainder2 % \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuvvj1_k.scala:29:23 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        binary = binary(sum)\n\e[31m\e[31m   |\e[0m \
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Char\n\
    \e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuuvvj1_k.scala:32:18 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            sum = sum + remainder2 % \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuvvj1_k.scala:35:23\
    \ --------------------\e[0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]\n        while(N /= 10) {\n        \
    \    binary.append(N % 10)\n            sum += N % 10\n            N /= 10\n \
    \       }\n        binary.reverse.foreach(x => sum += x)\n        binary.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6mk1s8g.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps6mk1s8g.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N\
    \ /= \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e[31m  \
    \ |\e[0m              value /= is not a member of Long - did you mean N.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps6mk1s8g.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps6mk1s8g.scala:20:14 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            N /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean N.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659804581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var i = 0\n        while(i\
    \ < N) {\n            remainder = N % 2\n            sum += remainder\n      \
    \      N = N / 2\n            binary = binary + remainder\n            i = i +\
    \ 1\n        }\n        binary = binary + sum\n        binary\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7rgywj3.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            remainder = N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Found:    Long\n\e[31m   |\e[0m              \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmph7rgywj3.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmph7rgywj3.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        for(i <- 0 until N) {\n \
    \           val remainder = N % 2\n            val digit = N / 2\n           \
    \ sum += digit\n            binary.append(remainder)\n            binary.append(digit)\n\
    \            N -= 1\n        }\n        binary.reverse.mkString(\"\").padToLength(N.toInt,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0f_0877n.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0f_0877n.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0f_0877n.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0f_0877n.scala:23:14\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            N -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean N.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = new mutable.ListBuffer[String]()\n\
    \        val digits = N.toString.reverse.grouped(2).map{case (a,b) => a + b.toInt}\n\
    \        val sum = digits.sum\n        val digit = digits.last\n        val remainder\
    \ = digits.dropRight(1)\n        val remainderSum = remainder.sum\n        val\
    \ remainderDigit = remainder.last\n        val remainderRemainder = remainder.dropRight(1)\n\
    \        val remainderRemainderSum = remainderRemainder.sum\n        val remainderRemainderDigit\
    \ = remainderRemainder.last\n        val remainderRemainderRemainder = remainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderSum = remainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderDigit = remainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainder = remainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3dxfh15f.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderSum\e\
    [0m = remainderRemainderRemainderRemainderRemainder.sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderSum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3dxfh15f.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderDigit\e\
    [0m = remainderRemainderRemainderRemainder.last\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderDigit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3dxfh15f.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderRemainder\e\
    [0m = remainderRemainderRemainderRemainder.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderRemainder is already defined\
    \ as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderRemainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3dxfh15f.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemaind"
  stdout: ''
  timestamp: 1659804584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"\"\n            case 1 => digits(0).toBinaryString\n\
    \            case 2 => digits(0).toBinaryString + digits(1).toBinaryString\n \
    \           case 3 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\n\
    \            case 4 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString\n            case 5 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString\n            case 6 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString\n            case 7 =>\
    \ digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\
    \ + digits(6).toBinaryString\n            case 8 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString\n            case 9 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString + digits(8).toBinaryString\n        }\n        result\
    \ + sumOfDigits.toBinaryString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => digits(\e\
    [31m0\e[0m).toBinaryString\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:20:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m \e[31m2\e[0m => digits(\e[31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:21:22 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m3\e[0m => digits(\e\
    [31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString + digits(\e[31m2\e\
    [0m).toBinaryString\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      \e[33mvalue\e[0m \e[35mdigits\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:22:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e\
    [0m \e[31m4\e[0m => digits(\e[31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString\
    \ + digits(\e[31m2\e[0m).toBinaryString + digits(\e[31m3\e[0m).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:23:22 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m \e[31m5\e[0m => digits(\e\
    [31m0\e[0"
  stdout: ''
  timestamp: 1659804578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"\"\n            case 1 => digits(0).toBinaryString\n\
    \            case 2 => digits(0).toBinaryString + digits(1).toBinaryString\n \
    \           case 3 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\n\
    \            case 4 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString\n            case 5 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString\n            case 6 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString\n            case 7 =>\
    \ digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\
    \ + digits(6).toBinaryString\n            case 8 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString\n            case 9 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString + digits(8).toBinaryString\n        }\n        result\
    \ + sumOfDigits.toBinaryString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => digits(\e\
    [31m0\e[0m).toBinaryString\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:20:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m \e[31m2\e[0m => digits(\e[31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:21:22 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m3\e[0m => digits(\e\
    [31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString + digits(\e[31m2\e\
    [0m).toBinaryString\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      \e[33mvalue\e[0m \e[35mdigits\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:22:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e\
    [0m \e[31m4\e[0m => digits(\e[31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString\
    \ + digits(\e[31m2\e[0m).toBinaryString + digits(\e[31m3\e[0m).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpahky1dtc.scala:23:22 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m \e[31m5\e[0m => digits(\e\
    [31m0\e[0"
  stdout: ''
  timestamp: 1659804578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0){\n          \
    \  val remainder = N % 2\n            N /= 2\n            sum += remainder\n \
    \           binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \") + sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtoldz8c.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtoldz8c.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgtoldz8c.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = scala.collection.mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ N) {\n            val temp = scala.math.pow(10, i).toInt\n            val remainder\
    \ = N - i\n            val remainderDigit = scala.math.pow(10, remainder).toInt\n\
    \            val sumDigit = temp + remainderDigit\n            sum += sumDigit\n\
    \            binary.append(sumDigit.toString)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0s_2rec.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy0s_2rec.scala:22:16 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            sum += sumDigit\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]\n        while(N /= 10) {\n        \
    \    binary.append(N % 10)\n            sum += N % 10\n            N /= 10\n \
    \       }\n        binary.reverse.foreach(x => sum += x)\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xgdw0dp.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xgdw0dp.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N\
    \ /= \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e[31m  \
    \ |\e[0m              value /= is not a member of Long - did you mean N.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xgdw0dp.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9xgdw0dp.scala:20:14 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            N /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean N.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        digits.foreach(x => sum += x)\n        sum.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo91f8332.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        digits.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                value += is not a member of Int - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayBuffer[String]()\n        var remainder = N\n    \
    \    while(true){\n            val remainder1 = remainder % 2\n            val\
    \ remainder2 = remainder / 2\n            val remainder3 = remainder2 / 2\n  \
    \          val remainder4 = remainder3 / 2\n            val remainder5 = remainder4\
    \ / 2\n            val remainder6 = remainder5 / 2\n            val remainder7\
    \ = remainder6 / 2\n            val remainder8 = remainder7 / 2\n            val\
    \ remainder9 = remainder8 / 2\n            val remainder10 = remainder9 / 2\n\
    \            val remainder11 = remainder10 / 2\n            val remainder12 =\
    \ remainder11 / 2\n            val remainder13 = remainder12 / 2\n           \
    \ val remainder14 = remainder13 / 2\n            val remainder15 = remainder14\
    \ / 2\n            val remainder16 = remainder15 / 2\n            val remainder17\
    \ = remainder16 / 2\n            val remainder18 = remainder17 / 2\n         \
    \   val remainder19 = remainder18 / 2\n            val remainder20 = remainder19\
    \ / 2\n            val remainder21 = remainder20 / 2\n            val remainder22\
    \ = remainder21 / 2\n            val remainder23 = remainder22 / 2\n         \
    \   val remainder24 = remainder23 / 2\n            val remainder25 = remainder24\
    \ / 2\n            val remainder26 = remainder25 / 2\n            val remainder27\
    \ = remainder26 / 2\n            val remainder28 = remainder27 / 2\n         \
    \   val remainder29 = remainder28 / 2\n            val remainder30 = remainder29\
    \ / 2\n            val remainder31 = remainder30 / 2\n            val remainder32\
    \ = remainder31 / 2\n            val remainder33 = remainder32 / 2\n         \
    \   val remainder34 = remainder33 / 2\n            val remainder35 = remainder34\
    \ / 2\n            val remainder36 = remainder35 / 2\n            val remainder37\
    \ = remainder36 / 2\n            val remainder38 = remainder37 / 2\n         \
    \   val remainder39 = remainder38 / 2\n            val remainder40 = remainder39\
    \ / 2\n            val remainder41 = remainder40 / 2\n            val remainder42\
    \ = remain\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5isvpoja.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5isvpoja.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mbinary\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5isvpoja.scala:60:30 ------------------------\e[0m\e\
    [0m\n\e[31m60 |\e[0m            \e[33mval\e[0m \e[36mremainder42\e[0m = remain\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: remain\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5isvpoja.scala:70:1 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp5isvpoja.scala:62:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659804581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N /= 10) {\n      \
    \      val remainder = N % 10\n            sum += remainder\n            binary.append(remainder)\n\
    \            N = (N - remainder) / 10\n        }\n        val result = sum.toBinaryString\n\
    \        binary.reverse.foreach(x => result += x)\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5oectvfr.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5oectvfr.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N\
    \ /= \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e[31m  \
    \ |\e[0m              value /= is not a member of Long - did you mean N.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp5oectvfr.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5oectvfr.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N = (N -\
    \ remainder) / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x\
    \ => if (x == 0) \"0\" else x.toString.reverse).mkString(\"\")\n        val result\
    \ = if (sum == 0) \"0\" else result\n        val result = if (sum < 10) result\
    \ + sum.toString else result\n        val result = if (sum < 100) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head else result\n        val result = if (sum <\
    \ 1000) result + sum.toString.reverse.head + sum.toString.reverse.tail.head +\
    \ sum.toString.reverse.tail.tail.head else result\n        val result = if (sum\
    \ < 10000) result + sum.toString.reverse.head + sum.toString.reverse.tail.head\
    \ + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ else result\n        val result = if (sum < 100000) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head else result\n        val result\
    \ = if (sum < 1000000) result + sum.toString.reverse.head + sum.toString.reverse.tail.head\
    \ + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head + sum.toString.reverse.tail.tail.tail.tail.tail.head\
    \ else result\n        val result = if (sum < 10000000) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head + sum.toString.reverse.tail.tail.tail.tail.tail.head\
    \ else result\n        val result = if (sum < 100000000) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head + sum.toString.reverse.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvr50nd0.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (sum == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvr50nd0.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = \e[33mif\e[0m (sum < \e[31m10\e[0m) result + sum.toString\
    \ \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfvr50nd0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (sum < \e\
    [31m100\e[0m) result + sum.toString.reverse.head + sum.toString.reverse.tail.head\
    \ \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfvr50nd0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (sum < \e\
    [31m1000\e[0m) result + sum.toString.reverse.head + sum.toString.reverse.tail.head\
    \ + sum.toString.reverse.tail.tail.head \e[33melse\e[0m result\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumOfDigits = 0\n        var sumOfDigitsInBinary = 0\n        var binaryString\
    \ = \"\"\n        var remainder = 0\n        while(sum < N) {\n            val\
    \ remainder = N % 10\n            N /= 10\n            sum += remainder\n    \
    \        sumOfDigits += remainder\n            sumOfDigitsInBinary += remainder\n\
    \            binaryString += remainder\n        }\n        val remainderOfSum\
    \ = sum % 10\n        val remainderOfSumOfDigits = sumOfDigits % 10\n        val\
    \ remainderOfSumOfDigitsInBinary = sumOfDigitsInBinary % 10\n        val remainderOfSumOfDigitsInBinaryString\
    \ = remainderOfSumOfDigits % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinary % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryString % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinary % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryString % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinary % 10\n        val\
    \ remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryString % 10\n  \
    \      val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinary %\
    \ 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinary\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv5si343b.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            N /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv5si343b.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpv5si343b.scala:24:24 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m            sumOfDigits += remainder\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv5si343b.scala:25:32\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            sumOfDigitsInBinary\
    \ += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5si343b.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659804584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = 0\n     \
    \   var remainder3 = 0\n        var remainder4 = 0\n        var remainder5 = 0\n\
    \        var remainder6 = 0\n        var remainder7 = 0\n        var remainder8\
    \ = 0\n        var remainder9 = 0\n        var remainder10 = 0\n        var remainder11\
    \ = 0\n        var remainder12 = 0\n        var remainder13 = 0\n        var remainder14\
    \ = 0\n        var remainder15 = 0\n        var remainder16 = 0\n        var remainder17\
    \ = 0\n        var remainder18 = 0\n        var remainder19 = 0\n        var remainder20\
    \ = 0\n        var remainder21 = 0\n        var remainder22 = 0\n        var remainder23\
    \ = 0\n        var remainder24 = 0\n        var remainder25 = 0\n        var remainder26\
    \ = 0\n        var remainder27 = 0\n        var remainder28 = 0\n        var remainder29\
    \ = 0\n        var remainder30 = 0\n        var remainder31 = 0\n        var remainder32\
    \ = 0\n        var remainder33 = 0\n        var remainder34 = 0\n        var remainder35\
    \ = 0\n        var remainder36 = 0\n        var remainder37 = 0\n        var remainder38\
    \ = 0\n        var remainder39 = 0\n        var remainder40 = 0\n        var remainder41\
    \ = 0\n        var remainder42 = 0\n        var remainder43 = 0\n        var remainder44\
    \ = 0\n        var remainder45 = 0\n        var remainder46 = 0\n        var remainder47\
    \ = 0\n        var remainder48 = 0\n        var remainder49 = 0\n        var remainder50\
    \ = 0\n        var remainder51 = 0\n        var remainder52 = 0\n        var remainder53\
    \ = 0\n        var remainder54 = 0\n        var remainder55 = 0\n        var remainder56\
    \ = 0\n        var remainder57 = 0\n        var remainder58 = 0\n        var remainder59\
    \ = 0\n        var remainder60 = 0\n        var remainder61 = 0\n        var remainder62\
    \ = 0\n        var remainder63 = 0\n        var remainder64 = 0\n        var remainder65\
    \ = 0\n        var remainder66 = 0\n        var remainder67 = 0\n        var remainder68\
    \ = 0\n        var remainder69 = 0\n        var remainder70 = 0\n        var remainder71\
    \ = 0\n        var remainder72 = 0\n        var remainder73 = 0\n        var remainder74\
    \ = 0\n        var remainder75 = 0\n        var remainder76 = 0\n        var remainder77\
    \ = 0\n        var remainder78 = 0\n        var remainder79 = 0\n        var remainder80\
    \ = 0\n        var remainder81 = 0\n        var remainder82 = 0\n        var remainder83\
    \ = 0\n        var remainder84 = 0\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qx7tcqo.scala:102:5\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.HashMap[Int, String]()\n        val binary = N.toString.reverse.foldLeft(new\
    \ mutable.HashMap[Int, String]())((acc, x) => {\n            val digit = x.toInt\n\
    \            val sum = acc.getOrElse(digit, 0)\n            val bin = sum.toString\
    \ + x.toString\n            acc.put(digit, bin)\n            acc\n        })\n\
    \        binary.values.toList.reverse.foldLeft(\"\")(_ + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8n_g34aa.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = N.toString.reverse.foldLeft(\e\
    [33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]())((\e[36macc\e\
    [0m, \e[36mx\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mbinary\
    \ is already defined as \e[33mvalue\e[0m \e[35mbinary\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mdigit\e\
    [0m = x.toInt\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = acc.getOrElse(digit,\
    \ \e[31m0\e[0m)\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mbin\e[0m = sum.toString\
    \ + x.toString\n\e[31m21 |\e[0m            acc.put(digit, bin)\n\e[31m22 |\e[0m\
    \            acc\n\e[31m23 |\e[0m        })\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8n_g34aa.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val sum = 0\n        val result\
    \ = new mutable.ListBuffer[String]\n        for(i <- 0 to binary.length-1){\n\
    \            val temp = binary(i).toInt\n            sum += temp\n           \
    \ if(sum > 9){\n                val temp = sum.toString.toInt\n              \
    \  val temp = temp.toBinaryString\n                val temp = temp.reverse\n \
    \               val temp = temp + temp\n                result += temp\n     \
    \           sum = 0\n            }\n        }\n        binary.reverse\n      \
    \  binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjntflohm.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbinary\
    \ is already defined as \e[33mvalue\e[0m \e[35mbinary\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjntflohm.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjntflohm.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            sum += temp\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjntflohm.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mtemp\e[0m = temp.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjntflohm.scala:25:20 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mval\e[0m \e[36mtemp\e[0m = temp.reverse\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtemp\
    \ is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjntflohm.scala:26:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            "
  stdout: ''
  timestamp: 1659804584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N >=0){\n            val remainder = N % 2\n\
    \            sum += remainder\n            N /= 2\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppxb70s81.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppxb70s81.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmppxb70s81.scala:21:19 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            binary.append(remainder)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (binary : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (binary : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n3 errors found\n"
  stdout: ''
  timestamp: 1659804584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sums = mutable.ArrayBuffer.empty[Int]\n\
    \        var sum = 0\n        for(i <- 0 until N) {\n            val digit = i\
    \ % 10\n            sum += digit\n            sums += digit\n        }\n     \
    \   val result = sums.toString.reverse.foldLeft(\"\")(_ + _ + _)\n        sums.clear()\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplexf5paj.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplexf5paj.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until N) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (N : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 0) \"0\" else \"1\")\n        val result = binaryDigits.take(sumOfDigits).reverse.mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplrk1a_gb.scala:18:52 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = binaryDigits.take(sumOfDigits).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var sumOfDigits = 0\n        while(N >0) {\n        \
    \    sumOfDigits += N % 2\n            N /= 2\n        }\n        while(sumOfDigits\
    \ > 0) {\n            binary += (sumOfDigits % 2).toString\n            sumOfDigits\
    \ /= 2\n        }\n        binary\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnykczihz.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sumOfDigits += N % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpnykczihz.scala:20:14 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            N /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean N.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]\n        while(N >0){\n            val\
    \ temp = N % 10\n            sum += temp\n            binary.append(temp.toString)\n\
    \            N = N / 10\n        }\n        val result = sum.toString\n      \
    \  binary.reverse.foreach(x => result += x)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5usa2ns.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx5usa2ns.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += temp\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpx5usa2ns.scala:21:14 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            N = N / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.LinkedList[String]()\n        for(i <- 0 until N) {\n \
    \           val digit = i % 10\n            sum += digit\n            binary.addLast(digit.toString)\n\
    \        }\n        binary.reverse.foldLeft(sum.toString) { (acc, digit) => acc\
    \ + (digit.charAt(0).toInt * Math.pow(10, digit.lastIndexOf(\"1\") - digit.lastIndexOf(\"\
    0\") + 1))}\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0z3oexh.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa0z3oexh.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpa0z3oexh.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while (i < binary.length) {\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \          i += 1\n        }\n        val result = sum.toBinaryString\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmped2dvrq4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += digit.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        var i = 0\n        while(i < N) {\n            sum +=\
    \ N % 10\n            N = (N / 10).toLong\n            i += 1\n        }\n   \
    \     sumStr += sum.toString\n        sumStr.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8glda6se.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8glda6se.scala:20:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            N = (N /\
    \ \e[31m10\e[0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N) {\n            val temp = N % 10\n\
    \            sum += temp\n            binary += temp.toString\n            N /=\
    \ 10\n        }\n        if(sum > 0) {\n            binary += sum.toString\n \
    \       }\n        return binary\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9thsl5h.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpu9thsl5h.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += temp\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu9thsl5h.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 0) \"0\" else \"1\")\n        val result = binaryDigits.take(sumOfDigits).mkString(\"\
    \")\n        result + (if (sumOfDigits == 0) \"\" else \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeypfrlxg.scala:22)\n\tat Problem.main(tmpeypfrlxg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N /= 10) {\n      \
    \      val remainder = N % 10\n            sum += remainder\n            binary.append(remainder)\n\
    \            N = (N - remainder) / 10\n        }\n        binary.reverse.mkString(\"\
    \") + sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_lseq6s.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_lseq6s.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N\
    \ /= \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e[31m  \
    \ |\e[0m              value /= is not a member of Long - did you mean N.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_lseq6s.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpj_lseq6s.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N = (N -\
    \ remainder) / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]()\n        while(N !=0){\n        \
    \    val temp = N % 10\n            sum += temp\n            binary.append(temp.toString)\n\
    \            N = N / 10\n        }\n        val result = sum.toString\n      \
    \  binary.reverse.foreach(x => result += x)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkv1y9sax.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv1y9sax.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += temp\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpkv1y9sax.scala:21:14 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            N = N / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N) {\n            val digit = math.pow(2,i)\n\
    \            sum += digit\n            binary += digit.toString\n        }\n \
    \       binary = binary.reverse\n        binary.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpynw0g_qy.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpynw0g_qy.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ sum = 0\n        while(N /= 10) {\n            digits.append(N % 10)\n     \
    \       sum += N % 10\n            N = (N / 10).toInt\n        }\n        while(sum\
    \ > 0) {\n            binary.append(digits.takeWhile(_ > 0).mkString(\"\"))\n\
    \            sum -= digits.takeWhile(_ > 0).sum\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5dnyc34.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m(N /= \e[31m10\e[0m) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              value /= is\
    \ not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpo5dnyc34.scala:19:19 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            digits.append(N % \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: Int*): (digits : scala.collection.mutable.ListBuffer[Int])\n\
    \e[31m   |\e[0m (elem: Int): (digits : scala.collection.mutable.ListBuffer[Int])\n\
    \e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo5dnyc34.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpo5dnyc34.scala:21:14 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            N = (N / \e[31m10\e[0m).toInt\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5dnyc34.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            sum -= digits.takeWhile(_\
    \ > \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            value -= is not a member of Int - did you mean sum.!=?\n5\
    \ errors found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumOfDigits = 0\n        var binaryString = \"\"\n        var remainder = 0\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ digitCount = digits.count\n        val digitSum = digits.sum\n        val digitSumOfDigits\
    \ = digitSum / digitCount\n        val digitSumOfDigitsToOne = digitSumOfDigits\
    \ + 1\n        val digitSumOfDigitsToTwo = digitSumOfDigitsToOne * 2\n       \
    \ val digitSumOfDigitsToFour = digitSumOfDigitsToTwo * 4\n        val digitSumOfDigitsToEight\
    \ = digitSumOfDigitsToFour * 8\n        val digitSumOfDigitsToEightToOne = digitSumOfDigitsToEight\
    \ / 2\n        val digitSumOfDigitsToEightToTwo = digitSumOfDigitsToEightToOne\
    \ * 2\n        val digitSumOfDigitsToEightToFour = digitSumOfDigitsToEightToTwo\
    \ * 4\n        val digitSumOfDigitsToEightToEight = digitSumOfDigitsToEightToFour\
    \ * 8\n        val digitSumOfDigitsToEightToEightToOne = digitSumOfDigitsToEightToEight\
    \ / 2\n        val digitSumOfDigitsToEightToEightToTwo = digitSumOfDigitsToEightToEightToOne\
    \ * 2\n        val digitSumOfDigitsToEightToEightToFour = digitSumOfDigitsToEightToEightToTwo\
    \ * 4\n        val digitSumOfDigitsToEightToEightToEight = digitSumOfDigitsToEightToEightToFour\
    \ * 8\n        val digitSumOfDigitsToEightToEightToEightToOne = digitSumOfDigitsToEightToEightToEight\
    \ / 2\n        val digitSumOfDigitsToEightToEightToEightToTwo = digitSumOfDigitsToEightToEightToEightToOne\
    \ * 2\n        val digitSumOfDigitsToEightToEightToEightToFour = digitSumOfDigitsToEightToEightToEightToTwo\
    \ * 4\n        val digitSumOfDigitsToEightToEightToEightToEight = digitSumOfDig\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpd9qq7o0j.scala:22:40 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdigitSumOfDigits\e[0m =\
    \ digitSum / digitCount\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m/\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments ((digitCount : (Int => Boolean) => Int))\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd9qq7o0j.scala:38:59 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mdigitSumOfDigitsToEightToEightToEightToEight\e\
    [0m = digitSumOfDig\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                               Not found: digitSumOfDig\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9qq7o0j.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = N\n        while (remainder > 0) {\n\
    \            sum += (remainder % 2)\n            binary = remainder + binary\n\
    \            remainder = remainder / 2\n        }\n        binary = binary.reverse\n\
    \        sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmocg95f.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += (remainder % \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]\n        for(i <- 0 until N) {\n   \
    \         val remainder = N % 2\n            val digit = N / 2\n            sum\
    \ += digit\n            binary.append(remainder)\n            binary.append(digit)\n\
    \            N = N / 2\n        }\n        binary.reverse.mkString(\"\")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoietyo0k.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoietyo0k.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpoietyo0k.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoietyo0k.scala:23:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            N = N /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 to binary.length-1){\n            sum\
    \ += binary(i)\n        }\n        sum.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvrkr8pr6.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary(i)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.LinkedList[String]()\n        for(i <- 0 until N) {\n \
    \           val digit = i % 10\n            sum += digit\n            binary.addLast(digit.toString)\n\
    \        }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp6drovdn.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpp6drovdn.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6drovdn.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until N) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (N : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6drovdn.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var i = N\n        while (i > 0) {\n            val remainder\
    \ = i % 2\n            sum = sum + remainder\n            i = i / 2\n        \
    \    binary = binary + remainder\n        }\n        binary = binary.reverse\n\
    \        binary.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4hu193vo.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = sum + remainder\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder1 = 0\n     \
    \   var remainder2 = 0\n        var remainder3 = 0\n        var remainder4 = 0\n\
    \        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvu3jrr4f.scala:102:5\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while (i < binary.length) {\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \          i += 1\n        }\n        binary.reverse.foldLeft(\"\")(_ + _ + _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz0alvhq6.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += digit.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpz0alvhq6.scala:23:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        binary.reverse.foldLeft(\e\
    [31m\"\"\e[0m)(_ + _ + _)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 to binary.length-1){\n            val\
    \ temp = binary.charAt(i).toInt\n            sum += temp\n        }\n        binary.reverse\n\
    \        binary.toString + sum.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpewx6k13d.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += temp\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N) {\n            val digit = N % 10\n\
    \            sum += digit\n            binary += digit.toString\n            N\
    \ /= 10\n        }\n        if(sum > 0) {\n            binary += sum.toString\n\
    \        }\n        binary\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpantzza88.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpantzza88.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpantzza88.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = 0\n     \
    \   var remainder3 = 0\n        var remainder4 = 0\n        var remainder5 = 0\n\
    \        var remainder6 = 0\n        var remainder7 = 0\n        var remainder8\
    \ = 0\n        var remainder9 = 0\n        var remainder10 = 0\n        var remainder11\
    \ = 0\n        var remainder12 = 0\n        var remainder13 = 0\n        var remainder14\
    \ = 0\n        var remainder15 = 0\n        var remainder16 = 0\n        var remainder17\
    \ = 0\n        var remainder18 = 0\n        var remainder19 = 0\n        var remainder20\
    \ = 0\n        var remainder21 = 0\n        var remainder22 = 0\n        var remainder23\
    \ = 0\n        var remainder24 = 0\n        var remainder25 = 0\n        var remainder26\
    \ = 0\n        var remainder27 = 0\n        var remainder28 = 0\n        var remainder29\
    \ = 0\n        var remainder30 = 0\n        var remainder31 = 0\n        var remainder32\
    \ = 0\n        var remainder33 = 0\n        var remainder34 = 0\n        var remainder35\
    \ = 0\n        var remainder36 = 0\n        var remainder37 = 0\n        var remainder38\
    \ = 0\n        var remainder39 = 0\n        var remainder40 = 0\n        var remainder41\
    \ = 0\n        var remainder42 = 0\n        var remainder43 = 0\n        var remainder44\
    \ = 0\n        var remainder45 = 0\n        var remainder46 = 0\n        var remainder47\
    \ = 0\n        var remainder48 = 0\n        var remainder49 = 0\n        var remainder50\
    \ = 0\n        var remainder51 = 0\n        var remainder52 = 0\n        var remainder53\
    \ = 0\n        var remainder54 = 0\n        var remainder55 = 0\n        var remainder56\
    \ = 0\n        var remainder57 = 0\n        var remainder58 = 0\n        var remainder59\
    \ = 0\n        var remainder60 = 0\n        var remainder61 = 0\n        var remainder62\
    \ = 0\n        var remainder63 = 0\n        var remainder64 = 0\n        var remainder65\
    \ = 0\n        var remainder66 = 0\n        var remainder67 = 0\n        var remainder68\
    \ = 0\n        var remainder69 = 0\n        var remainder70 = 0\n        var remainder71\
    \ = 0\n        var remainder72 = 0\n        var remainder73 = 0\n        var remainder74\
    \ = 0\n        var remainder75 = 0\n        var remainder76 = 0\n        var remainder77\
    \ = 0\n        var remainder78 = 0\n        var remainder79 = 0\n        var remainder80\
    \ = 0\n        var remainder81 = 0\n        var remainder82 = 0\n        var remainder83\
    \ = 0\n        var remainder84 = 0\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qx7tcqo.scala:102:5\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sums = mutable.HashMap[Int,\
    \ Int]()\n        val digits = N.toString.reverse.map(_.toInt)\n        val len\
    \ = digits.length\n        val sum = 0\n        val sumOfDigits = 0 // sum of\
    \ digits in the binary number\n        val sumOfDigitsInBinary = 0 // sum of digits\
    \ in the binary number in binary\n        val sumOfDigitsInBinaryInBinary = 0\
    \ // sum of digits in the binary number in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary\n  \
    \      val sumOfDigitsInBinaryInBinaryInBinaryInBinary = 0 // sum of digits in\
    \ the binary number in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvyjyevjw.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvyjyevjw.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36msums\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvyjyevjw.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        var remainder = 0\n        var remainderSum = 0\n\
    \        var lastDigit = 0\n        var lastDigitSum = 0\n        var lastDigitSumLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigit = 0\n        var lastDigitSumLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigit = 0\n    \
    \    var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigit = 0\n     \
    \   var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0\n\
    \        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigit\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo0tavxts.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo0tavxts.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpo0tavxts.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpo0tavxts.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastDigitSumLastDigitLastDigitL"
  stdout: ''
  timestamp: 1659804596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        val bin2 = bin.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin3 = bin2.map(x => if (x == '1') 1\
    \ else 0)\n        val bin4 = bin3.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin5 = bin4.map(x => if (x == '1') 1 else 0)\n        val bin6 = bin5.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin7 = bin6.map(x => if (x == '1') 1\
    \ else 0)\n        val bin8 = bin7.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin9 = bin8.map(x => if (x == '1') 1 else 0)\n        val bin10 = bin9.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin11 = bin10.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin12 = bin11.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin13 = bin12.map(x => if (x == '1') 1 else 0)\n        val bin14 = bin13.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin15 = bin14.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin16 = bin15.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin17 = bin16.map(x => if (x == '1') 1 else 0)\n        val bin18 = bin17.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin19 = bin18.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin20 = bin19.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin21 = bin20.map(x => if (x == '1') 1 else 0)\n        val bin22 = bin21.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin23 = bin22.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin24 = bin23.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin25 = bin24.map(x => if (x == '1') 1 else 0)\n        val bin26 = bin25.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin27 = bin26.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin28 = bin27.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin29 = bin28.map(x => if (x == '1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1j752jnu.scala:45:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mbin29\e[0m = bin28.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == '1\n\e[31m\e[31m   |\e[0m                  \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                 unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmp1j752jnu.scala:47:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1j752jnu.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1j752jnu.scala:47:4 -------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: 1def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmp1j752jnu.scala:46:4 -----------------\e[0m\e[0m\n\e[33m45 |\e\
    [0m        \e[33mval\e[0m \e[36mbin29\e[0m = bin28.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x == '1\n\e[33m46 |\e[0m    }\n\e[33m\e[33m   |\e[0m                    \
    \                          ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659804595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse\n        binary.reverse.takeWhile(_ != '0').mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2rkda4i7.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary.charAt(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(_.toBinaryString).mkString(\"\")\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = if (sumOfDigits == binarySum) binaryDigits else \"\"\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4egbamiz.scala:23)\n\tat Problem.main(tmp4egbamiz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]\n        val remainder = N % 2\n  \
    \      val remainder2 = N / 2\n        val remainder3 = N / 3\n        val remainder4\
    \ = N / 4\n        val remainder5 = N / 5\n        val remainder6 = N / 6\n  \
    \      val remainder7 = N / 7\n        val remainder8 = N / 8\n        val remainder9\
    \ = N / 9\n        val remainder10 = N / 10\n        val remainder11 = N / 11\n\
    \        val remainder12 = N / 12\n        val remainder13 = N / 13\n        val\
    \ remainder14 = N / 14\n        val remainder15 = N / 15\n        val remainder16\
    \ = N / 16\n        val remainder17 = N / 17\n        val remainder18 = N / 18\n\
    \        val remainder19 = N / 19\n        val remainder20 = N / 20\n        val\
    \ remainder21 = N / 21\n        val remainder22 = N / 22\n        val remainder23\
    \ = N / 23\n        val remainder24 = N / 24\n        val remainder25 = N / 25\n\
    \        val remainder26 = N / 26\n        val remainder27 = N / 27\n        val\
    \ remainder28 = N / 28\n        val remainder29 = N / 29\n        val remainder30\
    \ = N / 30\n        val remainder31 = N / 31\n        val remainder32 = N / 32\n\
    \        val remainder33 = N / 33\n        val remainder34 = N / 34\n        val\
    \ remainder35 = N / 35\n        val remainder36 = N / 36\n        val remainder37\
    \ = N / 37\n        val remainder38 = N / 38\n        val remainder39 = N / 39\n\
    \        val remainder40 = N / 40\n        val remainder41 = N / 41\n        val\
    \ remainder42 = N / 42\n        val remainder43 = N / 43\n        val remainder44\
    \ = N / 44\n        val remainder45 = N / 45\n        val remainder46 = N / 46\n\
    \        val remainder47 = N / 47\n        val remainder48 = N / 48\n        val\
    \ remainder49 = N / 49\n        val remainder50 = N / 50\n        val remainder51\
    \ = N / \n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpckzzu6dl.scala:67:29 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mremainder51\e[0m = N / \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpckzzu6dl.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckzzu6dl.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = scala.collection.mutable.ListBuffer[String]()\n        while(N >0)\
    \ {\n            val remainder = N % 2\n            N /= 2\n            sum +=\
    \ remainder\n            binary += remainder.toString\n        }\n        binary.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0k2xzxed.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0k2xzxed.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        while(N !=0){\n          \
    \  remainder = N % 2\n            N = N / 2\n            sum = sum + remainder\n\
    \            binary = binary + remainder\n        }\n        binary = binary +\
    \ sum\n        return binary\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7l9agkhq.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            remainder = N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Found:    Long\n\e[31m   |\e[0m              \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp7l9agkhq.scala:20:14 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.LinkedList[String]\n        for(i <- 0 until N) {\n   \
    \         val remainder = i % 2\n            val digit = i / 2\n            sum\
    \ += digit\n            binary.addLast(remainder.toString)\n        }\n      \
    \  binary.reverse.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqr67s7k2.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqr67s7k2.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqr67s7k2.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val binNum = binary.toList\n        binNum.foreach(x\
    \ => sum += x)\n        binNum.map(x => if (sum == x) \"1\" else \"0\").mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptj7zkcm_.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        binNum.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                value += is not a member of Int - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            remainder = remainder2 % 2\n       \
    \     sum = sum + remainder\n            binary = binary + remainder\n       \
    \     remainder2 = (remainder2 - remainder) / 2\n        }\n        binary = binary\
    \ + sum.toString\n        return binary\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzqcve9vg.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            remainder = remainder2\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m  \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => x.toBinaryString).mkString\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = if (sumOfDigits == binarySum) binaryDigits else \"\"\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp64centmo.scala:23)\n\tat Problem.main(tmp64centmo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.Array[String](N.toInt)\n        for(i <- 0 until N.toInt){\n\
    \            val remainder = N % 2\n            val digit = N / 2\n          \
    \  sum += digit\n            binary(i) = remainder.toString\n            N = N\
    \ / 2\n        }\n        binary.toList.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61zpbfye.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mString\e[0m](N.toInt)\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61zpbfye.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmp61zpbfye.scala:22:14 -----------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var i = 0\n        while(i\
    \ < N) {\n            remainder = N % 2\n            N = N / 2\n            sum\
    \ = sum + remainder\n            binary = binary + remainder\n            i =\
    \ i + 1\n        }\n        binary = binary + sum\n        return binary\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyjg47kox.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            remainder = N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Found:    Long\n\e[31m   |\e[0m              \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpyjg47kox.scala:21:14 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayBuffer[String]()\n        for(i <- 0 until N) {\n\
    \            val remainder = N % 2\n            val digit = N / 2\n          \
    \  sum += digit\n            binary.append(remainder)\n            N = digit\n\
    \        }\n        binary.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkkwf3gk.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgkkwf3gk.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgkkwf3gk.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgkkwf3gk.scala:22:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            N = digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n         \
    \   val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcf34z1bb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcf34z1bb.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcf34z1bb.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayList[String]\n        for(i <- 0 until N) {\n    \
    \        val digit = math.pow(10, i).toInt\n            sum += digit\n       \
    \     binary.add(digit.toString)\n        }\n        binary.toList.map(_.length).sum.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegz2u8vi.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpegz2u8vi.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpegz2u8vi.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            sum += digit._1\n            result\
    \ += digit._2\n        }\n        val binary = sum.toString.reverse.grouped(2).map(_.toInt)\n\
    \        binary.foreach { binary =>\n            result += binary._1 + binary._2\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqaehjgz8.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqaehjgz8.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += digit._1\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpqaehjgz8.scala:19:25 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            sum += digit._1\n\e[31m\e[31m   |\e[0m            \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value _1 is not a member\
    \ of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659804608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").reverse\n        val sum = 0\n        val result = new mutable.StringBuilder\n\
    \        for (i <- 0 until digits.length) {\n            val digit = digits(i)\n\
    \            val binary = digits(i).reverse\n            val sum = sum + binary.toInt\n\
    \            if (sum > 9) {\n                result.append((sum / 10).toString\
    \ + binary.toString + digit)\n                sum = sum % 10\n            } else\
    \ {\n                result.append((sum / 10).toString + binary.toString + digit)\n\
    \                sum = sum % 10\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1pr0ejvp.scala:15:63 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = N.toString.reverse.grouped(\e\
    [31m2\e[0m).map(_ + \e[31m\"\"\e[0m).reverse\n\e[31m\e[31m   |\e[0m          \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean Iterator[String].reversed?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pr0ejvp.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp1pr0ejvp.scala:24:20 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                sum = sum % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Reassignment to val sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp1pr0ejvp.scala:27:20 -----------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                sum = sum % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var sumOfDigits = 0\n        var binaryIndex = 0\n\
    \        var binaryString = \"\"\n        while (binaryIndex < binary.length)\
    \ {\n            val digit = binary.charAt(binaryIndex)\n            sum += digit.toInt\n\
    \            sumOfDigits += digit.toInt\n            binaryIndex += 1\n      \
    \  }\n        val result = sum.toBinaryString\n        val resultString = result.substring(0,\
    \ result.length - sumOfDigits)\n        binaryString = binaryString + resultString\n\
    \        binaryString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphnzh_xqw.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum += digit.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   var remainder3 = N\n        var remainder4 = N\n        var remainder5 = N\n\
    \        var remainder6 = N\n        var remainder7 = N\n        var remainder8\
    \ = N\n        var remainder9 = N\n        var remainder10 = N\n        var remainder11\
    \ = N\n        var remainder12 = N\n        var remainder13 = N\n        var remainder14\
    \ = N\n        var remainder15 = N\n        var remainder16 = N\n        var remainder17\
    \ = N\n        var remainder18 = N\n        var remainder19 = N\n        var remainder20\
    \ = N\n        var remainder21 = N\n        var remainder22 = N\n        var remainder23\
    \ = N\n        var remainder24 = N\n        var remainder25 = N\n        var remainder26\
    \ = N\n        var remainder27 = N\n        var remainder28 = N\n        var remainder29\
    \ = N\n        var remainder30 = N\n        var remainder31 = N\n        var remainder32\
    \ = N\n        var remainder33 = N\n        var remainder34 = N\n        var remainder35\
    \ = N\n        var remainder36 = N\n        var remainder37 = N\n        var remainder38\
    \ = N\n        var remainder39 = N\n        var remainder40 = N\n        var remainder41\
    \ = N\n        var remainder42 = N\n        var remainder43 = N\n        var remainder44\
    \ = N\n        var remainder45 = N\n        var remainder46 = N\n        var remainder47\
    \ = N\n        var remainder48 = N\n        var remainder49 = N\n        var remainder50\
    \ = N\n        var remainder51 = N\n        var remainder52 = N\n        var remainder53\
    \ = N\n        var remainder54 = N\n        var remainder55 = N\n        var remainder56\
    \ = N\n        var remainder57 = N\n        var remainder58 = N\n        var remainder59\
    \ = N\n        var remainder60 = N\n        var remainder61 = N\n        var remainder62\
    \ = N\n        var remainder63 = N\n        var remainder64 = N\n        var remainder65\
    \ = N\n        var remainder66 = N\n        var remainder67 = N\n        var remainder68\
    \ = N\n        var remainder69 = N\n        var remainder70 = N\n        var remainder71\
    \ = N\n        var remainder72 = N\n        var remainder73 = N\n        var remainder74\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp51rm2qwt.scala:90:25 ---------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m        \e[33mvar\e[0m \e[36mremainder74\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51rm2qwt.scala:91:5 ---------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          binary.append(N % 10)\n            N /= 10\n        }\n        binary.reverse.foreach(x\
    \ => sum -= x)\n        binary.reverse.foreach(x => sum += x)\n        sum.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_c8dyrm.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N /= \e[31m10\e[0m) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              value /= is\
    \ not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf_c8dyrm.scala:18:16 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpf_c8dyrm.scala:19:19 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            binary.append(N % \e[31m10\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e\
    [0m with types\n\e[31m   |\e[0m (elems: String*): (binary : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (binary : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf_c8dyrm.scala:20:14 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            N /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean N.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_c8dyrm.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        binary.reverse.foreach(\e[36mx\e[0m => sum -=\
    \ x)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value -= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_c8dyrm.scala:23:40\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        binary.reverse.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean Int.!=?\n6 errors found\n"
  stdout: ''
  timestamp: 1659804609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val result = sumOfDigits.toBinaryString\n        result match {\n    \
    \        case \"\" => \"\"\n            case x => x\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkdvl7yx.scala:26)\n\tat Problem.main(tmpmkdvl7yx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.map(_.toInt)\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]()\n\
    \        digits.foreach(x => sum += x)\n        val remainder = sum % 2\n    \
    \    val remainderString = if (remainder == 0) \"0\" else \"\"\n        result\
    \ += \"1\" + remainderString\n        digits.foreach(x => result += x.toString\
    \ + remainderString)\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpap_9l9b6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpap_9l9b6.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        digits.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        while(N !=0){\n          \
    \  remainder = N % 2\n            sum = sum + remainder\n            N = N / 2\n\
    \        }\n        while(sum > 0){\n            binary = binary + Integer.toBinaryString(sum\
    \ % 10)\n            sum = sum / 10\n        }\n        return binary\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0_x8nse.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            remainder = N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Found:    Long\n\e[31m   |\e[0m              \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpj0_x8nse.scala:21:14 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        for(i <- 0 until N) {\n  \
    \          sum = sum + i\n            binary = binary + i.toString(2)\n      \
    \  }\n        for(i <- 0 until N) {\n            remainder = sum % 2\n       \
    \     sum = sum / 2\n            binary = binary + remainder.toString(2)\n   \
    \     }\n        binary\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0el7vf_x.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp0el7vf_x.scala:20:41 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            binary = binary + i.toString(\e[31m2\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m   |\e\
    [0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e\
    [33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0el7vf_x.scala:22:25 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until N) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (N : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp0el7vf_x.scala:25:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            binary = binary + remainder.toString(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n4 errors found\n"
  stdout: ''
  timestamp: 1659804608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        while(N >0){\n            sum = sum + N % 10\n      \
    \      N = N / 10\n        }\n        while(sum > 0){\n            binary = binary\
    \ + sum % 2\n            sum = sum / 2\n        }\n        return binary\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb5f4tpqs.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum = sum + N % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb5f4tpqs.scala:19:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N = N /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        val binLen = bin.length\n\
    \        val binSum = bin.foldLeft(0)(_ + _)\n        val binSumLen = binSum.toBinaryString.length\n\
    \        val binSumLenLen = binSumLen.toBinaryString.length\n        val binSumLenLenLen\
    \ = binSumLenLen.toBinaryString.length\n        val binSumLenLenLenLen = binSumLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLen = binSumLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLen = binSumLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLen = binSumLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpokzyr24m.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mbinSumLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = binSumLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinSumLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mbinSumLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpokzyr24m.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinSumLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = binSumLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinSumLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mbinSumLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpokzyr24m.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = binSumLenLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mbinSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpokzyr24m.scala:29:51 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mbinSumLenLenLenLenL"
  stdout: ''
  timestamp: 1659804608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.HashMap[Int, String]()\n        for(i <- 0 until N) {\n\
    \            val remainder = i % 2\n            val digit = i / 2\n          \
    \  sum += digit\n            binary.put(digit, remainder.toString)\n        }\n\
    \        binary.values.toList.sorted.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3cefgh9o.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3cefgh9o.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3cefgh9o.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ digit = binary.charAt(i)\n            sum += digit.toInt\n        }\n      \
    \  binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiry03fiy.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = 0\n     \
    \   var remainder3 = 0\n        var remainder4 = 0\n        var remainder5 = 0\n\
    \        var remainder6 = 0\n        var remainder7 = 0\n        var remainder8\
    \ = 0\n        var remainder9 = 0\n        var remainder10 = 0\n        var remainder11\
    \ = 0\n        var remainder12 = 0\n        var remainder13 = 0\n        var remainder14\
    \ = 0\n        var remainder15 = 0\n        var remainder16 = 0\n        var remainder17\
    \ = 0\n        var remainder18 = 0\n        var remainder19 = 0\n        var remainder20\
    \ = 0\n        var remainder21 = 0\n        var remainder22 = 0\n        var remainder23\
    \ = 0\n        var remainder24 = 0\n        var remainder25 = 0\n        var remainder26\
    \ = 0\n        var remainder27 = 0\n        var remainder28 = 0\n        var remainder29\
    \ = 0\n        var remainder30 = 0\n        var remainder31 = 0\n        var remainder32\
    \ = 0\n        var remainder33 = 0\n        var remainder34 = 0\n        var remainder35\
    \ = 0\n        var remainder36 = 0\n        var remainder37 = 0\n        var remainder38\
    \ = 0\n        var remainder39 = 0\n        var remainder40 = 0\n        var remainder41\
    \ = 0\n        var remainder42 = 0\n        var remainder43 = 0\n        var remainder44\
    \ = 0\n        var remainder45 = 0\n        var remainder46 = 0\n        var remainder47\
    \ = 0\n        var remainder48 = 0\n        var remainder49 = 0\n        var remainder50\
    \ = 0\n        var remainder51 = 0\n        var remainder52 = 0\n        var remainder53\
    \ = 0\n        var remainder54 = 0\n        var remainder55 = 0\n        var remainder56\
    \ = 0\n        var remainder57 = 0\n        var remainder58 = 0\n        var remainder59\
    \ = 0\n        var remainder60 = 0\n        var remainder61 = 0\n        var remainder62\
    \ = 0\n        var remainder63 = 0\n        var remainder64 = 0\n        var remainder65\
    \ = 0\n        var remainder66 = 0\n        var remainder67 = 0\n        var remainder68\
    \ = 0\n        var remainder69 = 0\n        var remainder70 = 0\n        var remainder71\
    \ = 0\n        var remainder72 = 0\n        var remainder73 = 0\n        var remainder74\
    \ = 0\n        var remainder75 = 0\n        var remainder76 = 0\n        var remainder77\
    \ = 0\n        var remainder78 = 0\n        var remainder79 = 0\n        var remainder80\
    \ = 0\n        var remainder81 = 0\n        var remainder82 = 0\n        var remainder83\
    \ = 0\n        var remainder84 = 0\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qx7tcqo.scala:102:5\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayBuffer[String]()\n        while(N >0) {\n        \
    \    val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        val result = sum.toBinaryString\n\
    \        binary.reverse.foreach(x => result += x)\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7ugn1id.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph7ugn1id.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmph7ugn1id.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   while(true){\n            sum += remainder\n            binary = remainder2.toBinaryString()\
    \ + binary\n            remainder2 = remainder2 % 10\n            if(remainder2\
    \ == 0){\n                break\n            }\n            remainder = sum %\
    \ 2\n            sum = 0\n        }\n        return binary\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpne082j7i.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            binary = remainder2.toBinaryString() + binary\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpne082j7i.scala:24:16 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var i = 0\n        while(i < N) {\n            sum +=\
    \ N % 2\n            N = N / 2\n        }\n        while(sum > 0) {\n        \
    \    binary += sum % 2\n            sum = sum / 2\n        }\n        binary\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfvt0yf3b.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += N % \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfvt0yf3b.scala:20:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            N = N /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(_.toString).mkString(\"\")\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = binarySum.toString.reverse\n        result match {\n   \
    \         case \"\" => \"\"\n            case _ => result\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps_hv7wkd.scala:26)\n\tat Problem.main(tmps_hv7wkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        for(i <- 0 until N) {\n            val digit = N % 2\n\
    \            sum += digit\n            sumStr += digit.toString\n            N\
    \ /= 2\n        }\n        sumStr\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3pptoc6o.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3pptoc6o.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3pptoc6o.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N){\n            sum += i.toBinaryString().length\n\
    \            binary += i.toBinaryString()\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6w0as29e.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6w0as29e.scala:94:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m94 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6w0as29e.scala:17:25 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until N){\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      Found:    (N : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w0as29e.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += i.toBinaryString().length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- Error: /tmp/tmp6w0as29e.scala:18:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     sum += i.toBinaryString().length\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter i of\
    \ \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m:\
    \ (i: Int): Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w0as29e.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            binary += i.toBinaryString()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6w0as29e.scala:19:38 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            binary += i.toBinaryString()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e\
    [35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1659804621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.LinkedList[String]\n        while(N >0){\n            val\
    \ remainder = N % 2\n            sum += remainder\n            N /= 2\n      \
    \      binary.addLast(remainder.toString)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz9pxyvxk.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9pxyvxk.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpz9pxyvxk.scala:20:14 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            N /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(_.toString).mkString(\"\")\n        val binarySum = binaryDigits.reverse.foldLeft(0)(_\
    \ + _)\n        val result = binarySum % 10\n        val result = if (result ==\
    \ 0) \"0\" else result.toString\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjbabm5g4.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (result == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m result.toString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpjbabm5g4.scala:21:8 ---------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (result : Int)\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => sum += x)\n        digits.foreach(x => binary.append(x.toBinaryString))\n\
    \        binary.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpapi0eug8.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpapi0eug8.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        digits.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = scala.collection.mutable.ListBuffer[String]()\n        while(N >0)\
    \ {\n            val digit = N % 10\n            sum += digit\n            binary.append(digit.toString)\n\
    \            N = (N - digit) / 10\n        }\n        val result = sum.toString.reverse.foldLeft(\"\
    \")(_ + _)\n        binary.reverse.foldLeft(result)(_ + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8y6xyga4.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8y6xyga4.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N = (N -\
    \ digit) / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ digit = binary.charAt(i)\n            sum += digit.toInt\n        }\n      \
    \  binary.reverse.foldLeft(\"\"){ (acc, digit) => acc + digit }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30ac36tg.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        for(i <- 0 until digits.size) {\n            sum\
    \ += digits(i)\n        }\n        sum.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph58y445f.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += digits(i)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmph58y445f.scala:18:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += digits(i)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \          \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        var sum = 0\n        while(N >0) {\n            val remainder = N % 2\n\
    \            sum += remainder\n            N /= 2\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkay5cyjy.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkay5cyjy.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpkay5cyjy.scala:21:19 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            binary.append(remainder)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (binary : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (binary : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n3 errors found\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n         \
    \   val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcf34z1bb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcf34z1bb.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcf34z1bb.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ remainder = N / 2\n        val remainderDigits = remainder / 10\n        val\
    \ remainderRemainder = remainder % 10\n        val remainderRemainderDigits =\
    \ remainderRemainder / 2\n        val remainderRemainderRemainder = remainderRemainder\
    \ % 2\n        val remainderRemainderRemainderDigits = remainderRemainderRemainder\
    \ / 2\n        val remainderRemainderRemainderRemainder = remainderRemainderRemainder\
    \ % 2\n        val remainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainder\
    \ / 2\n        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder\
    \ % 2\n        val remainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainder\
    \ / 2\n        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainder\
    \ % 2\n        val remainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainder / 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainder % 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder / 2\n    \
    \    val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n    \
    \    val remainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n    \
    \    val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr1mrykr0.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\e\
    [0m = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr1mrykr0.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = remainderRemainderRemainderRemainderRemainderRemainderRemainder % \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpr1mrykr0.scala:37:5 ---------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        while(N >0) {\n          \
    \  remainder = N % 2\n            N = N / 2\n            sum = sum + remainder\n\
    \            binary = binary + remainder\n        }\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4h68wmdq.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            remainder = N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Found:    Long\n\e[31m   |\e[0m              \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp4h68wmdq.scala:20:14 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4h68wmdq.scala:81:17 --------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        binary = binary.dropRight\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    \e[1m\e[31mInt\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e\
    [1m\e[31m \e[0mString\n\e[31m   |\e[0m                 Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N) {\n            val remainder = N\
    \ % 2\n            val digit = N / 2\n            sum += digit\n            binary\
    \ = remainder + binary\n            N = digit\n        }\n        binary = sum\
    \ + binary\n        binary\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf1zgcv8g.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf1zgcv8g.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpf1zgcv8g.scala:22:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            N = digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"\"\n            case 1 => digits(0).toBinaryString\n\
    \            case 2 => digits(0).toBinaryString + digits(1).toBinaryString\n \
    \           case 3 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\n\
    \            case 4 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString\n            case 5 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString\n            case 6 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString\n            case 7 =>\
    \ digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\
    \ + digits(6).toBinaryString\n            case 8 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString\n            case 9 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString + digits(8).toBinaryString\n        }\n        val\
    \ resultString = result.reverse.grouped(2).map(_.toBinaryString).mkString(\"\"\
    )\n        resultString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoe2r5nbg.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => digits(\e\
    [31m0\e[0m).toBinaryString\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoe2r5nbg.scala:20:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m \e[31m2\e[0m => digits(\e[31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoe2r5nbg.scala:21:22 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m3\e[0m => digits(\e\
    [31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString + digits(\e[31m2\e\
    [0m).toBinaryString\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      \e[33mvalue\e[0m \e[35mdigits\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoe2r5nbg.scala:22:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e\
    [0m \e[31m4\e[0m => digits(\e[31m0\e[0m).toBinaryString + digits(\e[31m1\e[0m).toBinaryString\
    \ + digits(\e[31m2\e[0m).toBinaryString + digits(\e[31m3\e[0m).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoe2r5nbg.scala:23:22 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m \e[31m5\e[0m => digits(\e\
    [31m0\e[0"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary(i).toInt\n        }\n        binary.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpambnn439.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary(i).toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]\n        while(N >=0){\n          \
    \  val remainder = N % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \            N = N / 2\n        }\n        val result = sum.toBinaryString\n \
    \       binary.reverse.foreach(x => result += x)\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2o8wp6c3.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2o8wp6c3.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmp2o8wp6c3.scala:21:14 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 0) \"0\" else \"1\")\n        val binarySum = binaryDigits.foldLeft(0)(_\
    \ + _)\n        val binarySumString = binarySum.toString.reverse\n        val\
    \ binarySumStringLength = binarySumString.length\n        val binarySumStringWithZeros\
    \ = binarySumString.padTo(binarySumStringLength, \"0\")\n        val binarySumStringWithOnes\
    \ = binarySumString.padTo(binarySumStringLength, \"1\")\n        val binarySumStringWithZerosAndOnes\
    \ = binarySumStringWithZeros + binarySumStringWithOnes\n        val binarySumStringWithZerosAndOnesLength\
    \ = binarySumStringWithZerosAndOnes.length\n        val binarySumStringWithZerosAndOnesWithZeros\
    \ = binarySumStringWithZerosAndOnes.padTo(binarySumStringWithZerosAndOnesLength,\
    \ \"0\")\n        val binarySumStringWithZerosAndOnesWithOnes = binarySumStringWithZerosAndOnesWithZeros\
    \ + binarySumStringWithOnes\n        val binarySumStringWithZerosAndOnesWithOnesLength\
    \ = binarySumStringWithZerosAndOnesWithOnes.length\n        val binarySumStringWithZerosAndOnesWithOnesWithZeros\
    \ = binarySumStringWithZerosAndOnesWithOnes.padTo(binarySumStringWithZerosAndOnesWithOnesLength,\
    \ \"0\")\n        val binarySumStringWithZerosAndOnesWithOnesWithOnes = binarySumStringWithZerosAndOnesWithOnesWithZeros\
    \ + binarySumStringWithOnes\n        val binarySumStringWithZerosAndOnesWithOnesWithOnesLength\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnes.length\n        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithZeros\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnes.padTo(binarySumStringWithZerosAndOnesWithOnesWithOnesLength,\
    \ \"0\")\n        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnes\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnesWithZeros + binarySumStringWithOnes\n\
    \        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength = binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength\n\
    \        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesWithZeros\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesWith\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuhs7jnbf.scala:18:49\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbinarySum\e\
    [0m = binaryDigits.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m      \
    \                                           ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                           Found:    String\n\e[31m   |\e[0m\
    \                                                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhs7jnbf.scala:23:71 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbinarySumStringWithZerosAndOnes\e\
    [0m = binarySumStringWithZeros + binarySumStringWithOnes\n\e[31m\e[31m   |\e[0m\
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of IndexedSeq[Matchable], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpuhs7jnbf.scala:33:76 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mbinarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength\e\
    [0m = binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mbinarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuhs7jnbf.scala:34:79\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mbinarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesWith"
  stdout: ''
  timestamp: 1659804622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]()\n        for(i <- 0 until N) {\n\
    \            val remainder = N % 2\n            sum += remainder\n           \
    \ binary.append(remainder)\n            N /= 2\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbya86y27.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbya86y27.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbya86y27.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbya86y27.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary.charAt(i)\n            sum += c.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.foldLeft(\"\"){(acc, c) => acc + (if (c == '1') 1 else\
    \ 0)}\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvqnfgav.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += c.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x\
    \ => x.toString.reverse.charAt(0)).mkString\n        result + sum.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6uqs05qe.scala:22)\n\tat Problem.main(tmp6uqs05qe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.length.toInt){\n            sum\
    \ += binary(i).toInt\n        }\n        sum.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuwgo9lf4.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- binary.length.toInt){\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659804625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n         \
    \   val remainder = N % 2\n            sum += remainder\n            N /= 2\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \") + sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpreq2g2st.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpreq2g2st.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpreq2g2st.scala:20:14 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            N /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\"\n\
    \        var remainderStr2 = \"\"\n        var remainderStr3 = \"\"\n        var\
    \ remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n        var remainderStr6\
    \ = \"\"\n        var remainderStr7 = \"\"\n        var remainderStr8 = \"\"\n\
    \        var remainderStr9 = \"\"\n        var remainderStr10 = \"\"\n       \
    \ var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\n        var remainderStr13\
    \ = \"\"\n        var remainderStr14 = \"\"\n        var remainderStr15 = \"\"\
    \n        var remainderStr16 = \"\"\n        var remainderStr17 = \"\"\n     \
    \   var remainderStr18 = \"\"\n        var remainderStr19 = \"\"\n        var\
    \ remainderStr20 = \"\"\n        var remainderStr21 = \"\"\n        var remainderStr22\
    \ = \"\"\n        var remainderStr23 = \"\"\n        var remainderStr24 = \"\"\
    \n        var remainderStr25 = \"\"\n        var remainderStr26 = \"\"\n     \
    \   var remainderStr27 = \"\"\n        var remainderStr28 = \"\"\n        var\
    \ remainderStr29 = \"\"\n        var remainderStr30 = \"\"\n        var remainderStr31\
    \ = \"\"\n        var remainderStr32 = \"\"\n        var remainderStr33 = \"\"\
    \n        var remainderStr34 = \"\"\n        var remainderStr35 = \"\"\n     \
    \   var remainderStr36 = \"\"\n        var remainderStr37 = \"\"\n        var\
    \ remainderStr38 = \"\"\n        var remainderStr39 = \"\"\n        var remainderStr40\
    \ = \"\"\n        var remainderStr41 = \"\"\n        var remainderStr42 = \"\"\
    \n        var remainderStr43 = \"\"\n        var remainderStr44 = \"\"\n     \
    \   var remainderStr45 = \"\"\n        var remainderStr46 = \"\"\n        var\
    \ remainderStr47 = \"\"\n        var remainderStr48 = \"\"\n        var remainderStr49\
    \ = \"\"\n        var remainderStr50 = \"\"\n        var remainderStr51 = \"\"\
    \n        var remainderStr52 = \"\"\n        var remainderStr53 = \"\"\n     \
    \   var remainderStr54 = \"\"\n        var remainderStr55 = \"\"\n        var\
    \ remainderStr56 = \"\"\n        var remainderStr57 = \"\"\n        var remainderStr58\
    \ = \"\"\n        var remainderStr59 = \"\"\n        var remainderStr60 = \"\"\
    \n        var remainderStr61 = \"\"\n        var remainderStr62 = \"\"\n     \
    \   var remainderStr63 = \"\"\n        var remainderStr64 = \"\"\n        var\
    \ remainderStr65 = \"\"\n        var remainderStr66 = \"\"\n        var remainderStr67\
    \ = \"\"\n        var remainderStr68 = \"\"\n        var remainderStr69 = \"\"\
    \n        var remainder\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvyvagy13.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvyvagy13.scala:88:5 ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var lastDigit = 0\n      \
    \  var lastDigitSum = 0\n        var lastDigitSumLastDigit = 0\n        var lastDigitSumLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigit = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigit =\
    \ 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp595ol7l_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp595ol7l_.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp595ol7l_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp595ol7l_.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitL"
  stdout: ''
  timestamp: 1659804629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 0) \"0\" else \"1\")\n        val result = binaryDigits.takeWhile(x\
    \ => x != 0).mkString(\"\")\n        val output = if (sumOfDigits == 0) \"0\"\
    \ else result\n        output\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp422jy24y.scala:18:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = binaryDigits.takeWhile(\e\
    [36mx\e[0m => x != \e[31m0\e[0m).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m         Values of types String and Int cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val result = sumOfDigits.toBinaryString\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3y0ouh8g.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3y0ouh8g.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3y0ouh8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult is\
    \ already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3y0ouh8g.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3y0ouh8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult is\
    \ already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same gro"
  stdout: ''
  timestamp: 1659804631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumOfDigits = 0\n        var sumOfDigitsString = \"\"\n        var sumOfDigitsString2\
    \ = \"\"\n        var sumOfDigitsString3 = \"\"\n        var sumOfDigitsString4\
    \ = \"\"\n        var sumOfDigitsString5 = \"\"\n        var sumOfDigitsString6\
    \ = \"\"\n        var sumOfDigitsString7 = \"\"\n        var sumOfDigitsString8\
    \ = \"\"\n        var sumOfDigitsString9 = \"\"\n        var sumOfDigitsString10\
    \ = \"\"\n        var sumOfDigitsString11 = \"\"\n        var sumOfDigitsString12\
    \ = \"\"\n        var sumOfDigitsString13 = \"\"\n        var sumOfDigitsString14\
    \ = \"\"\n        var sumOfDigitsString15 = \"\"\n        var sumOfDigitsString16\
    \ = \"\"\n        var sumOfDigitsString17 = \"\"\n        var sumOfDigitsString18\
    \ = \"\"\n        var sumOfDigitsString19 = \"\"\n        var sumOfDigitsString20\
    \ = \"\"\n        var sumOfDigitsString21 = \"\"\n        var sumOfDigitsString22\
    \ = \"\"\n        var sumOfDigitsString23 = \"\"\n        var sumOfDigitsString24\
    \ = \"\"\n        var sumOfDigitsString25 = \"\"\n        var sumOfDigitsString26\
    \ = \"\"\n        var sumOfDigitsString27 = \"\"\n        var sumOfDigitsString28\
    \ = \"\"\n        var sumOfDigitsString29 = \"\"\n        var sumOfDigitsString30\
    \ = \"\"\n        var sumOfDigitsString31 = \"\"\n        var sumOfDigitsString32\
    \ = \"\"\n        var sumOfDigitsString33 = \"\"\n        var sumOfDigitsString34\
    \ = \"\"\n        var sumOfDigitsString35 = \"\"\n        var sumOfDigitsString36\
    \ = \"\"\n        var sumOfDigitsString37 = \"\"\n        var sumOfDigitsString38\
    \ = \"\"\n        var sumOfDigitsString39 = \"\"\n        var sumOfDigitsString40\
    \ = \"\"\n        var sumOfDigitsString41 = \"\"\n        var sumOfDigitsString42\
    \ = \"\"\n        var sumOfDigitsString43 = \"\"\n        var sumOfDigitsString44\
    \ = \"\"\n        var sumOfDigitsString45 = \"\"\n        var sumOfDigitsString46\
    \ = \"\"\n        var sumOfDigitsString47 = \"\"\n        var sumOfDigitsString48\
    \ = \"\"\n        var sumOfDigitsString49 = \"\"\n        var sumOfDigitsString50\
    \ = \"\"\n        var sumOfDigitsString51 = \"\"\n        var sumOfDigitsString52\
    \ = \"\"\n        var sumOfDigitsString53 = \"\"\n        var sumOfDigitsString54\
    \ = \"\"\n        var sumOfDigitsString55\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplznqarqj.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplznqarqj.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").reverse\n        digits.foreach(x => sum += x.toInt)\n        while(sum\
    \ > 0) {\n            val remainder = sum % 2\n            binary.append(remainder)\n\
    \            sum -= remainder\n        }\n        binary.reverse.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3mdtlfn.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3mdtlfn.scala:17:63\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = N.toString.reverse.grouped(\e[31m2\e[0m).map(_ + \e[31m\"\"\e\
    [0m).reverse\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3mdtlfn.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            sum -= remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"\"\n            case 1 => digits(0).toString\
    \ + digits(1).toString\n            case _ => digits(0).toString + digits(1).toString\
    \ + solve(N / 2)\n        }\n        result + sumOfDigits.toBinaryString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpt8_p1d6x.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => digits(\e\
    [31m0\e[0m).toString + digits(\e[31m1\e[0m).toString\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                      \e[33mvalue\e\
    [0m \e[35mdigits\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpt8_p1d6x.scala:20:22 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ => digits(\e[31m0\e[0m).toString\
    \ + digits(\e[31m1\e[0m).toString + solve(N / \e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m                      \e\
    [33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = scala.collection.mutable.ListBuffer[String]()\n        while(N >0)\
    \ {\n            val remainder = N % 2\n            N /= 2\n            sum +=\
    \ remainder\n            binary += remainder.toString\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpieeeb35b.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpieeeb35b.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   var remainder3 = N\n        var remainder4 = N\n        var remainder5 = N\n\
    \        var remainder6 = N\n        var remainder7 = N\n        var remainder8\
    \ = N\n        var remainder9 = N\n        var remainder10 = N\n        var remainder11\
    \ = N\n        var remainder12 = N\n        var remainder13 = N\n        var remainder14\
    \ = N\n        var remainder15 = N\n        var remainder16 = N\n        var remainder17\
    \ = N\n        var remainder18 = N\n        var remainder19 = N\n        var remainder20\
    \ = N\n        var remainder21 = N\n        var remainder22 = N\n        var remainder23\
    \ = N\n        var remainder24 = N\n        var remainder25 = N\n        var remainder26\
    \ = N\n        var remainder27 = N\n        var remainder28 = N\n        var remainder29\
    \ = N\n        var remainder30 = N\n        var remainder31 = N\n        var remainder32\
    \ = N\n        var remainder33 = N\n        var remainder34 = N\n        var remainder35\
    \ = N\n        var remainder36 = N\n        var remainder37 = N\n        var remainder38\
    \ = N\n        var remainder39 = N\n        var remainder40 = N\n        var remainder41\
    \ = N\n        var remainder42 = N\n        var remainder43 = N\n        var remainder44\
    \ = N\n        var remainder45 = N\n        var remainder46 = N\n        var remainder47\
    \ = N\n        var remainder48 = N\n        var remainder49 = N\n        var remainder50\
    \ = N\n        var remainder51 = N\n        var remainder52 = N\n        var remainder53\
    \ = N\n        var remainder54 = N\n        var remainder55 = N\n        var remainder56\
    \ = N\n        var remainder57 = N\n        var remainder58 = N\n        var remainder59\
    \ = N\n        var remainder60 = N\n        var remainder61 = N\n        var remainder62\
    \ = N\n        var remainder63 = N\n        var remainder64 = N\n        var remainder65\
    \ = N\n        var remainder66 = N\n        var remainder67 = N\n        var remainder68\
    \ = N\n        var remainder69 = N\n        var remainder70 = N\n        var remainder71\
    \ = N\n        var remainder72 = N\n        var remainder73 = N\n        var remainder74\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp51rm2qwt.scala:90:25 ---------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m        \e[33mvar\e[0m \e[36mremainder74\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51rm2qwt.scala:91:5 ---------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary.charAt(i).toInt\n        }\n        binary.reverse\n        binary.reverse.drop(sum).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn44tzzag.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary.charAt(i).toInt\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            remainder2 = remainder2 % 10\n     \
    \       sum = sum + remainder2\n            remainder = remainder + remainder2\n\
    \        }\n        binary = binary(sum)\n        return binary\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmll5_l9q.scala:21:18\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum = sum + remainder2\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmll5_l9q.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            remainder = remainder\
    \ + remainder2\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m  \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmll5_l9q.scala:24:23 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        binary = binary(sum)\n\e[31m\e[31m   |\e[0m      \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Char\n\
    \e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        for(i <- 0 until N) {\n \
    \           val remainder = i % 2\n            val digit = i / 2\n           \
    \ sum += digit\n            binary.append(remainder)\n            binary.append(digit)\n\
    \        }\n        binary.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxxjs4zrb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxxjs4zrb.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxxjs4zrb.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val result = sumOfDigits.toBinaryString\n        result match {\n    \
    \        case \"\" => \"\"\n            case x => x\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkdvl7yx.scala:26)\n\tat Problem.main(tmpmkdvl7yx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => x.toBinaryString).mkString(\"\")\n        val binarySum =\
    \ binaryDigits.reverse.grouped(2).map(_.toInt).sum\n        val result = binarySum.toBinaryString\n\
    \        result match {\n            case x if x.length < 2 => \"\"\n        \
    \    case x if x.length == 2 => x.reverse\n            case x if x.length == 3\
    \ => x.reverse\n            case x if x.length == 4 => x.reverse\n           \
    \ case x if x.length == 5 => x.reverse\n            case x if x.length == 6 =>\
    \ x.reverse\n            case x if x.length == 7 => x.reverse\n            case\
    \ x if x.length == 8 => x.reverse\n            case x if x.length >= 9 => x.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjz9hfr4o.scala:33)\n\tat Problem.main(tmpjz9hfr4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryString\
    \ = sumOfDigits.toBinary.reverse\n        binaryString.takeWhile(_ != '0').mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6t233_si.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mbinaryString\e[0m = sumOfDigits.toBinary.reverse\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value toBinary is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        while(N !=0){\n            val remainder = N % 2\n  \
    \          sum += remainder\n            N = N / 2\n            binary = remainder\
    \ + binary\n        }\n        val result = sum.toBinaryString\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7r31593g.scala:81:16 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        binary = \n\e[31m\e[31m   |\e[0m            \
    \    ^\e[0m\n\e[31m   |\e[0m                expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7r31593g.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmp7r31593g.scala:20:14 -----------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        sum.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcs5x2c8l.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary.charAt(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayBuilder[String]\n        for(i <- 0 until N) {\n \
    \           val remainder = N % 2\n            val digit = N / 2\n           \
    \ sum += digit\n            binary.append(digit)\n            N = (remainder +\
    \ digit) / 2\n        }\n        binary.toString.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1j56uqiv.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1j56uqiv.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1j56uqiv.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1j56uqiv.scala:22:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            N = (remainder\
    \ + digit) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt)\n        val sum = digits.sum\n        val result = digits.map(x\
    \ => if (x == 0) \"0\" else x.toString.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvhaar98x.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvhaar98x.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.map(\e[36mx\e[0m =>\
    \ \e[33mif\e[0m (x == \e[31m\"\"\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m x.reverse.grouped(\e\
    [31m2\e[0m).map(_ + \e[31m\"\"\e[0m).map(_.toInt).mkString(\e[31m\"\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvhaar98x.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.map(\e[36mx\e[0m\
    \ => \e[33mif\e[0m (x == \e[31m\"\"\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m x.reverse.grouped(\e\
    [31m2\e[0m).map(_ + \e[31m\"\"\e[0m).map(_.toInt).mkString(\e[31m\"\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvhaar98x.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.map(\e[36mx\e[0m\
    \ => \e[33mif\e[0m (x == \e[31m\"\"\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m x.reverse.grouped(\e\
    [31m2\e[0m).map(_ + \e[31m\"\"\e[0m).map(_.toInt).mkString(\e[31m\"\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659804633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]()\n        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        digits.foreach(x => sum += x.toInt)\n        val result = sum.toBinaryString\n\
    \        binary.append(result)\n        binary.reverse.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3ckwwe0.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3ckwwe0.scala:17:67\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = N.toString.reverse.grouped(\e[31m2\e[0m).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary(i)\n            sum += c.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.takeWhile(c => c != '0').reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpztoyvl6c.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += c.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        for(i <- 0 until N) {\n  \
    \          val remainder = N % 2\n            sum += remainder\n            N\
    \ = N / 2\n            binary += remainder\n        }\n        binary = binary.reverse\n\
    \        sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0csxviq4.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0csxviq4.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0csxviq4.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N = N /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary.charAt(i)\n            sum += c.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vrpt5jh.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += c.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]\n        for(i <- 0 until N) {\n   \
    \         val remainder = i % 10\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(x\
    \ => result += x)\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfb2dwmz.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfb2dwmz.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvfb2dwmz.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum += remainder2 % 2\n            remainder2\
    \ = (remainder2 / 2)\n        }\n        remainder2 = N\n        while (remainder2\
    \ > 0) {\n            binary = binary + remainder2 % 2\n            remainder2\
    \ = (remainder2 / 2)\n        }\n        binary = binary + sum\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppv4thntw.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += remainder2 % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppv4thntw.scala:88:15 --------------------\e[0m\e[0m\n\e[31m88\
    \ |\e[0m        binary = binary.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        bin.foreach(x =>\
    \ {\n            sum += x.toInt\n        })\n        val result = sum.toBinaryString\n\
    \        binary.toList.foreach(x => {\n            result += x.toBinaryString\n\
    \        })\n        result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsls6c4ly.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += x.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsls6c4ly.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            result += x.toBinaryString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsls6c4ly.scala:23:24 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            result += x.toBinaryString\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value toBinaryString\
    \ is not a member of Char.\n\e[31m   |\e[0m      An extension method was tried,\
    \ but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \    longWrapper(x)\n3 errors found\n"
  stdout: ''
  timestamp: 1659804642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N) {\n            val temp = N % 2\n\
    \            sum += temp\n            N /= 2\n            binary += temp.toString\n\
    \        }\n        binary = binary.reverse\n        binary.reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvpucsbq9.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvpucsbq9.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += temp\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpucsbq9.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(_.toBinaryString).mkString(\"\")\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = binarySum.toBinaryString\n        result + (if (sumOfDigits\
    \ == 0) \"\" else N.toBinaryString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7uttemy.scala:23)\n\tat Problem.main(tmpv7uttemy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n         \
    \   val digit = N % 10\n            N /= 10\n            sum += digit\n      \
    \      binary.append(digit.toString)\n        }\n        val result = sum.toBinaryString\n\
    \        binary.reverse.foreach(x => result += x)\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp420i25jw.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp420i25jw.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp420i25jw.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary(i).toInt\n        }\n        binary.reverse.foldLeft(\"\"){(acc, i)\
    \ => acc + (i.toChar * sum)}\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jwaus35.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary(i).toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binary = digits.length\
    \ match {\n            case 0 => \"0\"\n            case 1 => \"1\"\n        \
    \    case 2 => \"10\"\n            case 3 => \"11\"\n            case _ => digits(0).toString\
    \ + digits(1).toString + digits(2).toString + digits(3).toString + digits(4).toString\
    \ + digits(5).toString + digits(6).toString + digits(7).toString + digits(8).toString\
    \ + digits(9).toString + digits(10).toString + digits(11).toString + digits(12).toString\
    \ + digits(13).toString + digits(14).toString + digits(15).toString + digits(16).toString\
    \ + digits(17).toString + digits(18).toString + digits(19).toString + digits(20).toString\
    \ + digits(21).toString + digits(22).toString + digits(23).toString + digits(24).toString\
    \ + digits(25).toString + digits(26).toString + digits(27).toString + digits(28).toString\
    \ + digits(29).toString + digits(30).toString + digits(31).toString + digits(32).toString\
    \ + digits(33).toString + digits(34).toString + digits(35).toString + digits(36).toString\
    \ + digits(37).toString + digits(38).toString + digits(39).toString + digits(40).toString\
    \ + digits(41).toString + digits(42).toString + digits(43).toString + digits(44).toString\
    \ + digits(45).toString + digits(46).toString + digits(47).toString + digits(48).toString\
    \ + digits(49).toString + digits(50).toString + digits(51).toString + digits(52).toString\
    \ + digits(53).toString + digits(54).toString + digits(55).toString + digits(56).toString\
    \ + digits(57).toString + digits(58).toString + digits(59).toString + digits(60).toString\
    \ + digits(61).toString + digits(62).toString + digits(63).toString + digits(64).toString\
    \ + digits(65).toString + digits(66).toString + digits(67).toString + digits(68).toString\
    \ + digits(69).toString + digits(70).toString + digits(71).toString + digits(72).toString\
    \ + digits(73\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp79dk70az.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp79dk70az.scala:33:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp79dk70az.scala:22:22 -----------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            \e[33mcase\e[0m _ => digits(\e[31m0\e[0m).toString\
    \ + digits(\e[31m1\e[0m).toString + digits(\e[31m2\e[0m).toString + digits(\e\
    [31m3\e[0m).toString + digits(\e[31m4\e[0m).toString + digits(\e[31m5\e[0m).toString\
    \ + digits(\e[31m6\e[0m).toString + digits(\e[31m7\e[0m).toString + digits(\e\
    [31m8\e[0m).toString + digits(\e[31m9\e[0m).toString + digits(\e[31m10\e[0m).toString\
    \ + digits(\e[31m11\e[0m).toString + digits(\e[31m12\e[0m).toString + digits(\e\
    [31m13\e[0m).toString + digits(\e[31m14\e[0m).toString + digits(\e[31m15\e[0m).toString\
    \ + digits(\e[31m16\e[0m).toString + digits(\e[31m17\e[0m).toString + digits(\e\
    [31m18\e[0m).toString + digits(\e[31m19\e[0m).toString + digits(\e[31m20\e[0m).toString\
    \ + digits(\e[31m21\e[0m).toString + digits(\e[31m22\e[0m).toString + digits(\e\
    [31m23\e[0m).toString + digits(\e[31m24\e[0m).toString + digits(\e[31m25\e[0m).toString\
    \ + digits(\e[31m26\e[0m).toString + digits(\e[31m27\e[0m).toString + digits(\e\
    [31m28\e[0m).toString + digits(\e[31m29\e[0m).toString + digits(\e[31m30\e[0m).toString\
    \ + digits(\e[31m31\e[0m).toString + digits(\e[31m32\e[0m).toString + digits(\e\
    [31m33\e[0m).toString + digits(\e[31m34\e[0m).toString + digits(\e[31m35\e[0m).toString\
    \ + digits(\e[31m36\e[0m).toString + digits(\e[31m37\e[0m).toString + digits(\e\
    [31m38\e[0m).toString + digits(\e[31m39\e[0m).toString + digits(\e[31m40\e[0m).toString\
    \ + digits(\e[31m41\e[0m).toString + digits(\e[31m42\e[0m).toString + digits(\e\
    [31m43\e[0m).toString + digits(\e[31m44\e[0m).toString + digits(\e[31m45\e[0m).toString\
    \ + digits(\e[31m46\e[0m).toString + digits(\e[31m47\e[0m).toString + digits(\e\
    [31m48\e[0m).toString + digits(\e[31m49\e[0m).toStrin"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while(i < binary.length) {\n\
    \            sum += binary.charAt(i).toInt\n            i += 1\n        }\n  \
    \      sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplf24gk27.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += binary.charAt(i).toInt\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        bin.foreach(x =>\
    \ {\n            sum += x.toInt\n        })\n        binary.toString.reverse.foldLeft(\"\
    \")(_ + _ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_h0lg_fe.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += x.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_h0lg_fe.scala:21:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        binary.toString.reverse.foldLeft(\e\
    [31m\"\"\e[0m)(_ + _ + _)\n\e[31m\e[31m   |\e[0m                             \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \    Wrong number of parameters, expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while (i < binary.length) {\n\
    \            sum += binary.charAt(i).toInt\n            i += 1\n        }\n  \
    \      val result = sum.toBinaryString\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ny2bc60.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += binary.charAt(i).toInt\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayBuffer[String]()\n        var remainder = N\n    \
    \    while(true){\n            val remainderToBinary = remainder % 2\n       \
    \     val remainderToBinaryString = remainderToBinary.toString\n            binary.append(remainderToBinaryString)\n\
    \            remainder = remainder / 2\n            if(remainder == 0){\n    \
    \            sum += binary.last\n                binary.clear()\n            \
    \    break\n            }\n        }\n        sum.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqjc8e1t.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqqjc8e1t.scala:24:20\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                sum += binary.last\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqqjc8e1t.scala:26:16 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = new mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var remainder = N\n        while(true){\n      \
    \      val remainderDigit = remainder % 10\n            binary.append(remainderDigit.toString)\n\
    \            sum += remainderDigit\n            remainder = remainder / 10\n \
    \           if(remainder == 0){\n                binary.reverse\n            \
    \    binary.mkString(\"\")\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7drhf0q7.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7drhf0q7.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum += remainderDigit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]()\n        while(N >0) {\n        \
    \    val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd036udfq.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd036udfq.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpd036udfq.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ index = binary.length - i - 1\n            sum += binary(index)\n        }\n\
    \        sum.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprbvm3wyq.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += binary(index)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        while(N !=0){\n            val remainder = N % 2\n\
    \            sum += remainder\n            N /= 2\n        }\n        val remainder\
    \ = sum % 2\n        binary.append(remainder)\n        binary.toString()\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpflui6a9s.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpflui6a9s.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            N /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt).toList\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = sumOfDigits.toBinaryString\n\
    \        val result = result.substring(0, result.length-1)\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphr467_bx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659804640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.Array[String](N.toInt)\n        for(i <- 0 until N.toInt)\
    \ {\n            val bin = i.toBinary.reverse\n            binary(i) = bin\n \
    \           sum += bin.last\n        }\n        binary.map(x => x.reverse).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplmxt4jrp.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mString\e[0m](N.toInt)\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplmxt4jrp.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mbin\e[0m = i.toBinary.reverse\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toBinary is\
    \ not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplmxt4jrp.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += bin.last\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => sum += x)\n        digits.foreach(x => binary.append(x.toString))\n\
    \        binary.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxegq7ph.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxegq7ph.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        digits.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ temp = binary.charAt(i).toInt\n            sum += temp\n        }\n        binary.reverse\n\
    \        binary.reverse.takeWhile(x => x != '0').mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhxnu8yd.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += temp\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(_.toString).mkString(\"\")\n        val binarySum = binaryDigits.reverse.foldLeft(0)(_\
    \ + _)\n        val result = binarySum.toString.reverse\n        result + (if\
    \ (sumOfDigits < 10) 0 else \"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbx_hdwyh.scala:23)\n\tat Problem.main(tmpbx_hdwyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary.charAt(i)\n        }\n        sum.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9p98io1b.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary.charAt(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N) {\n            sum += N % 2\n   \
    \         N /= 2\n        }\n        for(i <- 0 until sum) {\n            binary\
    \ += if(i % 2 == 0) \"1\" else \"0\"\n        }\n        binary\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpytde8s9g.scala:22:22 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            binary += \e[33mif\e[0m(i % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) \e[31m\"1\"\e[0m \e[33melse\e[0m \e[31m\"0\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                      ^^\e[0m\n\e[31m   |\e[0m                  \
    \    expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpytde8s9g.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until N) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (N : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytde8s9g.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += N % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpytde8s9g.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean N.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        for(i <- 0 until N){\n            sum += i.toBinaryString().length\n\
    \            binary += i.toBinaryString()\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 2){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzjth9r_0.scala:103:4 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    'do' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzjth9r_0.scala:17:25 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \        \e[33mfor\e[0m(i <- \e[31m0\e[0m until N){\n\e[31m\e[31m   |\e[0m   \
    \                      ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (N : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzjth9r_0.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i.toBinaryString().length\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- Error: /tmp/tmpzjth9r_0.scala:18:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     sum += i.toBinaryString().length\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter i of\
    \ \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m:\
    \ (i: Int): Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzjth9r_0.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            binary += i.toBinaryString()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpzjth9r_0.scala:19:38 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            binary += i.toBinaryString()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e\
    [35mStringOps\e[0m: (i: Int): Char\n6 errors found\n"
  stdout: ''
  timestamp: 1659804651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = N\n        while(n > 0){\n          \
    \  sum += n % 10\n            n = n / 10\n        }\n        while(sum > 0){\n\
    \            binary += sum % 2\n            sum = sum / 2\n        }\n       \
    \ remainder = remainder % 10\n        while(remainder > 0){\n            binary\
    \ += remainder % 2\n            remainder = remainder / 2\n        }\n       \
    \ binary\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6uux3400.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m(n > \e[31m0\e[0m){\n\e[31m\e\
    [31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Not found: n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uux3400.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += n % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \         value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6uux3400.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += n % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6uux3400.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n = n / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6uux3400.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n = n / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Not found: n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659804651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = sumOfDigits.toBinaryString\n        binaryDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_zok_tt.scala:21)\n\tat Problem.main(tmp1_zok_tt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ArrayBuffer[String]\n        for(i <- 0 until N) {\n  \
    \          val remainder = N % 2\n            val digit = N / 2\n            sum\
    \ += digit\n            binary.append(remainder)\n            N = digit\n    \
    \    }\n        binary.reverse.toString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk7wsl5wa.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7wsl5wa.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpk7wsl5wa.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpk7wsl5wa.scala:22:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            N = digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val binaryDigits = digits.map(digit => if (digit == 1) \"1\" else \"0\"\
    )\n        val binarySum = binaryDigits.mkString(\"\")\n        val binarySumString\
    \ = binarySum.reverse\n        val binarySumStringLength = binarySumString.length\n\
    \        val binarySumStringWithZeros = binarySumString.padTo(binarySumStringLength,\
    \ \"0\")\n        val binarySumStringWithOnes = binarySumString.padTo(binarySumStringLength,\
    \ \"1\")\n        val binarySumStringWithZerosAndOnes = binarySumStringWithZeros\
    \ + binarySumStringWithOnes\n        binarySumStringWithZerosAndOnes\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqvxpw883.scala:23:71 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbinarySumStringWithZerosAndOnes\e\
    [0m = binarySumStringWithZeros + binarySumStringWithOnes\n\e[31m\e[31m   |\e[0m\
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of IndexedSeq[Matchable], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659804655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            remainder2 = remainder2 % 10\n     \
    \       sum = sum + remainder2\n            binary = binary + remainder2\n   \
    \         remainder = remainder / 10\n        }\n        if (sum > 0) {\n    \
    \        binary = binary + sum.toString\n        }\n        return binary\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphx_63uao.scala:21:18\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum = sum + remainder2\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var i = 0\n        while (i\
    \ < N) {\n            sum = sum + math.pow(2, i)\n            binary = binary\
    \ + Integer.toBinaryString(i)\n            i = i + 1\n        }\n        remainder\
    \ = N % sum\n        binary = binary + Integer.toBinaryString(remainder)\n   \
    \     binary\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp560h5db4.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = sum + math.pow(\e\
    [31m2\e[0m, i)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Double\n\e[31m   |\e[0m      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp560h5db4.scala:24:20 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        remainder = N % sum\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:    Long\n\e[31m   |\e\
    [0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => sum += x)\n        val result = sum.toBinaryString\n\
    \        binary.append(result)\n        binary.reverse.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4noz04n7.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4noz04n7.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        digits.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]\n        for(i <- 0 until N) {\n   \
    \         val temp = i.toBinaryString\n            val length = temp.length\n\
    \            val digits = temp.substring(length-1, length)\n            sum +=\
    \ digits.toLong\n            binary.append(digits)\n        }\n        binary.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxkxcw828.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxkxcw828.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxkxcw828.scala:21:16 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            sum += digits.toLong\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"0\"\n            case 1 => digits(0).toString\
    \ + digits(1).toString\n            case _ => digits(0).toString + digits(1).toString\
    \ + solve(N - sumOfDigits)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxxhtvlpd.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => digits(\e\
    [31m0\e[0m).toString + digits(\e[31m1\e[0m).toString\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                      \e[33mvalue\e\
    [0m \e[35mdigits\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpxxhtvlpd.scala:20:22 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ => digits(\e[31m0\e[0m).toString\
    \ + digits(\e[31m1\e[0m).toString + solve(N - sumOfDigits)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m                      \e\
    [33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        digits.foreach(sum ++= _)\n        sum.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwczhr2zw.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        digits.foreach(sum ++= _)\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ value ++= is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659804654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.MutableList[String]\n        for(i <- 0 until N) {\n  \
    \          val temp = N % 10\n            sum += temp\n            binary.append(temp.toString)\n\
    \            N /= 10\n        }\n        binary.reverse.mkString(\"\") + sum.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikdpsxcp.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikdpsxcp.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpikdpsxcp.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += temp\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpikdpsxcp.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            N /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumOfDigits = 0\n        var binaryString = \"\"\n        var remainder = 0\n\
    \        for(i <- 0 until N){\n            remainder = N % 2\n            sum\
    \ += remainder\n            sumOfDigits += remainder\n            binaryString\
    \ += remainder\n            N = N / 2\n        }\n        binaryString += sumOfDigits\n\
    \        binaryString += sum\n        binaryString.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgr7xv0_h.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgr7xv0_h.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            remainder = N % \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Found:    Long\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgr7xv0_h.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgr7xv0_h.scala:24:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            N = N /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\"\n\
    \        var remainderStr2 = \"\"\n        var remainderStr3 = \"\"\n        var\
    \ remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n        var remainderStr6\
    \ = \"\"\n        var remainderStr7 = \"\"\n        var remainderStr8 = \"\"\n\
    \        var remainderStr9 = \"\"\n        var remainderStr10 = \"\"\n       \
    \ var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\n        var remainderStr13\
    \ = \"\"\n        var remainderStr14 = \"\"\n        var remainderStr15 = \"\"\
    \n        var remainderStr16 = \"\"\n        var remainderStr17 = \"\"\n     \
    \   var remainderStr18 = \"\"\n        var remainderStr19 = \"\"\n        var\
    \ remainderStr20 = \"\"\n        var remainderStr21 = \"\"\n        var remainderStr22\
    \ = \"\"\n        var remainderStr23 = \"\"\n        var remainderStr24 = \"\"\
    \n        var remainderStr25 = \"\"\n        var remainderStr26 = \"\"\n     \
    \   var remainderStr27 = \"\"\n        var remainderStr28 = \"\"\n        var\
    \ remainderStr29 = \"\"\n        var remainderStr30 = \"\"\n        var remainderStr31\
    \ = \"\"\n        var remainderStr32 = \"\"\n        var remainderStr33 = \"\"\
    \n        var remainderStr34 = \"\"\n        var remainderStr35 = \"\"\n     \
    \   var remainderStr36 = \"\"\n        var remainderStr37 = \"\"\n        var\
    \ remainderStr38 = \"\"\n        var remainderStr39 = \"\"\n        var remainderStr40\
    \ = \"\"\n        var remainderStr41 = \"\"\n        var remainderStr42 = \"\"\
    \n        var remainderStr43 = \"\"\n        var remainderStr44 = \"\"\n     \
    \   var remainderStr45 = \"\"\n        var remainderStr46 = \"\"\n        var\
    \ remainderStr47 = \"\"\n        var remainderStr48 = \"\"\n        var remainderStr49\
    \ = \"\"\n        var remainderStr50 = \"\"\n        var remainderStr51 = \"\"\
    \n        var remainderStr52 = \"\"\n        var remainderStr53 = \"\"\n     \
    \   var remainderStr54 = \"\"\n        var remainderStr55 = \"\"\n        var\
    \ remainderStr56 = \"\"\n        var remainderStr57 = \"\"\n        var remainderStr58\
    \ = \"\"\n        var remainderStr59 = \"\"\n        var remainderStr60 = \"\"\
    \n        var remainderStr61 = \"\"\n        var remainderStr62 = \"\"\n     \
    \   var remainderStr63 = \"\"\n        var remainderStr64 = \"\"\n        var\
    \ remainderStr65 = \"\"\n        var remainderStr66 = \"\"\n        var remainderStr67\
    \ = \"\"\n        var remainderStr68 = \"\"\n        var remainderStr69 = \"\"\
    \n        var remain\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1oiy4138.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1oiy4138.scala:88:5 ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary(i)\n            sum += c.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.take(sum).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpet_x7vrs.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += c.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").reverse\n        val sumOfDigits = digits.foldLeft(0)(_ + _)\n     \
    \   val result = sumOfDigits.toBinaryString\n        result match {\n        \
    \    case \"\" => \"\"\n            case _ => result\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n\
    \    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ekwcniq.scala:15:63 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = N.toString.reverse.grouped(\e\
    [31m2\e[0m).map(_ + \e[31m\"\"\e[0m).reverse\n\e[31m\e[31m   |\e[0m          \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean Iterator[String].reversed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]\n  \
    \      for(i <- 0 to binary.length-1){\n            val bin = binary.charAt(i)\n\
    \            val num = Integer.parseInt(bin)\n            sum += num\n       \
    \     result += (bin+num.toBinaryString).reverse\n        }\n        val result\
    \ = sum.toBinaryString\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9f9pw1n.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = sum.toBinaryString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9f9pw1n.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi9f9pw1n.scala:20:39 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = Integer.parseInt(bin)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (bin : Char)\n\e[31m   |\e\
    [0m                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi9f9pw1n.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += num\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        var i = 0\n        var j =\
    \ 0\n        while(i < N) {\n            val remainder = N % 10\n            sum\
    \ += remainder\n            N = N / 10\n            binary = binary + remainder\n\
    \            i = i + 1\n        }\n        while(j < (N / 2)) {\n            binary\
    \ = binary + \"0\"\n            j = j + 1\n        }\n        binary = binary\
    \ + sum.toString\n        binary\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnmebyxrj.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum += remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnmebyxrj.scala:23:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            N = N /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var remainder = N\n        while(sum < 10) {\n \
    \           val digit = remainder % 2\n            binary.append(digit.toString)\n\
    \            sum += digit\n            remainder = remainder / 2\n        }\n\
    \        binary.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdtj7ujoh.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtj7ujoh.scala:24:15\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        binary.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary.charAt(i)\n            val d = c.toInt\n            sum += d\n  \
    \      }\n        binary.toString + sum.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp52kmdobm.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += d\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.HashSet[String]\n        for(i <- 0 until N) {\n      \
    \      val temp = i.toBinaryString\n            val index = temp.length\n    \
    \        val sumOfDigits = temp.drop(index).foldLeft(0)(_ + _)\n            binary.add(sumOfDigits)\n\
    \        }\n        binary.toList.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyq8oa3_7.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyq8oa3_7.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        var\
    \ binary = \"\"\n        var remainder = 0\n        for(i <- 0 until N) {\n  \
    \          remainder = i % 2\n            sum = sum + remainder\n            binary\
    \ = binary + remainder\n            i = i / 2\n        }\n        binary = binary\
    \ + sum\n        return binary\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmo6ll_uk.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until N) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (N : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpmo6ll_uk.scala:20:16 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum = sum + remainder\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmo6ll_uk.scala:22:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            i = i /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 to binary.length-1){\n            sum\
    \ += binary.charAt(i)\n        }\n        sum.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxu1ncu6q.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary.charAt(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        while(sum > 0) {\n            digits += sum % 2\n            sum /= 2\n\
    \        }\n        val result = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        while(digits.length > 0) {\n            result += digits.takeWhile(_\
    \ > 0).mkString(\"\")\n            digits -= digits.takeWhile(_ > 0).length\n\
    \        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9mk8366.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m(N /= \e[31m10\e[0m) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              value /= is\
    \ not a member of Long - did you mean N.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_9mk8366.scala:18:16 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            sum += N % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9mk8366.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            N /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean N.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659804659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ sumOfDigits = 0\n        var binaryString = \"\"\n        var remainder = 0\n\
    \        while(N >0) {\n            remainder = N % 2\n            sumOfDigits\
    \ += remainder\n            sum += remainder\n            N = (N - remainder)\
    \ / 2\n        }\n        sumOfDigits += sum\n        binaryString = sumOfDigits.toBinaryString\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = \n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpydar01yb.scala:81:22 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        binaryString = \n\e[31m\e[31m   |\e[0m      \
    \                ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpydar01yb.scala:20:24 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            remainder = N % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                        Found: \
    \   Long\n\e[31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpydar01yb.scala:23:14 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            N = (N - remainder) / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Reassignment to val N\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val result = sumOfDigits.toBinaryString\n        result match {\n    \
    \        case x if x.size == 1 => x.toChar\n            case x => x.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp07zxko57.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.size ==\
    \ \e[31m1\e[0m => x.toChar\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659804659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(0)((sum, digit) => sum + digit)\n        val\
    \ result = sums.toBinaryString\n        result match {\n            case \"\"\
    \ => \"\"\n            case _ => result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo7n8qnig.scala:26)\n\tat Problem.main(tmpo7n8qnig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = sumOfDigits.toBinaryString\n\
    \        result match {\n            case x if x.length < 2 => \"\"\n        \
    \    case x if x.length == 2 => x.reverse\n            case x => x.reverse\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6s4nxnel.scala:25)\n\tat Problem.main(tmp6s4nxnel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var\
    \ binary = \"\"\n        var remainder = N\n        while (remainder > 0) {\n\
    \            sum += remainder % 2\n            binary = remainder / 2 + binary\n\
    \            remainder = remainder / 2\n        }\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = bin\n    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
    1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkoj7j7xl.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += remainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkoj7j7xl.scala:89:17 ------------------------\e[0m\e[0m\n\e[31m89 |\e\
    [0m        binary = bin\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m\
    \   |\e[0m                 Not found: bin\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        while(N !=0){\n         \
    \   val remainder = N % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \            N = N / 2\n        }\n        val result = sum.toBinaryString\n \
    \       binary.reverse.foreach(x => result += x)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\"\
    )));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
    1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr91lzdiu.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr91lzdiu.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpr91lzdiu.scala:21:14 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            N = N / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val N\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the\
    \ output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the\
    \ output should be \"110\".\n    // For N = 147, the sum of digits will be 12\
    \ the output should be \"1100\".\n    // Variables:\n    // @N integer\n    //\
    \ Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary\
    \ number\n    def solve(N : Long) : String = {\n        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"\
    110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"\
    1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhnnf_uq.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += binary.charAt(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659804660
