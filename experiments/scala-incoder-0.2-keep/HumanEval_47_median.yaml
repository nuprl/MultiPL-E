name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median([3, 1, 2, 4,\
  \ 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n   \
  \ def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        val m = l.groupBy(x => x).mapValues(_.size).maxBy(_._2)._1\n\
    \        val median = (l.take(n - 1) + l.take(n - 2)).sortBy(x => x).last\n  \
    \      val m1 = l.take(n - 1).sortBy(x => x).last\n        val m2 = l.take(n -\
    \ 2).sortBy(x => x).last\n        val m3 = l.take(n - 3).sortBy(x => x).last\n\
    \        val m4 = l.take(n - 4).sortBy(x => x).last\n        val m5 = l.take(n\
    \ - 5).sortBy(x => x).last\n        val m6 = l.take(n - 6).sortBy(x => x).last\n\
    \        val m7 = l.take(n - 7).sortBy(x => x).last\n        val m8 = l.take(n\
    \ - 8).sortBy(x => x).last\n        val m9 = l.take(n - 9).sortBy(x => x).last\n\
    \        val m10 = l.take(n - 10).sortBy(x => x).last\n        val m11 = l.take(n\
    \ - 11).sortBy(x => x).last\n        val m12 = l.take(n - 12).sortBy(x => x).last\n\
    \        val m13 = l.take(n - 13).sortBy(x => x).last\n        val m14 = l.take(n\
    \ - 14).sortBy(x => x).last\n        val m15 = l.take(n - 15).sortBy(x => x).last\n\
    \        val m16 = l.take(n - 16).sortBy(x => x).last\n        val m17 = l.take(n\
    \ - 17).sortBy(x => x).last\n        val m18 = l.take(n - 18).sortBy(x => x).last\n\
    \        val m19 = l.take(n - 19).sortBy(x => x).last\n        val m20 = l.take(n\
    \ - 20).sortBy(x => x).last\n        val m21 = 0\n        val m22 = 0\n      \
    \  val m23 = 0\n        val m24 = 0\n        val m25 = 0\n        val m26 = 0\n\
    \        val m27 = 0\n        val m28 = 0\n        val m29 = 0\n        val m30\
    \ = 0\n        val m31 = 0\n        val m32 = 0\n        val m33 = 0\n       \
    \ val m34 = 0\n        val m35 = 0\n        val m36 = 0\n        val m37 = 0\n\
    \        val m38 = 0\n        val m39 = 0\n        val m40", "        val n =\
    \ l.length\n        val m = l.max\n        val half = n / 2\n        val left\
    \ = l.take(half)\n        val right = l.drop(half)\n        val median = (left\
    \ + right).sorted.last\n        val diff = (median - m) / n\n        diff * n",
  "        val n = l.length\n        val m = l.size / 2\n        val median = (l take\
    \ m).sum / m\n        median", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val low = l.take(mid)\n            val high = l.drop(mid)\n            val\
    \ m1 = median(low)\n            val m2 = median(high)\n            (m1 + m2) /\
    \ 2\n        }", "        val n = l.length\n        if (n <= 1) 0\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = math.max(left, right).asInstanceOf[Float]\n\
    \            median\n        }", "        val n = l.length\n        val m = l.sortWith(_\
    \ < _).length\n        val half = m / 2\n        val median = (l take half).sum\
    \ / half\n        if (n < 2) median\n        else median", "        val n = l.length\n\
    \        val m = l.groupBy(x => x).mapValues(_.length).max\n        val median\
    \ = (m / 2).toFloat\n        l.map(_ - median).sum / n", "        val sorted =\
    \ l.sorted\n        val middle = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(middle) else (sorted.apply(middle - 1) + sorted.apply(middle))\
    \ / 2.0\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ sorted.apply(mid + 1)\n        median", "        val n = l.length\n        val\
    \ half = n / 2\n        val median = (l take half).sorted take half\n        val\
    \ left = (l drop half).sorted take half\n        val right = (l drop half).sorted\
    \ drop half\n        val median1 = (left take half).sorted take half\n       \
    \ val median2 = (right take half).sorted take half\n        val median3 = (left\
    \ drop half).sorted drop half\n        val median4 = (right drop half).sorted\
    \ drop half\n        val median5 = median.head + median1.head + median2.head +\
    \ median3.head + median4.head\n        val median6 = median.last + median1.last\
    \ + median2.last + median3.last + median4.last\n        val median7 = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head\n        val median8 = median.last + median1.last + median2.last\
    \ + median3.last + median4.last + median5.last + median6.last\n        val median9\
    \ = median.head + median1.head + median2.head + median3.head + median4.head +\
    \ median5.head + median6.head + median7.head\n        val median10 = median.last\
    \ + median1.last + median2.last + median3.last + median4.last + median5.last +\
    \ median6.last + median7.last + median8.head\n        val median11 = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head + median7.head + median8.head + median9.head\n        val median12\
    \ = median.last + median1.last + median2.last + median3.last + median4.last +\
    \ median5.last + median6.last + median7.last + median8.last + median9.last + median10.head\n\
    \        val median13 = median.head + median1.head + median2.head + median3.head\
    \ + median4.head + median5.head + median6.head + median7.head + median8.head +\
    \ median9.head + median10.head + median11.head\n        val median14 = median.last\
    \ + median1.last + median2.last + median3.last + median4.last + median5.last +\
    \ median6.last + median7.last + median8.last + median9.last + median10.last +\
    \ median11.last + median12.head\n        val median15 = median.head + median1.head\
    \ + median2.head + median3.head + ", "        val n = l.length\n        val sorted\
    \ = l.sortWith(_ < _)\n        val half = n / 2\n        if (n % 2 == 0) {\n \
    \           sorted.last\n        } else {\n            val m1 = sorted.head\n\
    \            val m2 = sorted.last\n            (m1 + m2) / 2\n        }", "  \
    \      val n = l.length\n        val mid = n / 2\n        val left = new Array[Long](n)\n\
    \        val right = new Array[Long](n)\n        var i = 0\n        var j = 0\n\
    \        while (i < n) {\n            while (j < n && l(i) < l(j)) {\n       \
    \         j += 1\n            }\n            right(i) = l(j)\n            i +=\
    \ 1\n            j += 1\n        }\n        while (i < n) {\n            while\
    \ (j < n && l(i) > l(j)) {\n                j += 1\n            }\n          \
    \  left(i) = l(j)\n            i += 1\n            j += 1\n        }\n       \
    \ val median = if (n % 2 == 0) (left + right).sorted else (right + left).sorted\n\
    \        median(mid)", "        val n = l.length\n        val mid = n / 2\n  \
    \      val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = if (n == 1) left else (left + right) / 2\n        median", "        val n\
    \ = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n\
    \        val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\
    \ else sorted.last", "        val n = l.length\n        val m = l.min\n      \
    \  val h = (n - 1) / 2\n        val i = h\n        val j = n - 1\n        val\
    \ k = (i + j) / 2\n        val median = if (l contains k) k else 0\n        val\
    \ lower = if (l contains i) i else 0\n        val upper = if (l contains j) j\
    \ else 0\n        val median = if (lower < upper) lower else upper\n        val\
    \ median = if (median == 0) 0 else median\n        median", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val n = l.length\n        if (n < 2) 0.0\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = if (left.length == 0)\
    \ right else left\n            val medianValue = median.sum / median.length\n\
    \            medianValue\n        }", "        val n = l.length\n        val sorted\
    \ = l.sorted\n        val mid = n / 2\n        val median = (sorted take mid)\
    \ match {\n            case x :: xs => x\n            case _ => sorted[mid]\n\
    \        }\n        (sorted take n) match {\n            case x :: xs => median\n\
    \            case _ => median\n        }", "        val n = l.length\n       \
    \ if (n < 2) 0\n        else {\n            val mid = n / 2\n            val left\
    \ = l.take(mid)\n            val right = l.drop(mid)\n            val median =\
    \ left.sorted match {\n                case a :: b :: Nil => math.round((a + b)\
    \ / 2)\n                case a :: b => math.round((a + b) / 2)\n             \
    \   case _ => 0\n            }\n            math.round(median)\n        }", " \
    \       val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted.last\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.take(mid)\n\
    \        val rightHalf = sorted.drop(mid)\n        val medianOfLeftHalf = median(leftHalf)\n\
    \        val medianOfRightHalf = median(rightHalf)\n        val medianOfBothHalfs\
    \ = medianOfLeftHalf + medianOfRightHalf\n        val medianOfBothHalfsIsBetterThanMedian\
    \ = medianOfBothHalfs > median\n        if (medianOfBothHalfsIsBetterThanMedian)\n\
    \            medianOfBothHalfs\n        else\n            median", "        val\
    \ n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n    \
    \    val right = l.drop(mid)\n        val median = (left + right).sorted\n   \
    \     median.last", "        val n = l.length\n        val mid = n / 2\n     \
    \   val left = new Array[Long](n)\n        val right = new Array[Long](n)\n  \
    \      var i = 0\n        var j = 0\n        while (i < n) {\n            while\
    \ (j < n) {\n                if (j == mid) {\n                    right(j) = l(j)\n\
    \                    j += 1\n                } else {\n                    left(i)\
    \ = l(j)\n                    i += 1\n                }\n            }\n     \
    \       val mid1 = (left + right).sum / 2\n            val mid2 = (left + right).sum\n\
    \            val leftSum = left.sum\n            val rightSum = right.sum\n  \
    \          val leftSum2 = left.sum * left.sum\n            val rightSum2 = right.sum\
    \ * right.sum\n            val leftSum3 = left.sum * left.sum * left.sum\n   \
    \         val rightSum3 = right.sum * right.sum * right.sum\n            val leftSum4\
    \ = left.sum * left.sum * left.sum * left.sum\n            val rightSum4 = right.sum\
    \ * right.sum * right.sum * right.sum\n            val leftSum5 = left.sum * left.sum\
    \ * left.sum * left.sum * left.sum\n            val rightSum5 = right.sum * right.sum\
    \ * right.sum * right.sum * right.sum\n            val leftSum6 = left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum\n            val rightSum6 = right.sum\
    \ * right.sum * right.sum * right.sum * right.sum * right.sum\n            val\
    \ leftSum7 = left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum\n            val rightSum7 = right.sum * right.sum * right.sum\
    \ * right.sum * right.sum * right.sum * right.sum * right.sum\n            val\
    \ leftSum8 = left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum *\
    \ left.sum * left.sum * left.sum * left.sum * left.sum", "        val sorted =\
    \ l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val low = sorted.drop(mid)\n        val high = sorted.takeRight(mid)\n\
    \        val lowMedian = median(low)\n        val highMedian = median(high)\n\
    \        val medianMedian = (lowMedian + highMedian) / 2\n        medianMedian",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n  \
    \      val rightHalf = sorted.takeRight(mid)\n        val leftMedian = median(leftHalf)\n\
    \        val rightMedian = median(rightHalf)\n        val medianOfMedians = leftMedian\
    \ + rightMedian\n        val medianOfMediansIsEven = medianOfMedians.toDouble\
    \ % 2 == 0\n        if (medianOfMediansIsEven) {\n            medianOfMedians\n\
    \        } else {\n            medianOfMedians\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.slice(0, mid)\n            val right = l.slice(mid)\n     \
    \       val median = (left + right).sorted\n            median.last\n        }",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.slice(0,\
    \ mid)\n        val right = l.slice(mid)\n        val median = (left + right).sorted\n\
    \        val medianIndex = median.indexWhere(_ > median.last)\n        median(medianIndex.toFloat)",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            for (i <- 0 until n) {\n                left(i)\
    \ = l(i)\n                right(i) = l(mid + i)\n            }\n            val\
    \ leftMedian = median(left)\n            val rightMedian = median(right)\n   \
    \         val median = (leftMedian + rightMedian) / 2\n            median\n  \
    \      }", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n        val medianOfBothHalfsIsBetter\
    \ = (medianOfLeftHalf < medianOfRightHalf)\n        if (medianOfBothHalfsIsBetter)\
    \ {\n            medianOfBothHalfs\n        } else {\n            medianOfBothHalfsIsBetter\
    \ ? medianOfLeftHalf : medianOfRightHalf\n        }", "        val n = l.length\n\
    \        if (n <= 1) return l(0)\n        val mid = n / 2\n        val left =\
    \ l.take(mid)\n        val right = l.drop(mid)\n        val median = (left + right).sorted\n\
    \        val medianIndex = median.indexWhere(_ > median.last)\n        median(medianIndex\
    \ + mid)", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val mid = n / 2\n            val left = new Array[Long](n)\n    \
    \        val right = new Array[Long](n)\n            for (i <- 0 until n) {\n\
    \                left(i) = l(i)\n                right(i) = (i + 1) % n\n    \
    \        }\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = (leftMedian + rightMedian) / 2\n \
    \           if (n == 1) median\n            else (leftMedian + rightMedian) /\
    \ 2.0\n        }", "        val n = l.length\n        val half = n / 2\n     \
    \   val left = l.take(half)\n        val right = l.drop(half)\n        val mid\
    \ = left match {\n            case Nil => right\n            case x :: xs => x\n\
    \        }\n        val median = (left + right) match {\n            case Nil\
    \ => mid\n            case x :: xs => x\n        }\n        median.toFloat", " \
    \       val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted\n\
    \        val medianIndex = median.indexOf(0)\n        median(medianIndex)", " \
    \       val n = l.length\n        val half = n / 2\n        if (n < 2) {\n   \
    \         l.head\n        } else {\n            val median = (l.head + l.last)\
    \ / 2\n            val left  = l.take(half)\n            val right = l.drop(half)\n\
    \            val median1 = median(left)\n            val median2 = median(right)\n\
    \            val median3 = median(left + right)\n            if (median1 < median2)\
    \ {\n                median1\n            } else if (median2 < median3) {\n  \
    \              median2\n            } else {\n                median3\n      \
    \      }\n        }", "        val n = l.length\n        val mid = n / 2\n   \
    \     val left = l.slice(0, mid)\n        val right = l.slice(mid)\n        val\
    \ leftMedian = median(left)\n        val rightMedian = median(right)\n       \
    \ val median = (leftMedian + rightMedian) / 2\n        median", "        val n\
    \ = l.length\n        val half = n / 2\n        val left = l.take(half)\n    \
    \    val right = l.drop(half)\n        val mid = math.round((left + right) / 2)\n\
    \        val median = if (n == 1) mid else (left + right) / 2\n        median",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val low = l.take(mid)\n            val high = l.drop(mid)\n\
    \            val lowMedian = median(low)\n            val highMedian = median(high)\n\
    \            val median = (lowMedian + highMedian) / 2\n            median\n \
    \       }", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = if (n ==\
    \ 1) left else (left + right) / 2\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val lower = l filter (_ < mid)\n            val upper = l filter (_ >= mid)\n\
    \            val median = (lower + upper) reduce { (x, y) => x + y } / 2\n   \
    \         median\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else sorted.apply(mid - 1)\n        median", "        val n = l.length\n   \
    \     if (n < 2) 0.0\n        else {\n            val mid = n / 2\n          \
    \  val left = l.slice(0, mid)\n            val right = l.slice(mid)\n        \
    \    val median = (left + right).sorted.last\n            median\n        }",
  "        val n = l.length\n        val sorted = l.sortWith(_ < _)\n        val half\
    \ = n / 2\n        if (n < 2) 0.0\n        else if (n == 2) sorted.head\n    \
    \    else (sorted.head + sorted.last) / 2.0", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median", "   \
    \     val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = left.sorted match {\n                case Nil => right(0)\n\
    \                case h :: t => h\n            }\n            val median2 = right.sorted\
    \ match {\n                case Nil => median\n                case h :: t =>\
    \ h\n            }\n            val median3 = median2.sorted match {\n       \
    \         case Nil => median2\n                case h :: t => h\n            }\n\
    \            val median4 = median3.sorted match {\n                case Nil =>\
    \ median3\n                case h :: t => h\n            }\n            val median5\
    \ = median4.sorted match {\n                case Nil => median4\n            \
    \    case h :: t => h\n            }\n            val median6 = median5.sorted\
    \ match {\n                case Nil => median5\n                case h :: t =>\
    \ h\n            }\n            val median7 = median6.sorted match {\n       \
    \         case Nil => median6\n                case h :: t => h\n            }\n\
    \            val median8 = median7.sorted match {\n                case Nil =>\
    \ median7\n                case h :: t => h\n            }\n            val median9\
    \ = median8.sorted match {\n                case Nil => median8\n            \
    \    case h :: t => h\n            }\n            val median10 = median9.sorted\
    \ match {\n                case Nil => median9\n                case h :: t =>\
    \ h\n            }\n            val median11 = median10.sorted match {\n     \
    \           case Nil => median10\n                case h :: t => h\n         \
    \   }\n            val median12 = median11.sorted match {\n                case\
    \ Nil => median11\n                case h :: t => h\n            }\n         \
    \   val median13 = median12.sorted match {\n                case Nil => median12\n\
    \                case h :: t => h\n            }\n            val median14 = median13.sorted\
    \ match {\n                case Nil => median13\n                case h :: t =>\
    \ h\n            }\n            val median15 = median14.sorted match {\n     \
    \           case Nil => median14\n                case h :: t => h\n         \
    \   }\n            val median16 = median15.sorted match {\n                case\
    \ Nil => median15\n                case h :: t => h\n            }\n         \
    \   val median17 = median16.sorted match {\n                case Nil => median16\n\
    \                case h :: t => h\n            }\n            val median18 = median17.sorted\
    \ match {\n                case Nil => median17\n                case h :: t =>\
    \ h\n            }\n            val ", "        val sorted = l.sorted\n      \
    \  val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        val rest = sorted.drop(half)\n        val medianOfRest = median(rest)\n\
    \        val medianOfRestAndRest = medianOfRest + median(l.tail)\n        medianOfRestAndRest",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted\n            median.last\n   \
    \     }", "        val n = l.length\n        val m = l.min\n        val h = (n\
    \ - 1) / 2\n        val lo = l.take(h)\n        val hi = l.drop(h)\n        val\
    \ mid = lo.take(h).zip(hi).map { case (x, y) => x + y }.sum / 2\n        val median\
    \ = if (n == 1) mid else (lo.take(h) + hi).sum / 2\n        median", "       \
    \ val n = l.length\n        if (n <= 1) 0.0\n        else {\n            val mid\
    \ = n / 2\n            val left = new Array[Long](n)\n            val right =\
    \ new Array[Long](n)\n            System.arraycopy(l, 0, left, 0, mid)\n     \
    \       System.arraycopy(l, mid, right, 0, n - mid)\n            val lMedian =\
    \ median(left)\n            val rMedian = median(right)\n            (lMedian\
    \ + rMedian) / 2\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else sorted.apply(mid + 1)\n        median", "        val n = l.length\n   \
    \     if (n < 2) 0.0\n        else {\n            val mid = n / 2\n          \
    \  val left = l.take(mid)\n            val right = l.drop(mid)\n            val\
    \ median = if (left.length < right.length) left else right\n            median.sum\
    \ / median.length\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = new Array[Long](n)\n\
    \            val right = new Array[Long](n)\n            System.arraycopy(l, 0,\
    \ left, 0, mid)\n            System.arraycopy(l, mid, right, 0, n - mid)\n   \
    \         val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            val median = (leftMedian + rightMedian) / 2\n            median\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        val\
    \ median = (l take half).sorted match {\n            case Nil => 0\n         \
    \   case h :: t => h\n        }\n        val left = (l drop half).sorted match\
    \ {\n            case Nil => 0\n            case h :: t => h\n        }\n    \
    \    val right = (l drop half).sorted match {\n            case Nil => 0\n   \
    \         case h :: t => h\n        }\n        val medianOfLeft = (left take half).sorted\
    \ match {\n            case Nil => 0\n            case h :: t => h\n        }\n\
    \        val medianOfRight = (right take half).sorted match {\n            case\
    \ Nil => 0\n            case h :: t => h\n        }\n        val medianOfLeftAndRight\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedian = (left drop\
    \ half).sorted match {\n            case Nil => 0\n            case h :: t =>\
    \ h\n        }\n        val medianOfLeftAndRightAndMedianAndMedian = (left drop\
    \ half).sorted match {\n            case Nil => 0\n            case h :: t =>\
    \ h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedian =\
    \ (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedianAndMedianAndMe",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = l.length / 2\n            val l1 = l.take(mid)\n            val l2 = l.drop(mid)\n\
    \            val m1 = median(l1)\n            val m2 = median(l2)\n          \
    \  val m = (m1 + m2) / 2\n            if (m1 < 0) m else -m\n        }", "   \
    \     val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            Array.copy(l, 0, left, 0, mid)\n         \
    \   Array.copy(l, mid, right, 0, n - mid)\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val median = leftMedian\
    \ + rightMedian / 2.0\n            median\n        }", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = (left + right).sorted\n        median.last",
  "        val n = l.length\n        val m = l.sortWith(_ < _).length / 2\n      \
    \  if (m == 0) 0\n        else l.sortWith(_ < _).length / 2 * 0.5", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        if (sorted.length\
    \ % 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat/2.0",
  "        val n = l.length\n        val m = l.max\n        val median = (m + n) /\
    \ 2\n        l.filter(_ < median).length / 2", "        val n = l.length\n   \
    \     if (n < 2) 0.0\n        else {\n            val mid = n / 2\n          \
    \  val m1 = l.take(mid)\n            val m2 = l.drop(mid)\n            val m =\
    \ (m1 + m2).sorted\n            val midPoint = (m.head + m.last) / 2\n       \
    \     val median = (m1.head + m2.head) / 2\n            val medianIndex = (m1.length\
    \ + m2.length) / 2\n            val medianValue = m.last\n            val medianIndexValue\
    \ = midPoint\n            val medianValueValue = median\n            val medianIndexValueValue\
    \ = medianIndex\n            val medianValueValueValue = medianValue\n       \
    \     val medianIndexValueValueValue = medianIndexValue\n            val medianValueValueValueValue\
    \ = medianValueValue\n            val medianIndexValueValueValueValue = medianIndexValueValue\n\
    \            val medianValueValueValueValueValue = medianValueValueValue\n   \
    \         val medianIndexValueValueValueValueValue = medianIndexValueValueValue\n\
    \            val medianValueValueValueValueValueValue = medianValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValue = medianIndexValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValue = medianValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValue = medianIndexValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValue = medianValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValue = medianIndexValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValueValue\
    \ = medianIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianIndexValueValueValueValueValueValueValueValueValue", "        val sorted\
    \ = l.sorted\n        val half = sorted.length / 2\n        if (sorted.length%2\
    \ == 0) sorted.last\n        else sorted.last+sorted.last", "        val n = l.length\n\
    \        if (n < 2) 0\n        else {\n            val mid = n / 2\n         \
    \   val left = l.slice(0, mid)\n            val right = l.slice(mid)\n       \
    \     val median = if (left.length < right.length) median(left) else median(right)\n\
    \            val m1 = median(left)\n            val m2 = median(right)\n     \
    \       val m = (m1 + m2) / 2\n            if (m1 < m) m1 else m\n        }",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left.length + right.length)\
    \ / 2\n        if (left.length < right.length) median\n        else (right + left)\
    \ / 2", "        val n = l.length\n        if (n < 2) 0\n        else {\n    \
    \        val mid = n / 2\n            val left = l.slice(0, mid)\n           \
    \ val right = l.slice(mid)\n            val median = (left + right).sorted.last\n\
    \            median\n        }", "        val n = l.length\n        if (n < 2)\
    \ 0.0\n        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = median(left) +\
    \ median(right)\n            median\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median", "   \
    \     val n = l.length\n        if (n < 2) 0\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted\n            median.last\n   \
    \     }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid)\n            val median = (left + right).sorted\n\
    \            val medianIndex = median.indexWhere(_ > median(mid))\n          \
    \  median(medianIndex)\n        }", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else sorted.apply(mid + 1)\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid - 1) + sorted.apply(mid))/2", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val n = l.length\n        if (n < 2) 0.0\n        else\
    \ {\n            val mid = n / 2\n            val left = new Array[Long](n)\n\
    \            val right = new Array[Long](n)\n            l.foreach(x => if (x\
    \ < mid) left(x) else right(x))\n            val leftMedian = median(left)\n \
    \           val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            median\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \        val medianOfBothHalfsIfEven = medianOfBothHalfs % 2 == 0\n        if\
    \ (medianOfBothHalfsIfEven) {\n            medianOfBothHalfs\n        } else {\n\
    \            medianOfBothHalfsIfEven\n        }", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = (left + right).sorted\n        median.last",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val mid = left.zip(right).map {\n \
    \           case (l, r) => l + r\n        }.sum / 2\n        mid", "        val\
    \ n = l.length\n        if (n < 2) 0\n        else {\n            val half = n\
    \ / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val mid = math.round((left + right) / 2)\n            mid\n     \
    \   }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n  \
    \          val mid = n / 2\n            val left = l.slice(0, mid)\n         \
    \   val right = l.slice(mid)\n            val median = math.max(median(left),\
    \ median(right))\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = new Array[Long](n)\n\
    \            val right = new Array[Long](n)\n            for (i <- 0 until n)\
    \ {\n                left(i) = l(i)\n                right(i) = l(i + mid)\n \
    \           }\n            val lMedian = median(left)\n            val rMedian\
    \ = median(right)\n            val median = (lMedian + rMedian) / 2\n        \
    \    if (median == 0.0) 0.0\n            else median\n        }", "        val\
    \ n = l.length\n        val half = n / 2\n        val left = l.take(half)\n  \
    \      val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        val medianIndex = median.indexOf(0)\n        median(medianIndex)", " \
    \       val n = l.length\n        val mid = n / 2\n        val left = l.slice(0,\
    \ mid)\n        val right = l.slice(mid)\n        val median = (left.length +\
    \ right.length) / 2\n        val medianValue = left.length match {\n         \
    \   case 0 => right(0)\n            case 1 => right(0) + (right(1) + right(2))/2\n\
    \            case 2 => right(0) + (right(1) + right(2))/2\n            case _\
    \ => right(0) + (right(1) + right(2))/2\n        }\n        medianValue", "  \
    \      val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ half = n / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val mid = left.zip(right).map(_._1).sum / 2\n            val median\
    \ = if (n == 1) mid else (left + right) / 2.0\n            median\n        }",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val mid = left match {\n          \
    \  case Nil => right\n            case x :: xs => x\n        }\n        val median\
    \ = (left + right) match {\n            case Nil => mid\n            case x ::\
    \ xs => x match {\n                case x if x < mid => x\n                case\
    \ x if x > mid => mid\n                case _ => median\n            }\n     \
    \   }\n        median.toFloat", "        val n = l.length\n        if (n < 2)\
    \ 0.0\n        else {\n            val mid = n / 2\n            val low = l.take(mid)\n\
    \            val high = l.drop(mid)\n            val lowMedian = median(low)\n\
    \            val highMedian = median(high)\n            val median = (lowMedian\
    \ + highMedian) / 2\n            median\n        }", "        val n = l.length\n\
    \        if (n <= 1) 0.0\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = (left + right).sorted match {\n                case Nil => 0.0\n\
    \                case x :: xs => xs.last\n            }\n            median\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = if (sorted.length % 2 == 0) sorted[mid] else sorted[mid-1]\n\
    \        median", "        val n = l.length\n        if (n < 2) 0\n        else\
    \ if (n % 2 == 0) l.sorted take (n / 2) reduce (_ + _) / 2.0\n        else l.sorted\
    \ take (n / 2 - 1) reduce (_ + _) / 2.0", "        val n = l.length\n        if\
    \ (n < 2) 0.0\n        else {\n            val mid = l.length / 2\n          \
    \  val left = l.slice(0, mid)\n            val right = l.slice(mid)\n        \
    \    val m1 = median(left)\n            val m2 = median(right)\n            val\
    \ m = (m1 + m2) / 2\n            if (m1 < m) m1 else m\n        }", "        val\
    \ n = l.length\n        if (n < 2) 0.0\n        else {\n            val mid =\
    \ l.length / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val midVal = median(left)\n            val rightVal\
    \ = median(right)\n            val median = (midVal + rightVal) / 2\n        \
    \    median\n        }", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val left  = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        val medianOfLeft = median(left)\n\
    \        val medianOfRight = median(right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val ", "        val n\
    \ = l.length\n        val sorted = l.sortWith(_ < _)\n        val mid = n / 2\n\
    \        if (n < 3) {\n            sorted.last\n        } else {\n           \
    \ val median = (sorted take mid).sum / mid\n            val left = (sorted drop\
    \ (mid)).sum / mid\n            val right = (sorted drop (mid + 1)).sum / mid\n\
    \            (median + left + right) / 2\n        }", "        val n = l.length\n\
    \        if (n < 1) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val low = l.take(mid)\n            val high = l.drop(mid)\n            val\
    \ m1 = median(low)\n            val m2 = median(high)\n            (m1 + m2) /\
    \ 2\n        }", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n        median", "    \
    \    val n = l.length\n        val m = l.groupBy(x => x).mapValues(_.length).max\n\
    \        val median = (m / 2).toFloat\n        l.map(x => (x - median)).sum /\
    \ n", "        val n = l.length\n        val half = n / 2\n        if (n < 2)\
    \ {\n            0f\n        } else {\n            val median = l.sortWith(_ <\
    \ _).take(half).last\n            val lower = l.sortWith(_ < _).take(half).head\n\
    \            val upper = l.sortWith(_ < _).drop(half).last\n            val median1\
    \ = l.sortWith(_ < _).take(half).last\n            val median2 = l.sortWith(_\
    \ < _).drop(half).last\n            val median3 = l.sortWith(_ < _).take(half).last\n\
    \            val median4 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median5 = l.sortWith(_ < _).take(half).last\n            val median6 = l.sortWith(_\
    \ < _).drop(half).last\n            val median7 = l.sortWith(_ < _).take(half).last\n\
    \            val median8 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median9 = l.sortWith(_ < _).take(half).last\n            val median10 = l.sortWith(_\
    \ < _).drop(half).last\n            val median11 = l.sortWith(_ < _).take(half).last\n\
    \            val median12 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median13 = l.sortWith(_ < _).take(half).last\n            val median14 = l.sortWith(_\
    \ < _).drop(half).last\n            val median15 = l.sortWith(_ < _).take(half).last\n\
    \            val median16 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median17 = l.sortWith(_ < _).take(half).last\n            val median18 = l.sortWith(_\
    \ < _).drop(half).last\n            val median19 = l.sortWith(_ < _).take(half).last\n\
    \            val median20 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median21 = l.sortWith(_ < _).take(half).last\n            val median22 = l.sortWith(_\
    \ < _).drop(half).last\n            val median23 = l.sortWith(_ < _).take(half).last\n\
    \            val median24 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median25 = l.sortWith(_ < _).take(half).last\n            val median26 = l.sortWith(_\
    \ < _).drop(half).last\n            val median27 = l.sortWith(_ < ", "       \
    \ val n = l.length\n        if (n < 2) 0.0\n        else {\n            val mid\
    \ = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = if (left.isEmpty) right else left\n            val medianOfLeft\
    \ = median(left)\n            val medianOfRight = median(right)\n            val\
    \ medianOfMedian = medianOfLeft + medianOfRight\n            medianOfMedian\n\
    \        }", "        val n = l.length\n        val m = l.head\n        val half\
    \ = n / 2\n        val left = l.drop(half)\n        val right = l.take(half)\n\
    \        val median = (left + right).sorted\n        val mid = median.head\n \
    \       val median2 = median.tail\n        val median3 = median2.sorted\n    \
    \    val median4 = median3.head\n        val median5 = median3.tail\n        val\
    \ median6 = median4.sorted\n        val median7 = median6.head\n        val median8\
    \ = median6.tail\n        val median9 = median7.sorted\n        val median10 =\
    \ median9.head\n        val median11 = median9.tail\n        val median12 = median10.sorted\n\
    \        val median13 = median11.head\n        val median14 = median11.tail\n\
    \        val median15 = median12.sorted\n        val median16 = median13.head\n\
    \        val median17 = median13.tail\n        val median18 = median14.sorted\n\
    \        val median19 = median16.head\n        val median20 = median16.tail\n\
    \        val median21 = median17.sorted\n        val median22 = median18.head\n\
    \        val median23 = median18.tail\n        val median24 = median19.sorted\n\
    \        val median25 = median20.head\n        val median26 = median20.tail\n\
    \        val median27 = median21.sorted\n        val median28 = median22.head\n\
    \        val median29 = median22.tail\n        val median30 = median23.sorted\n\
    \        val median31 = median24.head\n        val median32 = median24.tail\n\
    \        val median33 = median25.sorted\n        val median34 = median26.head\n\
    \        val median35 = median26.tail\n        val median36 = median27.sorted\n\
    \        val median37 = median28.head\n        val median38 = median28.tail\n\
    \        val median39 = median29.sorted\n        val median40 = median30.head\n\
    \        val median41 = median30.tail\n        val median42 = median31.sorted\n\
    \        val median43 = median32.head\n        val median44 = median32.tail\n\
    \        val median45 = median33.sorted\n        val median46 = median34.head\n\
    \        val median47 = median34.tail\n        val median48 = median35.sorted\n\
    \        val median49 = median36.head\n        val median50 = median36.tail\n\
    \        val median51 = median37.sorted\n        val median52 = median38.head\n\
    \        val median53 = median38.tail\n", "        val n = l.length\n        if\
    \ (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val low\
    \ = l.take(mid)\n            val high = l.drop(mid)\n            val midVal =\
    \ low.reduce((x, y) => x + y)\n            val lowVal = low.reduce((x, y) => x\
    \ + y)\n            val highVal = high.reduce((x, y) => x + y)\n            val\
    \ median = midVal + (lowVal + highVal) / 2.0\n            median\n        }",
  "        val n = l.length\n        val mid = n / 2\n        val left = new Array[Long](n)\n\
    \        val right = new Array[Long](n)\n        var i = 0\n        var j = 0\n\
    \        while (i < n) {\n            left(i) = l(i)\n            i += 1\n   \
    \     }\n        while (j < n) {\n            right(j) = l(j)\n            j +=\
    \ 1\n        }\n        val leftMedian = median(left)\n        val rightMedian\
    \ = median(right)\n        val median = (leftMedian + rightMedian) / 2\n     \
    \   if (n == 1) {\n            return median\n        }\n        if (leftMedian\
    \ > rightMedian) {\n            return median\n        }\n        return median",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            System.arraycopy(l, 0, left, 0, mid)\n   \
    \         System.arraycopy(l, mid, right, 0, n - mid)\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            median\n        }", " \
    \       val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = if (n == 1) left else (left\
    \ + right) / 2\n        median", "        val n = l.length\n        if (n <= 1)\
    \ 0.0\n        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = (left + right).sorted\n\
    \            val medianIndex = median.indexWhere(_ > median(mid))\n          \
    \  median(mid)\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = if (left.length\
    \ == 0) right else left\n            val medianValue = median.sum / median.length\n\
    \            medianValue\n        }", "        val n = l.length\n        val half\
    \ = n / 2\n        val median = (l(half) + l(half+1)) / 2\n        median", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val leftHalf = sorted.take(mid)\n  \
    \      val rightHalf = sorted.drop(mid)\n        val medianOfLeftHalf = median(leftHalf)\n\
    \        val medianOfRightHalf = median(rightHalf)\n        val medianOfBothHalfs\
    \ = median(leftHalf ++ rightHalf)\n        val medianOfBothHalfsIfEven = median(leftHalf\
    \ ++ rightHalf.take(1))\n        val medianOfBothHalfsIfOdd = median(leftHalf\
    \ ++ rightHalf.drop(1))\n        val medianOfBothHalfsIfEvenIfOdd = median(leftHalf\
    \ ++ rightHalf.take(2) ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(3) ++ rightHalf.drop(3))\n        val medianOfBothHalfsIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(4) ++ rightHalf.drop(4))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(5) ++ rightHalf.drop(5))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(6) ++ rightHalf.drop(6))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(7) ++ rightHalf.drop(7))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(8) ++ rightHalf.drop(8))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(9) ++ rightHalf.drop(9))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(10) ++ rightHalf.drop(10))\n        val\
    \ medianOfBothHalfsIfEvenIf", "        val n = l.length\n        val mid = n /\
    \ 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n       \
    \ val median = if (n == 1) left else (left + right) / 2\n        median", "  \
    \      val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = (sorted take mid) + (sorted drop mid)\n        val medianIndex = sorted.indexOf(median)\n\
    \        val medianValue = sorted take medianIndex\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValue", "        val n = l.length\n       \
    \ if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            median.last\n        }", "        val sorted\
    \ = l.sorted\n        val half = sorted.length / 2\n        val median = sorted.take(half).last\
    \ + sorted.drop(half).take(half).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left  = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            val median = (leftMedian + rightMedian) / 2\n            median\n\
    \        }", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        if (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat\
    \ + sorted.last.toFloat / 2", "        val n = l.length\n        val half = n\
    \ / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n   \
    \     val mid = math.floor(half)\n        val median = if (n == 1) left else (left\
    \ + right) / 2\n        val median1 = if (n == 1) left else (left + right) / 2\n\
    \        val median2 = if (n == 1) left else (left + right) / 2\n        val median3\
    \ = if (n == 1) left else (left + right) / 2\n        val median4 = if (n == 1)\
    \ left else (left + right) / 2\n        val median5 = if (n == 1) left else (left\
    \ + right) / 2\n        val median6 = if (n == 1) left else (left + right) / 2\n\
    \        val median7 = if (n == 1) left else (left + right) / 2\n        val median8\
    \ = if (n == 1) left else (left + right) / 2\n        val median9 = if (n == 1)\
    \ left else (left + right) / 2\n        val median10 = if (n == 1) left else (left\
    \ + right) / 2\n        val median11 = if (n == 1) left else (left + right) /\
    \ 2\n        val median12 = if (n == 1) left else (left + right) / 2\n       \
    \ val median13 = if (n == 1) left else (left + right) / 2\n        val median14\
    \ = if (n == 1) left else (left + right) / 2\n        val median15 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median16 = if (n == 1) left else\
    \ (left + right) / 2\n        val median17 = if (n == 1) left else (left + right)\
    \ / 2\n        val median18 = if (n == 1) left else (left + right) / 2\n     \
    \   val median19 = if (n == 1) left else (left + right) / 2\n        val median20\
    \ = if (n == 1) left else (left + right) / 2\n        val median21 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median22 = if (n == 1) left else\
    \ (left + right) / 2\n        val median23 = if (n == 1) left else (left + right)\
    \ / 2\n        val median24 = if (n == 1) left else (left + right) / 2\n     \
    \   val median25 = if (n == 1) left else (left + right) / 2\n        val median26\
    \ = if (n == 1) left else (left + right) / 2\n        val median27 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median28 = if (n == 1) left else\
    \ (left + right) / 2\n        val median29 = if (n == 1) left else (left + right)\
    \ / 2\n        val median30 = if (n == 1) left else (left + right) / 2\n     \
    \   val median31 = if (n == 1) left else (left + right) / 2\n        val median32\
    \ = if (", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = (left.sum\
    \ + right.sum) / 2\n        median", "        val n = l.length\n        val mid\
    \ = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n \
    \       val median = (left.sum + right.sum) / 2.0\n        median", "        val\
    \ n = l.length\n        if (n < 2) 0.0\n        else {\n            val mid =\
    \ n / 2\n            val left = new Array[Long](n)\n            val right = new\
    \ Array[Long](n)\n            for (i <- 0 until n) {\n                left(i)\
    \ = l(i)\n            }\n            for (i <- 0 until n) {\n                right(i)\
    \ = (i + mid)\n            }\n            val leftMedian = median(left)\n    \
    \        val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            if (n == 1) median\n            else median\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid)\n            val median = left.reduceLeft(_ + _)\
    \ / mid\n            if (median.isNaN) 0.0\n            else median\n        }",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            for (i <- 0 until n) {\n                left(i)\
    \ = l(i)\n                right(i) = (i + 1) % n\n            }\n            val\
    \ leftMedian = median(left)\n            val rightMedian = median(right)\n   \
    \         val median = (leftMedian + rightMedian) / 2\n            if (n == 1)\
    \ median\n            else {\n                val leftCount = left.count(_ ==\
    \ median)\n                val rightCount = right.count(_ == median)\n       \
    \         if (leftCount + rightCount < n) median\n                else {\n   \
    \                 val leftMedianIndex = left.indexWhere(_ == median)\n       \
    \             val rightMedianIndex = right.indexWhere(_ == median)\n         \
    \           if (leftMedianIndex < rightMedianIndex) median\n                 \
    \   else rightMedian\n                }\n            }\n        }", "        val\
    \ n = l.length\n        if (n < 2) 0.0\n        else {\n            val mid =\
    \ n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = if (left.length == 0) right else left\n            val\
    \ medianValue = median.sum / median.length\n            medianValue\n        }",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted\n\
    \        median.last", "        val n = l.length\n        val mid = n / 2\n  \
    \      val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = (left + right).sorted\n        median.last", "        val n = l.length\n \
    \       val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val m = (left + right).sorted\n        val median = m.last\n        median",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = if (left.length == 0) right else left\n            median.sum\
    \ / median.length\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = median(left) +\
    \ median(right)\n            median\n        }", "        val n = l.length\n \
    \       if (n < 2) 0.0\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val median = (left + right).sorted\n            median.last\n        }",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = (sorted take mid).sum / mid\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.slice(0, mid)\n            val right = l.slice(mid)\n     \
    \       val median = (left + right).sorted\n            val medianIndex = median.indexWhere(_\
    \ > median.last)\n            median(medianIndex + 1) + median(medianIndex - 1)\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        val\
    \ left = l.take(half)\n        val right = l.drop(half)\n        val median =\
    \ if (n == 1) left else (left + right) / 2\n        median.toFloat", "       \
    \ val n = l.length\n        if (n < 2) 0\n        else {\n            val mid\
    \ = n / 2\n            val left = l.slice(0, mid)\n            val right = l.slice(mid)\n\
    \            val median = (left + right).sortBy(_).last\n            median\n\
    \        }", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = new Array[Long](n)\n        val right = new Array[Long](n)\n        for( i\
    \ <- 0 until n ) {\n            if( i < mid ) {\n                left(i) = l(i)\n\
    \            } else {\n                right(i) = l(i)\n            }\n      \
    \  }\n        val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val median = (leftMedian + rightMedian) / 2\n        return median",
  "        val n = l.length\n        val mid = n / 2\n        val left = (0 until\
    \ n).map(i => l(i)).toList\n        val right = (0 until n).map(i => l(n-i-1)).map(_.toLong).toList\n\
    \        val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val median = (leftMedian + rightMedian) / 2\n        if (n == 1) median\n\
    \        else median", "        val n = l.length\n        val half = n / 2\n \
    \       val left = l.take(half)\n        val right = l.drop(half)\n        val\
    \ mid = left match {\n            case Nil => right\n            case x :: xs\
    \ => x\n        }\n        val median = (left + right) match {\n            case\
    \ Nil => mid\n            case x :: xs => x match {\n                case x if\
    \ x < mid => x\n                case x => mid\n            }\n        }\n    \
    \    median.toFloat", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = (sorted take mid) + (sorted drop mid)\n        median.last",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val leftMedian = sorted.take(mid).last\n\
    \        val rightMedian = sorted.last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < median)\n        val rightMedianIndex = sorted.lastIndexWhere(x => x\
    \ > median)\n        val leftMedianValue = sorted.take(leftMedianIndex).last\n\
    \        val rightMedianValue = sorted.take(rightMedianIndex).last\n        val\
    \ leftMedianIndex = sorted.lastIndexWhere(x => x < leftMedianValue)\n        val\
    \ rightMedianIndex = sorted.lastIndexWhere(x => x > rightMedianValue)\n      \
    \  val leftMedianValue = sorted.take(leftMedianIndex).last\n        val rightMedianValue\
    \ = sorted.take(rightMedianIndex).last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < leftMedianValue)\n        val rightMedianIndex = sorted.lastIndexWhere(x\
    \ => x > rightMedianValue)\n        val leftMedianValue = sorted.take(leftMedianIndex).last\n\
    \        val rightMedianValue = sorted.take(rightMedianIndex).last\n        val\
    \ leftMedianIndex = sorted.lastIndexWhere(x => x < leftMedianValue)\n        val\
    \ rightMedianIndex = sorted.lastIndexWhere(x => x > rightMedianValue)\n      \
    \  val leftMedianValue = sorted.take(leftMedianIndex).last\n        val rightMedianValue\
    \ = sorted.take(rightMedianIndex).last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < leftMedianValue)\n        val rightMedianIndex = sorted.lastIndexWhere(x\
    \ => x > rightMedianValue)\n        val leftMedianValue = sorted.take(leftMedianIndex).last\n\
    \        val rightMedianValue = sorted.take(rightMedianIndex).last\n        val\
    \ leftMedianIndex = sorted.lastIndexWhere(x => x < leftMedianValue)\n        val\
    \ rightMedianIndex = sorted.lastIndexWhere(x => x > rightMedianValue)\n      \
    \  val leftMedianValue = sorted.take(leftMedianIndex).last\n        val rightMedianValue\
    \ = sorted.take(rightMedianIndex).last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < leftMedianValue)\n        val rightMedianIndex = sorted.lastIndexWhere(x ",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val half = sorted.length - mid\n        if (half % 2 == 0) median / 2.0\n\
    \        else (median + sorted.last) / 2.0", "        val n = l.length\n     \
    \   if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }", "        val\
    \ n = l.length\n        if (n <= 1) 0\n        else {\n            val mid = n\
    \ / 2\n            val left = l.slice(0, mid)\n            val right = l.slice(mid)\n\
    \            val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            (leftMedian + rightMedian) / 2\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val half = n / 2\n      \
    \      val median = l.sortWith(_ < _).take(half).last\n            val lower =\
    \ l.take(half).min\n            val upper = l.take(half).max\n            val\
    \ medianOfLower = median(lower)\n            val medianOfUpper = median(upper)\n\
    \            val medianOfMedian = median(median)\n            val lowerOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val upperOfMedian =\
    \ l.filter(x => x == medianOfUpper).length\n            val medianOfLowerOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val medianOfUpperOfMedian\
    \ = l.filter(x => x == medianOfUpper).length\n            val medianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfMedian).length\n            val lowerOfMedianOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val upperOfMedianOfMedian\
    \ = l.filter(x => x == medianOfUpper).length\n            val medianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfMedian).length\n            val lowerOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val upperOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfUpper).length\n            val medianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfMedian).length\n            val lowerOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val upperOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfUpper).length\n            val medianOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfMedian).length\n            val lowerOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val upperOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfUpper).length\n            val medianOfMedianOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfMedian).length\n            ", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median", " \
    \       val n = l.length\n        val half = n / 2\n        val left = l.slice(0,\
    \ half)\n        val right = l.slice(half, n)\n        val mid = math.ceil((left\
    \ + right) / 2)\n        val median = (left + right).sum / 2\n        if (n ==\
    \ 1) median\n        else median", "        val n = l.length\n        if (n <\
    \ 2) 0.0\n        else {\n            val half = n / 2\n            val leftMedian\
    \ = median(l.take(half))\n            val rightMedian = median(l.drop(half))\n\
    \            leftMedian + rightMedian / 2.0\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.slice(0, mid)\n            val right = l.slice(mid)\n     \
    \       val median = (left + right).sorted match {\n                case Nil =>\
    \ 0.0\n                case x :: xs => x\n            }\n            median\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid)\n            val median = (left + right).sorted\
    \ match {\n                case Nil => 0.0\n                case x :: xs => xs.last\n\
    \            }\n            median\n        }", "        val n = l.length\n  \
    \      if (n < 2) 0.0\n        else {\n            val mid = n / 2\n         \
    \   val left = new Array[Long](n)\n            val right = new Array[Long](n)\n\
    \            val midVal = l(mid - 1)\n            val leftVal = l(mid - 1)\n \
    \           val rightVal = l(mid + 1)\n            val leftSum = 0.0\n       \
    \     val rightSum = 0.0\n            for (i <- 0 until n) {\n               \
    \ if (i < mid) left(i) = l(i)\n                else right(i) = l(i)\n        \
    \        leftSum += l(i)\n                rightSum += l(i)\n            }\n  \
    \          val leftMedian = leftSum / n\n            val rightMedian = rightSum\
    \ / n\n            val median = if (leftMedian < rightMedian) leftMedian\n   \
    \         else rightMedian\n            median\n        }", "        val n = l.length\n\
    \        val half = n / 2\n        if (n < 2) 0.0\n        else {\n          \
    \  val median = l.sortWith(_ < _).reverse.head\n            val leftMedian = l.sortWith(_\
    \ < _).reverse.take(half).head\n            val rightMedian = l.sortWith(_ < _).reverse.drop(half).head\n\
    \            val medianDiff = median.abs - leftMedian.abs\n            val leftMedianDiff\
    \ = leftMedian.abs - median.abs\n            val rightMedianDiff = rightMedian.abs\
    \ - median.abs\n            val medianDiffAbs = medianDiff.abs\n            val\
    \ leftMedianDiffAbs = leftMedianDiff.abs\n            val rightMedianDiffAbs =\
    \ rightMedianDiff.abs\n            val absDiff = medianDiffAbs + leftMedianDiffAbs\
    \ + rightMedianDiffAbs\n            val absDiffAbs = absDiff.abs\n           \
    \ val absDiffRatio = absDiffAbs / n\n            val medianDiffRatio = medianDiffAbs\
    \ / n\n            val leftMedianDiffRatio = leftMedianDiffAbs / n\n         \
    \   val rightMedianDiffRatio = rightMedianDiffAbs / n\n            val medianDiffRatioAbs\
    \ = medianDiffRatio * n\n            val leftMedianDiffRatioAbs = leftMedianDiffRatio\
    \ * n\n            val rightMedianDiffRatioAbs = rightMedianDiffRatio * n\n  \
    \          val medianDiffRatioAbsAbs = medianDiffRatioAbs * n\n            val\
    \ leftMedianDiffRatioAbsAbs = leftMedianDiffRatioAbs * n\n            val rightMedianDiffRatioAbsAbs\
    \ = rightMedianDiffRatioAbs * n\n            val medianDiffRatioAbsAbsAbs = medianDiffRatioAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbs = medianDiffRatioAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbs = medianDiffRatioAbsAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbs = medianDiffRatioAbsAbsAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbsAbs = medianDiffRatioAbsAbsAbsAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbsAbsAb", "        val n =\
    \ l.length\n        val half = n / 2\n        if (n < 1) throw new IllegalArgumentException(\"\
    List must have at least two elements\")\n        if (n == 1) return l(0)\n   \
    \     if (n == 2) return (l(1) + l(2))/2\n        val mid = l.length/2\n     \
    \   val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = median(left)\n        val leftMedian = median(right)\n        if (leftMedian\
    \ < median) left\n        else right", "        val n = l.length\n        if (n\
    \ < 2) 0\n        else {\n            val half = n / 2\n            val median\
    \ = (l(half) + l(half+1)) / 2\n            median\n        }", "        val n\
    \ = l.length\n        if (n <= 1) 0f\n        else {\n            val half = n\
    \ / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val mid = math.round((left + right) / 2)\n            val median\
    \ = (left + right) / 2\n            if (median == 0) 0f\n            else median\n\
    \        }", "        val n = l.length\n        if (n < 1) 0.0\n        else {\n\
    \            val mid = n / 2\n            val left = new Array[Long](n)\n    \
    \        val right = new Array[Long](n)\n            val i = 0\n            while\
    \ (i < n) {\n                left(i) = l(i)\n                i += 1\n        \
    \    }\n            i = 0\n            while (i < n) {\n                right(i)\
    \ = l(i)\n                i += 1\n            }\n            val leftMedian =\
    \ median(left)\n            val rightMedian = median(right)\n            val median\
    \ = (leftMedian + rightMedian) / 2\n            if (n == 1) median\n         \
    \   else median\n        }", "        val sorted = l.sorted\n        val mid =\
    \ sorted.length / 2\n        val median = sorted.take(mid).last\n        val isEven\
    \ = sorted.length%2 == 0\n        val medianIsEven = if (isEven) median else median.toFloat\n\
    \        val medianIsOdd = if (isEven) median.toFloat else median\n        val\
    \ medianIsEvenIsOdd = if (isEven) medianIsEven else medianIsOdd\n        val medianIsEvenIsOddIsEven\
    \ = if (isEven) medianIsEvenIsOdd else medianIsOdd\n        val medianIsEvenIsOddIsOdd\
    \ = if (isEven) medianIsOdd else medianIsEven\n        val medianIsEvenIsOddIsEvenIsOdd\
    \ = if (isEven) medianIsEvenIsOddIsEven else medianIsOddIsEven\n        val medianIsEvenIsOddIsOddIsEven\
    \ = if (isEven) medianIsEvenIsOddIsOdd else medianIsOddIsEven\n        val medianIsEvenIsOddIsOddIsEvenIsOdd\
    \ = if (isEven) medianIsEvenIsOddIsEvenIsOdd else medianIsOddIsEvenIsOdd\n   \
    \     val medianIsEvenIsOddIsOddIsEvenIsOddIsEven = if (isEven) medianIsEvenIsOddIsOddIsEvenIsOdd\
    \ else medianIsOddIsEvenIsOddIsEvenIsOdd\n        val medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOdd\
    \ = if (isEven) medianIsEvenIsOddIsOddIsEvenIsOddIsEven else medianIsOddIsEvenIsOddIsEvenIsOddIsEven\n\
    \        val medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOddIsEven = if (isEven)\
    \ medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOdd else medianIsOddIsEvenIsOddIsEvenIsOddIsEvenIsOddIsEven\n\
    \        val medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOddIsEvenIsOdd = if (isEven)\
    \ medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOddIsEven else medianIsOddIsEvenIsOddIsEvenIsOddIs",
  "        val n = l.length\n        if (n <= 1) 0.0\n        else {\n           \
    \ val mid = n / 2\n            val left = l.take(mid)\n            val right =\
    \ l.drop(mid)\n            val median = (left + right).sorted\n            val\
    \ medianIndex = median.indexWhere(_ > median.last)\n            median(medianIndex\
    \ + 1) + median(medianIndex - 1)\n        }", "        val n = l.length\n    \
    \    val half = n / 2\n        val median = if (n % 2 == 0) l.sorted.take(half).last\
    \ else l.sorted.take(half).last\n        median.toFloat", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            val leftSum = 0\n            val rightSum\
    \ = 0\n            for (i <- 0 until n) {\n                left(i) = l(i)\n  \
    \              right(i) = l(mid - i)\n                leftSum += l(i)\n      \
    \          rightSum += l(mid - i)\n            }\n            val leftMedian =\
    \ leftSum / n\n            val rightMedian = rightSum / n\n            val median\
    \ = (leftMedian + rightMedian) / 2\n            if (median == leftMedian) leftMedian\n\
    \            else rightMedian\n        }", "        val n = l.length\n       \
    \ if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = math.round((left + right) / 2)\n            val median = if (left == right)\
    \ mid\n            else math.round((left + right) / 2)\n            median\n \
    \       }", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = if (n ==\
    \ 1) left else (left + right) / 2\n        median", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = (left + right).sorted\n        val medianIndex\
    \ = median.indexWhere(_ > 0)\n        median(medianIndex)", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.take(mid)\n            val right = l.drop(mid)\n          \
    \  val median = (left + right).sorted\n            median(median)\n        }",
  "        val n = l.length\n        if (n < 2) 0\n        else {\n            val\
    \ half = n / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val mid = math.floor(half)\n            val median = (left + right).sorted\n\
    \            val medianIndex = math.floor(n / 2)\n            val medianValue\
    \ = median(medianIndex)\n            val medianIndex2 = math.floor((n - 1) / 2)\n\
    \            val medianValue2 = median(medianIndex2)\n            val medianDiff\
    \ = medianValue - medianValue2\n            if (medianDiff == 0) medianValue\n\
    \            else medianValue + medianDiff\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = l.length / 2\n\
    \            val left = l.slice(0, mid)\n            val right = l.slice(mid)\n\
    \            val median = (left + right).sorted match {\n                case\
    \ Nil => 0.0\n                case x :: xs => xs.last\n            }\n       \
    \     median.toFloat\n        }", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = sorted.take(mid).last\n      \
    \  val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \        val medianOfBothHalfsIsBetterThanMedian = medianOfBothHalfs > median\n\
    \        if (medianOfBothHalfsIsBetterThanMedian)\n            medianOfBothHalfs\n\
    \        else\n            median", "        val n = l.length\n        val half\
    \ = n / 2\n        if (n % 2 == 0) {\n            val m1 = l.take(half)\n    \
    \        val m2 = l.drop(half)\n            val m = (m1 + m2).sorted\n       \
    \     val mid = m.size / 2\n            val median = (m1.head + m2.head) / 2\n\
    \            if (mid < median) {\n                median\n            } else {\n\
    \                median\n            }\n        } else {\n            val m1 =\
    \ l.take(half)\n            val m2 = l.drop(half)\n            val m = (m1 + m2).sorted\n\
    \            val mid = m.size / 2\n            val median = (m1.head + m2.head)\
    \ / 2\n            if (mid < median) {\n                median\n            }\
    \ else {\n                median\n            }\n        }", "        val n =\
    \ l.length\n        val half = n / 2\n        val left = l.take(half)\n      \
    \  val right = l.drop(half)\n        val median = if (n == 1) left else (left\
    \ + right) / 2\n        median", "        val n = l.length\n        val mid =\
    \ n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n   \
    \     val median = (left + right).sorted match {\n            case Nil => 0f\n\
    \            case x :: Nil => x\n            case x :: y => if (x < y) x else\
    \ y\n        }\n        median", "        val n = l.length\n        val mid =\
    \ n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n   \
    \     val m = (left + right).sorted.last\n        m", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = (left ++ right).sortWith(_ < _).head\n   \
    \     median", "        val n = l.length\n        if (n < 2) 0.0\n        else\
    \ {\n            val mid = n / 2\n            val left = new Array[Long](n)\n\
    \            val right = new Array[Long](n)\n            for (i <- 0 until n)\
    \ {\n                left(i) = l(i)\n                right(i) = (i + 1) % n\n\
    \            }\n            val median = (left.sum + right.sum) / 2\n        \
    \    val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            if (leftMedian < rightMedian) leftMedian\n            else rightMedian\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        val\
    \ left = l.take(half)\n        val right = l.drop(half)\n        val median =\
    \ left.reduceLeft(_ + _) / 2.0\n        val median2 = right.reduceRight(_ + _)\
    \ / 2.0\n        val median3 = median * median\n        val median4 = median2\
    \ * median\n        if (median3 < median4)\n            median\n        else\n\
    \            median2", "        val n = l.length\n        val mid = n / 2\n  \
    \      val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = left.median + right.median\n        median.toFloat", "        val n = l.length\n\
    \        val m = l.max\n        val half = n / 2\n        val left = (0 to half).map(i\
    \ => l(i)).sum\n        val right = (half to n).map(i => l(i)).sum\n        val\
    \ median = (left + right) / 2\n        median", "        val n = l.length\n  \
    \      if (n < 2) 0.0\n        else {\n            val mid = n / 2\n         \
    \   val left = l.take(mid)\n            val right = l.drop(mid)\n            val\
    \ median = (left + right).sorted\n            val medianIndex = median.index\n\
    \            val medianValue = median(medianIndex)\n            medianValue\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        val\
    \ left = l.take(half)\n        val right = l.drop(half)\n        val median =\
    \ (left + right).sorted match {\n            case Nil => 0.0\n            case\
    \ x :: xs => xs.last\n        }\n        median.toFloat", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.take(mid)\n        val rightHalf = sorted.drop(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfEven = median(leftHalf ++ rightHalf.take(1))\n\
    \        val medianOfBothHalfsIfOdd = median(leftHalf ++ rightHalf.drop(1))\n\
    \        val medianOfBothHalfsIfEvenIfOdd = median(leftHalf ++ rightHalf.take(2)\
    \ ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfEvenIfOddIfEven = median(leftHalf\
    \ ++ rightHalf.take(3) ++ rightHalf.drop(3))\n        val medianOfBothHalfsIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(4) ++ rightHalf.drop(4))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(5) ++ rightHalf.drop(5))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(6) ++ rightHalf.drop(6))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(7) ++ rightHalf.drop(7))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(8) ++ rightHalf.drop(8))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(9) ++ rightHalf.drop(9))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(10) ++ rightHalf.drop(10))\n        val\
    \ medianOfBothHalfsIfEvenIf", "        val n = l.length\n        if (n < 2) 0\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = if (left.length\
    \ == 0) right else left\n            median.sum / median.length\n        }", " \
    \       val sorted = l.sorted\n        val half = sorted.length / 2\n        val\
    \ median = sorted.take(half).last\n        val lower = sorted.take(half).drop(1)\n\
    \        val upper = sorted.take(half).dropRight(1)\n        val medianOfLower\
    \ = median(lower)\n        val medianOfUpper = median(upper)\n        val medianOfMedian\
    \ = median(sorted)\n        val medianOfMedianOfLower = medianOfLower + medianOfMedian\n\
    \        val medianOfMedianOfUpper = medianOfUpper + medianOfMedian\n        val\
    \ medianOfMedianOfMedian = medianOfMedianOfLower + medianOfMedianOfUpper\n   \
    \     val medianOfMedianOfMedianOfLower = medianOfMedianOfLower + medianOfMedianOfMedian\n\
    \        val medianOfMedianOfMedianOfUpper = medianOfMedianOfUpper + medianOfMedianOfMedian\n\
    \        val medianOfMedianOfMedianOfMedian = medianOfMedianOfMedianOfLower +\
    \ medianOfMedianOfMedianOfMedianOfUpper\n        val medianOfMedianOfMedianOfMedianOfLower\
    \ = medianOfMedianOfMedianOfLower + medianOfMedianOfMedianOfMedian\n        val\
    \ medianOfMedianOfMedianOfMedianOfUpper = medianOfMedianOfMedianOfUpper + medianOfMedianOfMedianOfMedian\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = medianOfMedianOfMedianOfMedianOfLower\
    \ + medianOfMedianOfMedianOfMedianOfMedianOfUpper\n        val medianOfMedianOfMedianOfMedianOfMedianOfLower\
    \ = medianOfMedianOfMedianOfMedianOfLower + medianOfMedianOfMedianOfMedianOfMedianOfUpper\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = medianOfMedianOfMedianOfMedianOfUpper\
    \ + medianOfMedianOfMedianOfMedianOfMedianOfMedian\n        val medianOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = medianOfMedianOfMedianOfMedianOfMedianOfLower + medianOfMedianOfMedianOfMedianOfMedianOfMedian",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            System.arraycopy(l, 0, left, 0, mid)\n   \
    \         System.arraycopy(l, mid, right, 0, n - mid)\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            median\n        }", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.slice(0, mid)\n            val right = l.slice(mid)\n     \
    \       val median = median(left) + median(right)\n            median\n      \
    \  }", "        val sorted = l.sorted\n        val half = sorted.length / 2\n\
    \        if (sorted.length == 1) sorted[0]\n        else sorted[half]", "    \
    \    val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n\
    \        val lower = sorted.take(mid)\n        val upper = sorted.drop(mid)\n\
    \        val medianOfLower = median(lower)\n        val medianOfUpper = median(upper)\n\
    \        val medianOfMedian = median(sorted)\n        val medianOfMedianOfLower\
    \ = median(lower.take(mid))\n        val medianOfMedianOfUpper = median(upper.take(mid))\n\
    \        val medianOfMedianOfMedian = median(sorted.take(mid))\n        val medianOfMedianOfMedianOfLower\
    \ = median(lower.take(mid).take(mid))\n        val medianOfMedianOfMedianOfUpper\
    \ = median(upper.take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedian\
    \ = median(sorted.take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfLower\
    \ = median(lower.take(mid).take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfUpper\
    \ = median(upper.take(mid).take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfMedian\
    \ = median(sorted.take(mid).take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfMedianOfLower\
    \ = median(lower.take(mid).take(mid).take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfMedianOfUpper\
    \ = median(upper.take(mid).take(mid).take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = median(sorted.take(mid).take(mid).take(mid).take(mid))\n        val medianOfMedianOfMedianOfMedianOfMedianOfMedianOfLower\
    \ = median(lower.take(mid).take(mid).take(mid).take(mid).take(mid))\n        val\
    \ medianOfMedianOfMedianOfMedianOfMedianOfMedianOfUpper = median(", "        val\
    \ n = l.length\n        val m = l.max\n        val median = (m + n) / 2\n    \
    \    val l = l.filter(_ < median)\n        val r = l.filter(_ > median)\n    \
    \    val l = l.filter(_ >= median)\n        val r = l.filter(_ <= median)\n  \
    \      if (l.length == 0) 0\n        else if (l.length == 1) l.head\n        else\
    \ median", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid\
    \ + 1)\n        median", "        val n = l.length\n        val mid = n / 2\n\
    \        val left = l.take(mid)\n        val right = l.drop(mid)\n        val\
    \ median = if (n == 1) left else (left + right) / 2\n        median.toFloat",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        val m = l.groupBy(x => x).mapValues(_.size).maxBy(_._1)._1\n        val\
    \ half = n / 2\n        if (half == 0) 0\n        else if (half == 1) l(0)\n \
    \       else l(half) + median(l.drop(half))", "        val n = l.length\n    \
    \    val m = l.groupBy(x => x).mapValues(_.length).maxBy(_._2)._1\n        val\
    \ half = n / 2\n        val median = (l take half).sum / half\n        if (n <\
    \ 2) median\n        else median * (n - 1) / 2", "        val n = l.length\n \
    \       val mid = n / 2\n        val left = new Array[Long](n)\n        val right\
    \ = new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i\
    \ < n) {\n            left(i) = l(i)\n            i += 1\n        }\n        while\
    \ (j < n) {\n            right(j) = l(j)\n            j += 1\n        }\n    \
    \    val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val median = (leftMedian + rightMedian) / 2\n        if (n == 1) {\n\
    \            median\n        } else {\n            if (leftMedian < rightMedian)\
    \ {\n                median\n            } else {\n                median\n  \
    \          }\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val half = n / 2\n            val left = l.slice(0,\
    \ half)\n            val right = l.slice(half)\n            val median = (left\
    \ + right).sorted.last\n            median\n        }", "        val n = l.length\n\
    \        if (n < 1) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.take(mid)\n            val right = l.drop(mid)\n          \
    \  val median = (left + right).sorted match {\n                case Nil => 0.0\n\
    \                case head :: tail => head\n            }\n            median\n\
    \        }", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = (left +\
    \ right).sorted\n        median.last", "        val n = l.length\n        val\
    \ m = l.sorted.length / 2\n        if (m == 0) l.head\n        else if (m == 1)\
    \ l.last\n        else l.sorted take m reduce {\n            case x if x < l.head\
    \ => x\n            case x if x > l.last => x\n            case x => l.head\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid)\n            val median = if (left.length < right.length)\
    \ left else right\n            median.sum / median.length\n        }", "     \
    \   val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted\n            median.last\n   \
    \     }", "        val n = l.length\n        val half = n / 2\n        val left\
    \ = l.slice(0, half)\n        val right = l.slice(half)\n        val median =\
    \ math.min(left.last, right.last)\n        val diff = (left.last + right.last)\
    \ / 2\n        diff + median", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid - 1) + sorted.apply(mid)) / 2.0\n        median", " \
    \       val n = l.length\n        if (n < 2) 0.0\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = median(left) + median(right)\n    \
    \        median\n        }", "        val n = l.length\n        val mid = n /\
    \ 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n       \
    \ val median = if (left.length == 0) right else left\n        val medianValue\
    \ = median.sum / median.length\n        medianValue", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = if (n == 1) left else (left + right) / 2\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ sorted.apply(mid + 1)\n        median", "        val sorted = l.sorted\n   \
    \     val mid = sorted.length / 2\n        val median = if (sorted.length % 2\
    \ == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        median", "     \
    \   val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted match {\n                case\
    \ Nil => 0.0\n                case x :: xs => xs.last\n            }\n       \
    \     median\n        }"]
stop_tokens:
- "\n    }\n"
