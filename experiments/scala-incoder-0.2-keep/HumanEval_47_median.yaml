name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median([3, 1, 2, 4,\
  \ 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n   \
  \ def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        val m = l.groupBy(x => x).mapValues(_.size).maxBy(_._2)._1\n\
    \        val median = (l.take(n - 1) + l.take(n - 2)).sortBy(x => x).last\n  \
    \      val m1 = l.take(n - 1).sortBy(x => x).last\n        val m2 = l.take(n -\
    \ 2).sortBy(x => x).last\n        val m3 = l.take(n - 3).sortBy(x => x).last\n\
    \        val m4 = l.take(n - 4).sortBy(x => x).last\n        val m5 = l.take(n\
    \ - 5).sortBy(x => x).last\n        val m6 = l.take(n - 6).sortBy(x => x).last\n\
    \        val m7 = l.take(n - 7).sortBy(x => x).last\n        val m8 = l.take(n\
    \ - 8).sortBy(x => x).last\n        val m9 = l.take(n - 9).sortBy(x => x).last\n\
    \        val m10 = l.take(n - 10).sortBy(x => x).last\n        val m11 = l.take(n\
    \ - 11).sortBy(x => x).last\n        val m12 = l.take(n - 12).sortBy(x => x).last\n\
    \        val m13 = l.take(n - 13).sortBy(x => x).last\n        val m14 = l.take(n\
    \ - 14).sortBy(x => x).last\n        val m15 = l.take(n - 15).sortBy(x => x).last\n\
    \        val m16 = l.take(n - 16).sortBy(x => x).last\n        val m17 = l.take(n\
    \ - 17).sortBy(x => x).last\n        val m18 = l.take(n - 18).sortBy(x => x).last\n\
    \        val m19 = l.take(n - 19).sortBy(x => x).last\n        val m20 = l.take(n\
    \ - 20).sortBy(x => x).last\n        val m21 = 0\n        val m22 = 0\n      \
    \  val m23 = 0\n        val m24 = 0\n        val m25 = 0\n        val m26 = 0\n\
    \        val m27 = 0\n        val m28 = 0\n        val m29 = 0\n        val m30\
    \ = 0\n        val m31 = 0\n        val m32 = 0\n        val m33 = 0\n       \
    \ val m34 = 0\n        val m35 = 0\n        val m36 = 0\n        val m37 = 0\n\
    \        val m38 = 0\n        val m39 = 0\n        val m40", "        val n =\
    \ l.length\n        val m = l.max\n        val half = n / 2\n        val left\
    \ = l.take(half)\n        val right = l.drop(half)\n        val median = (left\
    \ + right).sorted.last\n        val diff = (median - m) / n\n        diff * n",
  "        val n = l.length\n        val m = l.size / 2\n        val median = (l take\
    \ m).sum / m\n        median", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val low = l.take(mid)\n            val high = l.drop(mid)\n            val\
    \ m1 = median(low)\n            val m2 = median(high)\n            (m1 + m2) /\
    \ 2\n        }", "        val n = l.length\n        if (n <= 1) 0\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = math.max(left, right).asInstanceOf[Float]\n\
    \            median\n        }", "        val n = l.length\n        val m = l.sortWith(_\
    \ < _).length\n        val half = m / 2\n        val median = (l take half).sum\
    \ / half\n        if (n < 2) median\n        else median", "        val n = l.length\n\
    \        val m = l.groupBy(x => x).mapValues(_.length).max\n        val median\
    \ = (m / 2).toFloat\n        l.map(_ - median).sum / n", "        val sorted =\
    \ l.sorted\n        val middle = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(middle) else (sorted.apply(middle - 1) + sorted.apply(middle))\
    \ / 2.0\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ sorted.apply(mid + 1)\n        median", "        val n = l.length\n        val\
    \ half = n / 2\n        val median = (l take half).sorted take half\n        val\
    \ left = (l drop half).sorted take half\n        val right = (l drop half).sorted\
    \ drop half\n        val median1 = (left take half).sorted take half\n       \
    \ val median2 = (right take half).sorted take half\n        val median3 = (left\
    \ drop half).sorted drop half\n        val median4 = (right drop half).sorted\
    \ drop half\n        val median5 = median.head + median1.head + median2.head +\
    \ median3.head + median4.head\n        val median6 = median.last + median1.last\
    \ + median2.last + median3.last + median4.last\n        val median7 = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head\n        val median8 = median.last + median1.last + median2.last\
    \ + median3.last + median4.last + median5.last + median6.last\n        val median9\
    \ = median.head + median1.head + median2.head + median3.head + median4.head +\
    \ median5.head + median6.head + median7.head\n        val median10 = median.last\
    \ + median1.last + median2.last + median3.last + median4.last + median5.last +\
    \ median6.last + median7.last + median8.head\n        val median11 = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head + median7.head + median8.head + median9.head\n        val median12\
    \ = median.last + median1.last + median2.last + median3.last + median4.last +\
    \ median5.last + median6.last + median7.last + median8.last + median9.last + median10.head\n\
    \        val median13 = median.head + median1.head + median2.head + median3.head\
    \ + median4.head + median5.head + median6.head + median7.head + median8.head +\
    \ median9.head + median10.head + median11.head\n        val median14 = median.last\
    \ + median1.last + median2.last + median3.last + median4.last + median5.last +\
    \ median6.last + median7.last + median8.last + median9.last + median10.last +\
    \ median11.last + median12.head\n        val median15 = median.head + median1.head\
    \ + median2.head + median3.head + ", "        val n = l.length\n        val sorted\
    \ = l.sortWith(_ < _)\n        val half = n / 2\n        if (n % 2 == 0) {\n \
    \           sorted.last\n        } else {\n            val m1 = sorted.head\n\
    \            val m2 = sorted.last\n            (m1 + m2) / 2\n        }", "  \
    \      val n = l.length\n        val mid = n / 2\n        val left = new Array[Long](n)\n\
    \        val right = new Array[Long](n)\n        var i = 0\n        var j = 0\n\
    \        while (i < n) {\n            while (j < n && l(i) < l(j)) {\n       \
    \         j += 1\n            }\n            right(i) = l(j)\n            i +=\
    \ 1\n            j += 1\n        }\n        while (i < n) {\n            while\
    \ (j < n && l(i) > l(j)) {\n                j += 1\n            }\n          \
    \  left(i) = l(j)\n            i += 1\n            j += 1\n        }\n       \
    \ val median = if (n % 2 == 0) (left + right).sorted else (right + left).sorted\n\
    \        median(mid)", "        val n = l.length\n        val mid = n / 2\n  \
    \      val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = if (n == 1) left else (left + right) / 2\n        median", "        val n\
    \ = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n\
    \        val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\
    \ else sorted.last", "        val n = l.length\n        val m = l.min\n      \
    \  val h = (n - 1) / 2\n        val i = h\n        val j = n - 1\n        val\
    \ k = (i + j) / 2\n        val median = if (l contains k) k else 0\n        val\
    \ lower = if (l contains i) i else 0\n        val upper = if (l contains j) j\
    \ else 0\n        val median = if (lower < upper) lower else upper\n        val\
    \ median = if (median == 0) 0 else median\n        median", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val n = l.length\n        if (n < 2) 0.0\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = if (left.length == 0)\
    \ right else left\n            val medianValue = median.sum / median.length\n\
    \            medianValue\n        }", "        val n = l.length\n        val sorted\
    \ = l.sorted\n        val mid = n / 2\n        val median = (sorted take mid)\
    \ match {\n            case x :: xs => x\n            case _ => sorted[mid]\n\
    \        }\n        (sorted take n) match {\n            case x :: xs => median\n\
    \            case _ => median\n        }", "        val n = l.length\n       \
    \ if (n < 2) 0\n        else {\n            val mid = n / 2\n            val left\
    \ = l.take(mid)\n            val right = l.drop(mid)\n            val median =\
    \ left.sorted match {\n                case a :: b :: Nil => math.round((a + b)\
    \ / 2)\n                case a :: b => math.round((a + b) / 2)\n             \
    \   case _ => 0\n            }\n            math.round(median)\n        }"]
stop_tokens:
- "\n    }\n"
