name: HumanEval_31_is_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true if a given number is prime, and false otherwise.\n    // >>>\
  \ is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n    // >>> is_prime(11)\n\
  \    // True\n    // >>> is_prime(13441)\n    // True\n    // >>> is_prime(61)\n\
  \    // True\n    // >>> is_prime(4)\n    // False\n    // >>> is_prime(1)\n   \
  \ // False\n    def isPrime(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
  \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
  \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) ==\
  \ (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) ==\
  \ (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val isPrime = n <= 1 || (n % 2 == 0 && n % 3 != 0)\n      \
    \  if (isPrime) {\n            val sqrtN = math.sqrt(n)\n            for (i <-\
    \ 2 until sqrtN) {\n                if (n % i == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \   }\n        isPrime", "        val isPrime = n <= 1\n        val isPrime2 =\
    \ isPrime && n != 2\n        val isPrime3 = isPrime2 && n != 3\n        val isPrime4\
    \ = isPrime3 && n != 4\n        val isPrime5 = isPrime4 && n != 5\n        val\
    \ isPrime6 = isPrime5 && n != 6\n        val isPrime7 = isPrime6 && n != 7\n \
    \       val isPrime8 = isPrime7 && n != 8\n        val isPrime9 = isPrime8 &&\
    \ n != 9\n        val isPrime10 = isPrime9 && n != 10\n        val isPrime11 =\
    \ isPrime10 && n != 11\n        val isPrime12 = isPrime11 && n != 12\n       \
    \ val isPrime13 = isPrime12 && n != 13\n        val isPrime14 = isPrime13 && n\
    \ != 14\n        val isPrime15 = isPrime14 && n != 15\n        val isPrime16 =\
    \ isPrime15 && n != 16\n        val isPrime17 = isPrime16 && n != 17\n       \
    \ val isPrime18 = isPrime17 && n != 18\n        val isPrime19 = isPrime18 && n\
    \ != 19\n        val isPrime20 = isPrime19 && n != 20\n        val isPrime21 =\
    \ isPrime20 && n != 21\n        val isPrime22 = isPrime21 && n != 22\n       \
    \ val isPrime23 = isPrime22 && n != 23\n        val isPrime24 = isPrime23 && n\
    \ != 24\n        val isPrime25 = isPrime24 && n != 25\n        val isPrime26 =\
    \ isPrime25 && n != 26\n        val isPrime27 = isPrime26 && n != 27\n       \
    \ val isPrime28 = isPrime27 && n != 28\n        val isPrime29 = isPrime28 && n\
    \ != 29\n        val isPrime30 = isPrime29 && n != 30\n        val isPrime31 =\
    \ isPrime30 && n != 31\n        val isPrime32 = isPrime31 && n != 32\n       \
    \ val isPrime33 = isPrime32 && n != 33\n        val isPrime34 = isPrime33 && n\
    \ != 34\n        val isPrime35 = is", "        val isPrime = n <= 1 || (n % 2\
    \ == 0 && n != 1)\n        for(i <- 2 until n by 2)\n            if(!isPrime)\n\
    \                return false\n        return isPrime", "        val primes =\
    \ mutable.Set[Long]()\n        val n = math.abs(n)\n        val sqrtn = math.floor(math.sqrt(n))\n\
    \        for(i <- 0 until sqrtn){\n            if(n % i == 0){\n             \
    \   primes.add(i)\n            }\n        }\n        primes.size == n", "    \
    \    val isPrime = n <= 1\n        for(i <- 2 to Math.sqrt(n)) {\n           \
    \ if(n % i == 0) {\n                isPrime = false\n                break\n \
    \           }\n        }\n        isPrime", "        val sqrt = (math.sqrt(n).toInt).toLong\n\
    \        val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        val isPrime = (n : Long) => {\n            val i = 2\n            while\
    \ (i <= sqrt) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n                i += 1\n            }\n          \
    \  primes += n\n            return true\n        }\n        val isComposite =\
    \ (n : Long) => {\n            val i = 2\n            while (i <= sqrt) {\n  \
    \              if (n % i == 0) {\n                    composites += n\n      \
    \              return false\n                }\n                i += 1\n     \
    \       }\n            primes += n\n            return true\n        }\n     \
    \   val isPrimeAndComposite = (n : Long) => {\n            val i = 2\n       \
    \     while (i <= sqrt) {\n                if (n % i == 0) {\n               \
    \     composites += n\n                    return false\n                }\n \
    \               i += 1\n            }\n            primes += n\n            return\
    \ true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy3 = (n : Long)\
    \ => {\n            val i = 2\n            while (i <= sqrt) {\n             \
    \   if (n % i == 0) {\n                    composites += n\n                 \
    \   return false\n                }\n                i += 1\n            }\n \
    \           primes += n\n            return true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy5\
    \ = (n : Long) => {\n            val i = 2\n            while (i <= sqrt) {\n\
    \                if (n % i == 0) {\n                    composites += n\n    \
    \                return false\n                }\n                i += 1\n   \
    \         }\n            primes += n\n            return true\n        }\n   \
    \     val isPrimeAndCompositeAndNotDivisibleBy7 = (n : Long) => {\n          \
    \  val i = 2\n            while (i <= sqrt) {\n                if (n % i == 0)\
    \ {\n                    composites += n\n                    return false\n \
    \               }\n                i += 1\n            }\n            primes +=\
    \ n\n            return true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy11\
    \ = (n : Long) => {\n            val i = 2\n            while (i <= sqrt) {\n\
    \                if (n % i == 0) {\n                    composites += n\n    \
    \                return false\n                }\n                i += 1\n   \
    \         }\n            primes += n\n            return true\n        }\n   \
    \     val isPrimeAndCompositeAndNotDivisibleBy13 = (n : Long) => {\n         \
    \   val i = 2\n            while (i <= sqrt) {\n                if (n % i == 0)\
    \ {\n                    composites += n\n                    return false\n \
    \               }\n                i += 1\n            }\n            primes +=\
    \ n\n            return true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy17\
    \ = (n : Long) => {\n            val i = 2\n            ", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n/2){\n           \
    \ if(n%i == 0){\n                factors += i\n            }\n        }\n    \
    \    factors.isEmpty", "        val primes = mutable.ListBuffer[Long]()\n    \
    \    val isPrime = mutable.ListBuffer[Boolean]()\n        val isNotPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor = mutable.ListBuffer[Long]()\n        val isNotPrimeFactor\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor = mutable.ListBuffer[Long]()\n        val isPrimeDivisor2\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor2 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor3 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor3\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor4 = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor4 = mutable.ListBuffer[Long]()\n        val isPrimeDivisor5\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor5 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor6 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor6\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor7 = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor7 = mutable.ListBuffer[Long]()\n        val isPrimeDivisor8\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor8 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor9 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor9\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor10 = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor10 = mutable.ListBuffer[Long]()\n        val isPrimeDivisor11\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor11 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor12 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor12\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor13 = mutable.ListBuffer[Long",
  "        val sqrt = (sqrt(n).toLong).toInt\n        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (prime <- primes) {\n            if (n % prime\
    \ == 0) {\n                return false\n            }\n        }\n        for\
    \ (prime <- primes.reverse) {\n            if (n % prime == 0) {\n           \
    \     return false\n            }\n        }\n        return true", "        val\
    \ isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = mutable.Set[Long]()\n\
    \        val isNotPrime = mutable.Set[Long]()\n        val isPrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeNotPrime = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimeNotPrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrimeNotPrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrimePrimeNotPrime = mutable.Set[Long]()\n     \
    \   val isPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimeNotPrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrime", "        val isPrime = n <=\
    \ 1\n        if(isPrime) {\n            true\n        } else {\n            val\
    \ sqrt = (math.sqrt(n).toInt) + 1\n            for(i <- 2 to sqrt) {\n       \
    \         if(n % i == 0) {\n                    false\n                }\n   \
    \         }\n            true\n        }", "        val isPrime = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     isPrime += i\n            }\n        }\n        isPrime.toSet.size == n",
  "        val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        val limit = math.ceil(math.sqrt(n)).toInt\n        for (i <- 2 to limit)\
    \ {\n            if (n % i == 0) {\n                composites += i\n        \
    \    } else {\n                primes += i\n            }\n        }\n       \
    \ primes.forall(x => composites.contains(x))", "        val isPrime = scala.math.BigInt(n).isProbablePrime(scala.math.BigInt(2))\n\
    \        if (isPrime)\n            return true\n        else\n            return\
    \ false", "        val isPrime = mutable.Set[Long]()\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                isPrime += i\n     \
    \       }\n        }\n        isPrime.toSet.size == n", "        val factors =\
    \ mutable.Set[Long]()\n        for (i <- 2 to n by 2)\n            if (n % i ==\
    \ 0)\n                factors += i\n        factors.isEmpty", "        val isPrime\
    \ = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n        val\
    \ isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = (2 to Math.sqrt(n).toInt).forall(x\
    \ => n % x == 0)\n        if (isPrime)\n            return true\n        else\n\
    \            return false", "        val isPrime = n <= 1\n        if(isPrime)\
    \ {\n            val sqrt = (sqrt(n).toLong).toInt\n            val isPrime =\
    \ n <= sqrt\n        }\n        isPrime"]
stop_tokens:
- "\n    }\n"
