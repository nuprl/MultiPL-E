name: HumanEval_31_is_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true if a given number is prime, and false otherwise.\n    // >>>\
  \ is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n    // >>> is_prime(11)\n\
  \    // True\n    // >>> is_prime(13441)\n    // True\n    // >>> is_prime(61)\n\
  \    // True\n    // >>> is_prime(4)\n    // False\n    // >>> is_prime(1)\n   \
  \ // False\n    def isPrime(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
  \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
  \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) ==\
  \ (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) ==\
  \ (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val isPrime = n <= 1 || (n % 2 == 0 && n % 3 != 0)\n      \
    \  if (isPrime) {\n            val sqrtN = math.sqrt(n)\n            for (i <-\
    \ 2 until sqrtN) {\n                if (n % i == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \   }\n        isPrime", "        val isPrime = n <= 1\n        val isPrime2 =\
    \ isPrime && n != 2\n        val isPrime3 = isPrime2 && n != 3\n        val isPrime4\
    \ = isPrime3 && n != 4\n        val isPrime5 = isPrime4 && n != 5\n        val\
    \ isPrime6 = isPrime5 && n != 6\n        val isPrime7 = isPrime6 && n != 7\n \
    \       val isPrime8 = isPrime7 && n != 8\n        val isPrime9 = isPrime8 &&\
    \ n != 9\n        val isPrime10 = isPrime9 && n != 10\n        val isPrime11 =\
    \ isPrime10 && n != 11\n        val isPrime12 = isPrime11 && n != 12\n       \
    \ val isPrime13 = isPrime12 && n != 13\n        val isPrime14 = isPrime13 && n\
    \ != 14\n        val isPrime15 = isPrime14 && n != 15\n        val isPrime16 =\
    \ isPrime15 && n != 16\n        val isPrime17 = isPrime16 && n != 17\n       \
    \ val isPrime18 = isPrime17 && n != 18\n        val isPrime19 = isPrime18 && n\
    \ != 19\n        val isPrime20 = isPrime19 && n != 20\n        val isPrime21 =\
    \ isPrime20 && n != 21\n        val isPrime22 = isPrime21 && n != 22\n       \
    \ val isPrime23 = isPrime22 && n != 23\n        val isPrime24 = isPrime23 && n\
    \ != 24\n        val isPrime25 = isPrime24 && n != 25\n        val isPrime26 =\
    \ isPrime25 && n != 26\n        val isPrime27 = isPrime26 && n != 27\n       \
    \ val isPrime28 = isPrime27 && n != 28\n        val isPrime29 = isPrime28 && n\
    \ != 29\n        val isPrime30 = isPrime29 && n != 30\n        val isPrime31 =\
    \ isPrime30 && n != 31\n        val isPrime32 = isPrime31 && n != 32\n       \
    \ val isPrime33 = isPrime32 && n != 33\n        val isPrime34 = isPrime33 && n\
    \ != 34\n        val isPrime35 = is", "        val isPrime = n <= 1 || (n % 2\
    \ == 0 && n != 1)\n        for(i <- 2 until n by 2)\n            if(!isPrime)\n\
    \                return false\n        return isPrime", "        val primes =\
    \ mutable.Set[Long]()\n        val n = math.abs(n)\n        val sqrtn = math.floor(math.sqrt(n))\n\
    \        for(i <- 0 until sqrtn){\n            if(n % i == 0){\n             \
    \   primes.add(i)\n            }\n        }\n        primes.size == n", "    \
    \    val isPrime = n <= 1\n        for(i <- 2 to Math.sqrt(n)) {\n           \
    \ if(n % i == 0) {\n                isPrime = false\n                break\n \
    \           }\n        }\n        isPrime", "        val sqrt = (math.sqrt(n).toInt).toLong\n\
    \        val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        val isPrime = (n : Long) => {\n            val i = 2\n            while\
    \ (i <= sqrt) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n                i += 1\n            }\n          \
    \  primes += n\n            return true\n        }\n        val isComposite =\
    \ (n : Long) => {\n            val i = 2\n            while (i <= sqrt) {\n  \
    \              if (n % i == 0) {\n                    composites += n\n      \
    \              return false\n                }\n                i += 1\n     \
    \       }\n            primes += n\n            return true\n        }\n     \
    \   val isPrimeAndComposite = (n : Long) => {\n            val i = 2\n       \
    \     while (i <= sqrt) {\n                if (n % i == 0) {\n               \
    \     composites += n\n                    return false\n                }\n \
    \               i += 1\n            }\n            primes += n\n            return\
    \ true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy3 = (n : Long)\
    \ => {\n            val i = 2\n            while (i <= sqrt) {\n             \
    \   if (n % i == 0) {\n                    composites += n\n                 \
    \   return false\n                }\n                i += 1\n            }\n \
    \           primes += n\n            return true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy5\
    \ = (n : Long) => {\n            val i = 2\n            while (i <= sqrt) {\n\
    \                if (n % i == 0) {\n                    composites += n\n    \
    \                return false\n                }\n                i += 1\n   \
    \         }\n            primes += n\n            return true\n        }\n   \
    \     val isPrimeAndCompositeAndNotDivisibleBy7 = (n : Long) => {\n          \
    \  val i = 2\n            while (i <= sqrt) {\n                if (n % i == 0)\
    \ {\n                    composites += n\n                    return false\n \
    \               }\n                i += 1\n            }\n            primes +=\
    \ n\n            return true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy11\
    \ = (n : Long) => {\n            val i = 2\n            while (i <= sqrt) {\n\
    \                if (n % i == 0) {\n                    composites += n\n    \
    \                return false\n                }\n                i += 1\n   \
    \         }\n            primes += n\n            return true\n        }\n   \
    \     val isPrimeAndCompositeAndNotDivisibleBy13 = (n : Long) => {\n         \
    \   val i = 2\n            while (i <= sqrt) {\n                if (n % i == 0)\
    \ {\n                    composites += n\n                    return false\n \
    \               }\n                i += 1\n            }\n            primes +=\
    \ n\n            return true\n        }\n        val isPrimeAndCompositeAndNotDivisibleBy17\
    \ = (n : Long) => {\n            val i = 2\n            ", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n/2){\n           \
    \ if(n%i == 0){\n                factors += i\n            }\n        }\n    \
    \    factors.isEmpty", "        val primes = mutable.ListBuffer[Long]()\n    \
    \    val isPrime = mutable.ListBuffer[Boolean]()\n        val isNotPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor = mutable.ListBuffer[Long]()\n        val isNotPrimeFactor\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor = mutable.ListBuffer[Long]()\n        val isPrimeDivisor2\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor2 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor3 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor3\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor4 = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor4 = mutable.ListBuffer[Long]()\n        val isPrimeDivisor5\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor5 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor6 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor6\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor7 = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor7 = mutable.ListBuffer[Long]()\n        val isPrimeDivisor8\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor8 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor9 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor9\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor10 = mutable.ListBuffer[Long]()\n\
    \        val isNotPrimeDivisor10 = mutable.ListBuffer[Long]()\n        val isPrimeDivisor11\
    \ = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor11 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeDivisor12 = mutable.ListBuffer[Long]()\n        val isNotPrimeDivisor12\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeDivisor13 = mutable.ListBuffer[Long",
  "        val sqrt = (sqrt(n).toLong).toInt\n        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (prime <- primes) {\n            if (n % prime\
    \ == 0) {\n                return false\n            }\n        }\n        for\
    \ (prime <- primes.reverse) {\n            if (n % prime == 0) {\n           \
    \     return false\n            }\n        }\n        return true", "        val\
    \ isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = mutable.Set[Long]()\n\
    \        val isNotPrime = mutable.Set[Long]()\n        val isPrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeNotPrime = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimeNotPrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrimeNotPrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrimePrimeNotPrime = mutable.Set[Long]()\n     \
    \   val isPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimeNotPrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrimePrimePrimePrimePrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimePrime", "        val isPrime = n <=\
    \ 1\n        if(isPrime) {\n            true\n        } else {\n            val\
    \ sqrt = (math.sqrt(n).toInt) + 1\n            for(i <- 2 to sqrt) {\n       \
    \         if(n % i == 0) {\n                    false\n                }\n   \
    \         }\n            true\n        }", "        val isPrime = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     isPrime += i\n            }\n        }\n        isPrime.toSet.size == n",
  "        val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        val limit = math.ceil(math.sqrt(n)).toInt\n        for (i <- 2 to limit)\
    \ {\n            if (n % i == 0) {\n                composites += i\n        \
    \    } else {\n                primes += i\n            }\n        }\n       \
    \ primes.forall(x => composites.contains(x))", "        val isPrime = scala.math.BigInt(n).isProbablePrime(scala.math.BigInt(2))\n\
    \        if (isPrime)\n            return true\n        else\n            return\
    \ false", "        val isPrime = mutable.Set[Long]()\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                isPrime += i\n     \
    \       }\n        }\n        isPrime.toSet.size == n", "        val factors =\
    \ mutable.Set[Long]()\n        for (i <- 2 to n by 2)\n            if (n % i ==\
    \ 0)\n                factors += i\n        factors.isEmpty", "        val isPrime\
    \ = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n        val\
    \ isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = (2 to Math.sqrt(n).toInt).forall(x\
    \ => n % x == 0)\n        if (isPrime)\n            return true\n        else\n\
    \            return false", "        val isPrime = n <= 1\n        if(isPrime)\
    \ {\n            val sqrt = (sqrt(n).toLong).toInt\n            val isPrime =\
    \ n <= sqrt\n        }\n        isPrime", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isNotPrime = mutable.ArrayBuffer(false)\n\
    \        val isPrimeIter = Iterator.continually(primes.last).takeWhile(p => p\
    \ < n)\n        val isNotPrimeIter = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter2 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter2 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter3 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter3 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter4 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter4 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter5 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter5 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter6 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter6 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter7 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter7 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter8 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter8 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)\n        val isPrimeIter9 = Iterator.continually(primes.last).takeWhile(p\
    \ => p < n)\n        val isNotPrimeIter9 = Iterator.continually(isNotPrime.last).takeWhile(p\
    \ => p < n)", "        val primes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ limit = math.ceil(math.sqrt(n)).toInt\n        for (i <- 2 to limit) {\n   \
    \         if (n % i == 0) {\n                primes += i\n            }\n    \
    \    }\n        primes.forall(x => n % x == 0)", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n\
    \        val isPrimeIter = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isNotPrimeIter = Iterator.iterate(2L)(_ + 2L).takeWhile(_\
    \ <= n).filter(_ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isNotPrimeIter2 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter3 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isNotPrimeIter3 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter4 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isNotPrimeIter4 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isNotPrimeIter5 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter6 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isNotPrimeIter6 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isNotPrimeIter7 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter8 = Iterator.iterate(2L)(_\
    \ + ", "        val isPrime = n <= 1\n        val isPrime2 = isPrime\n       \
    \ val isPrime3 = isPrime\n        val isPrime4 = isPrime\n        val isPrime5\
    \ = isPrime\n        val isPrime6 = isPrime\n        val isPrime7 = isPrime\n\
    \        val isPrime8 = isPrime\n        val isPrime9 = isPrime\n        val isPrime10\
    \ = isPrime\n        val isPrime11 = isPrime\n        val isPrime12 = isPrime\n\
    \        val isPrime13 = isPrime\n        val isPrime14 = isPrime\n        val\
    \ isPrime15 = isPrime\n        val isPrime16 = isPrime\n        val isPrime17\
    \ = isPrime\n        val isPrime18 = isPrime\n        val isPrime19 = isPrime\n\
    \        val isPrime20 = isPrime\n        val isPrime21 = isPrime\n        val\
    \ isPrime22 = isPrime\n        val isPrime23 = isPrime\n        val isPrime24\
    \ = isPrime\n        val isPrime25 = isPrime\n        val isPrime26 = isPrime\n\
    \        val isPrime27 = isPrime\n        val isPrime28 = isPrime\n        val\
    \ isPrime29 = isPrime\n        val isPrime30 = isPrime\n        val isPrime31\
    \ = isPrime\n        val isPrime32 = isPrime\n        val isPrime33 = isPrime\n\
    \        val isPrime34 = isPrime\n        val isPrime35 = isPrime\n        val\
    \ isPrime36 = isPrime\n        val isPrime37 = isPrime\n        val isPrime38\
    \ = isPrime\n        val isPrime39 = isPrime\n        val isPrime40 = isPrime\n\
    \        val isPrime41 = isPrime\n        val isPrime42 = isPrime\n        val\
    \ isPrime43 = isPrime\n        val isPrime44 = isPrime\n        val isPrime45\
    \ = isPrime\n        val isPrime46 = isPrime\n        val isPrime47 = isPrime\n\
    \        val isPrime48 = isPrime\n        val isPrime49 = isPrime\n        val\
    \ isPrime50 = isPrime\n        val isPrime5", "        val primes = mutable.Set[Long]()\n\
    \        val m = math.ceil(n)\n        for(i <- 2 to m){\n            if(n % i\
    \ == 0){\n                primes.add(i)\n            }\n        }\n        primes.size\
    \ == n", "        val isPrime = n <= 1\n        val isPrime2 = isPrime && (n %\
    \ 2 != 0)\n        val isPrime3 = isPrime2 && (n % 3 != 0)\n        val isPrime4\
    \ = isPrime3 && (n % 4 != 0)\n        val isPrime5 = isPrime4 && (n % 5 != 0)\n\
    \        val isPrime6 = isPrime5 && (n % 6 != 0)\n        val isPrime7 = isPrime6\
    \ && (n % 7 != 0)\n        val isPrime8 = isPrime7 && (n % 8 != 0)\n        val\
    \ isPrime9 = isPrime8 && (n % 9 != 0)\n        val isPrime10 = isPrime9 && (n\
    \ % 10 != 0)\n        val isPrime11 = isPrime10 && (n % 11 != 0)\n        val\
    \ isPrime12 = isPrime11 && (n % 12 != 0)\n        val isPrime13 = isPrime12 &&\
    \ (n % 13 != 0)\n        val isPrime14 = isPrime13 && (n % 14 != 0)\n        val\
    \ isPrime15 = isPrime14 && (n % 15 != 0)\n        val isPrime16 = isPrime15 &&\
    \ (n % 16 != 0)\n        val isPrime17 = isPrime16 && (n % 17 != 0)\n        val\
    \ isPrime18 = isPrime17 && (n % 18 != 0)\n        val isPrime19 = isPrime18 &&\
    \ (n % 19 != 0)\n        val isPrime20 = isPrime19 && (n % 20 != 0)\n        val\
    \ isPrime21 = isPrime20 && (n % 21 != 0)\n        val isPrime22 = isPrime21 &&\
    \ (n % 22 != 0)\n        val isPrime23 = isPrime22 && (n % 23 != 0)\n        val\
    \ isPrime24 = isPrime23 && (n % 24 != 0)\n        val isPrime25 = isPrime24 &&\
    \ (n % 25 != 0)\n        val isPrime26 = isPrime25 && (n % 26 != 0)\n        val\
    \ isPrime27 = isPrime26 && (n % 27 != 0)\n        val isPrime28 = isPrime27 &&\
    \ (n % 28 != 0)\n        val isPrime29 = isPrime28 && (n % 29 != 0)\n        val\
    \ isPrime30 = isPrime29 && (n % 30 != 0)\n        val isPrime31 = isPrime30 &&\
    \ (n % 31 != 0)\n        val isPrime32 = isPrime31 && (n % 32 != 0)\n        val\
    \ isPrime", "        val isPrime = scala.math.BigInt(n).isProbablePrime(scala.math.BigInt(2))\n\
    \        if (isPrime) {\n            true\n        } else {\n            false\n\
    \        }", "        val m = math.ceil(math.sqrt(n)).toInt\n        val primes\
    \ = mutable.ArrayBuffer(2)\n        for (i <- 3 until m) {\n            if (n\
    \ % i == 0) {\n                primes += i\n            }\n        }\n       \
    \ primes.forall(p => n % p == 0)", "        val primes = mutable.Set[Long]()\n\
    \        val divisors = mutable.Set[Long]()\n        divisors += 2\n        divisors\
    \ += 3\n        divisors += 5\n        divisors += 7\n        divisors += 11\n\
    \        divisors += 13\n        divisors += 17\n        divisors += 19\n    \
    \    divisors += 23\n        divisors += 29\n        divisors += 31\n        divisors\
    \ += 37\n        divisors += 41\n        divisors += 43\n        divisors += 47\n\
    \        divisors += 53\n        divisors += 59\n        divisors += 61\n    \
    \    divisors += 67\n        divisors += 71\n        divisors += 73\n        divisors\
    \ += 79\n        divisors += 83\n        divisors += 89\n        divisors += 97\n\
    \        divisors += 101\n        divisors += 103\n        divisors += 107\n \
    \       divisors += 109\n        divisors += 113\n        divisors += 127\n  \
    \      divisors += 131\n        divisors += 137\n        divisors += 139\n   \
    \     divisors += 147\n        divisors += 151\n        divisors += 157\n    \
    \    divisors += 163\n        divisors += 167\n        divisors += 173\n     \
    \   divisors += 179\n        divisors += 181\n        divisors += 191\n      \
    \  divisors += 197\n        divisors += 199\n        divisors += 211\n       \
    \ divisors += 223\n        divisors += 227\n        divisors += 229\n        divisors\
    \ += 233\n        divisors += 239\n        divisors += 241\n        divisors +=\
    \ 243\n        divisors += 247\n        divisors += 251\n        divisors += 257\n\
    \        divisors += 263\n        divisors += 269\n        divisors += 271\n \
    \       divisors += 277\n        divisors += 281\n        divisors += 283\n  \
    \      divisors += 293\n        divisors += 307\n        divisors += 311\n   \
    \     divisors += 313\n        divisors += 317\n        divisors += 323\n    \
    \    divisors += 329\n        divisors += 337\n        divisors += 341\n     \
    \   divisors += 347\n        divisors += 353\n        divisors += 359\n      \
    \  divisors += 363\n        divisors += 369\n        divisors += 373\n       \
    \ divisors += 379\n        divisors += 383\n        divisors += 389\n        divisors\
    \ += 397\n        divisors += 401\n        divisors += 409\n        divisors +=\
    \ 419\n        divisors += 421\n        divisors += 431\n        divisors += 433\n\
    \        divisors += 439\n        divisors += 443\n        divisors += 449\n \
    \       divisors += 457\n        divisors += 461\n", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ composites += i\n            else\n                primes += i\n        primes.forall(x\
    \ => composites.contains(x))", "        val primes = mutable.Set[Long]()\n   \
    \     val divisors = mutable.Set[Long]()\n        divisors += 2\n        divisors\
    \ += 3\n        divisors += 5\n        divisors += 7\n        divisors += 11\n\
    \        divisors += 13\n        divisors += 17\n        divisors += 19\n    \
    \    divisors += 23\n        divisors += 29\n        divisors += 31\n        divisors\
    \ += 37\n        divisors += 41\n        divisors += 43\n        divisors += 47\n\
    \        divisors += 53\n        divisors += 59\n        divisors += 61\n    \
    \    divisors += 67\n        divisors += 71\n        divisors += 73\n        divisors\
    \ += 79\n        divisors += 83\n        divisors += 89\n        divisors += 97\n\
    \        divisors += 101\n        divisors += 103\n        divisors += 107\n \
    \       divisors += 109\n        divisors += 113\n        divisors += 127\n  \
    \      divisors += 131\n        divisors += 137\n        divisors += 139\n   \
    \     divisors += 147\n        divisors += 151\n        divisors += 157\n    \
    \    divisors += 163\n        divisors += 167\n        divisors += 173\n     \
    \   divisors += 179\n        divisors += 181\n        divisors += 191\n      \
    \  divisors += 197\n        divisors += 199\n        divisors += 211\n       \
    \ divisors += 223\n        divisors += 227\n        divisors += 229\n        divisors\
    \ += 233\n        divisors += 239\n        divisors += 241\n        divisors +=\
    \ 247\n        divisors += 251\n        divisors += 257\n        divisors += 263\n\
    \        divisors += 269\n        divisors += 271\n        divisors += 277\n \
    \       divisors += 281\n        divisors += 283\n        divisors += 293\n  \
    \      divisors += 307\n        divisors += 311\n        divisors += 313\n   \
    \     divisors += 317\n        divisors += 323\n        divisors += 329\n    \
    \    divisors += 331\n        divisors += 337\n        divisors += 347\n     \
    \   divisors += 349\n        divisors += 353\n        divisors += 359\n      \
    \  divisors += 363\n        divisors += 369\n        divisors += 373\n       \
    \ divisors += 379\n        divisors += 383\n        divisors += 389\n        divisors\
    \ += 397\n        divisors += 401\n        divisors += 409\n        divisors +=\
    \ 419\n        divisors += 421\n        divisors += 431\n        divisors += 433\n\
    \        divisors += 439\n        divisors += 443\n        divisors += 449\n \
    \       divisors += 457\n        divisors += 461\n        ", "        val sqrt\
    \ = (math.sqrt(n).toInt).toLong\n        val primes = mutable.ArrayBuffer(2)\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        for (i <- 2 to sqrt) {\n            if (n % i == 0) {\n             \
    \   primes += i\n                primesSet += i\n            }\n        }\n  \
    \      for (i <- primesSet) {\n            if (primes.contains(i)) {\n       \
    \         isPrime += i\n            }\n        }\n        isPrime.size == primes.size",
  "        val factors = mutable.Set[Long]()\n        val primes = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n                primes += i\n            }\n        }\n  \
    \      factors.isEmpty", "        val isPrime = n <= 1\n        if(isPrime) {\n\
    \            val sqrt = (math.sqrt(n).toInt).toLong\n            for(i <- 0 until\
    \ sqrt) {\n                if(n % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n        }\n    \
    \    isPrime", "        val i = 2\n        while (i <= n / 2) {\n            if\
    \ (n % i == 0) {\n                return false\n            }\n            i +=\
    \ 1\n        }\n        return true", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val isPrime = n <= 1\n        if(isPrime) true\n        else {\n      \
    \      val isPrime2 = true\n            for(i <- 2 to math.ceil(math.sqrt(n).toInt))\
    \ {\n                if(n % i == 0) isPrime2 = false\n            }\n        \
    \    isPrime2\n        }", "        val primes = mutable.ArrayBuffer(2)\n    \
    \    val limit = (2 to math.sqrt(n).toInt).reverse\n        for (i <- limit) {\n\
    \            if (n % i == 0) {\n                primes += i\n            }\n \
    \       }\n        primes.size == n", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, true)\n  \
    \      for (i <- primes.indices) {\n            if (n % primes(i) == 0) {\n  \
    \              isPrime(i) = false\n            }\n        }\n        isPrime(0)",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = scala.math.BigInt(n).isPrime\n\
    \        val isPrime2 = scala.math.BigInt(n).isPrime\n        val isPrime3 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime4 = scala.math.BigInt(n).isPrime\n        val isPrime5 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime6 = scala.math.BigInt(n).isPrime\n        val isPrime7 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime8 = scala.math.BigInt(n).isPrime\n        val isPrime9 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime10 = scala.math.BigInt(n).isPrime\n        val isPrime11 =\
    \ scala.math.BigInt(n).isPrime\n        val isPrime12 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime13 = scala.math.BigInt(n).isPrime\n        val isPrime14 =\
    \ scala.math.BigInt(n).isPrime\n        val isPrime15 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime16 = scala.math.BigInt(n).isPrime\n        val isPrime17 =\
    \ scala.math.BigInt(n).isPrime\n        val isPrime18 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime19 = scala.math.BigInt(n).isPrime\n        val isPrime20 =\
    \ scala.math.BigInt(n).isPrime\n        val isPrime21 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime22 = scala.math.BigInt(n).isPrime\n        val isPrime23 =\
    \ scala.math.BigInt(n).isPrime\n        val isPrime24 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime25 = scala.math.BigInt(n).isPrime\n        val isPrime26 =\
    \ scala.math.BigInt(n).isPrime\n        val isPrime27 = scala.math.BigInt(n).isPrime\n\
    \        val isPrime28 = scala.math.BigInt(n).isPrime\n        val isPrime29 =\
    \ scala.math.BigInt(n).isPrime\n        val ", "        val factors = mutable.Set[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n % i == 0){\n               \
    \ factors += i\n            }\n        }\n        factors.size == n", "      \
    \  val primes = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                primes += i\n            }\n\
    \        }\n        primes.forall(n => n % n == 0)", "        val primes = mutable.Set[Long]()\n\
    \        val divisors = mutable.Set[Long]()\n        val limit = math.ceil(math.sqrt(n)).toInt\n\
    \        for(i <- 2 to limit) {\n            divisors += i\n            if(n%i\
    \ == 0) {\n                primes += i\n            }\n        }\n        primes.size\
    \ == n", "        val sqrt = (math.sqrt(n).toInt).toLong\n        val primes =\
    \ mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isPrime = primes.takeWhile(p => p <= sqrt).forall(p => n % p == 0)\n\
    \        isPrime", "        val isPrime = mutable.Set[Long]()\n        for (i\
    \ <- 2 to n by 2) {\n            if (n % i == 0) {\n                isPrime +=\
    \ i\n            }\n        }\n        isPrime.size == n", "        val primes\
    \ = mutable.Set[Long]()\n        for (i <- 2 to Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                primes.add(i)\n            }\n        }\n  \
    \      primes.size == n", "        val i = 2\n        val primes = mutable.ListBuffer[Long]()\n\
    \        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n        \
    \        primes += i\n            }\n            i += 1\n        }\n        primes.contains(n)",
  "        val primes = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isDivisor = mutable.ArrayBuffer(true)\n        val isDivisor2 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor3 = mutable.ArrayBuffer(true)\n        val isDivisor4 =\
    \ mutable.ArrayBuffer(true)\n        val isDivisor5 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor6 = mutable.ArrayBuffer(true)\n        val isDivisor7 =\
    \ mutable.ArrayBuffer(true)\n        val isDivisor8 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor9 = mutable.ArrayBuffer(true)\n        val isDivisor10 =\
    \ mutable.ArrayBuffer(true)\n        val isDivisor11 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor12 = mutable.ArrayBuffer(true)\n        val isDivisor13\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor14 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor15 = mutable.ArrayBuffer(true)\n        val isDivisor16\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor17 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor18 = mutable.ArrayBuffer(true)\n        val isDivisor19\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor20 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor21 = mutable.ArrayBuffer(true)\n        val isDivisor22\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor23 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor24 = mutable.ArrayBuffer(true)\n        val isDivisor25\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor26 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor27 = mutable.ArrayBuffer(true)\n        val isDivisor28\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor29 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor30 = mutable.ArrayBuffer(true)\n        val isDivisor31\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor32 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor33 = mutable.ArrayBuffer(true)\n        val isDivisor34\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor35 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor36 = mutable.ArrayBuffer(true)\n        val isDivisor37\
    \ = mutable.ArrayBuffer(true)\n        val isDivisor38 = mutable.ArrayBuffer(true)\n\
    \        val isDivisor39 = mut", "        val isPrime = n <= 1\n        val isPrime2\
    \ = isPrime && (n % 2 != 0)\n        val isPrime3 = isPrime2 && (n % 3 != 0)\n\
    \        val isPrime4 = isPrime3 && (n % 4 != 0)\n        val isPrime5 = isPrime4\
    \ && (n % 5 != 0)\n        val isPrime6 = isPrime5 && (n % 6 != 0)\n        val\
    \ isPrime7 = isPrime6 && (n % 7 != 0)\n        val isPrime8 = isPrime7 && (n %\
    \ 8 != 0)\n        val isPrime9 = isPrime8 && (n % 9 != 0)\n        val isPrime10\
    \ = isPrime9 && (n % 10 != 0)\n        val isPrime11 = isPrime10 && (n % 11 !=\
    \ 0)\n        val isPrime12 = isPrime11 && (n % 12 != 0)\n        val isPrime13\
    \ = isPrime12 && (n % 13 != 0)\n        val isPrime14 = isPrime13 && (n % 14 !=\
    \ 0)\n        val isPrime15 = isPrime14 && (n % 15 != 0)\n        val isPrime16\
    \ = isPrime15 && (n % 16 != 0)\n        val isPrime17 = isPrime16 && (n % 17 !=\
    \ 0)\n        val isPrime18 = isPrime17 && (n % 18 != 0)\n        val isPrime19\
    \ = isPrime18 && (n % 19 != 0)\n        val isPrime20 = isPrime19 && (n % 20 !=\
    \ 0)\n        val isPrime21 = isPrime20 && (n % 21 != 0)\n        val isPrime22\
    \ = isPrime21 && (n % 22 != 0)\n        val isPrime23 = isPrime22 && (n % 23 !=\
    \ 0)\n        val isPrime24 = isPrime23 && (n % 24 != 0)\n        val isPrime25\
    \ = isPrime24 && (n % 25 != 0)\n        val isPrime26 = isPrime25 && (n % 26 !=\
    \ 0)\n        val isPrime27 = isPrime26 && (n % 27 != 0)\n        val isPrime28\
    \ = isPrime27 && (n % 28 != 0)\n        val isPrime29 = isPrime28 && (n % 29 !=\
    \ 0)\n        val isPrime30 = isPrime29 && (n % 30 != 0)\n        val isPrime31\
    \ = isPrime30 && (n % 31 != 0)\n        val isPrime32 = isPrime31 && (n % 32 !=\
    \ 0)\n        val isPrime", "        val primes = mutable.Set[Long]()\n      \
    \  val isPrime = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isNotPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isNotPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isNotPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isNotPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isNotPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isNotPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isNotPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isNotPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isNotPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isNotPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isNotPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isNotPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isNotPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isNotPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isNotPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isNotPrime17 = mutable.Set[Long",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, ", "        val i = 2\n        val primes = mutable.Set[Long]()\n\
    \        while(i <= n){\n            if(n % i == 0){\n                primes.add(i)\n\
    \            }\n            i += 2\n        }\n        primes.size == n", "  \
    \      val i = 2\n        val limit = math.sqrt(n)\n        while (i <= limit)\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n            i += 1\n        }\n        return true", "        val primes\
    \ = mutable.Set[Long]()\n        val isPrime = (n : Long) => {\n            val\
    \ prime = primes.find(_ == n)\n            if (prime == None) primes += n\n  \
    \          else prime\n        }\n        val isDivisible = (n : Long) => {\n\
    \            val prime = primes.find(_ == n)\n            if (prime == None) primes\
    \ += n\n            else prime % n != 0\n        }\n        val isPrimeAndDivisible\
    \ = (n : Long) => {\n            val prime = primes.find(_ == n)\n           \
    \ if (prime == None) primes += n\n            else prime % n != 0 && prime % n\
    \ == 0\n        }\n        val isPrimeAndDivisibleAndNotDivisible = (n : Long)\
    \ => {\n            val prime = primes.find(_ == n)\n            if (prime ==\
    \ None) primes += n\n            else prime % n != 0 && prime % n != 0 && prime\
    \ % n != 0\n        }\n        val isPrimeAndDivisibleAndNotDivisibleAndNotDivisible\
    \ = (n : Long) => {\n            val prime = primes.find(_ == n)\n           \
    \ if (prime == None) primes += n\n            else prime % n != 0 && prime % n\
    \ != 0 && prime % n != 0 && prime % n != 0\n        }\n        val isPrimeAndDivisibleAndNotDivisibleAndNotDivisibleAndNotDivisible\
    \ = (n : Long) => {\n            val prime = primes.find(_ == n)\n           \
    \ if (prime == None) primes += n\n            else prime % n != 0 && prime % n\
    \ != 0 && prime % n != 0 && prime % n != 0 && prime % n != 0\n        }\n    \
    \    val isPrimeAndDivisibleAndNotDivisibleAndNotDivisibleAndNotDivisibleAndNotDivisible\
    \ = (n : Long) => {\n            val prime = primes.find(_ == n)\n           \
    \ if (prime == None) primes += n\n            else prime % n != 0 && prime % n\
    \ != 0 && prime % n != 0 && prime % n != 0 && prime % n != 0 && prime % n != 0\n\
    \        }\n        val isPrimeAndDivisibleAndNotDivisibleAndNotDivisibleAndNotDivisibleAndNotDivisibleAndNotDivisible\
    \ = (n : Long) => {\n            val prime = primes.find(_ == n)\n           \
    \ if (prime == None) primes += n\n            else prime % n != 0 && prime % n\
    \ != 0 && prime % n != 0 && prime % n != 0 && prime % n != 0 && prime % n != 0\
    \ && prime % n != 0\n        }\n        val ", "        val isPrime = n <= 1 ||\
    \ (n % 2 == 0 && n != 2)\n        val isDivisibleBy3 = (n % 3 == 0)\n        val\
    \ isDivisibleBy5 = (n % 5 == 0)\n        if (isPrime && isDivisibleBy3 && isDivisibleBy5)\
    \ {\n            true\n        } else {\n            false\n        }", "    \
    \    val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val factors = mutable.Set[Long]()\n        for (i <- 2 to Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \ }\n        }\n        factors.isEmpty", "        val isPrime = n <= 1\n    \
    \    val isPrime2 = isPrime && n % 2 != 0\n        val isPrime3 = isPrime2 &&\
    \ n % 3 != 0\n        val isPrime4 = isPrime3 && n % 4 != 0\n        val isPrime5\
    \ = isPrime4 && n % 5 != 0\n        val isPrime6 = isPrime5 && n % 6 != 0\n  \
    \      val isPrime7 = isPrime6 && n % 7 != 0\n        val isPrime8 = isPrime7\
    \ && n % 8 != 0\n        val isPrime9 = isPrime8 && n % 9 != 0\n        val isPrime10\
    \ = isPrime9 && n % 10 != 0\n        val isPrime11 = isPrime10 && n % 11 != 0\n\
    \        val isPrime12 = isPrime11 && n % 12 != 0\n        val isPrime13 = isPrime12\
    \ && n % 13 != 0\n        val isPrime14 = isPrime13 && n % 14 != 0\n        val\
    \ isPrime15 = isPrime14 && n % 15 != 0\n        val isPrime16 = isPrime15 && n\
    \ % 16 != 0\n        val isPrime17 = isPrime16 && n % 17 != 0\n        val isPrime18\
    \ = isPrime17 && n % 18 != 0\n        val isPrime19 = isPrime18 && n % 19 != 0\n\
    \        val isPrime20 = isPrime19 && n % 20 != 0\n        val isPrime21 = isPrime20\
    \ && n % 21 != 0\n        val isPrime22 = isPrime21 && n % 22 != 0\n        val\
    \ isPrime23 = isPrime22 && n % 23 != 0\n        val isPrime24 = isPrime23 && n\
    \ % 24 != 0\n        val isPrime25 = isPrime24 && n % 25 != 0\n        val isPrime26\
    \ = isPrime25 && n % 26 != 0\n        val isPrime27 = isPrime26 && n % 27 != 0\n\
    \        val isPrime28 = isPrime27 && n % 28 != 0\n        val isPrime29 = isPrime28\
    \ && n % 29 != 0\n        val isPrime30 = isPrime29 && n % 30 != 0\n        val\
    \ isPrime31 = isPrime30 && n % 31 != 0\n        val isPrime32 = isPrime31 && n\
    \ % 32 != 0\n        val isPrime33", "        val primes = mutable.Set[Long]()\n\
    \        val i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                primes.add(i)\n            }\n            i += 1\n      \
    \  }\n        primes.size == n", "        val primes = mutable.Set[Long]()\n \
    \       val divisors = mutable.Set[Long]()\n        divisors += 2\n        divisors\
    \ += 3\n        divisors += 5\n        divisors += 7\n        divisors += 11\n\
    \        divisors += 13\n        divisors += 17\n        divisors += 19\n    \
    \    divisors += 23\n        divisors += 29\n        divisors += 31\n        divisors\
    \ += 37\n        divisors += 41\n        divisors += 43\n        divisors += 47\n\
    \        divisors += 53\n        divisors += 59\n        divisors += 61\n    \
    \    divisors += 67\n        divisors += 71\n        divisors += 73\n        divisors\
    \ += 79\n        divisors += 83\n        divisors += 89\n        divisors += 97\n\
    \        divisors += 101\n        divisors += 103\n        divisors += 107\n \
    \       divisors += 109\n        divisors += 113\n        divisors += 127\n  \
    \      divisors += 131\n        divisors += 137\n        divisors += 139\n   \
    \     divisors += 147\n        divisors += 151\n        divisors += 157\n    \
    \    divisors += 163\n        divisors += 167\n        divisors += 173\n     \
    \   divisors += 179\n        divisors += 181\n        divisors += 191\n      \
    \  divisors += 193\n        divisors += 197\n        divisors += 199\n       \
    \ divisors += 211\n        divisors += 223\n        divisors += 227\n        divisors\
    \ += 229\n        divisors += 233\n        divisors += 239\n        divisors +=\
    \ 241\n        divisors += 251\n        divisors += 257\n        divisors += 263\n\
    \        divisors += 269\n        divisors += 271\n        divisors += 277\n \
    \       divisors += 281\n        divisors += 283\n        divisors += 293\n  \
    \      divisors += 307\n        divisors += 311\n        divisors += 313\n   \
    \     divisors += 317\n        divisors += 323\n        divisors += 329\n    \
    \    divisors += 331\n        divisors += 337\n        divisors += 347\n     \
    \   divisors += 349\n        divisors += 353\n        divisors += 359\n      \
    \  divisors += 363\n        divisors += 369\n        divisors += 373\n       \
    \ divisors += 379\n        divisors += 383\n        divisors += 389\n        divisors\
    \ += 395\n        divisors += 401\n        divisors += 409\n        divisors +=\
    \ 419\n        divisors += 421\n        divisors += 431\n        divisors += 433\n\
    \        divisors += 439\n        divisors += 443\n        divisors += 449\n \
    \       divisors += 457\n        divisors += 461", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        if (n == 1) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        if (n % 3 == 0) return false\n        val i\
    \ = 3\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) return\
    \ false\n            i += 2\n        }\n        return true", "        val primes\
    \ = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n      \
    \  val isPrime = mutable.Set[Long]()\n        val isComposite = mutable.Set[Long]()\n\
    \        val isPrimePrime = mutable.Set[Long]()\n        val isPrimeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPri", "        val isPrime = scala.math.BigInt(n).isProbablePrime(100)\n\
    \        if (isPrime)\n            return true\n        else\n            return\
    \ false", "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, true)\n  \
    \      for (prime <- primes) {\n            if (n % prime == 0) {\n          \
    \      isPrime(0) = false\n                break\n            }\n        }\n \
    \       isPrime(0)", "        val sqrtN = math.sqrt(n)\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to sqrtN) {\n            if (n % i == 0) {\n            \
    \    primes += i\n            }\n        }\n        primes.forall(x => n % x ==\
    \ 0)", "        val primes = mutable.Set[Long]()\n        val factors = mutable.Set[Long]()\n\
    \        val divisors = mutable.Set[Long]()\n        val n = n >>> 1\n       \
    \ primes += n\n        factors += n\n        divisors += 2\n        while (divisors.nonEmpty)\
    \ {\n            val d = divisors.head\n            divisors -= d\n          \
    \  if (n % d == 0) {\n                factors += d\n                primes +=\
    \ d + 1\n            }\n        }\n        primes.contains(n)", "        val primes\
    \ = mutable.Set[Long]()\n        for (i <- 2 to n by 2) {\n            if (n %\
    \ i == 0) {\n                primes.add(i)\n            }\n        }\n       \
    \ primes.size == n", "        val isPrime = mutable.Set[Long]()\n        for (i\
    \ <- 2 to Math.sqrt(n)) {\n            if (n % i == 0) {\n                isPrime\
    \ += i\n            }\n        }\n        isPrime.toSet.size == n", "        val\
    \ isPrime = (2 to Math.sqrt(n).toInt).forall(x => n % x == 0)\n        if (isPrime)\
    \ true else false", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n      \
    \  val isPrime2 = mutable.Set[Long]()\n        val isNotPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isNotPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isNotPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isNotPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isNotPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isNotPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isNotPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isNotPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isNotPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isNotPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isNotPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isNotPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isNotPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isNotPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isNotPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isNotPrime17 = mutable.Set[Long",
  "        val isPrime = scala.math.BigInt(n).isProbablePrime(scala.math.BigInt(2))\n\
    \        if (isPrime) {\n            true\n        } else {\n            false\n\
    \        }", "        val isPrime = n <= 1\n        if (isPrime) {\n         \
    \   return false\n        }\n        val sqrt = (math.sqrt(n).toInt).toLong\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (prime\
    \ <- primes) {\n            if (n % prime == 0) {\n                isPrime = false\n\
    \                break\n            }\n        }\n        return isPrime", " \
    \       val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = mutable.ArrayBuffer(true, false)\n        for (i <- 0 until primes.size) {\n\
    \            if (n % primes(i) == 0) {\n                isPrime(i) = false\n \
    \           }\n        }\n        isPrime(0)", "        val isPrime = n <= 1 ||\
    \ (n % 2 == 0 && n > 1)\n        for(i <- 2 until n by 2)\n            if(!isPrime)\n\
    \                return false\n        return isPrime", "        val primes =\
    \ mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n        divisors\
    \ += 2\n        divisors += 3\n        divisors += 5\n        divisors += 7\n\
    \        divisors += 11\n        divisors += 13\n        divisors += 17\n    \
    \    divisors += 19\n        divisors += 23\n        divisors += 29\n        divisors\
    \ += 31\n        divisors += 37\n        divisors += 41\n        divisors += 43\n\
    \        divisors += 47\n        divisors += 53\n        divisors += 59\n    \
    \    divisors += 61\n        divisors += 67\n        divisors += 71\n        divisors\
    \ += 73\n        divisors += 79\n        divisors += 83\n        divisors += 89\n\
    \        divisors += 97\n        divisors += 101\n        divisors += 103\n  \
    \      divisors += 107\n        divisors += 109\n        divisors += 113\n   \
    \     divisors += 127\n        divisors += 131\n        divisors += 137\n    \
    \    divisors += 139\n        divisors += 147\n        divisors += 151\n     \
    \   divisors += 157\n        divisors += 163\n        divisors += 167\n      \
    \  divisors += 173\n        divisors += 179\n        divisors += 181\n       \
    \ divisors += 191\n        divisors += 193\n        divisors += 197\n        divisors\
    \ += 199\n        divisors += 211\n        divisors += 223\n        divisors +=\
    \ 227\n        divisors += 229\n        divisors += 233\n        divisors += 239\n\
    \        divisors += 241\n        divisors += 251\n        divisors += 257\n \
    \       divisors += 263\n        divisors += 269\n        divisors += 271\n  \
    \      divisors += 277\n        divisors += 283\n        divisors += 289\n   \
    \     divisors += 293\n        divisors += 307\n        divisors += 311\n    \
    \    divisors += 313\n        divisors += 317\n        divisors += 323\n     \
    \   divisors += 329\n        divisors += 331\n        divisors += 337\n      \
    \  divisors += 347\n        divisors += 349\n        divisors += 353\n       \
    \ divisors += 359\n        divisors += 367\n        divisors += 373\n        divisors\
    \ += 379\n        divisors += 383\n        divisors += 389\n        divisors +=\
    \ 397\n        divisors += 401\n        divisors += 409\n        divisors += 419\n\
    \        divisors += 421\n        divisors += 431\n        divisors += 433\n \
    \       divisors += 439\n        divisors += 443\n        divisors += 449\n  \
    \      divisors += 457\n        divisors += 461\n        divisors += 463\n   \
    \     ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val divisors = mutable.ArrayBuffer(2, 3)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ true)\n        val isDivisor = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrimeDivisor = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor2\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor3 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor4 = mutable.ArrayBuffer(false, true)\n    \
    \    val isPrimeDivisor5 = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor6\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor7 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor8 = mutable.ArrayBuffer(false, true)\n    \
    \    val isPrimeDivisor9 = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor10\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor11 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor12 = mutable.ArrayBuffer(false, true)\n   \
    \     val isPrimeDivisor13 = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor14\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor15 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor16 = mutable.ArrayBuffer(false, true)\n   \
    \     val isPrimeDivisor17 = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor18\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor19 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor20 = mutable.ArrayBuffer(false, true)\n   \
    \     val isPrimeDivisor21 = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor22\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor23 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor24 = mutable.ArrayBuffer(false, true)\n   \
    \     val isPrimeDivisor25 = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor26\
    \ = mutable.ArrayBuffer(false, true)\n        val isPrimeDivisor27 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrimeDivisor28 = mutable.ArrayBuffer(false, ", "      \
    \  val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val factors = mutable.Set[Long]()\n\
    \        for (i <- 2 to math.sqrt(n)) {\n            if (n % i == 0) {\n     \
    \           factors += i\n            }\n        }\n        factors.isEmpty",
  "        val isPrime = scala.math.BigInt(n).isProbablePrime\n        if (isPrime)\n\
    \            true\n        else\n            false", "        val i = 2\n    \
    \    val s = BigInt(n)\n        val p = BigInt(2)\n        while (i <= s) {\n\
    \            if (n % i == 0) {\n                return false\n            }\n\
    \            i += 1\n        }\n        return true", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, true)\n  \
    \      val isPrime2 = mutable.ArrayBuffer(false, true)\n        val isPrime3 =\
    \ mutable.ArrayBuffer(false, true)\n        val isPrime4 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime5 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime6 = mutable.ArrayBuffer(false, true)\n        val isPrime7 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime8 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime9 = mutable.ArrayBuffer(false, true)\n        val isPrime10 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime11 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime12 = mutable.ArrayBuffer(false, true)\n        val isPrime13 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime14 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime15 = mutable.ArrayBuffer(false, true)\n        val isPrime16 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime17 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime18 = mutable.ArrayBuffer(false, true)\n        val isPrime19 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime20 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime21 = mutable.ArrayBuffer(false, true)\n        val isPrime22 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime23 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime24 = mutable.ArrayBuffer(false, true)\n        val isPrime25 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime26 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime27 = mutable.ArrayBuffer(false, true)\n        val isPrime28 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime29 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime30 = mutable.ArrayBuffer(false, true)\n        val isPrime31 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime32 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime33 = mutable.ArrayBuffer(false, true)\n        val isPrime34 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime35 = ", "        val primes = mutable.Set[Long]()\n\
    \        val divisors = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isDivisor = mutable.Set[Boolean]()\n        val isPrimeDivisor =\
    \ mutable.Set[Boolean]()\n        val isPrimeDivisor2 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor3 = mutable.Set[Boolean]()\n        val isPrimeDivisor4\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor5 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor6 = mutable.Set[Boolean]()\n        val isPrimeDivisor7\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor8 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor9 = mutable.Set[Boolean]()\n        val isPrimeDivisor10\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor11 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor12 = mutable.Set[Boolean]()\n        val isPrimeDivisor13\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor14 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor15 = mutable.Set[Boolean]()\n        val isPrimeDivisor16\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor17 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor18 = mutable.Set[Boolean]()\n        val isPrimeDivisor19\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor20 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor21 = mutable.Set[Boolean]()\n        val isPrimeDivisor22\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor23 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor24 = mutable.Set[Boolean]()\n        val isPrimeDivisor25\
    \ = mutable.Set[Boolean]()\n        val isPrimeDivisor26 = mutable.Set[Boolean]()\n\
    \        val isPrimeDivisor27 = mutable.Set[Boolean]()\n        val isPrimeDivisor28\
    \ = mutable.Set[", "        val primes = mutable.Set[Long]()\n        val composites\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  val isComposite = mutable.Set[Boolean]()\n        val isPrime2 = mutable.Set[Boolean]()\n\
    \        val isComposite2 = mutable.Set[Boolean]()\n        val isPrime3 = mutable.Set[Boolean]()\n\
    \        val isComposite3 = mutable.Set[Boolean]()\n        val isPrime4 = mutable.Set[Boolean]()\n\
    \        val isComposite4 = mutable.Set[Boolean]()\n        val isPrime5 = mutable.Set[Boolean]()\n\
    \        val isComposite5 = mutable.Set[Boolean]()\n        val isPrime6 = mutable.Set[Boolean]()\n\
    \        val isComposite6 = mutable.Set[Boolean]()\n        val isPrime7 = mutable.Set[Boolean]()\n\
    \        val isComposite7 = mutable.Set[Boolean]()\n        val isPrime8 = mutable.Set[Boolean]()\n\
    \        val isComposite8 = mutable.Set[Boolean]()\n        val isPrime9 = mutable.Set[Boolean]()\n\
    \        val isComposite9 = mutable.Set[Boolean]()\n        val isPrime10 = mutable.Set[Boolean]()\n\
    \        val isComposite10 = mutable.Set[Boolean]()\n        val isPrime11 = mutable.Set[Boolean]()\n\
    \        val isComposite11 = mutable.Set[Boolean]()\n        val isPrime12 = mutable.Set[Boolean]()\n\
    \        val isComposite12 = mutable.Set[Boolean]()\n        val isPrime13 = mutable.Set[Boolean]()\n\
    \        val isComposite13 = mutable.Set[Boolean]()\n        val isPrime14 = mutable.Set[Boolean]()\n\
    \        val isComposite14 = mutable.Set[Boolean]()\n        val isPrime15 = mutable.Set[Boolean]()\n\
    \        val isComposite15 = mutable.Set[Boolean]()\n        val isPrime16 = mutable.Set[Boolean]()\n\
    \        val isComposite16 = mutable.Set[Boolean]()\n        val isPrime17 = mutable.Set[Boolean]()\n\
    \        val isComposite17 = mutable.Set[Boolean]()\n        val isPrime18 = mutable.Set[Boolean]()\n\
    \        val isComposite", "        val m = math.ceil(n/2.0).toInt\n        val\
    \ i = 2\n        val s = true\n        while(i <= m) {\n            if(n % i ==\
    \ 0) {\n                s = false\n                break\n            }\n    \
    \        i += 1\n        }\n        s", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val primes = mutable.Set[Long]()\n        for (i <- 2 to n by 2) {\n  \
    \          if (n % i == 0) {\n                primes.add(i)\n            }\n \
    \       }\n        primes.size == n", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, true)\n  \
    \      for (i <- 0 until primes.size) {\n            val prime = primes(i)\n \
    \           if (n % prime == 0) {\n                isPrime(i) = false\n      \
    \      }\n        }\n        isPrime(0)", "        val m = math.ceil(math.sqrt(n)).toInt\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (p\
    \ <- primes) {\n            if (n % p == 0) return false\n        }\n        return\
    \ true", "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val sqrtN = math.sqrt(n)\n\
    \        val primes = mutable.ArrayBuffer(2)\n        val isPrime = true\n   \
    \     for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n               \
    \ primes += i\n                isPrime = false\n            }\n        }\n   \
    \     isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                primes += i\n                i += 2\n            }\n    \
    \        else {\n                i += 1\n            }\n        }\n        primes.contains(n)",
  "        val primes = mutable.ListBuffer(2)\n        for (i <- 2 to n by 2) {\n\
    \            if (n % i == 0) {\n                primes += i\n            }\n \
    \       }\n        primes.forall(x => n % x == 0)", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val isPrime = (2 to n) forall { i =>\n            val isDivisibleBy2 =\
    \ i % 2 == 0\n            val isDivisibleBy3 = i % 3 == 0\n            val isDivisibleBy5\
    \ = i % 5 == 0\n            val isDivisibleBy7 = i % 7 == 0\n            val isDivisibleBy11\
    \ = i % 11 == 0\n            val isDivisibleBy13 = i % 13 == 0\n            val\
    \ isDivisibleBy17 = i % 17 == 0\n            val isDivisibleBy19 = i % 19 == 0\n\
    \            val isDivisibleBy23 = i % 23 == 0\n            val isDivisibleBy29\
    \ = i % 29 == 0\n            val isDivisibleBy31 = i % 31 == 0\n            val\
    \ isDivisibleBy37 = i % 37 == 0\n            val isDivisibleBy41 = i % 41 == 0\n\
    \            val isDivisibleBy43 = i % 43 == 0\n            val isDivisibleBy47\
    \ = i % 47 == 0\n            val isDivisibleBy51 = i % 51 == 0\n            val\
    \ isDivisibleBy55 = i % 55 == 0\n            val isDivisibleBy59 = i % 59 == 0\n\
    \            val isDivisibleBy61 = i % 61 == 0\n            val isDivisibleBy67\
    \ = i % 67 == 0\n            val isDivisibleBy71 = i % 71 == 0\n            val\
    \ isDivisibleBy73 = i % 73 == 0\n            val isDivisibleBy79 = i % 79 == 0\n\
    \            val isDivisibleBy83 = i % 83 == 0\n            val isDivisibleBy89\
    \ = i % 89 == 0\n            val isDivisibleBy91 = i % 91 == 0\n            val\
    \ isDivisibleBy93 = i % 93 == 0\n            val isDivisibleBy97 = i % 97 == 0\n\
    \            val isDivisibleBy101 = i % 101 == 0\n            val isDivisibleBy103\
    \ = i % 103 == 0\n            val isDivisibleBy107 = i % 107 == 0\n          \
    \  val isDivisibleBy111 = i % 111 == 0\n            val isDivisibleBy113 = i %\
    \ 113 == 0\n            val isDivisibleBy117 = i % 117 == 0\n            val isDivisibleBy121\
    \ = i % 121 == 0\n            val isDivisibleBy123 = i % 123 == 0\n          \
    \  val isDivisibleBy127 = i % 127 == 0\n            val isDivisibleBy131 = i %\
    \ 131 == 0\n            val isDivisibleBy133 = i % 133 == 0\n            val isDivisibleBy137\
    \ = i % 137 == 0\n            val isDivisibleBy141 = i % 141 == 0", "        val\
    \ isPrime = (2 to n).forall(x => n % x == 0)\n        !isPrime", "        val\
    \ isPrime = (2 to Math.sqrt(n).toInt).forall(x => n % x != 0)\n        n match\
    \ {\n            case x if x == 1 => true\n            case x if x == 0 => false\n\
    \            case _ => isPrime\n        }", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ArrayBuffer(2, 3)\n        val\
    \ isPrime = mutable.ArrayBuffer(false, true)\n        val isPrime2 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime3 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime4 = mutable.ArrayBuffer(false, true)\n        val isPrime5 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime6 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime7 = mutable.ArrayBuffer(false, true)\n        val isPrime8 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime9 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime10 = mutable.ArrayBuffer(false, true)\n        val isPrime11 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime12 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime13 = mutable.ArrayBuffer(false, true)\n        val isPrime14 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime15 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime16 = mutable.ArrayBuffer(false, true)\n        val isPrime17 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime18 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime19 = mutable.ArrayBuffer(false, true)\n        val isPrime20 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime21 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime22 = mutable.ArrayBuffer(false, true)\n        val isPrime23 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime24 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime25 = mutable.ArrayBuffer(false, true)\n        val isPrime26 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime27 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime28 = mutable.ArrayBuffer(false, true)\n        val isPrime29 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime30 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime31 = mutable.ArrayBuffer(false, true)\n        val isPrime32 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime33 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime34 = mutable.Array", "        val sqrt = (math.sqrt(n).toInt).toLong\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n\
    \        for (prime <- primes if prime <= sqrt) {\n            if (n % prime ==\
    \ 0) {\n                return false\n            }\n        }\n        return\
    \ true", "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val primes = mutable.Set[Long]()\n\
    \        val composites = mutable.Set[Long]()\n        for (i <- 2 to n by 2)\
    \ {\n            if (n % i == 0) {\n                composites += i\n        \
    \    } else {\n                primes += i\n            }\n        }\n       \
    \ primes.forall(x => composites.contains(x))", "        val isPrime = mutable.Set[Long]()\n\
    \        val isNotPrime = mutable.Set[Long]()\n        for(i <- 2 to Math.sqrt(n))\
    \ {\n            if(n % i == 0) {\n                isPrime += i\n            }\
    \ else {\n                isNotPrime += i\n            }\n        }\n        isPrime.toSet.size\
    \ == isNotPrime.toSet.size", "        val primes = mutable.Set[Long]()\n     \
    \   val isPrime = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n\
    \        val isPrimeFactors = mutable.Set[Long]()\n        val isNotPrimeFactors\
    \ = mutable.Set[Long]()\n        val isPrimeDivisors = mutable.Set[Long]()\n \
    \       val isNotPrimeDivisors = mutable.Set[Long]()\n        val isPrimeDivisorsPrime\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsPrime = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsNotPrime = mutable.Set[Long]()\n        val isNotPrimeDivisorsNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsPrimeNotPrime = mutable.Set[Long]()\n        val\
    \ isPrimeDivisorsNotPrimeNotPrime = mutable.Set[Long]()\n        val isNotPrimeDivisorsNotPrimeNotPrime\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsPrimeNotPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsPrimeNotPrimeNotPrime = mutable.Set[Long]()\n \
    \       val isPrimeDivisorsNotPrimeNotPrimeNotPrime = mutable.Set[Long]()\n  \
    \      val isNotPrimeDivisorsNotPrimeNotPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsPrimeNotPrimeNotPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsPrimeNotPrimeNotPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsNotPrimeNotPrimeNotPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsNotPrimeNotPrimeNotPrimeNotPrime = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsPrimeNotPrimeNotPri", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var i = 2\n        while (i <= n / 2) {\n         \
    \   if (n % i == 0) {\n                primes += i\n                i += 2\n \
    \           }\n            else {\n                i += 1\n            }\n   \
    \     }\n        primes.contains(n)", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val isPrime = mutable.Set[Long]()\n        for (i <- 2 to Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                isPrime += i\n           \
    \ }\n        }\n        isPrime.toSet.size == n", "        val isPrime = n <=\
    \ 1\n        val isPrime2 = isPrime && n % 2 != 0\n        val isPrime3 = isPrime2\
    \ && n % 3 != 0\n        val isPrime4 = isPrime3 && n % 4 != 0\n        val isPrime5\
    \ = isPrime4 && n % 5 != 0\n        val isPrime6 = isPrime5 && n % 6 != 0\n  \
    \      val isPrime7 = isPrime6 && n % 7 != 0\n        val isPrime8 = isPrime7\
    \ && n % 8 != 0\n        val isPrime9 = isPrime8 && n % 9 != 0\n        val isPrime10\
    \ = isPrime9 && n % 10 != 0\n        val isPrime11 = isPrime10 && n % 11 != 0\n\
    \        val isPrime12 = isPrime11 && n % 12 != 0\n        val isPrime13 = isPrime12\
    \ && n % 13 != 0\n        val isPrime14 = isPrime13 && n % 14 != 0\n        val\
    \ isPrime15 = isPrime14 && n % 15 != 0\n        val isPrime16 = isPrime15 && n\
    \ % 16 != 0\n        val isPrime17 = isPrime16 && n % 17 != 0\n        val isPrime18\
    \ = isPrime17 && n % 18 != 0\n        val isPrime19 = isPrime18 && n % 19 != 0\n\
    \        val isPrime20 = isPrime19 && n % 20 != 0\n        val isPrime21 = isPrime20\
    \ && n % 21 != 0\n        val isPrime22 = isPrime21 && n % 22 != 0\n        val\
    \ isPrime23 = isPrime22 && n % 23 != 0\n        val isPrime24 = isPrime23 && n\
    \ % 24 != 0\n        val isPrime25 = isPrime24 && n % 25 != 0\n        val isPrime26\
    \ = isPrime25 && n % 26 != 0\n        val isPrime27 = isPrime26 && n % 27 != 0\n\
    \        val isPrime28 = isPrime27 && n % 28 != 0\n        val isPrime29 = isPrime28\
    \ && n % 29 != 0\n        val isPrime30 = isPrime29 && n % 30 != 0\n        val\
    \ isPrime31 = isPrime30 && n % 31 != 0\n        val isPrime32 = isPrime31 && n\
    \ % 32 != 0\n        val isPrime33", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val divisors = mutable.ListBuffer[Long]()\n        divisors += 2\n  \
    \      divisors += 3\n        divisors += 5\n        divisors += 7\n        divisors\
    \ += 11\n        divisors += 13\n        divisors += 17\n        divisors += 19\n\
    \        divisors += 23\n        divisors += 29\n        divisors += 31\n    \
    \    divisors += 37\n        divisors += 41\n        divisors += 43\n        divisors\
    \ += 47\n        divisors += 53\n        divisors += 59\n        divisors += 61\n\
    \        divisors += 67\n        divisors += 71\n        divisors += 73\n    \
    \    divisors += 79\n        divisors += 83\n        divisors += 89\n        divisors\
    \ += 97\n        divisors += 101\n        divisors += 103\n        divisors +=\
    \ 107\n        divisors += 109\n        divisors += 113\n        divisors += 127\n\
    \        divisors += 131\n        divisors += 137\n        divisors += 139\n \
    \       divisors += 147\n        divisors += 151\n        divisors += 157\n  \
    \      divisors += 163\n        divisors += 167\n        divisors += 173\n   \
    \     divisors += 179\n        divisors += 181\n        divisors += 191\n    \
    \    divisors += 193\n        divisors += 197\n        divisors += 199\n     \
    \   divisors += 211\n        divisors += 223\n        divisors += 227\n      \
    \  divisors += 229\n        divisors += 233\n        divisors += 239\n       \
    \ divisors += 241\n        divisors += 251\n        divisors += 257\n        divisors\
    \ += 263\n        divisors += 269\n        divisors += 271\n        divisors +=\
    \ 277\n        divisors += 281\n        divisors += 283\n        divisors += 293\n\
    \        divisors += 307\n        divisors += 311\n        divisors += 313\n \
    \       divisors += 317\n        divisors += 323\n        divisors += 329\n  \
    \      divisors += 331\n        divisors += 337\n        divisors += 347\n   \
    \     divisors += 349\n        divisors += 353\n        divisors += 359\n    \
    \    divisors += 363\n        divisors += 369\n        divisors += 373\n     \
    \   divisors += 379\n        divisors += 383\n        divisors += 389\n      \
    \  divisors += 397\n        divisors += 401\n        divisors += 409\n       \
    \ divisors += 419\n        divisors += 421\n        divisors += 431\n        divisors\
    \ += 433\n        divisors += 439\n        divisors += 443\n        divisors +=\
    \ 449\n        divisors += 457\n        divisors += 46", "        val i = 2\n\
    \        val s = BigInt(n)\n        val p = BigInt(2)\n        while (i <= s)\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n            i += 1\n        }\n        return true", "        val isPrime\
    \ = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n      \
    \  val isPrimeNum = mutable.Set[Long]()\n        val isNotPrimeNum = mutable.Set[Long]()\n\
    \        val isPrimeNum2 = mutable.Set[Long]()\n        val isNotPrimeNum2 = mutable.Set[Long]()\n\
    \        val isPrimeNum3 = mutable.Set[Long]()\n        val isNotPrimeNum3 = mutable.Set[Long]()\n\
    \        val isPrimeNum4 = mutable.Set[Long]()\n        val isNotPrimeNum4 = mutable.Set[Long]()\n\
    \        val isPrimeNum5 = mutable.Set[Long]()\n        val isNotPrimeNum5 = mutable.Set[Long]()\n\
    \        val isPrimeNum6 = mutable.Set[Long]()\n        val isNotPrimeNum6 = mutable.Set[Long]()\n\
    \        val isPrimeNum7 = mutable.Set[Long]()\n        val isNotPrimeNum7 = mutable.Set[Long]()\n\
    \        val isPrimeNum8 = mutable.Set[Long]()\n        val isNotPrimeNum8 = mutable.Set[Long]()\n\
    \        val isPrimeNum9 = mutable.Set[Long]()\n        val isNotPrimeNum9 = mutable.Set[Long]()\n\
    \        val isPrimeNum10 = mutable.Set[Long]()\n        val isNotPrimeNum10 =\
    \ mutable.Set[Long]()\n        val isPrimeNum11 = mutable.Set[Long]()\n      \
    \  val isNotPrimeNum11 = mutable.Set[Long]()\n        val isPrimeNum12 = mutable.Set[Long]()\n\
    \        val isNotPrimeNum12 = mutable.Set[Long]()\n        val isPrimeNum13 =\
    \ mutable.Set[Long]()\n        val isNotPrimeNum13 = mutable.Set[Long]()\n   \
    \     val isPrimeNum14 = mutable.Set[Long]()\n        val isNotPrimeNum14 = mutable.Set[Long]()\n\
    \        val isPrimeNum15 = mutable.Set[Long]()\n        val isNotPrimeNum15 =\
    \ mutable.Set[Long]()\n        val isPrimeNum16 = mutable.Set[", "        val\
    \ isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val i = 2\n        val\
    \ s = BigInt(n)\n        val p = BigInt(2)\n        val q = BigInt(3)\n      \
    \  val r = BigInt(5)\n        val m = BigInt(2)\n        val a = BigInt(2)\n \
    \       val b = BigInt(3)\n        val c = BigInt(5)\n        val d = BigInt(5)\n\
    \        val e = BigInt(5)\n        val f = BigInt(5)\n        val g = BigInt(5)\n\
    \        val h = BigInt(5)\n        val i = BigInt(2)\n        val j = BigInt(3)\n\
    \        val k = BigInt(5)\n        val l = BigInt(5)\n        val m = BigInt(2)\n\
    \        val n = BigInt(3)\n        val o = BigInt(5)\n        val p = BigInt(2)\n\
    \        val q = BigInt(3)\n        val r = BigInt(5)\n        val s = BigInt(2)\n\
    \        val t = BigInt(3)\n        val u = BigInt(5)\n        val v = BigInt(5)\n\
    \        val w = BigInt(5)\n        val x = BigInt(5)\n        val y = BigInt(5)\n\
    \        val z = BigInt(5)\n        val a = BigInt(2)\n        val b = BigInt(3)\n\
    \        val c = BigInt(5)\n        val d = BigInt(5)\n        val e = BigInt(5)\n\
    \        val f = BigInt(5)\n        val g = BigInt(5)\n        val h = BigInt(5)\n\
    \        val i = BigInt(2)\n        val j = BigInt(3)\n        val k = BigInt(5)\n\
    \        val l = BigInt(5)\n        val m = BigInt(2)\n        val n = BigInt(3)\n\
    \        val o = BigInt(5)\n        val p = BigInt(2)\n        val q = BigInt(3)\n\
    \        val r = BigInt(5)\n        val s = BigInt(2)\n        val t = BigInt(3)\n\
    \        val u = BigInt(5)\n        val v = BigInt(5)\n        val w = BigInt(5)\n\
    \        val x = BigInt(5)\n        val y = BigInt(5)\n        val z = BigInt(5)\n\
    \        val a = BigInt(2)\n        val b = BigInt(3)\n        val c = BigInt(5)\n\
    \        val d = BigInt(5)\n        val e = BigInt(5)\n        val f = BigInt(5)\n\
    \        val g = BigInt(5)\n        val h = BigInt(5)\n        val i = BigInt(2)\n\
    \        val j = BigInt(3)\n        val k = BigInt(5)\n        val l = BigInt(5)\n\
    \        val m = BigInt(2)\n        val n = BigInt(3)\n        val o = BigInt(5)\n\
    \        val p = ", "        val primes = mutable.Set[Long]()\n        val i =\
    \ 2\n        while (i < n) {\n            if (n % i == 0) {\n                primes.add(i)\n\
    \            }\n            i += 1\n        }\n        primes.size == n", "  \
    \      val sqrt = (math.sqrt(n).toInt).toLong\n        val primes = mutable.ArrayBuffer(2)\n\
    \        for(i <- 2 to sqrt) {\n            if(n % i == 0) {\n               \
    \ primes += i\n            }\n        }\n        primes.size == n", "        val\
    \ isPrime = mutable.Set[Long]()\n        for(i <- 2 to Math.sqrt(n)) {\n     \
    \       if(n % i == 0) {\n                isPrime += i\n            }\n      \
    \  }\n        !isPrime.isEmpty", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = (2 to Math.sqrt(n).toInt).forall(x\
    \ => n % x == 0)\n        !isPrime", "        val isPrime = mutable.Set[Long]()\n\
    \        val isNotPrime = mutable.Set[Long]()\n        val isPrimeFactors = mutable.Set[Long]()\n\
    \        val isNotPrimeFactors = mutable.Set[Long]()\n        val isPrimeFactorsSet\
    \ = mutable.Set[Long]()\n        val isNotPrimeFactorsSet = mutable.Set[Long]()\n\
    \        val isPrimeFactorsSet2 = mutable.Set[Long]()\n        val isNotPrimeFactorsSet2\
    \ = mutable.Set[Long]()\n        val isPrimeFactorsSet3 = mutable.Set[Long]()\n\
    \        val isNotPrimeFactorsSet3 = mutable.Set[Long]()\n        val isPrimeFactorsSet4\
    \ = mutable.Set[Long]()\n        val isNotPrimeFactorsSet4 = mutable.Set[Long]()\n\
    \        val isPrimeFactorsSet5 = mutable.Set[Long]()\n        val isNotPrimeFactorsSet5\
    \ = mutable.Set[Long]()\n        val isPrimeFactorsSet6 = mutable.Set[Long]()\n\
    \        val isNotPrimeFactorsSet6 = mutable.Set[Long]()\n        val isPrimeFactorsSet7\
    \ = mutable.Set[Long]()\n        val isNotPrimeFactorsSet7 = mutable.Set[Long]()\n\
    \        val isPrimeFactorsSet8 = mutable.Set[Long]()\n        val isNotPrimeFactorsSet8\
    \ = mutable.Set[Long]()\n        val isPrimeFactorsSet9 = mutable.Set[Long]()\n\
    \        val isNotPrimeFactorsSet9 = mutable.Set[Long]()\n        val isPrimeFactorsSet10\
    \ = mutable.Set[Long]()\n        val isNotPrimeFactorsSet10 = mutable.Set[Long]()\n\
    \        val isPrimeFactorsSet11 = mutable.Set[Long]()\n        val isNotPrimeFactorsSet11\
    \ = mutable.Set[Long]()\n        val isPrimeFactorsSet12 = mutable.Set[Long]()\n\
    \        val isNotPrimeFactorsSet12 = mutable.Set[Long]()\n        val isPrimeFactorsSet13\
    \ = mutable.Set[Long]()\n        val isNotPrimeFactorsSet13 = mutable.Set", " \
    \       val isPrime = n <= 1 || (n % 2 == 0 && n != 2)\n        for(i <- 2 to\
    \ Math.sqrt(n)) {\n            if(n % i == 0) {\n                isPrime = false\n\
    \                break\n            }\n        }\n        isPrime", "        val\
    \ primes = mutable.Set[Long]()\n        val isPrime = (n : Long) => {\n      \
    \      val isPrime = (n : Long) => {\n                if (n == 1) true\n     \
    \           else {\n                    val isPrime = (n : Long) => {\n      \
    \                  if (n % 2 == 0) false\n                        else {\n   \
    \                         val isPrime = (n : Long) => {\n                    \
    \            if (n % 3 == 0) false\n                                else {\n \
    \                                   val isPrime = (n : Long) => {\n          \
    \                              if (n % 5 == 0) false\n                       \
    \                 else {\n                                            val isPrime\
    \ = (n : Long) => {\n                                                if (n % 7\
    \ == 0) false\n                                                else {\n      \
    \                                              primes += n\n                 \
    \                                   isPrime(n - 1)\n                         \
    \                       }\n                                            }\n   \
    \                                         isPrime(n - 1)\n                   \
    \                     }\n                                    }\n             \
    \                       isPrime(n - 1)\n                                }\n  \
    \                          }\n                            isPrime(n - 1)\n   \
    \                     }\n                    }\n                    isPrime(n\
    \ - 1)\n                }\n            }\n            isPrime(n - 1)\n       \
    \ }\n        isPrime(n - 1)\n        primes.contains(n)", "        if (n < 2)\
    \ return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val sqrt = (math.sqrt(n).toInt)\n        for (i <- 2 to sqrt)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true",
  "        val primes = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        val sqrt_n = math.floor(math.sqrt(n))\n        for(i <- 1 to sqrt_n)\
    \ {\n            val d = math.floor(n / i)\n            if(d > 1) {\n        \
    \        divisors += d\n            }\n            if(n % i == 0) {\n        \
    \        primes += i\n            }\n        }\n        primes.forall(x => divisors.contains(x))",
  "        val i = 2\n        val s = BigInt(n)\n        val m = BigInt(2)\n     \
    \   val primes = mutable.ArrayBuffer(true)\n        while(i < s) {\n         \
    \   val p = BigInt(i).divide(m)\n            if(primes.contains(p)) {\n      \
    \          primes = primes.filter(_ != p)\n            } else {\n            \
    \    primes = primes + p\n            }\n            i = i + 1\n        }\n  \
    \      primes.contains(n)", "        val isPrime = mutable.Set[Long]()\n     \
    \   val isNotPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isNotPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isNotPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isNotPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isNotPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isNotPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isNotPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isNotPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isNotPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isNotPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isNotPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isNotPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isNotPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isNotPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isNotPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isNotPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isNotPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.",
  "        val isPrime = mutable.Set[Long]()\n        val primes = mutable.Set[Long]()\n\
    \        val isPrimes = mutable.Set[Long]()\n        val isPrimesAndPrimes = mutable.Set[Long]()\n\
    \        val isPrimesAndPrimesAndPrimes = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimesAndPrimes\
    \ = mutable.Set[Long]()\n        val isPrimesAndPrimesAndPrimesAndPrimesAndPrimes",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        if (n < 2) return false\n\
    \        if (n == 2) return true\n        if (n % 2 == 0) return false\n     \
    \   val m = math.ceil(math.sqrt(n))\n        for (i = 3; i <= m; i += 2) if (n\
    \ % i == 0) return false\n        return true", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val isPrime = mutable.Set[Long]()\n        for (i <- 2 to n by 2) {\n \
    \           if (n % i == 0) {\n                isPrime += i\n            }\n \
    \       }\n        isPrime.toSet.size == n", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val primes = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        val isPrime = true\n        for (i <- 2 to n by 2) {\n            if\
    \ (n % i == 0) {\n                divisors += i\n                primes += i\n\
    \            }\n        }\n        divisors.forall(x => primes.contains(x))",
  "        val factors = mutable.Set[Long]()\n        for (i <- 2 to n by 2)\n   \
    \         if (n % i == 0)\n                factors += i\n        factors.isEmpty",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = n <= 1\n\
    \        if(isPrime) {\n            val factors = mutable.Set[Long]()\n      \
    \      for(i <- 2 to n by 2) {\n                if(n % i == 0) {\n           \
    \         factors += i\n                }\n            }\n            if(factors.size\
    \ == n) {\n                true\n            } else {\n                false\n\
    \            }\n        } else {\n            false\n        }", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime = mutable.ArrayBuffer(true, false)\n        val\
    \ isPrime2 = mutable.ArrayBuffer(true, false)\n        val isNotPrime2 = mutable.ArrayBuffer(true,\
    \ false)\n        val isPrime3 = mutable.ArrayBuffer(true, false)\n        val\
    \ isNotPrime3 = mutable.ArrayBuffer(true, false)\n        val isPrime4 = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime4 = mutable.ArrayBuffer(true, false)\n       \
    \ val isPrime5 = mutable.ArrayBuffer(true, false)\n        val isNotPrime5 = mutable.ArrayBuffer(true,\
    \ false)\n        val isPrime6 = mutable.ArrayBuffer(true, false)\n        val\
    \ isNotPrime6 = mutable.ArrayBuffer(true, false)\n        val isPrime7 = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime7 = mutable.ArrayBuffer(true, false)\n       \
    \ val isPrime8 = mutable.ArrayBuffer(true, false)\n        val isNotPrime8 = mutable.ArrayBuffer(true,\
    \ false)\n        val isPrime9 = mutable.ArrayBuffer(true, false)\n        val\
    \ isNotPrime9 = mutable.ArrayBuffer(true, false)\n        val isPrime10 = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime10 = mutable.ArrayBuffer(true, false)\n      \
    \  val isPrime11 = mutable.ArrayBuffer(true, false)\n        val isNotPrime11\
    \ = mutable.ArrayBuffer(true, false)\n        val isPrime12 = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime12 = mutable.ArrayBuffer(true, false)\n      \
    \  val isPrime13 = mutable.ArrayBuffer(true, false)\n        val isNotPrime13\
    \ = mutable.ArrayBuffer(true, false)\n        val isPrime14 = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime14 = mutable.ArrayBuffer(true, false)\n      \
    \  val isPrime15 = mutable.ArrayBuffer(true, false)\n        val isNotPrime15\
    \ = mutable.ArrayBuffer(true, false)\n        val isPrime16 = mutable.ArrayBuffer(true,\
    \ false)\n        val isNotPrime16 = mutable.ArrayBuffer(true, false)", "    \
    \    val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = n <= 1\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrimes =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = n <= 1\n        val\
    \ isPrimes = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = n <= 1\n\
    \        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n      \
    \  val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = n <= 1\n        val isPrimes = mutable.ArrayBuffer.empty[Boolean]",
  "        val isPrime = n <= 1\n        if(isPrime) {\n            return true\n\
    \        }\n        val sqrtN = math.sqrt(n)\n        for(i <- 2 to sqrtN) {\n\
    \            if(n % i == 0) {\n                isPrime = false\n             \
    \   break\n            }\n        }\n        return isPrime", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, ", "        val\
    \ isPrime = (2 to Math.sqrt(n).toInt).forall(x => n % x == 0)\n        n match\
    \ {\n            case x if isPrime => true\n            case _ => false\n    \
    \    }", "        val isPrime = mutable.Set[Long]()\n        for(i <- 2 to n){\n\
    \            if(n % i == 0){\n                isPrime += i\n            }\n  \
    \      }\n        isPrime.toSet.size == n", "        if (n == 2) true\n      \
    \  else if (n % 2 == 0) false\n        else if (n % 3 == 0) false\n        else\
    \ if (n % 5 == 0) false\n        else { val i = 3\n            while (i <= Math.sqrt(n))\
    \ {\n                if (n % i == 0) return false\n                i += 2\n  \
    \          }\n            true\n        }", "        val primes = mutable.Set[Long]()\n\
    \        val limit = (2 to Math.sqrt(n).toInt).reverse\n        for (i <- limit)\
    \ {\n            if (n % i == 0) {\n                primes.add(i)\n          \
    \  }\n        }\n        primes.size == n", "        val i = 2\n        val s\
    \ = BigInt(2)\n        while (i <= n) {\n            if (n % i == 0) {\n     \
    \           return false\n            }\n            i += s\n        }\n     \
    \   return true", "        val isPrime = n <= 1 || (n % 2 == 0 && n % 3 != 0)\n\
    \        val isDivisibleBy3 = (n % 3 == 0)\n        val isDivisibleBy5 = (n %\
    \ 5 == 0)\n        val isDivisibleBy7 = (n % 7 == 0)\n        val isDivisibleBy11\
    \ = (n % 11 == 0)\n        val isDivisibleBy13 = (n % 13 == 0)\n        val isDivisibleBy17\
    \ = (n % 17 == 0)\n        val isDivisibleBy19 = (n % 19 == 0)\n        val isDivisibleBy23\
    \ = (n % 23 == 0)\n        val isDivisibleBy29 = (n % 29 == 0)\n        val isDivisibleBy31\
    \ = (n % 31 == 0)\n        val isDivisibleBy37 = (n % 37 == 0)\n        val isDivisibleBy41\
    \ = (n % 41 == 0)\n        val isDivisibleBy43 = (n % 43 == 0)\n        val isDivisibleBy47\
    \ = (n % 47 == 0)\n        val isDivisibleBy53 = (n % 53 == 0)\n        val isDivisibleBy59\
    \ = (n % 59 == 0)\n        val isDivisibleBy61 = (n % 61 == 0)\n        val isDivisibleBy67\
    \ = (n % 67 == 0)\n        val isDivisibleBy71 = (n % 71 == 0)\n        val isDivisibleBy73\
    \ = n <= 73 && n % 73 != 0\n        val isDivisibleBy79 = n <= 79 && n % 79 !=\
    \ 0\n        val isDivisibleBy81 = (n % 81 == 0)\n        val isDivisibleBy87\
    \ = (n % 87 == 0)\n        val isDivisibleBy91 = (n % 91 == 0)\n        val isDivisibleBy97\
    \ = (n % 97 == 0)\n        val isDivisibleBy101 = (n % 101 == 0)\n        val\
    \ isDivisibleBy103 = n <= 103 && n % 103 != 0\n        val isDivisibleBy107 =\
    \ n <= 107 && n % 107 != 0\n        val isDivisibleBy109 = n <= 109 && n % 109\
    \ != 0\n        val isDivisibleBy111 = (n % 111 == 0)\n        val isDivisibleBy113\
    \ = n <= 113 && n % 113 != 0\n        val isDivisibleBy117 = n <= 117 && n % 117\
    \ != 0\n        val isDivisibleBy121 = (n % 121 == 0)\n        val isDivisibleBy123\
    \ = n <= 123 && n % 123 != 0\n        val ", "        val primes = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     primes.add(i)\n            }\n        }\n        primes.size == n", "  \
    \      val i = 2\n        val primes = mutable.ArrayBuffer(2)\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                primes += i\n  \
    \              i += 2\n            } else {\n                i += 1\n        \
    \    }\n        }\n        primes.contains(n)", "        val factors = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ factors += i\n        factors.isEmpty", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, true)\n  \
    \      val isPrime2 = mutable.ArrayBuffer(false, true)\n        val isPrime3 =\
    \ mutable.ArrayBuffer(false, true)\n        val isPrime4 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime5 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime6 = mutable.ArrayBuffer(false, true)\n        val isPrime7 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime8 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime9 = mutable.ArrayBuffer(false, true)\n        val isPrime10 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime11 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime12 = mutable.ArrayBuffer(false, true)\n        val isPrime13 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime14 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime15 = mutable.ArrayBuffer(false, true)\n        val isPrime16 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime17 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime18 = mutable.ArrayBuffer(false, true)\n        val isPrime19 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime20 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime21 = mutable.ArrayBuffer(false, true)\n        val isPrime22 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime23 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime24 = mutable.ArrayBuffer(false, true)\n        val isPrime25 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime26 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime27 = mutable.ArrayBuffer(false, true)\n        val isPrime28 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime29 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime30 = mutable.ArrayBuffer(false, true)\n        val isPrime31 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime32 = mutable.ArrayBuffer(false, true)\n        val\
    \ isPrime33 = mutable.ArrayBuffer(false, true)\n        val isPrime34 = mutable.ArrayBuffer(false,\
    \ true)\n        val isPrime35 = ", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val isPrime = true\n        for (i <- 2 to n by 2) {\n            if\
    \ (n % i == 0) {\n                isPrime = false\n                break\n   \
    \         }\n            primes += i\n        }\n        isPrime", "        val\
    \ isPrime = n <= 1\n        val isPrime2 = n <= 3\n        val isPrime3 = n <=\
    \ 5\n        val isPrime4 = n <= 7\n        val isPrime5 = n <= 11\n        val\
    \ isPrime6 = n <= 13\n        val isPrime7 = n <= 17\n        val isPrime8 = n\
    \ <= 19\n        val isPrime9 = n <= 23\n        val isPrime10 = n <= 29\n   \
    \     val isPrime11 = n <= 31\n        val isPrime12 = n <= 37\n        val isPrime13\
    \ = n <= 41\n        val isPrime14 = n <= 43\n        val isPrime15 = n <= 47\n\
    \        val isPrime16 = n <= 53\n        val isPrime17 = n <= 59\n        val\
    \ isPrime18 = n <= 61\n        val isPrime19 = n <= 67\n        val isPrime20\
    \ = n <= 71\n        val isPrime21 = n <= 73\n        val isPrime22 = n <= 79\n\
    \        val isPrime23 = n <= 83\n        val isPrime24 = n <= 89\n        val\
    \ isPrime25 = n <= 97\n        val isPrime26 = n <= 101\n        val isPrime27\
    \ = n <= 103\n        val isPrime28 = n <= 107\n        val isPrime29 = n <= 109\n\
    \        val isPrime30 = n <= 113\n        val isPrime31 = n <= 127\n        val\
    \ isPrime32 = n <= 131\n        val isPrime33 = n <= 137\n        val isPrime34\
    \ = n <= 143\n        val isPrime35 = n <= 149\n        val isPrime36 = n <= 151\n\
    \        val isPrime37 = n <= 157\n        val isPrime38 = n <= 163\n        val\
    \ isPrime39 = n <= 167\n        val isPrime40 = n <= 173\n        val isPrime41\
    \ = n <= 179\n        val isPrime42 = n <= 181\n        val isPrime43 = n <= 191\n\
    \        val isPrime44 = n <= 193\n        val isPrime45 = n <= 197\n        val\
    \ isPrime46 = n <= 199\n        val isPrime47 = n <= 203", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ true)\n        for (i <- primes.indices) {\n            if (n % primes(i) ==\
    \ 0) {\n                isPrime(i) = false\n            }\n        }\n       \
    \ isPrime(0)", "        val isPrime = mutable.Set[Long]()\n        val isPrime2\
    \ = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n        val\
    \ isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val i = 2\n        val primes = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      while(i <= n / i) {\n            primes += (n % i == 0)\n            i\
    \ += 1\n        }\n        primes.toList.forall(x => x)", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ true)\n        for (prime <- primes) {\n            if (n % prime == 0) {\n\
    \                isPrime(0) = false\n                break\n            }\n  \
    \      }\n        isPrime(0)", "        val isPrime = mutable.Set[Long]()\n  \
    \      val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val i = 2\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                return false\n            }\n            i += 1\n        }\n\
    \        return true", "        val sqrt = (math.sqrt(n).toInt).toLong\n     \
    \   val primes = mutable.ArrayBuffer(2)\n        val isPrime = true\n        for\
    \ (i <- 3 to sqrt) {\n            if (n % i == 0) {\n                primes +=\
    \ i\n                isPrime = false\n            }\n        }\n        isPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, ", "        val isPrime = mutable.Set[Long]()\n        val isPrime2\
    \ = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n        val\
    \ isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val primes = mutable.Set[Long]()\n        val isPrime = (n : Long) => {\n\
    \            val isPrime = (n : Long) => {\n                if (n == 1) true\n\
    \                else if (n % 2 == 0) false\n                else if (n % 3 ==\
    \ 0) false\n                else if (n % 5 == 0) false\n                else if\
    \ (n % 7 == 0) false\n                else primes.add(n)\n            }\n    \
    \        isPrime(n % 2 == 0)\n        }\n        isPrime(n % 2 == 0)", "     \
    \   val primes = mutable.ArrayBuffer.empty[Long]\n        val divisors = mutable.ArrayBuffer.empty[Long]\n\
    \        divisors += 2\n        divisors += 3\n        divisors += 5\n       \
    \ divisors += 7\n        divisors += 11\n        divisors += 13\n        divisors\
    \ += 17\n        divisors += 19\n        divisors += 23\n        divisors += 29\n\
    \        divisors += 31\n        divisors += 37\n        divisors += 41\n    \
    \    divisors += 43\n        divisors += 47\n        divisors += 53\n        divisors\
    \ += 59\n        divisors += 61\n        divisors += 67\n        divisors += 71\n\
    \        divisors += 73\n        divisors += 79\n        divisors += 83\n    \
    \    divisors += 89\n        divisors += 97\n        divisors += 101\n       \
    \ divisors += 103\n        divisors += 107\n        divisors += 109\n        divisors\
    \ += 113\n        divisors += 127\n        divisors += 131\n        divisors +=\
    \ 137\n        divisors += 139\n        divisors += 147\n        divisors += 151\n\
    \        divisors += 157\n        divisors += 163\n        divisors += 167\n \
    \       divisors += 173\n        divisors += 179\n        divisors += 181\n  \
    \      divisors += 191\n        divisors += 193\n        divisors += 197\n   \
    \     divisors += 199\n        divisors += 211\n        divisors += 223\n    \
    \    divisors += 227\n        divisors += 229\n        divisors += 233\n     \
    \   divisors += 239\n        divisors += 241\n        divisors += 243\n      \
    \  divisors += 247\n        divisors += 251\n        divisors += 253\n       \
    \ divisors += 257\n        divisors += 263\n        divisors += 269\n        divisors\
    \ += 271\n        divisors += 277\n        divisors += 281\n        divisors +=\
    \ 283\n        divisors += 293\n        divisors += 307\n        divisors += 311\n\
    \        divisors += 313\n        divisors += 317\n        divisors += 323\n \
    \       divisors += 329\n        divisors += 331\n        divisors += 337\n  \
    \      divisors += 347\n        divisors += 349\n        divisors += 353\n   \
    \     divisors += 359\n        divisors += 363\n        divisors += 369\n    \
    \    divisors += 373\n        divisors += 379\n        divisors += 383\n     \
    \   divisors += 389\n        divisors += 395\n        divisors += 401\n      \
    \  divisors += 409\n        divisors += 419\n        divisors += 421\n       \
    \ divisors += 431\n        divisors += 433\n        divisors += 439\n        divisors\
    \ += ", "        val sqrtN = math.sqrt(n)\n        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isPrime2 = mutable.Set[Boolean]()\n\
    \        val isPrime3 = mutable.Set[Boolean]()\n        val isPrime4 = mutable.Set[Boolean]()\n\
    \        val isPrime5 = mutable.Set[Boolean]()\n        val isPrime6 = mutable.Set[Boolean]()\n\
    \        val isPrime7 = mutable.Set[Boolean]()\n        val isPrime8 = mutable.Set[Boolean]()\n\
    \        val isPrime9 = mutable.Set[Boolean]()\n        val isPrime10 = mutable.Set[Boolean]()\n\
    \        val isPrime11 = mutable.Set[Boolean]()\n        val isPrime12 = mutable.Set[Boolean]()\n\
    \        val isPrime13 = mutable.Set[Boolean]()\n        val isPrime14 = mutable.Set[Boolean]()\n\
    \        val isPrime15 = mutable.Set[Boolean]()\n        val isPrime16 = mutable.Set[Boolean]()\n\
    \        val isPrime17 = mutable.Set[Boolean]()\n        val isPrime18 = mutable.Set[Boolean]()\n\
    \        val isPrime19 = mutable.Set[Boolean]()\n        val isPrime20 = mutable.Set[Boolean]()\n\
    \        val isPrime21 = mutable.Set[Boolean]()\n        val isPrime22 = mutable.Set[Boolean]()\n\
    \        val isPrime23 = mutable.Set[Boolean]()\n        val isPrime24 = mutable.Set[Boolean]()\n\
    \        val isPrime25 = mutable.Set[Boolean]()\n        val isPrime26 = mutable.Set[Boolean]()\n\
    \        val isPrime27 = mutable.Set[Boolean]()\n        val isPrime28 = mutable.Set[Boolean]()\n\
    \        val isPrime29 = mutable.Set[Boolean]()\n        val isPrime30 = mutable.Set[Boolean]()\n\
    \        val isPrime31 = mutable.Set[Boolean]()\n        val isPrime32 = mutable.Set[Boolean]()\n\
    \        val isPrime33 = mutable.Set[Boolean]()\n        val isPrime34 = mutable.",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val i = 2\n        while\
    \ (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n                return\
    \ false\n            }\n            i += 1\n        }\n        return true", " \
    \       val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        val max = (2 to Math.sqrt(n)).find(_ % _ == 0)\n        for(i <- 2 to\
    \ max) {\n            if((n % i) == 0) {\n                composites += i\n  \
    \          } else {\n                primes += i\n            }\n        }\n \
    \       (primes.size == 1 && primes.contains(n)) || (composites.size == 1 && composites.contains(n))",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val i = 2\n        val\
    \ primes = mutable.Set[Long]()\n        while (i <= n / 2) {\n            if (n\
    \ % i == 0) {\n                primes.add(i)\n            }\n            i +=\
    \ 1\n        }\n        primes.size == n", "        val primes = mutable.Set[Long]()\n\
    \        val i = 2\n        while (i <= Math.sqrt(n)) {\n            if (n % i\
    \ == 0) {\n                primes.add(i)\n            }\n            i += 1\n\
    \        }\n        primes.size == n", "        val factors = mutable.Set[Long]()\n\
    \        for (i <- 2 to Math.sqrt(n)) {\n            if (n % i == 0) {\n     \
    \           factors += i\n            }\n        }\n        factors.isEmpty",
  "        val factors = mutable.Set[Long]()\n        for (i <- 2 to n by 2)\n   \
    \         if (n % i == 0)\n                factors += i\n        if (factors.size\
    \ == 1)\n            true\n        else\n            false", "        val isPrime\
    \ = mutable.Set[Long]()\n        for (i <- 2 to Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                isPrime += i\n            }\n        }\n   \
    \     isPrime.toSet.size == n", "        val isPrime = n <= 1\n        if(isPrime)\
    \ true\n        else n % 2 != 0 && n % 3 != 0 && n % 5 != 0 && n % 7 != 0", " \
    \       val isPrime = n <= 1\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        val isPrimePrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeDivisors = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrimeDivisorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n    \
    \    val isPrimePrimeDivisorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n   \
    \     val isPrimePrimeDivisorsPrimeDivisors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeDivisorsPrimeDivisorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisorsPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeDivisorsPrimeDivisorsPrimeDivisorsPrimeDivisor",
  "        val primes = mutable.Set[Long]()\n        for (i <- 2 to Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                primes.add(i)\n          \
    \  }\n        }\n        primes.isEmpty", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val isPrime = mutable.Set[Long]()\n        for (i <- 2 to Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                isPrime += i\n           \
    \ }\n        }\n        isPrime.toSet.size == n", "        val isPrime = n <=\
    \ 1\n        val isPrime2 = isPrime && n % 2 != 0\n        val isPrime3 = isPrime2\
    \ && (n % 3 != 0)\n        val isPrime4 = isPrime3 && (n % 5 != 0)\n        val\
    \ isPrime5 = isPrime4 && (n % 7 != 0)\n        val isPrime6 = isPrime5 && (n %\
    \ 11 != 0)\n        val isPrime7 = isPrime6 && (n % 13 != 0)\n        val isPrime8\
    \ = isPrime7 && (n % 17 != 0)\n        val isPrime9 = isPrime8 && (n % 19 != 0)\n\
    \        val isPrime10 = isPrime9 && (n % 23 != 0)\n        val isPrime11 = isPrime10\
    \ && (n % 29 != 0)\n        val isPrime12 = isPrime11 && (n % 31 != 0)\n     \
    \   val isPrime13 = isPrime12 && (n % 37 != 0)\n        val isPrime14 = isPrime13\
    \ && (n % 41 != 0)\n        val isPrime15 = isPrime14 && (n % 43 == 0)\n     \
    \   val isPrime16 = isPrime15 && (n % 47 == 0)\n        val isPrime17 = isPrime16\
    \ && (n % 53 == 0)\n        val isPrime18 = isPrime17 && (n % 59 == 0)\n     \
    \   val isPrime19 = isPrime18 && (n % 61 != 0)\n        val isPrime20 = isPrime19\
    \ && (n % 67 == 0)\n        val isPrime21 = isPrime20 && (n % 71 == 0)\n     \
    \   val isPrime22 = isPrime21 && (n % 73 == 0)\n        val isPrime23 = isPrime22\
    \ && (n % 79 == 0)\n        val isPrime24 = isPrime23 && (n % 83 == 0)\n     \
    \   val isPrime25 = isPrime24 && (n % 89 == 0)\n        val isPrime26 = isPrime25\
    \ && (n % 97 == 0)\n        val isPrime27 = isPrime26 && (n % 101 == 0)\n    \
    \    val isPrime28 = isPrime27 && (n % 103 == 0)\n        val isPrime29 = isPrime28\
    \ && (n % 107 == 0)\n        val isPrime30 = isPrime29 && (n % 111 == 0)\n   \
    \     val isPrime31 = isPrime30 && (n % 115 == 0)\n        val isPrime32 = isPrime31\
    \ && (n % 119 == 0)\n        val isPrime", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isNotPrime = mutable.Set[Boolean]()\n\
    \        val isPrime2 = mutable.Set[Boolean]()\n        val isNotPrime2 = mutable.Set[Boolean]()\n\
    \        val isPrime3 = mutable.Set[Boolean]()\n        val isNotPrime3 = mutable.Set[Boolean]()\n\
    \        val isPrime4 = mutable.Set[Boolean]()\n        val isNotPrime4 = mutable.Set[Boolean]()\n\
    \        val isPrime5 = mutable.Set[Boolean]()\n        val isNotPrime5 = mutable.Set[Boolean]()\n\
    \        val isPrime6 = mutable.Set[Boolean]()\n        val isNotPrime6 = mutable.Set[Boolean]()\n\
    \        val isPrime7 = mutable.Set[Boolean]()\n        val isNotPrime7 = mutable.Set[Boolean]()\n\
    \        val isPrime8 = mutable.Set[Boolean]()\n        val isNotPrime8 = mutable.Set[Boolean]()\n\
    \        val isPrime9 = mutable.Set[Boolean]()\n        val isNotPrime9 = mutable.Set[Boolean]()\n\
    \        val isPrime10 = mutable.Set[Boolean]()\n        val isNotPrime10 = mutable.Set[Boolean]()\n\
    \        val isPrime11 = mutable.Set[Boolean]()\n        val isNotPrime11 = mutable.Set[Boolean]()\n\
    \        val isPrime12 = mutable.Set[Boolean]()\n        val isNotPrime12 = mutable.Set[Boolean]()\n\
    \        val isPrime13 = mutable.Set[Boolean]()\n        val isNotPrime13 = mutable.Set[Boolean]()\n\
    \        val isPrime14 = mutable.Set[Boolean]()\n        val isNotPrime14 = mutable.Set[Boolean]()\n\
    \        val isPrime15 = mutable.Set[Boolean]()\n        val isNotPrime15 = mutable.Set[Boolean]()\n\
    \        val isPrime16 = mutable.Set[Boolean]()\n        val isNotPrime16 = mutable.Set[Boolean]()\n\
    \        val isPrime17 = mutable.Set[Boolean]()\n        val isNotPrime17 = mutable.Set[Boolean",
  "        val isPrime = scala.math.BigInt(n).isProbablePrime(scala.math.BigInt(2))\n\
    \        if (isPrime) {\n            true\n        } else {\n            false\n\
    \        }", "        val isPrime = (2 to n).forall(x => n % x != 0)\n       \
    \ if (isPrime) {\n            true\n        } else {\n            false\n    \
    \    }", "        val isPrime = n <= 1 || (n % 2 == 0 && n != 1)\n        if (isPrime)\
    \ {\n            val sqrtN = math.sqrt(n)\n            for (i <- 2 until sqrtN)\
    \ {\n                if (n % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n        }\n    \
    \    isPrime", "        val isPrime = n <= 1\n        if(isPrime) {\n        \
    \    val sqrt = (math.pow(n, 0.5).toInt).toDouble\n            val isPrime = sqrt\
    \ <= 1\n        }\n        return isPrime", "        val primes = mutable.Set[Long]()\n\
    \        val composites = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isComposite = mutable.Set[Long]()\n        val isPrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeComposite = mutable.Set[Long]()\n        val isCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isCompositePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimePrimeComposite = mutable.Set[Long]()\n\
    \        val isPrimeCompositePrime = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimePrimeComposite\
    \ = mutable.Set[Long]()\n        val isPrimeCompositePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Long]()\n        val isPrimeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositePrime = mutable.Set[Long]()\n        val isPrimePrimeComposite\
    \ = mutable.Set[Long]()\n        val isPrimeCompositePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePri", "        val isPrime = mutable.Set[Long]()\n\
    \        val isNotPrime = mutable.Set[Long]()\n        val isPrimeFactors = mutable.Set[Long]()\n\
    \        val isNotPrimeFactors = mutable.Set[Long]()\n        val isPrimeDivisors\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisors = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet2 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet2 = mutable.Set[Long]()\n        val isPrimeDivisorsSet3\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet3 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet4 = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet4\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet5 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet5 = mutable.Set[Long]()\n        val isPrimeDivisorsSet6\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet6 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet7 = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet7\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet8 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet8 = mutable.Set[Long]()\n        val isPrimeDivisorsSet9\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet9 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet10 = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet10\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet11 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet11 = mutable.Set[Long]()\n        val isPrimeDivisorsSet12\
    \ = mutable.", "        val isPrime = n <= 1\n        if(isPrime) {\n        \
    \    val isPrime = n <= 1\n            if(isPrime) {\n                val isPrime\
    \ = n <= 1\n                if(isPrime) {\n                    val isPrime = n\
    \ <= 1\n                    if(isPrime) {\n                        val isPrime\
    \ = n <= 1\n                        if(isPrime) {\n                          \
    \  val isPrime = n <= 1\n                            if(isPrime) {\n         \
    \                       val isPrime = n <= 1\n                               \
    \ if(isPrime) {\n                                    val isPrime = n <= 1\n  \
    \                                  if(isPrime) {\n                           \
    \             val isPrime = n <= 1\n                                        if(isPrime)\
    \ {\n                                            val isPrime = n <= 1\n      \
    \                                      if(isPrime) {\n                       \
    \                         val isPrime = n <= 1\n                             \
    \                   if(isPrime) {\n                                          \
    \          val isPrime = n <= 1\n                                            \
    \        if(isPrime) {\n                                                     \
    \   val isPrime = n <= 1\n                                                   \
    \     if(isPrime) {\n                                                        \
    \    val isPrime = n <= 1\n                                                  \
    \          if(isPrime) {\n                                                   \
    \             val isPrime = n <= 1\n                                         \
    \                       if(isPrime) {\n                                      \
    \                              val isPrime = n <= 1\n                        \
    \                                            if(isPrime) {\n                 \
    \                                                       val isPrime = n <= 1\n\
    \                                                                        if(isPrime)\
    \ {\n                                                                        \
    \    val isPrime = n <= 1\n                                                  \
    \                          if(isPrime) {\n                                   \
    \                                             val isPrime = n <= 1\n         \
    \                                                                       if(isPrime)\
    \ {\n                                                                        \
    \            val isPrime = n <= 1\n                                          \
    \                                          if(isPrime) {\n                   \
    \                                                                     val isPrime\
    \ = n <= 1\n                                                                 \
    \                       if(isPrime) {\n                                      \
    \                                                      val isPrime = n <= 1\n\
    \                                                                            \
    \                if(isPrime) {\n                                             \
    \                                                   val isPrime = n <= 1\n   \
    \                                                                            \
    \                 if(isPrime) {\n                                            \
    \                                                        val isPrime = n <= 1\n\
    \                                                                            \
    \                        if(isPrime) {\n                                     \
    \                                                                   val isPrime\
    \ = n <= 1\n                                                                 \
    \                                       if(isPrime) {\n                      \
    \                                                                            \
    \          val isPrime = n <= 1\n                                            \
    \                                                                if(isPrime) {\n\
    \                                                                            \
    \                                    val isPrime = n <= 1\n                  \
    \                                                                            \
    \                  if(isPrime) {\n                                           \
    \                                                                         val\
    \ isPrime = n <= 1\n                                                         \
    \                                                           if(isPrime) {\n  \
    \                                                                            \
    \                                          val isPrime = n <= 1\n            \
    \                                                                            \
    \                                if(is", "        val primes = mutable.Set[Long]()\n\
    \        val divisors = mutable.Set[Long]()\n        val isPrime = true\n    \
    \    for(i <- 2 to n by 2){\n            divisors += i\n        }\n        for(i\
    \ <- divisors.iterator){\n            if(!primes.contains(i)){\n             \
    \   primes += i\n                if(n % i == 0){\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \   }\n        isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ArrayBuffer(2, 3)\n        val\
    \ limit = n / 2\n        val i = 2\n        while (i <= limit) {\n           \
    \ if (n % i == 0) {\n                factors += i\n                n /= i\n  \
    \          }\n            else {\n                i += 1\n            }\n    \
    \    }\n        if (n != 1) {\n            factors += n\n        }\n        primes.forall(p\
    \ => factors.contains(p))", "        val isPrime = mutable.Set[Long]()\n     \
    \   val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val m = math.ceil(n/2)\n        val i = 2\n        while (i <= m) {\n \
    \           if (n % i == 0) {\n                return false\n            }\n \
    \           i += 1\n        }\n        return true", "        val isPrime = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     isPrime += i\n            }\n        }\n        isPrime.toSet.size == n",
  "        val isPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isPrime18 = mutable.Set[Long]()\n\
    \        val isPrime19 = mutable.Set[Long]()\n        val isPrime20 = mutable.Set[Long]()\n\
    \        val isPrime21 = mutable.Set[Long]()\n        val isPrime22 = mutable.Set[Long]()\n\
    \        val isPrime23 = mutable.Set[Long]()\n        val isPrime24 = mutable.Set[Long]()\n\
    \        val isPrime25 = mutable.Set[Long]()\n        val isPrime26 = mutable.Set[Long]()\n\
    \        val isPrime27 = mutable.Set[Long]()\n        val isPrime28 = mutable.Set[Long]()\n\
    \        val isPrime29 = mutable.Set[Long]()\n        val isPrime30 = mutable.Set[Long]()\n\
    \        val isPrime31 = mutable.Set[Long]()\n        val isPrime32 = mutable.Set[Long]()\n\
    \        val isPrime33 = mutable.Set[Long]()\n        val isPrime34 = mutable.Set[Long]()\n\
    \        val isPrime35 = mutable.Set[Long]()", "        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()",
  "        val primes = mutable.Set[Long]()\n        for (i <- 2 to n by 2)\n    \
    \        if (n % i == 0)\n                primes.add(i)\n        primes.size ==\
    \ n"]
stop_tokens:
- "\n    }\n"
