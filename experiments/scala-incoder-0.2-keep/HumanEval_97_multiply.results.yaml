language: scala
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppl9v_n8m.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 = unitDigits2 * 10\
    \ + tenDigits\n        val unitDigits4 = (unitDigits3 * 10) + tenDigits3\n   \
    \     val tenDigits4 = unitDigits3 * 10 + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + tenDigits4\n        val tenDigits5 = unitDigits4 * 10\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + tenDigits5\n  \
    \      val tenDigits6 = unitDigits5 * 10 + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + tenDigits6\n        val tenDigits7 = unitDigits6 * 10\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + tenDigits7\n  \
    \      val tenDigits8 = unitDigits7 * 10 + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + tenDigits8\n        val tenDigits9 = unitDigits8 * 10\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + tenDigits9\n \
    \       val tenDigits10 = unitDigits9 * 10 + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + tenDigits10\n        val tenDigits11 = unitDigits10\
    \ * 10 + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + tenDigits11\n\
    \        val tenDigits12 = unitDigits11 * 10 + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + tenDigits12\n        val tenDigits13 = unitDigits12\
    \ * 10 + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + tenDigits13\n\
    \        val tenDigits14 = unitDigits13 * 10 + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + tenDigits14\n        val tenDigits15 = unitDigits14\
    \ * 10 + tenDigits14\n        val unitDigits16\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxicq8iak.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxicq8iak.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits3\
    \ = (remainder * remainder2) / 10\n        val remainder3 = remainder * remainder2\n\
    \        val unitDigits4 = (remainder3 * remainder2) / 10\n        val remainder4\
    \ = remainder3 * remainder2\n        val unitDigits5 = (remainder4 * remainder2)\
    \ / 10\n        val remainder5 = remainder4 * remainder2\n        val unitDigits6\
    \ = (remainder5 * remainder2) / 10\n        val remainder6 = remainder5 * remainder2\n\
    \        val unitDigits7 = (remainder6 * remainder2) / 10\n        val remainder7\
    \ = remainder6 * remainder2\n        val unitDigits8 = (remainder7 * remainder2)\
    \ / 10\n        val remainder8 = remainder7 * remainder2\n        val unitDigits9\
    \ = (remainder8 * remainder2) / 10\n        val remainder9 = remainder8 * remainder2\n\
    \        val unitDigits10 = (remainder9 * remainder2) / 10\n        val remainder10\
    \ = remainder9 * remainder2\n        val unitDigits11 = (remainder10 * remainder2)\
    \ / 10\n        val remainder11 = remainder10 * remainder2\n        val unitDigits12\
    \ = (remainder11 * remainder2) / 10\n        val remainder12 = remainder11 * remainder2\n\
    \        val unitDigits13 = (remainder12 * remainder2) / 10\n        val remainder13\
    \ = remainder12 * remainder2\n        val unitDigits14 = (remainder13 * remainder2)\
    \ / 10\n        val remainder14 = remainder13 * remainder2\n        val unitDigits15\
    \ = (remainder14 * remainder2) / 10\n        val remainder15 = remainder14 * remainder2\n\
    \        val unitDigits16 = (remainder15 * remainder2) / 10\n        val remainder16\
    \ = remainder15 * remainder2\n        val unitDigits17 = (remainder16 * remainder2)\
    \ / 10\n        val remainder17 = remainder16 * remainder2\n        val unitDigits18\
    \ = (remainder17 * remainder2) / 10\n        val remainder18 = remainder17 * remainder2\n\
    \        val unitDig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4afo26vg.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4afo26vg.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlrud4xp.scala:22)\n\tat Problem.main(tmpqlrud4xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val product = unitDigits * unitDigits_1\n        return product\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5msyma8_.scala:19)\n\tat Problem.main(tmp5msyma8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_11 = unitDigits_10.zip(unitDigits_11).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_12 =\
    \ unitDigits_11.zip(unitDigits_12).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_14 = unitDigits_13.zip(unitDigits_14).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_15 =\
    \ unitDigits_14.zip(unitDigits_15).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_16\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2v8wo3ya.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2v8wo3ya.scala:15:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map {\n\e[31m\e[31m\
    \   |\e[0m                                            ^\e[0m\n\e[31m   |\e[0m\
    \                                 Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp2v8wo3ya.scala:16:44\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x:\
    \ Byte): Int\n\e[31m   |\e[0mall match arguments ((digit2 : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2v8wo3ya.scala:18:44 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ {\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                 Recursive \e[33mvalue\e[0m \e\
    [35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2v8wo3ya.scala:19:44 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m\
    \   |\e[0m                            "
  stdout: ''
  timestamp: 1659799401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (unitDigits\
    \ == unitDigits2) {\n            if (remainder == remainder2) {\n            \
    \    return unitDigits * unitDigits2\n            } else {\n                return\
    \ 0\n            }\n        } else {\n            return 0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijatq8tc.scala:28)\n\tat Problem.main(tmpijatq8tc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafu5edpt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigit\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qin61ii.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qin61ii.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qin61ii.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qin61ii.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qin61ii.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map(x\
    \ => x._1 * x._2)\n        val unitDigits_3 = unitDigits.zip(unitDigits_2).map(x\
    \ => x._1 * x._2)\n        val unitDigits_4 = unitDigits.zip(unitDigits_3).map(x\
    \ => x._1 * x._2)\n        unitDigits_4.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ubyno9p.scala:21)\n\tat Problem.main(tmp5ubyno9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5i6dr2w.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:19:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (unitDigits\
    \ == unitDigits2) {\n            if (remainder == remainder2) {\n            \
    \    return unitDigits * unitDigits2\n            } else {\n                return\
    \ 0\n            }\n        } else {\n            return 0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijatq8tc.scala:28)\n\tat Problem.main(tmpijatq8tc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + tenDigits14\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s1zmqvq.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val unitDigits4\
    \ = unitDigits3 / 10\n        val unitDigits5 = unitDigits4 / 10\n        val\
    \ unitDigits6 = unitDigits5 / 10\n        val unitDigits7 = unitDigits6 / 10\n\
    \        val unitDigits8 = unitDigits7 / 10\n        val unitDigits9 = unitDigits8\
    \ / 10\n        val unitDigits10 = unitDigits9 / 10\n        unitDigits10\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapgya6xt.scala:26)\n\tat Problem.main(tmpapgya6xt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ { case (a,b) => a*b }\n        val unitDigits_3 = unitDigits.zip(unitDigits_2).map\
    \ { case (a,b) => a*b }\n        val unitDigits_4 = unitDigits.zip(unitDigits_3).map\
    \ { case (a,b) => a*b }\n        unitDigits_4.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_0j9iv3p.scala:21)\n\tat Problem.main(tmp_0j9iv3p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + tenDigits14\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s1zmqvq.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdxurb2.scala:33)\n\tat Problem.main(tmprgdxurb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map{case\
    \ (a,b) => a*b}\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map{case\
    \ (a,b) => a*b}\n        unitDigits_3.reduce((x,y) => x*y)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4whvz4qw.scala:15:44 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map{\e\
    [33mcase\e[0m (a,b) => a*b}\n\e[31m\e[31m   |\e[0m                           \
    \                 ^\e[0m\n\e[31m   |\e[0m                                 Recursive\
    \ \e[33mvalue\e[0m \e[35munitDigits_2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmp4whvz4qw.scala:15:77 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map{\e\
    [33mcase\e[0m (a,b) => a*b}\n\e[31m\e[31m   |\e[0m                           \
    \                                                 ^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short):\
    \ Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mall match arguments ((b\
    \ : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4whvz4qw.scala:16:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map{\e[33mcase\e[0m\
    \ (a,b) => a*b}\n\e[31m\e[31m   |\e[0m                                       \
    \     ^\e[0m\n\e[31m   |\e[0m                                 Recursive \e[33mvalue\e\
    [0m \e[35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4whvz4qw.scala:16:77 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map{\e\
    [33mcase\e[0m (a,b) => a*b}\n\e[31m\e[31m   |\e[0m                           \
    \                    "
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits % 10\n        val \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp1e1i0kxu.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp1e1i0kxu.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1e1i0kxu.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1e1i0kxu.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1e1i0kxu.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits\n        val unitDigits3 = (unitDigits2 * 10) + tenDigits\n    \
    \    val tenDigits3 = (tenDigits2 * 10) + tenDigits\n        val unitDigits3 =\
    \ (unitDigits2 * 10) + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) +\
    \ tenDigits\n        val unitDigits3 = (unitDigits2 * 10) + tenDigits\n      \
    \  val tenDigits3 = (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2\
    \ * 10) + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n\
    \        val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3\
    \ = (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + ten\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0g9j66ah.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2\
    \ * \e[31m10\e[0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2 * \e\
    [31m10\e[0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = "
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + ten\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlxvdg28.scala:42:47 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mtenDigits15\e[0m = (tenDigits14\
    \ * \e[31m10\e[0m) + ten\n\e[31m\e[31m   |\e[0m                              \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \             Not found: ten\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdlxvdg28.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits) {\n           \
    \ product *= unitDigits2\n        }\n        return product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bd_wvkr.scala:22)\n\tat Problem.main(tmp5bd_wvkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbaz68kgr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0muni"
  stdout: ''
  timestamp: 1659799400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits + unitDigits\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ + unitDigits\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits + unitDigits\n        val\
    \ unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits + unitDigits\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ + unitDigits\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits + unitDigits\n        val\
    \ unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits + unitDigits\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ + unitDigits\n        val unitDigits = unitDigits.toString.to\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkig9cbfh.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkig9cbfh.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkig9cbfh.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkig9cbfh.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkig9cbfh.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e["
  stdout: ''
  timestamp: 1659799403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafu5edpt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits * unitDigits2) / 10\n        val tenDigits3 = (unitDigits * unitDigits2)\
    \ % 10\n        val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val\
    \ tenDigits4 = (unitDigits * unitDigits3) % 10\n        val unitDigits5 = (unitDigits\
    \ * unitDigits4) / 10\n        val tenDigits5 = (unitDigits * unitDigits4) % 10\n\
    \        val unitDigits6 = (unitDigits * unitDigits5) / 10\n        val tenDigits6\
    \ = (unitDigits * unitDigits5) % 10\n        val unitDigits7 = (unitDigits * unitDigits6)\
    \ / 10\n        val tenDigits7 = (unitDigits * unitDigits6) % 10\n        val\
    \ unitDigits8 = (unitDigits * unitDigits7) / 10\n        val tenDigits8 = (unitDigits\
    \ * unitDigits7) % 10\n        val unitDigits9 = (unitDigits * unitDigits8) /\
    \ 10\n        val tenDigits9 = (unitDigits * unitDigits8) % 10\n        val unitDigits10\
    \ = (unitDigits * unitDigits9) / 10\n        val tenDigits10 = (unitDigits * unitDigits9)\
    \ % 10\n        val unitDigits11 = (unitDigits * unitDigits10) / 10\n        val\
    \ tenDigits11 = (unitDigits * unitDigits10) % 10\n        val unitDigits12 = (unitDigits\
    \ * unitDigits11) / 10\n        val tenDigits12 = (unitDigits * unitDigits11)\
    \ % 10\n        val unitDigits13 = (unitDigits * unitDigits12) / 10\n        val\
    \ tenDigits13 = (unitDigits * unitDigits12) % 10\n        val unitDigits14 = (unitDigits\
    \ * unitDigits13) / 10\n        val tenDigits14 = (unitDigits * unitDigits13)\
    \ % 10\n        val unitDigits15 = (unitDigits * unitDigits14) / 10\n        val\
    \ tenDigits15 = (unitDigits * unitDigits14) % 10\n        val unitDigits16 = (unitDigits\
    \ * unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93q6pci7.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp93q6pci7.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        var product = 0\n        val unitDigits_2 = unitDigits - 1\n        val\
    \ unitDigits_3 = unitDigits_1 - 1\n        val unitDigits_4 = unitDigits_2 - 1\n\
    \        val unitDigits_5 = unitDigits_3 - 1\n        val unitDigits_6 = unitDigits_4\
    \ - 1\n        val unitDigits_7 = unitDigits_5 - 1\n        val unitDigits_8 =\
    \ unitDigits_6 - 1\n        val unitDigits_9 = unitDigits_7 - 1\n        val unitDigits_10\
    \ = unitDigits_8 - 1\n        val unitDigits_11 = unitDigits_9 - 1\n        val\
    \ unitDigits_12 = unitDigits_10 - 1\n        val unitDigits_13 = unitDigits_11\
    \ - 1\n        val unitDigits_14 = unitDigits_12 - 1\n        val unitDigits_15\
    \ = unitDigits_13 - 1\n        val unitDigits_16 = unitDigits_14 - 1\n       \
    \ val unitDigits_17 = unitDigits_15 - 1\n        val unitDigits_18 = unitDigits_16\
    \ - 1\n        val unitDigits_19 = unitDigits_17 - 1\n        val unitDigits_20\
    \ = unitDigits_18 - 1\n        val unitDigits_21 = unitDigits_19 - 1\n       \
    \ val unitDigits_22 = unitDigits_20 - 1\n        val unitDigits_23 = unitDigits_21\
    \ - 1\n        val unitDigits_24 = unitDigits_22 - 1\n        val unitDigits_25\
    \ = unitDigits_23 - 1\n        val unitDigits_26 = unitDigits_24 - 1\n       \
    \ val unitDigits_27 = unitDigits_25 - 1\n        val unitDigits_28 = unitDigits_26\
    \ - 1\n        val unitDigits_29 = unitDigits_27 - 1\n        val unitDigits_30\
    \ = unitDigits_28 - 1\n        val unitDigits_31 = unitDigits_29 - 1\n       \
    \ val unitDigits_32 = unitDigits_31 - 1\n        val unitDigits_33 = unitDigits_32\
    \ - 1\n        val unitDigits_34 = unitDigits_33 - 1\n        val unitDigits_35\
    \ = unitDigits_34 - 1\n        val unitDigits_36 = unitDigits_35 - 1\n       \
    \ val unitDigits_37 = unitDigits_36 - 1\n        val unitDigits_38 = unitDigits_37\
    \ - 1\n        val unitDigits_39 = unitDigits_38 - 1\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmmi7h33x.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (unitDigits\
    \ == unitDigits2) {\n            (remainder * remainder2)\n        } else {\n\
    \            0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyib8nudi.scala:24)\n\tat Problem.main(tmpyib8nudi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / Math.pow(10, a.toInt)\n        val remainder\
    \ = a % Math.pow(10, a.toInt)\n        val unitDigits2 = b / Math.pow(10, b.toInt)\n\
    \        val remainder2 = b % Math.pow(10, b.toInt)\n        val product = unitDigits\
    \ * unitDigits2\n        val product2 = remainder * remainder2\n        product\
    \ + product2\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl31wjqc7.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        product + product2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5i6dr2w.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:19:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / Math.pow(10, a.toInt)\n        val remainder\
    \ = a % Math.pow(10, a.toInt)\n        val product = unitDigits * b\n        if\
    \ (remainder > 0) product * remainder\n        else product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbupfs91e.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (remainder\
    \ > \e[31m0\e[0m) product * remainder\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \  Found:    Double\n\e[31m   |\e[0m                           Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbupfs91e.scala:17:13\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m product\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (product : Double)\n\e[31m   |\e[0m             Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits) {\n           \
    \ product *= unitDigits2\n        }\n        return product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bd_wvkr.scala:22)\n\tat Problem.main(tmp5bd_wvkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        return product\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx0f23oqi.scala:19)\n\tat Problem.main(tmpx0f23oqi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        unitDigits * unitDigits2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_k2on37.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_k2on37.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_k2on37.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_k2on37.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits) {\n           \
    \ product *= unitDigits2\n        }\n        product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inx6enm.scala:22)\n\tat Problem.main(tmp6inx6enm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        if (unitDigits\
    \ == unitDigits2 && tenDigits == tenDigits2) 0\n        else if (unitDigits ==\
    \ unitDigits2) tenDigits2 * 10 + tenDigits2 * 10\n        else tenDigits2 * 10\
    \ + tenDigits2 * 10 + unitDigits2 * 10\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb1m7evfw.scala:22)\n\tat Problem.main(tmpb1m7evfw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvoqd8pkj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = unitDigits2 / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2 is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:19:12\
    \ -----------"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits2\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       unitDigits.reduce((x, y) => x * y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqycarnrw.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqycarnrw.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits - unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjr1799w.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ - unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map(x\
    \ => x._1 * x._2)\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map(x\
    \ => x._1 * x._2)\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_3).map(x\
    \ => x._1 * x._2)\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_4).map(x\
    \ => x._1 * x._2)\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_5).map(x\
    \ => x._1 * x._2)\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_6).map(x\
    \ => x._1 * x._2)\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_7).map(x\
    \ => x._1 * x._2)\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_8).map(x\
    \ => x._1 * x._2)\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_9).map(x\
    \ => x._1 * x._2)\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_10).map(x\
    \ => x._1 * x._2)\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_11).map(x\
    \ => x._1 * x._2)\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_12).map(x\
    \ => x._1 * x._2)\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_13).map(x\
    \ => x._1 * x._2)\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_14).map(x\
    \ => x._1 * x._2)\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_15).map(x\
    \ => x._1 * x._2)\n        unitDigits_16\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx4_pvg_.scala:30:8\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m        unitDigits_16\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (unitDigits_16\
    \ : List[Int])\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = (remainder * remainder2)\
    \ / 10\n        unitDigits + remainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnal6js1a.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnal6js1a.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = (remainder * remainder2)\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmklrmum.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphmklrmum.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphmklrmum.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphmklrmum.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphmklrmum.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigit3\
    \ = unitDigits * unitDigits2\n        val unitDigit4 = unitDigits * unitDigits2\n\
    \        val unitDigit5 = unitDigits * unitDigits2\n        val unitDigit6 = unitDigits\
    \ * unitDigits2\n        val unitDigit7 = unitDigits * unitDigits2\n        val\
    \ unitDigit8 = unitDigits * unitDigits2\n        val unitDigit9 = unitDigits *\
    \ unitDigits2\n        val unitDigit10 = unitDigits * unitDigits2\n        val\
    \ unitDigit11 = unitDigits * unitDigits2\n        val unitDigit12 = unitDigits\
    \ * unitDigits2\n        val unitDigit13 = unitDigits * unitDigits2\n        val\
    \ unitDigit14 = unitDigits * unitDigits2\n        val unitDigit15 = unitDigits\
    \ * unitDigits2\n        val unitDigit16 = unitDigits * unitDigits2\n        val\
    \ unitDigit17 = unitDigits * unitDigits2\n        val unitDigit18 = unitDigits\
    \ * unitDigits2\n        val unitDigit19 = unitDigits * unitDigits2\n        val\
    \ unitDigit20 = unitDigits * unitDigits2\n        val unitDigit21 = unitDigits\
    \ * unitDigits2\n        val unitDigit22 = unitDigits * unitDigits2\n        val\
    \ unitDigit23 = unitDigits * unitDigits2\n        val unitDigit24 = unitDigits\
    \ * unitDigits2\n        val unitDigit25 = unitDigits * unitDigits2\n        val\
    \ unitDigit26 = unitDigits * unitDigits2\n        val unitDigit27 = unitDigits\
    \ * unitDigits2\n        val unitDigit28 = unitDigits * unitDigits2\n        val\
    \ unitDigit29 = unitDigits * unitDigits2\n        val unitDigit30 = unitDigits\
    \ * unitDigits2\n        val unitDigit31 = unitDigits * unitDigits2\n        val\
    \ unitDigit32 = unitDigits * unitDigits2\n        val unitDigit33 = unitDigits\
    \ * unitDigits2\n        val unitDigit34 = unitDigits * unitDigits2\n        val\
    \ unitDigit35 = unitDigits * unitDigits2\n        val unitDigit36 = unitDigits\
    \ * unitDigits2\n        val unitDigit37 = unitDigits * unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppnfvu1bq.scala:51:39 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36munitDigit37\e[0m = unitDigits\
    \ * unit\n\e[31m\e[31m   |\e[0m                                       ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Not found: unit\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnfvu1bq.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits / 10\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits / 10\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits / 10\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits / 10\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn3n_xq2p.scala:56:37 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3n_xq2p.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3n_xq2p.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = unitDigits2 % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2 is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3n_xq2p.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3n_xq2p.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mva"
  stdout: ''
  timestamp: 1659799407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits){\n            product\
    \ *= unitDigits2\n        }\n        return product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplzyz344z.scala:22)\n\tat Problem.main(tmplzyz344z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5i6dr2w.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:19:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits) {\n           \
    \ product *= unitDigits2\n        }\n        return product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bd_wvkr.scala:22)\n\tat Problem.main(tmp5bd_wvkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5phywqco.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5phywqco.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5phywqco.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5phywqco.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5phywqco.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0muni"
  stdout: ''
  timestamp: 1659799409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (unitDigits\
    \ == unitDigits2) {\n            if (remainder == remainder2) {\n            \
    \    return unitDigits * unitDigits2\n            } else {\n                return\
    \ 0\n            }\n        } else {\n            return 0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijatq8tc.scala:28)\n\tat Problem.main(tmpijatq8tc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafu5edpt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (unitDigits\
    \ == unitDigits2) {\n            (remainder * remainder2)\n        } else {\n\
    \            0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyib8nudi.scala:24)\n\tat Problem.main(tmpyib8nudi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1.toString.toInt\n        val unitDigits_3\
    \ = unitDigits_2.toString.toInt\n        val unitDigits_4 = unitDigits_3.toString.toInt\n\
    \        val unitDigits_5 = unitDigits_4.toString.toInt\n        val unitDigits_6\
    \ = unitDigits_5.toString.toInt\n        val unitDigits_7 = unitDigits_6.toString.toInt\n\
    \        val unitDigits_8 = unitDigits_7.toString.toInt\n        val unitDigits_9\
    \ = unitDigits_8.toString.toInt\n        val unitDigits_10 = unitDigits_9.toString.toInt\n\
    \        val unitDigits_11 = unitDigits_10.toString.toInt\n        val unitDigits_12\
    \ = unitDigits_11.toString.toInt\n        val unitDigits_13 = unitDigits_12.toString.toInt\n\
    \        val unitDigits_14 = unitDigits_13.toString.toInt\n        val unitDigits_15\
    \ = unitDigits_14.toString.toInt\n        val unitDigits_16 = unitDigits_15.toString.toInt\n\
    \        val unitDigits_17 = unitDigits_16.toString.toInt\n        val unitDigits_18\
    \ = unitDigits_17.toString.toInt\n        val unitDigits_19 = unitDigits_18.toString.toInt\n\
    \        val unitDigits_20 = unitDigits_19.toString.toInt\n        val unitDigits_21\
    \ = unitDigits_20.toString.toInt\n        val unitDigits_22 = unitDigits_21.toString.toInt\n\
    \        val unitDigits_23 = unitDigits_22.toString.toInt\n        val unitDigits_24\
    \ = unitDigits_23.toString.toInt\n        val unitDigits_25 = unitDigits_24.toString.toInt\n\
    \        val unitDigits_26 = unitDigits_25.toString.toInt\n        val unitDigits_27\
    \ = unitDigits_26.toString.toInt\n        val unitDigits_28 = unitDigits_27.toString.toInt\n\
    \        val unitDigits_29 = unitDigits_28.toString.toInt\n        val unitDigits_30\
    \ = unitDigits_29.toString.toInt\n        val unitDigits_31 = unitDigits_30.toString.toInt\n\
    \        val unitDigits_32 = unitDigits_31.toString.toInt\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpikeemuuf.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpikeemuuf.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1 * 10\n        val unitDigits_3 = unitDigits_2\
    \ * 10\n        val unitDigits_4 = unitDigits_3 * 10\n        val unitDigits_5\
    \ = unitDigits_4 * 10\n        val unitDigits_6 = unitDigits_5 * 10\n        val\
    \ unitDigits_7 = unitDigits_6 * 10\n        val unitDigits_8 = unitDigits_7 *\
    \ 10\n        val unitDigits_9 = unitDigits_8 * 10\n        val unitDigits_10\
    \ = unitDigits_9 * 10\n        val unitDigits_11 = unitDigits_10 * 10\n      \
    \  val unitDigits_12 = unitDigits_11 * 10\n        val unitDigits_13 = unitDigits_12\
    \ * 10\n        val unitDigits_14 = unitDigits_13 * 10\n        val unitDigits_15\
    \ = unitDigits_14 * 10\n        val unitDigits_16 = unitDigits_15 * 10\n     \
    \   unitDigits_16\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zh25p_x.scala:33)\n\tat Problem.main(tmp1zh25p_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1.toString.toInt\n        val unitDigits_3\
    \ = unitDigits_2.toString.toInt\n        val unitDigits_4 = unitDigits_3.toString.toInt\n\
    \        val unitDigits_5 = unitDigits_4.toString.toInt\n        val unitDigits_6\
    \ = unitDigits_5.toString.toInt\n        val unitDigits_7 = unitDigits_6.toString.toInt\n\
    \        val unitDigits_8 = unitDigits_7.toString.toInt\n        val unitDigits_9\
    \ = unitDigits_8.toString.toInt\n        val unitDigits_10 = unitDigits_9.toString.toInt\n\
    \        val unitDigits_11 = unitDigits_10.toString.toInt\n        val unitDigits_12\
    \ = unitDigits_11.toString.toInt\n        val unitDigits_13 = unitDigits_12.toString.toInt\n\
    \        val unitDigits_14 = unitDigits_13.toString.toInt\n        val unitDigits_15\
    \ = unitDigits_14.toString.toInt\n        val unitDigits_16 = unitDigits_15.toString.toInt\n\
    \        val unitDigits_17 = unitDigits_16.toString.toInt\n        val unitDigits_18\
    \ = unitDigits_17.toString.toInt\n        val unitDigits_19 = unitDigits_18.toString.toInt\n\
    \        val unitDigits_20 = unitDigits_19.toString.toInt\n        val unitDigits_21\
    \ = unitDigits_20.toString.toInt\n        val unitDigits_22 = unitDigits_21.toString.toInt\n\
    \        val unitDigits_23 = unitDigits_22.toString.toInt\n        val unitDigits_24\
    \ = unitDigits_23.toString.toInt\n        val unitDigits_25 = unitDigits_24.toString.toInt\n\
    \        val unitDigits_26 = unitDigits_25.toString.toInt\n        val unitDigits_27\
    \ = unitDigits_26.toString.toInt\n        val unitDigits_28 = unitDigits_27.toString.toInt\n\
    \        val unitDigits_29 = unitDigits_28.toString.toInt\n        val unitDigits_30\
    \ = unitDigits_29.toString.toInt\n        val unitDigits_31 = unitDigits_30.toString.toInt\n\
    \        val unitDigits_32 = unitDigits_31.toString.toInt\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpikeemuuf.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpikeemuuf.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax0s3nfa.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax0s3nfa.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax0s3nfa.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax0s3nfa.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax0s3nfa.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1.toString.toInt\n        val unitDigits_3\
    \ = unitDigits_2.toString.toInt\n        val unitDigits_4 = unitDigits_3.toString.toInt\n\
    \        val unitDigits_5 = unitDigits_4.toString.toInt\n        val unitDigits_6\
    \ = unitDigits_5.toString.toInt\n        val unitDigits_7 = unitDigits_6.toString.toInt\n\
    \        val unitDigits_8 = unitDigits_7.toString.toInt\n        val unitDigits_9\
    \ = unitDigits_8.toString.toInt\n        val unitDigits_10 = unitDigits_9.toString.toInt\n\
    \        val unitDigits_11 = unitDigits_10.toString.toInt\n        val unitDigits_12\
    \ = unitDigits_11.toString.toInt\n        val unitDigits_13 = unitDigits_12.toString.toInt\n\
    \        val unitDigits_14 = unitDigits_13.toString.toInt\n        val unitDigits_15\
    \ = unitDigits_14.toString.toInt\n        val unitDigits_16 = unitDigits_15.toString.toInt\n\
    \        val unitDigits_17 = unitDigits_16.toString.toInt\n        val unitDigits_18\
    \ = unitDigits_17.toString.toInt\n        val unitDigits_19 = unitDigits_18.toString.toInt\n\
    \        val unitDigits_20 = unitDigits_19.toString.toInt\n        val unitDigits_21\
    \ = unitDigits_20.toString.toInt\n        val unitDigits_22 = unitDigits_21.toString.toInt\n\
    \        val unitDigits_23 = unitDigits_22.toString.toInt\n        val unitDigits_24\
    \ = unitDigits_23.toString.toInt\n        val unitDigits_25 = unitDigits_24.toString.toInt\n\
    \        val unitDigits_26 = unitDigits_25.toString.toInt\n        val unitDigits_27\
    \ = unitDigits_26.toString.toInt\n        val unitDigits_28 = unitDigits_27.toString.toInt\n\
    \        val unitDigits_29 = unitDigits_28.toString.toInt\n        val unitDigits_30\
    \ = unitDigits_29.toString.toInt\n        val unitDigits_31 = unitDigits_30.toString.toInt\n\
    \        val unitDigits_32 = unitDigits_31.toString.toInt\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpikeemuuf.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpikeemuuf.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlrud4xp.scala:22)\n\tat Problem.main(tmpqlrud4xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits) {\n           \
    \ product *= 10\n            product += unitDigits2(i)\n        }\n        return\
    \ product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30imbu29.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            product += unitDigits2(i)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp30imbu29.scala:18:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            product\
    \ += unitDigits2(i)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1xn1y0kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:1"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder3 = remainder * remainder2\n\
    \        val unitDigits = unitDigits + remainder3\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpelblkq7y.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpelblkq7y.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + remainder3\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ { case (a,b) => a*b }\n        unitDigits_2.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps1uf8y3d.scala:19)\n\tat Problem.main(tmps1uf8y3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ { case (x, y) => x * y }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ { case (x, y) => x * y }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_3).map\
    \ { case (x, y) => x * y }\n        unitDigits_4.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpceo0knl2.scala:21)\n\tat Problem.main(tmpceo0knl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcu6rzlun.scala:56:37 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5i6dr2w.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:19:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1 * 10\n        val unitDigits_3 = unitDigits_2\
    \ * 10\n        val unitDigits_4 = unitDigits_3 * 10\n        val unitDigits_5\
    \ = unitDigits_4 * 10\n        val unitDigits_6 = unitDigits_5 * 10\n        val\
    \ unitDigits_7 = unitDigits_6 * 10\n        val unitDigits_8 = unitDigits_7 *\
    \ 10\n        val unitDigits_9 = unitDigits_8 * 10\n        val unitDigits_10\
    \ = unitDigits_9 * 10\n        val unitDigits_11 = unitDigits_10 * 10\n      \
    \  val unitDigits_12 = unitDigits_11 * 10\n        val unitDigits_13 = unitDigits_12\
    \ * 10\n        val unitDigits_14 = unitDigits_13 * 10\n        val unitDigits_15\
    \ = unitDigits_14 * 10\n        val unitDigits_16 = unitDigits_15 * 10\n     \
    \   unitDigits_16\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zh25p_x.scala:33)\n\tat Problem.main(tmp1zh25p_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map(x\
    \ => x._1 * x._2)\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map(x\
    \ => x._1 * x._2)\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map(x\
    \ => x._1 * x._2)\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map(x\
    \ => x._1 * x._2)\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map(x\
    \ => x._1 * x._2)\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map(x\
    \ => x._1 * x._2)\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map(x\
    \ => x._1 * x._2)\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map(x\
    \ => x._1 * x._2)\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map(x\
    \ => x._1 * x._2)\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_11).map(x\
    \ => x._1 * x._2)\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map(x\
    \ => x._1 * x._2)\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map(x\
    \ => x._1 * x._2)\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_14).map(x\
    \ => x._1 * x._2)\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map(x\
    \ => x._1 * x._2)\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_16).map(x\
    \ => x._1 * x._2)\n        unitDigits_16.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfr58fuou.scala:15:44 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                 Recursive\
    \ \e[33mvalue\e[0m \e[35munitDigits_2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmpfr58fuou.scala:15:72 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m                            \
    \                                       ^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short):\
    \ Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mall match arguments ((x._2\
    \ : => Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfr58fuou.scala:16:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map(\e[36mx\e[0m =>\
    \ x._1 * x._2)\n\e[31m\e[31m   |\e[0m                                        \
    \    ^\e[0m\n\e[31m   |\e[0m                                 Recursive \e[33mvalue\e\
    [0m \e[35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfr58fuou.scala:16:72 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m                            \
    \                      "
  stdout: ''
  timestamp: 1659799421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_9mry_qh.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_9mry_qh.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_9mry_qh.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_9mry_qh.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_9mry_qh.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0muni"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigit = a % 10\n     \
    \   val unitDigits = b / 10\n        val unitDigit = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigit\n        val unitDigit = unitDigit * unitDigit\n  \
    \      unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaj3t9yf1.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaj3t9yf1.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaj3t9yf1.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaj3t9yf1.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        if (unitDigits\
    \ == unitDigits2 && tenDigits == tenDigits2) \n            unitDigits * tenDigits\
    \ \n        else \n            0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2vbx5rcp.scala:23)\n\tat Problem.main(tmp2vbx5rcp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdxurb2.scala:33)\n\tat Problem.main(tmprgdxurb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits3 = (a % 10) * (b % 10)\n        val unitDigits4 = (a % 10)\
    \ * ((b % 10) * 10)\n        val unitDigits5 = (a % 10) * ((b % 10) * 10) * 10\n\
    \        val unitDigits6 = (a % 10) * ((b % 10) * 10) * 10 * 10\n        val unitDigits7\
    \ = (a % 10) * ((b % 10) * 10) * 10 * 10 * 10\n        val unitDigits8 = (a %\
    \ 10) * ((b % 10) * 10) * 10 * 10 * 10 * 10\n        val unitDigits9 = (a % 10)\
    \ * ((b % 10) * 10) * 10 * 10 * 10 * 10 * 10\n        val unitDigits10 = (a %\
    \ 10) * ((b % 10) * 10) * 10 * 10 * 10 * 10 * 10 * 10\n        val unitDigits11\
    \ = (a % 10) * ((b % 10) * 10) * 10 * 10 * 10 * 10 * 10 * 10 * 10\n        val\
    \ unitDigits12 = (a % 10) * ((b % 10) * 10) * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10\n        val unitDigits13 = (a % 10) * ((b % 10) * 10) * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10\n        val unitDigits14 = (a % 10) * ((b % 10)\
    \ * 10) * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n        val unitDigits15\
    \ = (a % 10) * ((b % 10) * 10) * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10\n        val unitDigits16 = (a % 10) * ((b % 10) * 10) * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n        val unitDigits17\
    \ = (a % 10) * ((b % 10) * 10) * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10\n        val unitDigits18 = (a % 10) * ((b % 10)\
    \ * 10) * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6rtpy3cc.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzx2ez8_g.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbaz68kgr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbaz68kgr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0muni"
  stdout: ''
  timestamp: 1659799400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = (remainder * remainder2)\
    \ / 10\n        val unitDigits = unitDigits + remainder\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbdufl5df.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbdufl5df.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = (remainder * remainder2)\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbdufl5df.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + remainder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits = (tenDigits10 *\
    \ 10) + tenDigits10\n        val unitDigits = (unitDigits * 10) + unitDigits\n\
    \        val tenDigits = (tenDigits * 10) + tenDigits\n        val unitDigits\
    \ = (unitDigits * 10) + unitDigits\n        val tenDigits = (tenDigits * 10) +\
    \ tenDigits\n        val unitDigits = (unitDigits * 10) + unitDigits\n       \
    \ val tenDigits = (tenDigits * 10) + tenDigits\n        val unitDigits = (unitDigits\
    \ * 10) + unitDigits\n        val tenDigits = (tenDigits * 10) + tenDigits\n \
    \       val unitDigits = (unitDigits * 10) + unitDigits\n        val tenDigits\
    \ = (tenDigits * 10) + tenDigits\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp54uv1__h.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp54uv1__h.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = (unitDigits10\
    \ * \e[31m10\e[0m) + unitDigits10\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp54uv1__h.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = (tenDigits10 * \e[31m10\e\
    [0m) + tenDigits10\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits is already defined as \e[33mvalue\e[0m \e[35mtenDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp54uv1__h.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = (unitDigits * \e[31m10\e\
    [0m) + unitDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp54uv1__h.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = (tenDigits * \e[31m10\e\
    [0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8zyip8fp.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8zyip8fp.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8zyip8fp.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8zyip8fp.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8zyip8fp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (remainder\
    \ == 0 && remainder2 == 0) {\n            unitDigits * unitDigits2\n        }\
    \ else {\n            0\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp86cuvxs0.scala:24)\n\tat Problem.main(tmp86cuvxs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits / 10\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits / 10\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits / 10\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits / 10\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits / 10\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzvq0i0t4.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzvq0i0t4.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzvq0i0t4.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzvq0i0t4.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzvq0i0t4.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0muni"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpppkt1b7j.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpppkt1b7j.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpppkt1b7j.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpppkt1b7j.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpppkt1b7j.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits * unitDigits2) / 10\n        val tenDigits3 = (unitDigits * unitDigits2)\
    \ % 10\n        val unitDigits4 = (tenDigits * tenDigits2) / 10\n        val tenDigits4\
    \ = (tenDigits * tenDigits2) % 10\n        val unitDigits5 = (unitDigits * unitDigits3)\
    \ / 10\n        val tenDigits5 = (unitDigits * unitDigits3) % 10\n        val\
    \ unitDigits6 = (tenDigits * tenDigits3) / 10\n        val tenDigits6 = (tenDigits\
    \ * tenDigits3) % 10\n        val unitDigits7 = (unitDigits * unitDigits3 * tenDigits4)\
    \ / 10\n        val tenDigits7 = (unitDigits * unitDigits3 * tenDigits4) % 10\n\
    \        val unitDigits8 = (tenDigits * tenDigits3 * tenDigits4) / 10\n      \
    \  val tenDigits8 = (tenDigits * tenDigits3 * tenDigits4) % 10\n        val unitDigits9\
    \ = (unitDigits * unitDigits3 * tenDigits5) / 10\n        val tenDigits9 = (unitDigits\
    \ * unitDigits3 * tenDigits5) % 10\n        val unitDigits10 = (tenDigits * tenDigits3\
    \ * tenDigits5) / 10\n        val tenDigits10 = (tenDigits * tenDigits3 * tenDigits5)\
    \ % 10\n        val unitDigits11 = (unitDigits * unitDigits3 * tenDigits6) / 10\n\
    \        val tenDigits11 = (unitDigits * unitDigits3 * tenDigits6) % 10\n    \
    \    val unitDigits12 = (tenDigits * tenDigits3 * tenDigits6) / 10\n        val\
    \ tenDigits12 = (tenDigits * tenDigits3 * tenDigits6) % 10\n        val unitDigits13\
    \ = (unitDigits * unitDigits3 * tenDigits7) / 10\n        val tenDigits13 = (unitDigits\
    \ * unitDigits3 * tenDigits7) % 10\n        val unitDigits14 = (tenDigits * tenDigits3\
    \ * tenDigits7) / 10\n        val tenDigits14 = (\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsz6lood9.scala:40:27 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mtenDigits14\e[0m = (\n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsz6lood9.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val product = remainder * b\n        val unitDigitProduct = product / 10\n\
    \        val unitDigitRemainder = product % 10\n        unitDigitProduct + unitDigitRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63p247km.scala:21)\n\tat Problem.main(tmp63p247km.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        val unitDigits = a.toString.toInt\n        val\
    \ unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpc40l9gpw.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpc40l9gpw.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc40l9gpw.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc40l9gpw.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc40l9gpw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5i6dr2w.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:19:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2 \n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2 \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc81i36hj.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2\
    \ * \e[31m10\e[0m) + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc81i36hj.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits2 \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc81i36hj.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2 * \e\
    [31m10\e[0m) + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc81i36hj.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits2 \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc81i36hj.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munit"
  stdout: ''
  timestamp: 1659799422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tensDigits = a % 10\n    \
    \    val unitDigits2 = b / 10\n        val tensDigits2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val tensDigits = tensDigits + tensDigits2\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val tensDigits = tensDigits\
    \ + tensDigits2\n        val unitDigits = unitDigits * unitDigits2\n        val\
    \ tensDigits = tensDigits + tensDigits2\n        val unitDigits = unitDigits *\
    \ unitDigits2\n        val tensDigits = tensDigits + tensDigits2\n        val\
    \ unitDigits = unitDigits * unitDigits2\n        val tensDigits = tensDigits +\
    \ tensDigits2\n        val unitDigits = unitDigits * unitDigits2\n        val\
    \ tensDigits = tensDigits + tensDigits2\n        val unitDigits = unitDigits *\
    \ unitDigits2\n        val tensDigits = tensDigits + tensDigits2\n        val\
    \ unitDigits = unitDigits * unitDigits2\n        val tensDigits = tensDigits +\
    \ tensDigits2\n        val unitDigits = unitDigits * unitDigits2\n        val\
    \ tensDigits = tensDigits + tensDigits2\n        val unitDigits = unitDigits *\
    \ unitDigits2\n        val tensDigits = tensDigits + tensDigits2\n        val\
    \ unitDigits = unitDigits * unitDigits2\n        val tensDigits = tensDigits +\
    \ tensDigits2\n        val unitDigits = unitDigits * unitDigits2\n        val\
    \ tensDigits = tensDigits + tensDigits2\n        val unitDigits = unitDigits *\
    \ unitDigits2\n        val tensDigits = tensDigits + tensDigits2\n        val\
    \ unitDigits = unitDigits * unitDigits2\n        val tensDigits = tensDigits +\
    \ tensDigits2\n        val unitDigits = unitDigits * unitDigits2\n        val\
    \ tensDigits = tensDigits + tensDigits2\n        val unitDigits = unitDigits *\
    \ unitDigits2\n        val tensDigits = tensDigits + tensDigits2\n        val\
    \ unitDigits = unitDigits * unit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo4xjzt8c.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo4xjzt8c.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mtensDigits\e[0m = tensDigits + tensDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mtensDigits is already defined as \e[33mvalue\e[0m \e[35mtensDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo4xjzt8c.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo4xjzt8c.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtensDigits\e[0m = tensDigits + tensDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mtensDigits is already defined as \e[33mvalue\e[0m \e[35mtensDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo4xjzt8c.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits2\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       val unitDigits = unitDigits.map(x => x / 10)\n        val unitDigits =\
    \ unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x =>\
    \ x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n        val\
    \ unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n      \
    \  val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n      \
    \  val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n      \
    \  val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n      \
    \  val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjou3m531.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjou3m531.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjou3m531.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => x / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjou3m531.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjou3m531.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1659799424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val product = remainder * b\n        val unitDigits = unitDigits * 10\n  \
    \      val unitDigits = unitDigits + unitDigits + remainder\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsvunu2go.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsvunu2go.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits\
    \ + remainder\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val tenDigits = tenDigits * tenDigits2\n\
    \        val unitDigits = unitDigits + tenDigits\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq7ugd8kf.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq7ugd8kf.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = tenDigits * tenDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtenDigits is already defined as \e[33mvalue\e[0m \e[35mtenDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq7ugd8kf.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + tenDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvbvgnbkz.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbvgnbkz.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbvgnbkz.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbvgnbkz.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbvgnbkz.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ { case (x, y) => x * y }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ { case (x, y) => x * y }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_3).map\
    \ { case (x, y) => x * y }\n        unitDigits_4.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpceo0knl2.scala:21)\n\tat Problem.main(tmpceo0knl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map(x\
    \ => x._1 * x._2)\n        val unitDigits_3 = unitDigits.zip(unitDigits_2).map(x\
    \ => x._1 * x._2)\n        val unitDigits_4 = unitDigits.zip(unitDigits_3).map(x\
    \ => x._1 * x._2)\n        val unitDigits_5 = unitDigits.zip(unitDigits_4).map(x\
    \ => x._1 * x._2)\n        val unitDigits_6 = unitDigits.zip(unitDigits_5).map(x\
    \ => x._1 * x._2)\n        val unitDigits_7 = unitDigits.zip(unitDigits_6).map(x\
    \ => x._1 * x._2)\n        val unitDigits_8 = unitDigits.zip(unitDigits_7).map(x\
    \ => x._1 * x._2)\n        val unitDigits_9 = unitDigits.zip(unitDigits_8).map(x\
    \ => x._1 * x._2)\n        val unitDigits_10 = unitDigits.zip(unitDigits_9).map(x\
    \ => x._1 * x._2)\n        val unitDigits_11 = unitDigits.zip(unitDigits_10).map(x\
    \ => x._1 * x._2)\n        val unitDigits_12 = unitDigits.zip(unitDigits_11).map(x\
    \ => x._1 * x._2)\n        val unitDigits_13 = unitDigits.zip(unitDigits_12).map(x\
    \ => x._1 * x._2)\n        val unitDigits_14 = unitDigits.zip(unitDigits_13).map(x\
    \ => x._1 * x._2)\n        val unitDigits_15 = unitDigits.zip(unitDigits_14).map(x\
    \ => x._1 * x._2)\n        val unitDigits_16 = unitDigits.zip(unitDigits_15).map(x\
    \ => x._1 * x._2)\n        unitDigits_16.reduce((x,y) => x * y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpguhxs5u3.scala:33)\n\tat Problem.main(tmpguhxs5u3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvi0rt60y.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1.toString.toInt\n        val unitDigits_3\
    \ = unitDigits_2.toString.toInt\n        val unitDigits_4 = unitDigits_3.toString.toInt\n\
    \        val unitDigits_5 = unitDigits_4.toString.toInt\n        val unitDigits_6\
    \ = unitDigits_5.toString.toInt\n        val unitDigits_7 = unitDigits_6.toString.toInt\n\
    \        val unitDigits_8 = unitDigits_7.toString.toInt\n        val unitDigits_9\
    \ = unitDigits_8.toString.toInt\n        val unitDigits_10 = unitDigits_9.toString.toInt\n\
    \        val unitDigits_11 = unitDigits_10.toString.toInt\n        val unitDigits_12\
    \ = unitDigits_11.toString.toInt\n        val unitDigits_13 = unitDigits_12.toString.toInt\n\
    \        val unitDigits_14 = unitDigits_13.toString.toInt\n        val unitDigits_15\
    \ = unitDigits_14.toString.toInt\n        val unitDigits_16 = unitDigits_15.toString.toInt\n\
    \        val unitDigits_17 = unitDigits_16.toString.toInt\n        val unitDigits_18\
    \ = unitDigits_17.toString.toInt\n        val unitDigits_19 = unitDigits_18.toString.toInt\n\
    \        val unitDigits_20 = unitDigits_19.toString.toInt\n        val unitDigits_21\
    \ = unitDigits_20.toString.toInt\n        val unitDigits_22 = unitDigits_21.toString.toInt\n\
    \        val unitDigits_23 = unitDigits_22.toString.toInt\n        val unitDigits_24\
    \ = unitDigits_23.toString.toInt\n        val unitDigits_25 = unitDigits_24.toString.toInt\n\
    \        val unitDigits_26 = unitDigits_25.toString.toInt\n        val unitDigits_27\
    \ = unitDigits_26.toString.toInt\n        val unitDigits_28 = unitDigits_27.toString.toInt\n\
    \        val unitDigits_29 = unitDigits_28.toString.toInt\n        val unitDigits_30\
    \ = unitDigits_29.toString.toInt\n        val unitDigits_31 = unitDigits_30.toString.toInt\n\
    \        val unitDigits_32 = unitDigits_31.toString.toInt\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpikeemuuf.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpikeemuuf.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5i6dr2w.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5i6dr2w.scala:19:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits2\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits2 = unitDigits2.toList\n        val unitDigits = unitDigits.sortBy(_\
    \ * -1)\n        val unitDigits2 = unitDigits2.sortBy(_ * -1)\n        val unitDigits\
    \ = unitDigits.reverse\n        val unitDigits2 = unitDigits2.reverse\n      \
    \  val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_\
    \ > 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigit\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsd_f4np6.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsd_f4np6.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsd_f4np6.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.sortBy(_\
    \ * -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsd_f4np6.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.sortBy(_\
    \ * -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsd_f4np6.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1659799426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mhgn64s.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7mhgn64s.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7mhgn64s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlrud4xp.scala:22)\n\tat Problem.main(tmpqlrud4xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tensDigits = a % 10\n    \
    \    val unitDigits2 = b / 10\n        val tensDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits * unitDigits2) / 10\n        val tensDigits3 = (unitDigits * unitDigits2)\
    \ % 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val\
    \ tensDigits3 = (unitDigits * unitDigits2) % 10\n        val unitDigits3 = (unitDigits\
    \ * unitDigits2) / 10\n        val tensDigits3 = (unitDigits * unitDigits2) %\
    \ 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val tensDigits3\
    \ = (unitDigits * unitDigits2) % 10\n        val unitDigits3 = (unitDigits * unitDigits2)\
    \ / 10\n        val tensDigits3 = (unitDigits * unitDigits2) % 10\n        val\
    \ unitDigits3 = (unitDigits * unitDigits2) / 10\n        val tensDigits3 = (unitDigits\
    \ * unitDigits2) % 10\n        val unitDigits3 = (unitDigits * unitDigits2) /\
    \ 10\n        val tensDigits3 = (unitDigits * unitDigits2) % 10\n        val unitDigits3\
    \ = (unitDigits * unitDigits2) / 10\n        val tensDigits3 = (unitDigits * unitDigits2)\
    \ % 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val\
    \ tensDigits3 = (unitDigits * unitDigits2) % 10\n        val unitDigits3 = (unitDigits\
    \ * unitDigits2) / 10\n        val tensDigits3 = (unitDigits * unitDigits2) %\
    \ 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val tensDigits3\
    \ = (unitDigits * unitDigits2) % 10\n        val unitDigits3 = (unitDigits * unitDigits2)\
    \ / 10\n        val tensDigits3 = (unitDigits * unitDigits2) % 10\n        val\
    \ unitDigits3 = (unitDigits * unitDigits2) / 10\n        val tensDigits3 = (unitDigits\
    \ * unitDigits2) % 10\n        val unitDigits3 = (unitDigits * unitDigits2) /\
    \ 10\n        val tensDigits3 = (unitDigits * unitDigits2) % 10\n        val unitDigits3\
    \ = (unitDigits * unitDigit\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu4fhtp5m.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu4fhtp5m.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits3\e[0m = (unitDigits * unitDigits2) / \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4fhtp5m.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtensDigits3\e[0m = (unitDigits * unitDigits2)\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtensDigits3 is already defined as \e[33mvalue\e[0m \e[35mtensDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4fhtp5m.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits * unitDigits2)\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu4fhtp5m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtensDigits3\e[0m = (unitDigits * unitDigits2)\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtensDigits3 is already defined as \e[33mvalue\e[0m \e[35mtensDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must al"
  stdout: ''
  timestamp: 1659799428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits) {\n           \
    \ product *= unitDigits2\n        }\n        return product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bd_wvkr.scala:22)\n\tat Problem.main(tmp5bd_wvkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpax037tm8.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax037tm8.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax037tm8.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax037tm8.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpax037tm8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpax037tm8.scala:19:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659799428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = unitDigits * unitDigits2\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3xhcum3f.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3xhcum3f.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3xhcum3f.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3xhcum3f.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3xhcum3f.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3xhcum3f.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659799427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits = unitDigits3 / 10\n        val tenDigits\
    \ = unitDigits3 % 10\n        val unitDigits2 = tenDigits3 / 10\n        val tenDigits2\
    \ = tenDigits3 % 10\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits\
    \ = unitDigits3 / 10\n        val tenDigits = unitDigits3 % 10\n        val unitDigits2\
    \ = tenDigits3 / 10\n        val tenDigits2 = tenDigits3 % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits = unitDigits3 / 10\n        val tenDigits\
    \ = unitDigits3 % 10\n        val unitDigits2 = tenDigits3 / 10\n        val tenDigits2\
    \ = tenDigits3 % 10\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits\
    \ = unitDigits3 / 10\n        val tenDigits = unitDigits3 % 10\n        val unitDigits2\
    \ = tenDigits3 / 10\n        val tenDigits2 = tenDigits3 % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits = unitDigits3 / 10\n        val tenDigits\
    \ = unitDigits3 % 10\n        val unitDigits2 = tenDigits3 / 10\n        val tenDigits2\
    \ = tenDigits3 % 10\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n\
    \        val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits\
    \ = unitDigits3 / 10\n        val tenDigits = unitDigits3 % 10\n        val unitDigits2\
    \ = tenDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgw3emrq8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits3\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgw3emrq8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = unitDigits3 % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtenDigits is already defined as \e[33mvalue\e[0m \e[35mtenDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgw3emrq8.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = tenDigits3 / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgw3emrq8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtenDigits2\e[0m = tenDigits3 % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtenDigits2 is already defined as \e[33mvalue\e[0m \e[35mtenDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgw3emrq8.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2 * \e\
    [31m10\e[0m) + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659799427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        if (unitDigits\
    \ == unitDigits2) {\n            (remainder * remainder2) + unitDigits\n     \
    \   } else {\n            0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvntnblny.scala:24)\n\tat Problem.main(tmpvntnblny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdxurb2.scala:33)\n\tat Problem.main(tmprgdxurb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits_1.toString.toInt\n        val unitDigits_3\
    \ = unitDigits_2.toString.toInt\n        val unitDigits_4 = unitDigits_3.toString.toInt\n\
    \        val unitDigits_5 = unitDigits_4.toString.toInt\n        val unitDigits_6\
    \ = unitDigits_5.toString.toInt\n        val unitDigits_7 = unitDigits_6.toString.toInt\n\
    \        val unitDigits_8 = unitDigits_7.toString.toInt\n        val unitDigits_9\
    \ = unitDigits_8.toString.toInt\n        val unitDigits_10 = unitDigits_9.toString.toInt\n\
    \        val unitDigits_11 = unitDigits_10.toString.toInt\n        val unitDigits_12\
    \ = unitDigits_11.toString.toInt\n        val unitDigits_13 = unitDigits_12.toString.toInt\n\
    \        val unitDigits_14 = unitDigits_13.toString.toInt\n        val unitDigits_15\
    \ = unitDigits_14.toString.toInt\n        val unitDigits_16 = unitDigits_15.toString.toInt\n\
    \        val unitDigits_17 = unitDigits_16.toString.toInt\n        val unitDigits_18\
    \ = unitDigits_17.toString.toInt\n        val unitDigits_19 = unitDigits_18.toString.toInt\n\
    \        val unitDigits_20 = unitDigits_19.toString.toInt\n        val unitDigits_21\
    \ = unitDigits_20.toString.toInt\n        val unitDigits_22 = unitDigits_21.toString.toInt\n\
    \        val unitDigits_23 = unitDigits_22.toString.toInt\n        val unitDigits_24\
    \ = unitDigits_23.toString.toInt\n        val unitDigits_25 = unitDigits_24.toString.toInt\n\
    \        val unitDigits_26 = unitDigits_25.toString.toInt\n        val unitDigits_27\
    \ = unitDigits_26.toString.toInt\n        val unitDigits_28 = unitDigits_27.toString.toInt\n\
    \        val unitDigits_29 = unitDigits_28.toString.toInt\n        val unitDigits_30\
    \ = unitDigits_29.toString.toInt\n        val unitDigits_31 = unitDigits_30.toString.toInt\n\
    \        val unitDigits_32 = unitDigits_31.toString.toInt\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpikeemuuf.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpikeemuuf.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzx2ez8_g.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzx2ez8_g.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_9uaho5.scala:22)\n\tat Problem.main(tmpz_9uaho5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigit = a % 10\n     \
    \   val unitDigits = b / 10\n        val unitDigit = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigit\n        val unitDigit = unitDigit * unitDigits\n \
    \       unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp37qgjce5.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp37qgjce5.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp37qgjce5.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp37qgjce5.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigits\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits3 = (a % 10) * (b % 10)\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits + unitDigits3\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphs0kxlbq.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphs0kxlbq.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits3\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits % 10\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiijxxiv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjiijxxiv.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjiijxxiv.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlrud4xp.scala:22)\n\tat Problem.main(tmpqlrud4xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits3 = (unitDigits2 * 10) + unitDigits2\n \
    \       val tenDigits3 = (tenDigits2 * 10) + tenDigits2\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphg_mlr69.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2\
    \ * \e[31m10\e[0m) + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphg_mlr69.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphg_mlr69.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2 * \e\
    [31m10\e[0m) + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphg_mlr69.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphg_mlr69.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDi"
  stdout: ''
  timestamp: 1659799428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits - unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjr1799w.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ - unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits - unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpha8nftyq.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ - unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpha8nftyq.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpha8nftyq.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpha8nftyq.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        var i = 0\n        while (i < unitDigits) {\n\
    \            product *= unitDigits2\n            i += 1\n        }\n        product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ui63dfn.scala:24)\n\tat Problem.main(tmp8ui63dfn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits * unit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwea_n8ip.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwea_n8ip.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwea_n8ip.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwea_n8ip.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwea_n8ip.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfsxm7ufp.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfsxm7ufp.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfsxm7ufp.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfsxm7ufp.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        product\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmqcwm4o.scala:19)\n\tat Problem.main(tmprmqcwm4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + tenDigits14\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s1zmqvq.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        var i = 0\n        while (i < unitDigits) {\n\
    \            product *= 10\n            i += 1\n        }\n        while (i <\
    \ unitDigits2) {\n            product *= 10\n            i += 1\n        }\n \
    \       return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09341vo0.scala:28)\n\tat Problem.main(tmp09341vo0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits = unitDigits3 + unitDigits2\n        val\
    \ tenDigits = tenDigits3 + tenDigits2\n        val unitDigits = unitDigits * 10\
    \ + unitDigits2\n        val tenDigits = tenDigits * 10 + tenDigits2\n       \
    \ val unitDigits = unitDigits * 10 + unitDigits2\n        val tenDigits = tenDigits\
    \ * 10 + tenDigits2\n        val unitDigits = unitDigits * 10 + unitDigits2\n\
    \        val tenDigits = tenDigits * 10 + tenDigits2\n        val unitDigits =\
    \ unitDigits * 10 + unitDigits2\n        val tenDigits = tenDigits * 10 + tenDigits2\n\
    \        val unitDigits = unitDigits * 10 + unitDigits2\n        val tenDigits\
    \ = tenDigits * 10 + tenDigits2\n        val unitDigits = unitDigits * 10 + unitDigits2\n\
    \        val tenDigits = tenDigits * 10 + tenDigits2\n        val unitDigits =\
    \ unitDigits * 10 + unitDigits2\n        val tenDigits = tenDigits * 10 + tenDigits2\n\
    \        val unitDigits = unitDigits * 10 + unitDigits2\n        val tenDigits\
    \ = tenDigits * 10 + tenDigits2\n        val unitDigits = unitDigits * 10 + unitDigits2\n\
    \        val tenDigits = tenDigits * 10 + tenDigits2\n        val unitDigits =\
    \ unitDigits * 10 + unitDigits2\n        val tenDigits = tenDigits * 10 + tenDigits2\n\
    \        val unitDigits = unitDigits * 10 + unitDigits2\n        val tenDigits\
    \ = tenDigits * 10 + tenDigits2\n        val unitDigits = unitDigits * 10 + unitDigits2\n\
    \        val tenDigits = tenDigits * 10 + tenDigits2\n        val unitDigits =\
    \ unitDigits * 10 + unitDigits2\n        val tenDigits = tenDigits * 10 + tenDigits2\n\
    \        val unitDigits = unitDigits * 10 + unitDigits2\n        val tenDigits\
    \ = tenDigits * 10 + \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpid159a_l.scala:48:40 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = tenDigits\
    \ * \e[31m10\e[0m + \n\e[31m\e[31m   |\e[0m                                  \
    \      ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpid159a_l.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits3 + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpid159a_l.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = tenDigits3 + tenDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mtenDigits is already defined as \e[33mvalue\e[0m \e[35mtenDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpid159a_l.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m + unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpid159a_l.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = tenDigits * \e[31m10\e\
    [0m + tenDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafu5edpt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        product\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmqcwm4o.scala:19)\n\tat Problem.main(tmprmqcwm4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + ten\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlxvdg28.scala:42:47 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mtenDigits15\e[0m = (tenDigits14\
    \ * \e[31m10\e[0m) + ten\n\e[31m\e[31m   |\e[0m                              \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \             Not found: ten\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdlxvdg28.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdxurb2.scala:33)\n\tat Problem.main(tmprgdxurb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3uazu5mn.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3uazu5mn.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3uazu5mn.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3uazu5mn.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3uazu5mn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        var product = 0\n        val unitDigits_2 = unitDigits - 1\n        val\
    \ unitDigits_3 = unitDigits_1 - 1\n        val unitDigits_4 = unitDigits_2 - 1\n\
    \        val unitDigits_5 = unitDigits_3 - 1\n        val unitDigits_6 = unitDigits_4\
    \ - 1\n        val unitDigits_7 = unitDigits_5 - 1\n        val unitDigits_8 =\
    \ unitDigits_6 - 1\n        val unitDigits_9 = unitDigits_7 - 1\n        val unitDigits_10\
    \ = unitDigits_8 - 1\n        val unitDigits_11 = unitDigits_9 - 1\n        val\
    \ unitDigits_12 = unitDigits_10 - 1\n        val unitDigits_13 = unitDigits_11\
    \ - 1\n        val unitDigits_14 = unitDigits_12 - 1\n        val unitDigits_15\
    \ = unitDigits_13 - 1\n        val unitDigits_16 = unitDigits_14 - 1\n       \
    \ val unitDigits_17 = unitDigits_15 - 1\n        val unitDigits_18 = unitDigits_16\
    \ - 1\n        val unitDigits_19 = unitDigits_17 - 1\n        val unitDigits_20\
    \ = unitDigits_18 - 1\n        val unitDigits_21 = unitDigits_19 - 1\n       \
    \ val unitDigits_22 = unitDigits_20 - 1\n        val unitDigits_23 = unitDigits_21\
    \ - 1\n        val unitDigits_24 = unitDigits_22 - 1\n        val unitDigits_25\
    \ = unitDigits_23 - 1\n        val unitDigits_26 = unitDigits_24 - 1\n       \
    \ val unitDigits_27 = unitDigits_25 - 1\n        val unitDigits_28 = unitDigits_26\
    \ - 1\n        val unitDigits_29 = unitDigits_27 - 1\n        val unitDigits_30\
    \ = unitDigits_28 - 1\n        val unitDigits_31 = unitDigits_29 - 1\n       \
    \ val unitDigits_32 = unitDigits_31 - 1\n        val unitDigits_33 = unitDigits_32\
    \ - 1\n        val unitDigits_34 = unitDigits_33 - 1\n        val unitDigits_35\
    \ = unitDigits_34 - 1\n        val unitDigits_36 = unitDigits_35 - 1\n       \
    \ val unitDigits_37 = unitDigits_36 - 1\n        val unitDigits_38 = unitDigits_37\
    \ - 1\n        val unitDigits_39 = unitDigits_38 - 1\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmmi7h33x.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val product = remainder * b\n        val unitDigitProduct = product / 10\n\
    \        val unitDigitRemainder = product % 10\n        unitDigitProduct + unitDigitRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63p247km.scala:21)\n\tat Problem.main(tmp63p247km.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / Math.pow(10, a.toInt)\n        val remainder\
    \ = a % Math.pow(10, a.toInt)\n        val unitDigits2 = b / Math.pow(10, b.toInt)\n\
    \        val remainder2 = b % Math.pow(10, b.toInt)\n        unitDigits * unitDigits2\
    \ * remainder * remainder2\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljyv18rb.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        unitDigits * unitDigits2\
    \ * remainder * remainder2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = (remainder * remainder2)\
    \ % 10\n        unitDigits * remainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa60xavxc.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa60xavxc.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = (remainder * remainder2)\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + tenDig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt4sekvhc.scala:42:47 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mtenDigits15\e[0m = (tenDigits14\
    \ * \e[31m10\e[0m) + tenDig\n\e[31m\e[31m   |\e[0m                           \
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                   Not found: tenDig\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpt4sekvhc.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        product\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmqcwm4o.scala:19)\n\tat Problem.main(tmprmqcwm4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits % 10\n      \
    \  val unitDigits = unitDigits + unitDigits\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits % 10\n      \
    \  val unitDigits = unitDigits + unitDigits\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n      \
    \  val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits + unitDigits\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ + unitDigits\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits + unitDigits\n        val unitDigits = unitDigits % 10\n      \
    \  val unitDigits = unitDigits + unitDigits\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits + unitDigits\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits + unit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk2fcbshf.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2fcbshf.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2fcbshf.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2fcbshf.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2fcbshf.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mun"
  stdout: ''
  timestamp: 1659799433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = remainder * remainder2\n\
    \        unitDigits + remainder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrl4r4je.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrl4r4je.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafu5edpt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpafu5edpt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpafu5edpt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val tenDigits = tenDigits * tenDigits2\n\
    \        val unitDigits = unitDigits + tenDigits\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq7ugd8kf.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq7ugd8kf.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mtenDigits\e[0m = tenDigits * tenDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtenDigits is already defined as \e[33mvalue\e[0m \e[35mtenDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq7ugd8kf.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + tenDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvi0rt60y.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvi0rt60y.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val remainder = (remainder * remainder2)\
    \ % 10\n        unitDigits + remainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_whm4_t.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_whm4_t.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = (remainder * remainder2)\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits){\n            product\
    \ *= unitDigits2\n        }\n        return product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplzyz344z.scala:22)\n\tat Problem.main(tmplzyz344z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val product = remainder * b\n        val unitDigitProduct = product / 10\n\
    \        val unitDigitRemainder = product % 10\n        unitDigitProduct + unitDigitRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63p247km.scala:21)\n\tat Problem.main(tmp63p247km.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits\n        val unitDigits3 = (unitDigits2 * 10) + tenDigits\n    \
    \    val tenDigits3 = (tenDigits2 * 10) + tenDigits\n        val unitDigits3 =\
    \ (unitDigits2 * 10) + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) +\
    \ tenDigits\n        val unitDigits3 = (unitDigits2 * 10) + tenDigits\n      \
    \  val tenDigits3 = (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2\
    \ * 10) + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n\
    \        val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3\
    \ = (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + tenDigits\n        val tenDigits3 = (tenDigits2 * 10) + tenDigits\n      \
    \  val unitDigits3 = (unitDigits2 * 10) + tenDigits\n        val tenDigits3 =\
    \ (tenDigits2 * 10) + tenDigits\n        val unitDigits3 = (unitDigits2 * 10)\
    \ + ten\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0g9j66ah.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2\
    \ * \e[31m10\e[0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = (unitDigits2 * \e\
    [31m10\e[0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits3 is already defined as \e[33mvalue\e[0m \e[35munitDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtenDigits3\e[0m = (tenDigits2 * \e[31m10\e\
    [0m) + tenDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenDigits3 is already defined as \e[33mvalue\e[0m \e[35mtenDigits3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g9j66ah.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits3\e[0m = "
  stdout: ''
  timestamp: 1659799396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val product = remainder * b\n        val unitDigitProduct = product / 10\n\
    \        val unitDigitRemainder = product % 10\n        unitDigitProduct + unitDigitRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63p247km.scala:21)\n\tat Problem.main(tmp63p247km.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits2 = unitDigits2\
    \ / 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits / 10\n        val unit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvoqd8pkj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = unitDigits2 / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2 is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvoqd8pkj.scala:19:12\
    \ -----------"
  stdout: ''
  timestamp: 1659799407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcu6rzlun.scala:56:37 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcu6rzlun.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n   \
    \     val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        unitDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjptw4hc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjptw4hc.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlrud4xp.scala:22)\n\tat Problem.main(tmpqlrud4xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        var product = 0\n        for(i <- 0 until unitDigits){\n            product\
    \ += unitDigits_1(i) * Math.pow(10, unitDigits-i)\n        }\n        product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp5zpwm00.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            product += unitDigits_1(i) * Math.pow(\e\
    [31m10\e[0m, unitDigits-i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpp5zpwm00.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            product += unitDigits_1(i) * Math.pow(\e\
    [31m10\e[0m, unitDigits-i)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       \e[33mvalue\e[0m \e[35munitDigits_1\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        val unitDigits = a.toString.toInt\n        val\
    \ unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpc40l9gpw.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpc40l9gpw.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc40l9gpw.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc40l9gpw.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc40l9gpw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1659799420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdxurb2.scala:33)\n\tat Problem.main(tmprgdxurb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppl9v_n8m.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl9v_n8m.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits - unitDigits2\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpha8nftyq.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ - unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpha8nftyq.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpha8nftyq.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpha8nftyq.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits - unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjr1799w.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ - unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbjr1799w.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlrud4xp.scala:22)\n\tat Problem.main(tmpqlrud4xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        val unitDigits_17 = unitDigits_16 *\
    \ unitDigits_1\n        val unitDigits_18 = unitDigits_17 * unitDigits_1\n   \
    \     val unitDigits_19 = unitDigits_18 * unitDigits_1\n        val unitDigits_20\
    \ = unitDigits_19 * unitDigits_1\n        val unitDigits_21 = unitDigits_20 *\
    \ unitDigits_1\n        val unitDigits_22 = unitDigits_21 * unitDigits_1\n   \
    \     val unitDigits_23 = unitDigits_22 * unitDigits_1\n        val unitDigits_24\
    \ = unitDigits_23 * unitDigits_1\n        val unitDigits_25 = unitDigits_24 *\
    \ unitDigits_1\n        val unitDigits_26 = unitDigits_25 * unitDigits_1\n   \
    \     val unitDigits_27 = unitDigits_26 * unitDigits_1\n        val unitDigits_28\
    \ = unitDigits_27 * unitDigits_1\n        val unitDigits_29 = unitDigits_28 *\
    \ unitDigits_1\n        val unitDigits_30 = unitDigits_29 * unitDigits_1\n   \
    \     val unitDigits_31 = unitDigits_30 * unitDigit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsufqikfd.scala:44:44 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsufqikfd.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        var product = 0\n        var i = 0\n        while (i < unitDigits) {\n\
    \            product *= unitDigits_1\n            i += 1\n        }\n        return\
    \ product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp559t8ww6.scala:24)\n\tat Problem.main(tmp559t8ww6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        var product = 0\n        val unitDigits_2 = unitDigits - 1\n        val\
    \ unitDigits_3 = unitDigits_1 - 1\n        val unitDigits_4 = unitDigits_2 - 1\n\
    \        val unitDigits_5 = unitDigits_3 - 1\n        val unitDigits_6 = unitDigits_4\
    \ - 1\n        val unitDigits_7 = unitDigits_5 - 1\n        val unitDigits_8 =\
    \ unitDigits_6 - 1\n        val unitDigits_9 = unitDigits_7 - 1\n        val unitDigits_10\
    \ = unitDigits_8 - 1\n        val unitDigits_11 = unitDigits_9 - 1\n        val\
    \ unitDigits_12 = unitDigits_10 - 1\n        val unitDigits_13 = unitDigits_11\
    \ - 1\n        val unitDigits_14 = unitDigits_12 - 1\n        val unitDigits_15\
    \ = unitDigits_13 - 1\n        val unitDigits_16 = unitDigits_14 - 1\n       \
    \ val unitDigits_17 = unitDigits_15 - 1\n        val unitDigits_18 = unitDigits_16\
    \ - 1\n        val unitDigits_19 = unitDigits_17 - 1\n        val unitDigits_20\
    \ = unitDigits_18 - 1\n        val unitDigits_21 = unitDigits_19 - 1\n       \
    \ val unitDigits_22 = unitDigits_20 - 1\n        val unitDigits_23 = unitDigits_21\
    \ - 1\n        val unitDigits_24 = unitDigits_22 - 1\n        val unitDigits_25\
    \ = unitDigits_23 - 1\n        val unitDigits_26 = unitDigits_24 - 1\n       \
    \ val unitDigits_27 = unitDigits_25 - 1\n        val unitDigits_28 = unitDigits_26\
    \ - 1\n        val unitDigits_29 = unitDigits_27 - 1\n        val unitDigits_30\
    \ = unitDigits_28 - 1\n        val unitDigits_31 = unitDigits_29 - 1\n       \
    \ val unitDigits_32 = unitDigits_31 - 1\n        val unitDigits_33 = unitDigits_32\
    \ - 1\n        val unitDigits_34 = unitDigits_33 - 1\n        val unitDigits_35\
    \ = unitDigits_34 - 1\n        val unitDigits_36 = unitDigits_35 - 1\n       \
    \ val unitDigits_37 = unitDigits_36 - 1\n        val unitDigits_38 = unitDigits_37\
    \ - 1\n        val unitDigits_39 = unitDigits_38 - 1\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmmi7h33x.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits_1 = b.toString.toInt\n\
    \        val unitDigits_2 = unitDigits * unitDigits_1\n        val unitDigits_3\
    \ = unitDigits_2 * unitDigits_1\n        val unitDigits_4 = unitDigits_3 * unitDigits_1\n\
    \        val unitDigits_5 = unitDigits_4 * unitDigits_1\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_1\n        val unitDigits_7 = unitDigits_6 * unitDigits_1\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_1\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_10 = unitDigits_9 * unitDigits_1\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_1\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_1\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_1\n        val unitDigits_14 = unitDigits_13 * unitDigits_1\n   \
    \     val unitDigits_15 = unitDigits_14 * unitDigits_1\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_1\n        unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdxurb2.scala:33)\n\tat Problem.main(tmprgdxurb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = 0\n        var i = 0\n        while(i < unitDigits) {\n\
    \            product += unitDigits2(i) * unitDigits(i)\n            i += 1\n \
    \       }\n        product\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp24o7ionr.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            product += unitDigits2(i) * unitDigits(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp24o7ionr.scala:18:23 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            product += unitDigits2(i) * unitDigits(i)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               \e[33mvalue\e[0m \e[35munitDigits2\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = product + remainder + remainder2\n\
    \        product2\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmlpd9__8.scala:22)\n\tat Problem.main(tmpmlpd9__8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val remainder = a % 10\n     \
    \   val product = unitDigits * b + remainder\n        product\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6nnp88s.scala:19)\n\tat Problem.main(tmpk6nnp88s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + ten\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlxvdg28.scala:42:47 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mtenDigits15\e[0m = (tenDigits14\
    \ * \e[31m10\e[0m) + ten\n\e[31m\e[31m   |\e[0m                              \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \             Not found: ten\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdlxvdg28.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits2 = unitDigits2\
    \ % 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92ollm8p.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp92ollm8p.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1xn1y0kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xn1y0kc.scala:1"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
    \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    //\
    \ multiply(14,-15) should return 20.\n    def multiply(a : Long, b : Long) : Long\
    \ = {\n        val unitDigits = a / 10\n        val tenDigits = a % 10\n     \
    \   val unitDigits2 = b / 10\n        val tenDigits2 = b % 10\n        val unitDigits3\
    \ = (unitDigits2 * 10) + unitDigits2\n        val tenDigits3 = (tenDigits2 * 10)\
    \ + tenDigits2\n        val unitDigits4 = (unitDigits3 * 10) + unitDigits3\n \
    \       val tenDigits4 = (tenDigits3 * 10) + tenDigits3\n        val unitDigits5\
    \ = (unitDigits4 * 10) + unitDigits4\n        val tenDigits5 = (tenDigits4 * 10)\
    \ + tenDigits4\n        val unitDigits6 = (unitDigits5 * 10) + unitDigits5\n \
    \       val tenDigits6 = (tenDigits5 * 10) + tenDigits5\n        val unitDigits7\
    \ = (unitDigits6 * 10) + unitDigits6\n        val tenDigits7 = (tenDigits6 * 10)\
    \ + tenDigits6\n        val unitDigits8 = (unitDigits7 * 10) + unitDigits7\n \
    \       val tenDigits8 = (tenDigits7 * 10) + tenDigits7\n        val unitDigits9\
    \ = (unitDigits8 * 10) + unitDigits8\n        val tenDigits9 = (tenDigits8 * 10)\
    \ + tenDigits8\n        val unitDigits10 = (unitDigits9 * 10) + unitDigits9\n\
    \        val tenDigits10 = (tenDigits9 * 10) + tenDigits9\n        val unitDigits11\
    \ = (unitDigits10 * 10) + unitDigits10\n        val tenDigits11 = (tenDigits10\
    \ * 10) + tenDigits10\n        val unitDigits12 = (unitDigits11 * 10) + unitDigits11\n\
    \        val tenDigits12 = (tenDigits11 * 10) + tenDigits11\n        val unitDigits13\
    \ = (unitDigits12 * 10) + unitDigits12\n        val tenDigits13 = (tenDigits12\
    \ * 10) + tenDigits12\n        val unitDigits14 = (unitDigits13 * 10) + unitDigits13\n\
    \        val tenDigits14 = (tenDigits13 * 10) + tenDigits13\n        val unitDigits15\
    \ = (unitDigits14 * 10) + unitDigits14\n        val tenDigits15 = (tenDigits14\
    \ * 10) + tenDigits14\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s1zmqvq.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799396
