language: scala
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val l1 = l.tail\n        val l2 = l.init\n        val l3 = l.tail.tail\n\
    \        val l4 = l.tail.init\n        val l5 = l.tail.tail.tail\n        val\
    \ l6 = l.tail.tail.init\n        val l7 = l.tail.tail.tail.tail\n        val l8\
    \ = l.tail.tail.tail.init\n        val l9 = l.tail.tail.tail.tail.tail\n     \
    \   val l10 = l.tail.tail.tail.tail.init\n        val l11 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l12 = l.tail.tail.tail.tail.tail.init\n        val l13 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.init\n        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.init\n        val l17\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l20 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l22 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps55u9e95.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps55u9e95.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps55u9e95.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        if (m > n) monotonic(l1)\
    \ else !monotonic(l1)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp51wduqto.scala:12)\n\
    \tat Problem$.monotonic(tmp51wduqto.scala:15)\n\tat Problem$.monotonic(tmp51wduqto.scala:15)\n\
    \tat Problem$.main(tmp51wduqto.scala:18)\n\tat Problem.main(tmp51wduqto.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.length\n  \
    \      val n = l.head\n        var i = 0\n        var j = 1\n        var k = 0\n\
    \        var l1 = l.tail\n        var l2 = l.tail\n        var l3 = l.tail\n \
    \       var l4 = l.tail\n        var l5 = l.tail\n        var l6 = l.tail\n  \
    \      var l7 = l.tail\n        var l8 = l.tail\n        var l9 = l.tail\n   \
    \     var l10 = l.tail\n        var l11 = l.tail\n        var l12 = l.tail\n \
    \       var l13 = l.tail\n        var l14 = l.tail\n        var l15 = l.tail\n\
    \        var l16 = l.tail\n        var l17 = l.tail\n        var l18 = l.tail\n\
    \        var l19 = l.tail\n        var l20 = l.tail\n        var l21 = l.tail\n\
    \        var l22 = l.tail\n        var l23 = l.tail\n        var l24 = l.tail\n\
    \        var l25 = l.tail\n        var l26 = l.tail\n        var l27 = l.tail\n\
    \        var l28 = l.tail\n        var l29 = l.tail\n        var l30 = l.tail\n\
    \        var l31 = l.tail\n        var l32 = l.tail\n        var l33 = l.tail\n\
    \        var l34 = l.tail\n        var l35 = l.tail\n        var l36 = l.tail\n\
    \        var l37 = l.tail\n        var l38 = l.tail\n        var l39 = l.tail\n\
    \        var l40 = l.tail\n        var l41 = l.tail\n        var l42 = l.tail\n\
    \        var l43 = l.tail\n        var l44 = l.tail\n        var l45 = l.tail\n\
    \        var l46 = l.tail\n        var l47 = l.tail\n        var l48 = l.tail\n\
    \        var l49 = l.tail\n        var l50 = l.tail\n        var l51 = l.tail\n\
    \        var l52 = l.tail\n        var l53 = l.tail\n        var l54 = l.tail\n\
    \        var l55 = l.tail\n        var l56 = l.tail\n        var l57 = l.tail\n\
    \        var l58 = l.tail\n        var l59 = l.tail\n        var l60 = l.tail\n\
    \        var l61 = l.tail\n        var l62 = l.tail\n        var l63 = l.tail\n\
    \        var l64 = l.tail\n        var l65 = l.tail\n        var l66 = l.tail\n\
    \        var l67 = l.tail\n        var l68 = l.tail\n        var l69 = l.tail\n\
    \        var l70 = l.tail\n        var l71 = l.tail\n        var l72 = l.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4_qaunpc.scala:89:4 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4_qaunpc.scala:89:5 ---------------------\e[0m\e[0m\n\e[31m89\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        if (m > n) monotonic(l1)\
    \ else (m == n) && monotonic(l1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqc89k23v.scala:18)\n\tat Problem.main(tmpqc89k23v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplisl6wxw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0L)\
    \ {\n            (acc, x) => if (x < acc) x else acc\n        }\n        m > 0\
    \ && m == l.last\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvm0bbf83.scala:18)\n\tat Problem.main(tmpvm0bbf83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortBy(_)\n        val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n\
    \        val l5 = l4.reverse\n        val l6 = l5.sortBy(_)\n        val l7 =\
    \ l6.reverse\n        val l8 = l7.sortBy(_)\n        val l9 = l8.reverse\n   \
    \     val l10 = l9.sortBy(_)\n        val l11 = l10.reverse\n        val l12 =\
    \ l11.sortBy(_)\n        val l13 = l12.reverse\n        val l14 = l13.sortBy(_)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortBy(_)\n        val l17\
    \ = l16.reverse\n        val l18 = l17.sortBy(_)\n        val l19 = l18.reverse\n\
    \        val l20 = l19.sortBy(_)\n        val l21 = l20.reverse\n        val l22\
    \ = l21.sortBy(_)\n        val l23 = l22.reverse\n        val l24 = l23.sortBy(_)\n\
    \        val l25 = l24.reverse\n        val l26 = l25.sortBy(_)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortBy(_)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortBy(_)\n        val l31 = l30.reverse\n        val l32\
    \ = l31.sortBy(_)\n        val l33 = l32.reverse\n        val l34 = l33.sortBy(_)\n\
    \        val l35 = l34.reverse\n        val l36 = l35.sortBy(_)\n        val l37\
    \ = l36.reverse\n        val l38 = l37.sortBy(_)\n        val l39 = l38.reverse\n\
    \        val l40 = l39.sortBy(_)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortBy(_)\n        val l43 = l42.reverse\n        val l44 = l43.sortBy(_)\n\
    \        val l45 = l44.reverse\n        val l46 = l45.sortBy(_)\n        val l47\
    \ = l46.reverse\n        val l48 = l47.sortBy(_)\n        val l49 = l48.reverse\n\
    \        val l50 = l49.\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpywawrk2h.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpywawrk2h.scala:13:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml2\e[0m = l1.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpywawrk2h.scala:15:27 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml4\e[0m = l3.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => l3.sortBy(_$2).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpywawrk2h.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml6\e[0m = l5.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => l5.sortBy(_$3).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpywawrk2h.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml8\e[0m = l7.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => l7.sortBy(_$4).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpywawrk2h.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21"
  stdout: ''
  timestamp: 1659799826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val d = n - m\n        if (d < 0)\n        \
    \    monotonic(l.tail)\n        else if (d == 0)\n            true\n        else\n\
    \            monotonic(l.tail.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp06kaq64e.scala:12)\n\
    \tat Problem$.main(tmp06kaq64e.scala:23)\n\tat Problem.main(tmp06kaq64e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l = m.toLong - n.toLong\n        val r = m.toLong\
    \ - l.toLong\n        l < 0 || r < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi_wgy6v3.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = m.toLong - n.toLong\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799820
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        if (m > n) monotonic(l.tail) else !monotonic(l.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpnec28o_v.scala:13)\n\
    \tat Problem$.monotonic(tmpnec28o_v.scala:14)\n\tat Problem$.monotonic(tmpnec28o_v.scala:14)\n\
    \tat Problem$.monotonic(tmpnec28o_v.scala:14)\n\tat Problem$.main(tmpnec28o_v.scala:17)\n\
    \tat Problem.main(tmpnec28o_v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.size\n    \
    \    val n = l.head\n        val m = m-1\n        val n = n-1\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m1 =\
    \ 1\n        var n1 = 1\n        var m2 = 1\n        var n2 = 1\n        var m3\
    \ = 1\n        var n3 = 1\n        var m4 = 1\n        var n4 = 1\n        var\
    \ m5 = 1\n        var n5 = 1\n        var m6 = 1\n        var n6 = 1\n       \
    \ var m7 = 1\n        var n7 = 1\n        var m8 = 1\n        var n8 = 1\n   \
    \     var m9 = 1\n        var n9 = 1\n        var m10 = 1\n        var n10 = 1\n\
    \        var m11 = 1\n        var n11 = 1\n        var m12 = 1\n        var n12\
    \ = 1\n        var m13 = 1\n        var n13 = 1\n        var m14 = 1\n       \
    \ var n14 = 1\n        var m15 = 1\n        var n15 = 1\n        var m16 = 1\n\
    \        var n16 = 1\n        var m17 = 1\n        var n17 = 1\n        var m18\
    \ = 1\n        var n18 = 1\n        var m19 = 1\n        var n19 = 1\n       \
    \ var m20 = 1\n        var n20 = 1\n        var m21 = 0\n        var n21 = 0\n\
    \        var m22 = 0\n        var n22 = 0\n        var m23 = 0\n        var n23\
    \ = 0\n        var m24 = 0\n        var n24 = 0\n        var m25 = 0\n       \
    \ var n25 = 0\n        var m26 = 0\n        var n26 = 0\n        var m27 = 0\n\
    \        var n27 = 0\n        var m28 = 0\n        var n28 = 0\n        var m29\
    \ = 0\n        var n29 = 0\n        var m30 = 0\n        var n30 = 0\n       \
    \ var m31 = 0\n        var n31 = 0\n        var m32 = 0\n        var n32 = 0\n\
    \        var m33 = 0\n        var n33 = 0\n        var m34 = 0\n        var n34\
    \ = 0\n        var m35 = 0\n        var n35 = 0\n        var m36 = 0\n       \
    \ var n36 = 0\n        var m37 = 0\n        var n37 = 0\n        var m38 = 0\n\
    \        var n38 = 0\n        var m39 = 0\n        var n39 = 0\n        var m40\
    \ = 0\n        var n40 = 0\n        var m41 = 0\n        var n41 = 0\n       \
    \ var m42 = 0\n        var n42 = 0\n        var m43 = 0\n        var n43 = 0\n\
    \        var m44 = 0\n        var n44 = 0\n        var m45 = 0\n        var n45\
    \ = 0\n        var m46 = 0\n        var n46 = 0\n        var m47 = 0\n       \
    \ var n47 = 0\n        var m48\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpotu_i_jz.scala:115:4 ---------------------------\e\
    [0m\e[0m\n\e[31m115 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotu_i_jz.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = m-\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpotu_i_jz.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n-\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpotu_i_jz.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.size\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ size is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpotu_i_jz.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mn\e[0m = l.head\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value head is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpotu_i_jz.scala:115:5 --------------------\e[0m\e\
    [0m\n\e[31m115 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: Boolean\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(Long.MinValue)(_\
    \ + _)\n        l.forall(x => x <= m)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpznwmsn6b.scala:16)\n\tat Problem.main(tmpznwmsn6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        if (m > n) monotonic(l1)\
    \ else monotonic(l.reverse)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp4m_20k77.scala:12)\n\
    \tat Problem$.main(tmp4m_20k77.scala:18)\n\tat Problem.main(tmp4m_20k77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        l4.head == l1.head && l4.last == l1.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpod5pw6oc.scala:22)\n\tat Problem.main(tmpod5pw6oc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        l3.forall(x\
    \ => x >= l1.head)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptn82gsro.scala:20)\n\tat Problem.main(tmptn82gsro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.drop(1)\n        val l2 = l.tail.drop(2)\n\
    \        val l3 = l.tail.drop(3)\n        val l4 = l.tail.drop(4)\n        val\
    \ l5 = l.tail.drop(5)\n        val l6 = l.tail.drop(6)\n        val l7 = l.tail.drop(7)\n\
    \        val l8 = l.tail.drop(8)\n        val l9 = l.tail.drop(9)\n        val\
    \ l10 = l.tail.drop(10)\n        val l11 = l.tail.drop(11)\n        val l12 =\
    \ l.tail.drop(12)\n        val l13 = l.tail.drop(13)\n        val l14 = l.tail.drop(14)\n\
    \        val l15 = l.tail.drop(15)\n        val l16 = l.tail.drop(16)\n      \
    \  val l17 = l.tail.drop(17)\n        val l18 = l.tail.drop(18)\n        val l19\
    \ = l.tail.drop(19)\n        val l20 = l.tail.drop(20)\n        val l21 = l.tail.drop(21)\n\
    \        val l22 = l.tail.drop(22)\n        val l23 = l.tail.drop(23)\n      \
    \  val l24 = l.tail.drop(24)\n        val l25 = l.tail.drop(25)\n        val l26\
    \ = l.tail.drop(26)\n        val l27 = l.tail.drop(27)\n        val l28 = l.tail.drop(28)\n\
    \        val l29 = l.tail.drop(29)\n        val l30 = l.tail.drop(30)\n      \
    \  val l31 = l.tail.drop(31)\n        val l32 = l.tail.drop(32)\n        val l33\
    \ = l.tail.drop(33)\n        val l34 = l.tail.drop(34)\n        val l35 = l.tail.drop(35)\n\
    \        val l36 = l.tail.drop(36)\n        val l37 = l.tail.drop(37)\n      \
    \  val l38 = l.tail.drop(38)\n        val l39 = l.tail.drop(39)\n        val l40\
    \ = l.tail.drop(40)\n        val l41 = l.tail.drop(41)\n        val l42 = l.tail.drop(42)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bjvrxe8.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val j\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjtp8cp4f.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjtp8cp4f.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjtp8cp4f.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjtp8cp4f.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjtp8cp4f.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Erro"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m - n\n        if (m > 0) return true\n\
    \        if (m < 0) return false\n        monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv5gfe080.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799820
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        if (m > n) monotonic(l1)\
    \ else !monotonic(l1)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp51wduqto.scala:12)\n\
    \tat Problem$.monotonic(tmp51wduqto.scala:15)\n\tat Problem$.monotonic(tmp51wduqto.scala:15)\n\
    \tat Problem$.main(tmp51wduqto.scala:18)\n\tat Problem.main(tmp51wduqto.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l = l.length\n        if (l == 0) true\n    \
    \    else if (m > n) false\n        else if (m == n) monotonic(l.tail)\n     \
    \   else monotonic(l.tail) && monotonic(l.tail.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmb_ba9of.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0)((acc,\
    \ x) => acc + (x < l(0)))\n        m == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbavhb34s.scala:12:46 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.foldLeft(\e[31m0\e\
    [0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (x < l(\e[31m0\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\
    \e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m \
    \  |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x:\
    \ Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String):\
    \ String\n\e[31m   |\e[0m match arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659799821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0)((acc,\
    \ x) => acc + (x < l(0)))\n        m == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbavhb34s.scala:12:46 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.foldLeft(\e[31m0\e\
    [0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (x < l(\e[31m0\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\
    \e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m \
    \  |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x:\
    \ Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String):\
    \ String\n\e[31m   |\e[0m match arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659799821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.last\n        val l1 = l.tail\n     \
    \   val l2 = l1.tail\n        val l3 = l2.tail\n        val l4 = l3.tail\n   \
    \     val l5 = l4.tail\n        val l6 = l5.tail\n        val l7 = l6.tail\n \
    \       val l8 = l7.tail\n        val l9 = l8.tail\n        val l10 = l9.tail\n\
    \        val l11 = l10.tail\n        val l12 = l11.tail\n        val l13 = l12.tail\n\
    \        val l14 = l13.tail\n        val l15 = l14.tail\n        val l16 = l15.tail\n\
    \        val l17 = l16.tail\n        val l18 = l17.tail\n        val l19 = l18.tail\n\
    \        val l20 = l19.tail\n        val l21 = l20.tail\n        val l22 = l21.tail\n\
    \        val l23 = l22.tail\n        val l24 = l23.tail\n        val l25 = l24.tail\n\
    \        val l26 = l25.tail\n        val l27 = l26.tail\n        val l28 = l27.tail\n\
    \        val l29 = l28.tail\n        val l30 = l29.tail\n        val l31 = l30.tail\n\
    \        val l32 = l31.tail\n        val l33 = l32.tail\n        val l34 = l33.tail\n\
    \        val l35 = l34.tail\n        val l36 = l35.tail\n        val l37 = l36.tail\n\
    \        val l38 = l37.tail\n        val l39 = l38.tail\n        val l40 = l39.tail\n\
    \        val l41 = l40.tail\n        val l42 = l41.tail\n        val l43 = l42.tail\n\
    \        val l44 = l43.tail\n        val l45 = l44.tail\n        val l46 = l45.tail\n\
    \        val l47 = l46.tail\n        val l48 = l47.tail\n        val l49 = l48.tail\n\
    \        val l50 = l49.tail\n        val l51 = l50.tail\n        val l52 = l51.tail\n\
    \        val l53 = l52.tail\n        val l54 = l53.tail\n        val l55 = l54.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyivu53e2.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpyivu53e2.scala:70:5 ---------------------\e[0m\e\
    [0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvo27zgxa.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvo27zgxa.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.last\n        val l1 = l.tail\n     \
    \   val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n        val l4 =\
    \ l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n       \
    \ val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wcg2sce.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6wcg2sce.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6wcg2sce.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89nbmrl7.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft((0,0)){\n\
    \            case ((i,j),x) => (if (x < l(i)) (i+1,j) else (i,j))\n        }\n\
    \        val n = l.length\n        val d = m(n) - m(0)\n        if (d < 0)\n \
    \           false\n        else if (d == 0)\n            true\n        else\n\
    \            monotonic(l.drop(m(0))) && monotonic(l.take(m(n)))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw4hvocue.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = m(n) - m(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue -\
    \ is not a member of (n : Int)\e[33m match \e[0m{\n\e[31m   |\e[0m  case (\e[31m0\e\
    [0m : Int) => Int\n\e[31m   |\e[0m  case scala.compiletime.ops.int.S[n1] => \n\
    \e[31m   |\e[0m    scala.Tuple.Elem[Int *: EmptyTuple.type, n1]\n\e[31m   |\e\
    [0m}, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpw4hvocue.scala:22:57 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            monotonic(l.drop(m(\e[31m0\e[0m))) && monotonic(l.take(m(n)))\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    (n : Int)\e[33m match \e\
    [0m{\n\e[31m   |\e[0m                          case (\e[31m0\e[0m : Int) => Int\n\
    \e[31m   |\e[0m                          case scala.compiletime.ops.int.S[n1]\
    \ => \n\e[31m   |\e[0m                            scala.Tuple.Elem[Int *: EmptyTuple.type,\
    \ n1]\n\e[31m   |\e[0m                        }\n\e[31m   |\e[0m             \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0L)\
    \ {\n            (acc, x) => if (x < acc) x else acc\n        }\n        m > 0\
    \ && l forall { x => x > m }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dbfgi14.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        m > \e[31m0\e[0m && l\
    \ forall { \e[36mx\e[0m => x > m }\n\e[31m\e[31m   |\e[0m                 ^\e\
    [0m\n\e[31m   |\e[0m                 Found:    (l : List[Long])\n\e[31m   |\e\
    [0m                 Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val m = m.toLong\n        val n = n.toLong\n    \
    \    if (m > n) monotonic(n) else monotonic(m)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm3zcic69.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm3zcic69.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpm3zcic69.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (m > n) monotonic(n) \e[33melse\e\
    [0m monotonic(m)\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((n : List[Long]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3zcic69.scala:16:47\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (m > n)\
    \ monotonic(n) \e[33melse\e[0m monotonic(m)\n\e[31m\e[31m   |\e[0m           \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                              Found:    (m : Long)\n\e[31m   |\e[0m         \
    \                                      Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l = l.tail\n        if (l.isEmpty) true\n   \
    \     else if (l.head < m) false\n        else if (l.head > m) true\n        else\
    \ monotonic(l)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6kwqbuoy.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        l3.forall(x\
    \ => x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5h4pe77.scala:18)\n\tat Problem.main(tmpm5h4pe77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val n = l.size\n        val m = l.head\n        var i = 2\n        var\
    \ j = 1\n        var k = 0\n        while (i <= n) {\n            if (l(i) < m)\
    \ {\n                k = j\n                j = i\n                i = i + 1\n\
    \            } else if (l(i) > m) {\n                k = j\n                j\
    \ = i\n                i = i + 1\n            } else {\n                k = j\n\
    \                j = i\n                i = i + 1\n            }\n        }\n\
    \        if (k == n) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpctch410q.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft((l.head,\
    \ l.head))((acc, x) => if (acc._2 < x) acc else (x, acc._1))\n        m._2 > m._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzi2bof0n.scala:16)\n\tat Problem.main(tmpzi2bof0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.drop(1)\n        val l2 = l.tail.dropRight(1)\n\
    \        val l3 = l.tail.dropRight(2)\n        val l4 = l.tail.dropRight(3)\n\
    \        val l5 = l.tail.dropRight(4)\n        val l6 = l.tail.dropRight(5)\n\
    \        val l7 = l.tail.dropRight(6)\n        val l8 = l.tail.dropRight(7)\n\
    \        val l9 = l.tail.dropRight(8)\n        val l10 = l.tail.dropRight(9)\n\
    \        val l11 = l.tail.dropRight(10)\n        val l12 = l.tail.dropRight(11)\n\
    \        val l13 = l.tail.dropRight(12)\n        val l14 = l.tail.dropRight(13)\n\
    \        val l15 = l.tail.dropRight(14)\n        val l16 = l.tail.dropRight(15)\n\
    \        val l17 = l.tail.dropRight(16)\n        val l18 = l.tail.dropRight(17)\n\
    \        val l19 = l.tail.dropRight(18)\n        val l20 = l.tail.dropRight(19)\n\
    \        val l21 = l.tail.dropRight(20)\n        val l22 = l.tail.dropRight(21)\n\
    \        val l23 = l.tail.dropRight(22)\n        val l24 = l.tail.dropRight(23)\n\
    \        val l25 = l.tail.dropRight(24)\n        val l26 = l.tail.dropRight(25)\n\
    \        val l27 = l.tail.dropRight(26)\n        val l28 = l.tail.dropRight(27)\n\
    \        val l29 = l.tail.dropRight(28)\n        val l30 = l.tail.dropRight(29)\n\
    \        val l31 = l.tail.dropRight(30)\n        val l32 = l.tail.dropRight(31)\n\
    \        val l33 = l.tail.dropRight(32)\n        val l34 = l.tail.dropRight(33)\n\
    \        val l35 = l.tail.dropRight(34)\n        val l36 = l.tail.dropRight(35)\n\
    \        val l37 = l.tail.dropRight(36)\n        val l38 = l.tail.dropRight(37)\n\
    \        val l39 = l.tail.dropRight(38)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5unaje8q.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.length\n  \
    \      val n = l.head\n        val r = new Array[Boolean](m)\n        var i =\
    \ 0\n        while (i < m) {\n            if (l(i) < n) {\n                r(i)\
    \ = false\n            } else {\n                r(i) = true\n            }\n\
    \            i += 1\n        }\n        r.forall(x => x == true)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnqncztg.scala:29)\n\tat Problem.main(tmpcnqncztg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m - n\n        if (m > 0) return true\n\
    \        if (m < 0) return false\n        monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv5gfe080.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0)((acc,\
    \ x) => acc + (x < l(0)) ? 1 : -1)\n        m == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmp4caego.scala:12:59 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.foldLeft(\e[31m0\e\
    [0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (x < l(\e[31m0\e[0m)) ? \e[31m1\e\
    [0m : -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          value ? is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l2 = l.tail.tail\n        if (m > n) monotonic(l2)\
    \ else monotonic(l.reverse)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpr8lvzorp.scala:12)\n\
    \tat Problem$.main(tmpr8lvzorp.scala:18)\n\tat Problem.main(tmpr8lvzorp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0)((sum,\
    \ e) => sum + e)\n        val n = l.foldRight(0)((sum, e) => sum + e)\n      \
    \  m <= n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcavv4zza.scala:12:42\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = l.foldLeft(\e[31m0\e[0m)((\e[36msum\e[0m, \e[36me\e[0m) => sum + e)\n\e\
    [31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    Long\n\e[31m\
    \   |\e[0m                                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcavv4zza.scala:13:43 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.foldRight(\e\
    [31m0\e[0m)((\e[36msum\e[0m, \e[36me\e[0m) => sum + e)\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                       Found:    Long\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0L)\
    \ {\n            (acc, x) => if (acc < x) acc else x\n        }\n        m > 0\
    \ && m == l.last\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzmzlrn_h.scala:18)\n\tat Problem.main(tmpzmzlrn_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        l5.forall(l1.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7udy99m.scala:22)\n\tat Problem.main(tmpz7udy99m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        if (m > n) monotonic(l.tail) else !monotonic(l.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpnec28o_v.scala:13)\n\
    \tat Problem$.monotonic(tmpnec28o_v.scala:14)\n\tat Problem$.monotonic(tmpnec28o_v.scala:14)\n\
    \tat Problem$.monotonic(tmpnec28o_v.scala:14)\n\tat Problem$.main(tmpnec28o_v.scala:17)\n\
    \tat Problem.main(tmpnec28o_v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        if (m > n) monotonic(l.tail) else (monotonic(l.tail)\
    \ && m <= n)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpkgs8cyxi.scala:13)\n\
    \tat Problem$.monotonic(tmpkgs8cyxi.scala:14)\n\tat Problem$.monotonic(tmpkgs8cyxi.scala:14)\n\
    \tat Problem$.monotonic(tmpkgs8cyxi.scala:14)\n\tat Problem$.main(tmpkgs8cyxi.scala:17)\n\
    \tat Problem.main(tmpkgs8cyxi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.tail.head\n        val m = m - n\n  \
    \      val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n        val m = m - n\n        val n = n - m\n        val\
    \ m = m - n\n        val n = n - m\n        val m = m - n\n        val n = n -\
    \ m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n   \
    \     val n = n - m\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn1dk2_78.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn1dk2_78.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn1dk2_78.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn1dk2_78.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn1dk2_78.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn1dk2_78.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      val m = l.head\n        var i = 1;\n        var j = 1;\n        var k =\
    \ 1;\n        var l = 1;\n        var m1 = m;\n        var m2 = m;\n        var\
    \ m3 = m;\n        var m4 = m;\n        var m5 = m;\n        var m6 = m;\n   \
    \     var m7 = m;\n        var m8 = m;\n        var m9 = m;\n        var m10 =\
    \ m;\n        var m11 = m;\n        var m12 = m;\n        var m13 = m;\n     \
    \   var m14 = m;\n        var m15 = m;\n        var m16 = m;\n        var m17\
    \ = m;\n        var m18 = m;\n        var m19 = m;\n        var m20 = m;\n   \
    \     var m21 = m;\n        var m22 = m;\n        var m23 = m;\n        var m24\
    \ = m;\n        var m25 = m;\n        var m26 = m;\n        var m27 = m;\n   \
    \     var m28 = m;\n        var m29 = m;\n        var m30 = m;\n        var m31\
    \ = m;\n        var m32 = m;\n        var m33 = m;\n        var m34 = m;\n   \
    \     var m35 = m;\n        var m36 = m;\n        var m37 = m;\n        var m38\
    \ = m;\n        var m39 = m;\n        var m40 = m;\n        var m41 = m;\n   \
    \     var m42 = m;\n        var m43 = m;\n        var m44 = m;\n        var m45\
    \ = m;\n        var m46 = m;\n        var m47 = m;\n        var m48 = m;\n   \
    \     var m49 = m;\n        var m50 = m;\n        var m51 = m;\n        var m52\
    \ = m;\n        var m53 = m;\n        var m54 = m;\n        var m55 = m;\n   \
    \     var m56 = m;\n        var m57 = m;\n        var m58 = m;\n        var m59\
    \ = m;\n        var m60 = m;\n        var m61 = m;\n        var m62 = m;\n   \
    \     var m63 = m;\n        var m64 = m;\n        var m65 = m;\n        var m66\
    \ = m;\n        var m67 = m;\n        var m68 = m;\n        var m69 = m;\n   \
    \     var m70 = m;\n        var m71 = m;\n        var m72 = m;\n        var m73\
    \ = m;\n        var m74 = m;\n        var m75 = m;\n        var m76 = m;\n   \
    \     var m77 = m;\n        var m78 = m;\n        var m79 = m;\n        var m80\
    \ = m;\n        var m81 = m;\n        var m82 = m;\n        var m83 = m;\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw8c2fozd.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.length\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw8c2fozd.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = l.head\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value head is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw8c2fozd.scala:102:5 --------------------\e[0m\e\
    [0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: Boolean\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 0) true\n        else {\n            val first = l.head\n    \
    \        val last = l.last\n            val mid = l.size / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        val midVal = l.apply(mid)\n            val leftVal = l.apply(mid - 1)\n\
    \            val rightVal = l.apply(mid + 1)\n            val leftIndex = mid\n\
    \            val rightIndex = mid\n            val leftCount = 1\n           \
    \ val rightCount = 1\n            val leftSum = 0\n            val rightSum =\
    \ 0\n            val leftMax = Long.MinValue\n            val rightMax = Long.MaxValue\n\
    \            val leftMin = Long.MaxValue\n            val rightMin = Long.MinValue\n\
    \            val leftSumOfSquare = 0\n            val rightSumOfSquare = 0\n \
    \           val leftMaxOfSquare = 0\n            val rightMaxOfSquare = 0\n  \
    \          val leftMinOfSquare = 0\n            val rightMinOfSquare = 0\n   \
    \         val leftMaxOfSquareOfSquare = 0\n            val rightMaxOfSquareOfSquare\
    \ = 0\n            val leftMinOfSquareOfSquare = 0\n            val rightMinOfSquareOfSquare\
    \ = 0\n            val leftMaxOfSquareOfSquareOfSquare = 0\n            val rightMaxOfSquareOfSquareOfSquare\
    \ = 0\n            val leftMinOfSquareOfSquareOfSquare = 0\n            val rightMinOfSquareOfSquareOfSquare\
    \ = 0\n            val leftMaxOfSquareOfSquareOfSquareOfSquare = 0\n         \
    \   val rightMaxOfSquareOfSquareOfSquareOfSquare = 0\n            val leftMinOfSquareOfSquareOfSquareOfSquare\
    \ = 0\n            val rightMinOfSquareOfSquareOfSquareOfSquare = 0\n        \
    \    val leftMaxOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n            val\
    \ rightMaxOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n            val leftMinOfSquareOfSquareOfSquareOfSquareOfSquare\
    \ = 0\n            val rightMinOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n\
    \            val leftMaxOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n\
    \            val rightMaxOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n\
    \            val leftMinOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n\
    \            val rightMinOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n\
    \            val leftMaxOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0\n\
    \            val rightMax\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpab9r4eex.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpab9r4eex.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpab9r4eex.scala:59:16 ---------------------------\e[0m\e[0m\n\e\
    [31m59 |\e[0m            \e[33mval\e[0m \e[36mleftMaxOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMaxOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare is\
    \ already defined as \e[33mvalue\e[0m \e[35mleftMaxOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpab9r4eex.scala:73:1 ---------------------\e[0m\e[0m\n\
    \e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpab9r4eex.scala:62:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m62 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val m2 =\
    \ l.tail.tail.tail.head\n        val n1 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tcg_zpc.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val d = n - m\n        val m = m - d\n     \
    \   val n = n + d\n        val m = m - d\n        val n = n + d\n        val m\
    \ = m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n        val m = m - d\n        val n = n + d\n        val m =\
    \ m - d\n        val n = n + d\n        val m = m - d\n        val n = n + d\n\
    \        val m = m - d\n        val n = n + d\n        val m = m - d\n       \
    \ val n = n + d\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsa37f07.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbsa37f07.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n + d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbsa37f07.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbsa37f07.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n + d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbsa37f07.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbsa37f07.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n + d\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail\n        val l2 = l.tail.tail\n\
    \        val l3 = l.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail\n \
    \       val l5 = l.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmmig2pw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val n = l.length\n        val m = l.head\n        val r = l.tail\n    \
    \    val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 =\
    \ l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n       \
    \ val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l9\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp44ji8po0.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp44ji8po0.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp44ji8po0.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt2daldph.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.length\n        val n = l.head\n        val max = l.last\n  \
    \      val min = l.head\n        val max2 = l.last\n        val min2 = l.head\n\
    \        val max3 = l.last\n        val min3 = l.head\n        val max4 = l.last\n\
    \        val min4 = l.head\n        val max5 = l.last\n        val min5 = l.head\n\
    \        val max6 = l.last\n        val min6 = l.head\n        val max7 = l.last\n\
    \        val min7 = l.head\n        val max8 = l.last\n        val min8 = l.head\n\
    \        val max9 = l.last\n        val min9 = l.head\n        val max10 = l.last\n\
    \        val min10 = l.head\n        val max11 = l.last\n        val min11 = l.head\n\
    \        val max12 = l.last\n        val min12 = l.head\n        val max13 = l.last\n\
    \        val min13 = l.head\n        val max14 = l.last\n        val min14 = l.head\n\
    \        val max15 = l.last\n        val min15 = l.head\n        val max16 = l.last\n\
    \        val min16 = l.head\n        val max17 = l.last\n        val min17 = l.head\n\
    \        val max18 = l.last\n        val min18 = l.head\n        val max19 = l.last\n\
    \        val min19 = l.head\n        val max20 = l.last\n        val min20 = l.head\n\
    \        val max21 = l.last\n        val min21 = l.head\n        val max22 = l.last\n\
    \        val min22 = l.head\n        val max23 = l.last\n        val min23 = l.head\n\
    \        val max24 = l.last\n        val min24 = l.head\n        val max25 = l.last\n\
    \        val min25 = l.head\n        val max26 = l.last\n        val min26 = l.head\n\
    \        val max27 = l.last\n        val min27 = l.head\n        val max28 = l.last\n\
    \        val min28 = l.head\n        val max29 = l.last\n        val min29 = l.head\n\
    \        val max30 = l.last\n        val min30 = l.head\n        val max31 = l.last\n\
    \        val min31 = l.head\n        val max32 = l.last\n        val min32 = l.head\n\
    \        val max33 = l.last\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplllhdnx7.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplllhdnx7.scala:80:5 ---------------------\e[0m\e\
    [0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        l5.forall(l1.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7udy99m.scala:22)\n\tat Problem.main(tmpz7udy99m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val n1 =\
    \ l.tail.tail.tail.head\n        val m2 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckc7vrs_.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        l4.forall(l1.last.lt(l1(l1.length-1)))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcro07fz.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l4.forall(l1.last.lt(l1(l1.length-\e[31m1\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            value lt is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659799845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        if (m.isDefined && n.isEmpty) true\n        else\
    \ if (m.isDefined && !n.isEmpty) monotonic(m)\n        else if (n.isDefined &&\
    \ !m.isEmpty) monotonic(n)\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprk8uacg_.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.isDefined && n.isEmpty) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value isDefined is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmprk8uacg_.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.isDefined && !n.isEmpty) monotonic(m)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           value isDefined is not a member of Long\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprk8uacg_.scala:15:54 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.isDefined && !n.isEmpty)\
    \ monotonic(m)\n\e[31m\e[31m   |\e[0m                                        \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \             Found:    (m : Long)\n\e[31m   |\e[0m                          \
    \                          Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprk8uacg_.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n.isDefined &&\
    \ !m.isEmpty) monotonic(n)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue isDefined is not a member of List[Long] - did you mean\
    \ n.isDefinedAt?\n4 errors found\n"
  stdout: ''
  timestamp: 1659799847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val n1 =\
    \ l.tail.tail.tail.head\n        val m2 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3tebo3ji.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3tebo3ji.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val sorted = l.sortWith(_ < _)\n        val last = sorted.last\n      \
    \  val first = sorted.head\n        val isIncreasing = last < first\n        val\
    \ isDecreasing = first > last\n        isIncreasing || isDecreasing\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeqax0gfd.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse.sortWith(_ <\
    \ _)\n        l1 == l3\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60xhmzc0.scala:21)\n\tat Problem.main(tmp60xhmzc0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.last\n        val l = l.tail\n      \
    \  if (l.isEmpty) true\n        else if (m > n) monotonic(l)\n        else if\
    \ (m == n) true\n        else monotonic(l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpojchrc7j.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpojchrc7j.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgs4fzklj.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.drop(1)\n        val l2 = l.tail.drop(2)\n\
    \        val l3 = l.tail.drop(3)\n        val l4 = l.tail.drop(4)\n        val\
    \ l5 = l.tail.drop(5)\n        val l6 = l.tail.drop(6)\n        val l7 = l.tail.drop(7)\n\
    \        val l8 = l.tail.drop(8)\n        val l9 = l.tail.drop(9)\n        val\
    \ l10 = l.tail.drop(10)\n        val l11 = l.tail.drop(11)\n        val l12 =\
    \ l.tail.drop(12)\n        val l13 = l.tail.drop(13)\n        val l14 = l.tail.drop(14)\n\
    \        val l15 = l.tail.drop(15)\n        val l16 = l.tail.drop(16)\n      \
    \  val l17 = l.tail.drop(17)\n        val l18 = l.tail.drop(18)\n        val l19\
    \ = l.tail.drop(19)\n        val l20 = l.tail.drop(20)\n        val l21 = l.tail.drop(21)\n\
    \        val l22 = l.tail.drop(22)\n        val l23 = l.tail.drop(23)\n      \
    \  val l24 = l.tail.drop(24)\n        val l25 = l.tail.drop(25)\n        val l26\
    \ = l.tail.drop(26)\n        val l27 = l.tail.drop(27)\n        val l28 = l.tail.drop(28)\n\
    \        val l29 = l.tail.drop(29)\n        val l30 = l.tail.drop(30)\n      \
    \  val l31 = l.tail.drop(31)\n        val l32 = l.tail.drop(32)\n        val l33\
    \ = l.tail.drop(33)\n        val l34 = l.tail.drop(34)\n        val l35 = l.tail.drop(35)\n\
    \        val l36 = l.tail.drop(36)\n        val l37 = l.tail.drop(37)\n      \
    \  val l38 = l.tail.drop(38)\n        val l39 = l.tail.drop(39)\n        val l40\
    \ = l.tail.drop(40)\n        val l41 = l.tail.drop(41)\n        val l42 = l.tail.drop(42)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bjvrxe8.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2_ogbt6.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.size\n        val n = l.head\n        val i = 1 // index of current\
    \ element\n        val j = 1 // index of next element\n        val k = 1 // index\
    \ of next element to compare\n        var flag = true\n        while (i <= m &&\
    \ j <= n) {\n            if (l(i) < l(j)) {\n                i += 1\n        \
    \        j += 1\n            } else if (l(i) > l(j)) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n            k +=\
    \ 1\n            if (k > n) {\n                flag = false\n            }\n \
    \       }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi9vae884.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi9vae884.scala:21:18 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi9vae884.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi9vae884.scala:24:18 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi9vae884.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi9vae884.scala:28:14 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            k += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean k.!=?\n6 errors found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val n1 =\
    \ l.tail.tail.tail.head\n        if (m > n) monotonic(l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjgw74v1x.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjgw74v1x.scala:16:8 ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mif\e[0m (m > n) monotonic(l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \e[31m\e[31m   |\e[0m
  stdout: ''
  timestamp: 1659799846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val n1 =\
    \ l.tail.tail.tail.head\n        val m2 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_sk7k8s.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2_ogbt6.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        l5.forall(x =>\
    \ x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdrsqsxao.scala:20)\n\tat Problem.main(tmpdrsqsxao.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n      \
    \  val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6aeqwmz9.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortBy(_)\n        val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n\
    \        val l5 = l4.reverse\n        l5.forall(x => x >= l1.last)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoq563b4e.scala:13:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = l1.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mAny\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\e[31m   |\e[0m\
    \    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found that\
    \ match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpoq563b4e.scala:15:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36ml4\e[0m = l3.sortBy(_)\n\e[31m\e[31m   |\e[0m                      \
    \     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => l3.sortBy(_$2).\n2 errors found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ <\
    \ _)\n        val l9 = l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n\
    \        val l11 = l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n\
    \        val l13 = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n\
    \        val l17 = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n\
    \        val l19 = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n\
    \        val l21 = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n\
    \        val l25 = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n\
    \        val l27 = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n\
    \        val l29 = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n\
    \        val l33 = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n\
    \        val l35 = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n\
    \        val l37 = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejz3pora.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpejz3pora.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l = l.size\n        val m = m.toLong\n      \
    \  val n = n.toLong\n        if (l == 0)\n            true\n        else if (m\
    \ > n)\n            monotonic(l.tail)\n        else if (m == n)\n            true\n\
    \        else\n            monotonic(l.tail) && monotonic(l.tail.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1tq82xn.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1tq82xn.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq1tq82xn.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.size\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val d = n - m\n        if (d < 0)\n        \
    \    monotonic(l.tail)\n        else if (d == 0)\n            true\n        else\n\
    \            monotonic(l.tail.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp06kaq64e.scala:12)\n\
    \tat Problem$.main(tmp06kaq64e.scala:23)\n\tat Problem.main(tmp06kaq64e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        if (m > n) true\n        else if (m < n) false\n\
    \        else monotonic(l.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmcay1jsc.scala:19)\n\tat Problem.main(tmpmcay1jsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        if (m > n) monotonic(l1)\
    \ else !monotonic(l1)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp51wduqto.scala:12)\n\
    \tat Problem$.monotonic(tmp51wduqto.scala:15)\n\tat Problem$.monotonic(tmp51wduqto.scala:15)\n\
    \tat Problem$.main(tmp51wduqto.scala:18)\n\tat Problem.main(tmp51wduqto.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.tail.head\n        val d = n - m\n  \
    \      if (d == 0) true\n        else if (d > 0) monotonic(l.tail)\n        else\
    \ !monotonic(l.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4z3_9zeg.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.last\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        val m = m - n\n        val n = n - m\n        val m =\
    \ m - n\n        val n = n - m\n        val m = m - n\n        val n = n - m\n\
    \        val m = m - n\n        val n = n - m\n        val m = m - n\n       \
    \ val n = n - m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpldl1soa5.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpldl1soa5.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpldl1soa5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpldl1soa5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpldl1soa5.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpldl1soa5.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val j\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpltqn2vmd.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpltqn2vmd.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpltqn2vmd.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpltqn2vmd.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpltqn2vmd.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Erro"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val n1 =\
    \ l.tail.tail.tail.head\n        val m2 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydmz9kx4.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m - n\n        if (m > 0) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnpu5d9qm.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplisl6wxw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) monotonic(l.tail) else (m == n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpevmgabw_.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpevmgabw_.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val isIncreasing = true\n        val isDecreasing\
    \ = true\n        val isMonotonic = true\n        val isMonotonicIncreasing =\
    \ true\n        val isMonotonicDecreasing = true\n        val isMonotonicIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonic = true\n  \
    \      val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing = true\n \
    \       val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6e_stqsn.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6e_stqsn.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvo27zgxa.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvo27zgxa.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbo13bix5.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.length\n  \
    \      if (m == 0) true\n        else {\n            val l1 = l.head\n       \
    \     val l2 = l.tail.head\n            val l3 = l.tail.tail.head\n          \
    \  val l4 = l.tail.tail.tail.head\n            val l5 = l.tail.tail.tail.tail.head\n\
    \            val l6 = l.tail.tail.tail.tail.tail.head\n            val l7 = l.tail.tail.tail.tail.tail.tail.head\n\
    \            val l8 = l.tail.tail.tail.tail.tail.tail.tail.head\n            val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n            val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l11 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpemth6qzr.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpemth6qzr.scala:45:0 ----------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpemth6qzr.scala:44:1 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpemth6qzr.scala:33:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val m2 =\
    \ l.tail.tail.tail.head\n        val n1 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tcg_zpc.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsnxo3etn.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsnxo3etn.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.toArray\n \
    \       val n = m.length\n        var i = 0\n        var j = 1\n        var k\
    \ = 0\n        while (i < n) {\n            if (m(i) < m(j)) {\n             \
    \   i += 1\n            } else if (m(i) > m(j)) {\n                j += 1\n  \
    \          } else {\n                k += 1\n            }\n        }\n      \
    \  if (k == n) {\n            return true\n        }\n        return false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659799862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.toList\n  \
    \      val n = m.size\n        val max = m.max\n        val min = m.min\n    \
    \    val isIncreasing = true\n        val isDecreasing = true\n        var i =\
    \ 0\n        while (i < n) {\n            val x = m(i)\n            val y = m(i\
    \ + 1)\n            if (x < y) {\n                isIncreasing = false\n     \
    \       }\n            if (x > y) {\n                isDecreasing = false\n  \
    \          }\n            i += 1\n        }\n        if (isIncreasing && isDecreasing)\
    \ {\n            return true\n        }\n        if (isIncreasing && !isDecreasing)\
    \ {\n            return true\n        }\n        if (!isIncreasing && isDecreasing)\
    \ {\n            return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyc_fex95.scala:23:29 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                isIncreasing = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val isIncreasing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpyc_fex95.scala:26:29 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                isDecreasing = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val isDecreasing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuedqqlx2.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuedqqlx2.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxw1vwtv8.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxw1vwtv8.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val d = n - m\n        if (d < 0)\n        \
    \    monotonic(l.tail)\n        else if (d == 0)\n            true\n        else\n\
    \            monotonic(l.tail.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmp06kaq64e.scala:12)\n\
    \tat Problem$.main(tmp06kaq64e.scala:23)\n\tat Problem.main(tmp06kaq64e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 0) true\n        else if (n == 1) false\n        else {\n    \
    \        var i = 0\n            var j = n - 1\n            while (i < j) {\n \
    \               if (l(i) > l(j)) false\n                else if (l(i) < l(j))\
    \ true\n                else {\n                    i += 1\n                 \
    \   j -= 1\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbniit0k6.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mwhile\e[0m\
    \ (i < j) {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m        \
    \    Found:    Unit\n\e[31m   |\e[0m            Required: Boolean\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (l(i) > l(j)) \e[31mfalse\e[0m\n\e[31m20 |\e\
    [0m                \e[33melse\e[0m \e[33mif\e[0m (l(i) < l(j)) \e[31mtrue\e[0m\n\
    \e[31m21 |\e[0m                \e[33melse\e[0m {\n\e[31m22 |\e[0m            \
    \        i += \e[31m1\e[0m\n\e[31m23 |\e[0m                    j -= \e[31m1\e\
    [0m\n\e[31m24 |\e[0m                }\n\e[31m25 |\e[0m            }\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) true\n        else (m == n) && monotonic(l.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmeenhbv.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmeenhbv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.drop(1)\n        val l2 = l.tail.drop(2)\n\
    \        val l3 = l.tail.drop(3)\n        val l4 = l.tail.drop(4)\n        val\
    \ l5 = l.tail.drop(5)\n        val l6 = l.tail.drop(6)\n        val l7 = l.tail.drop(7)\n\
    \        val l8 = l.tail.drop(8)\n        val l9 = l.tail.drop(9)\n        val\
    \ l10 = l.tail.drop(10)\n        val l11 = l.tail.drop(11)\n        val l12 =\
    \ l.tail.drop(12)\n        val l13 = l.tail.drop(13)\n        val l14 = l.tail.drop(14)\n\
    \        val l15 = l.tail.drop(15)\n        val l16 = l.tail.drop(16)\n      \
    \  val l17 = l.tail.drop(17)\n        val l18 = l.tail.drop(18)\n        val l19\
    \ = l.tail.drop(19)\n        val l20 = l.tail.drop(20)\n        val l21 = l.tail.drop(21)\n\
    \        val l22 = l.tail.drop(22)\n        val l23 = l.tail.drop(23)\n      \
    \  val l24 = l.tail.drop(24)\n        val l25 = l.tail.drop(25)\n        val l26\
    \ = l.tail.drop(26)\n        val l27 = l.tail.drop(27)\n        val l28 = l.tail.drop(28)\n\
    \        val l29 = l.tail.drop(29)\n        val l30 = l.tail.drop(30)\n      \
    \  val l31 = l.tail.drop(31)\n        val l32 = l.tail.drop(32)\n        val l33\
    \ = l.tail.drop(33)\n        val l34 = l.tail.drop(34)\n        val l35 = l.tail.drop(35)\n\
    \        val l36 = l.tail.drop(36)\n        val l37 = l.tail.drop(37)\n      \
    \  val l38 = l.tail.drop(38)\n        val l39 = l.tail.drop(39)\n        val l40\
    \ = l.tail.drop(40)\n        val l41 = l.tail.drop(41)\n        val l42 = l.tail.drop(42)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bjvrxe8.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse.sortWith(_ <\
    \ _)\n        l1 == l3\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60xhmzc0.scala:21)\n\tat Problem.main(tmp60xhmzc0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m - n\n        val n = n - m\n     \
    \   m <= n && m >= 0\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4o5a7v68.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4o5a7v68.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.size\n    \
    \    val m = l.head\n        val l2 = l.tail\n        val l3 = l2.tail\n     \
    \   val l4 = l3.tail\n        val l5 = l4.tail\n        val l6 = l5.tail\n   \
    \     val l7 = l6.tail\n        val l8 = l7.tail\n        val l9 = l8.tail\n \
    \       val l10 = l9.tail\n        val l11 = l10.tail\n        val l12 = l11.tail\n\
    \        val l13 = l12.tail\n        val l14 = l13.tail\n        val l15 = l14.tail\n\
    \        val l16 = l15.tail\n        val l17 = l16.tail\n        val l18 = l17.tail\n\
    \        val l19 = l18.tail\n        val l20 = l19.tail\n        val l21 = l20.tail\n\
    \        val l22 = l21.tail\n        val l23 = l22.tail\n        val l24 = l23.tail\n\
    \        val l25 = l24.tail\n        val l26 = l25.tail\n        val l27 = l26.tail\n\
    \        val l28 = l27.tail\n        val l29 = l28.tail\n        val l30 = l29.tail\n\
    \        val l31 = l30.tail\n        val l32 = l31.tail\n        val l33 = l32.tail\n\
    \        val l34 = l33.tail\n        val l35 = l34.tail\n        val l36 = l35.tail\n\
    \        val l37 = l36.tail\n        val l38 = l37.tail\n        val l39 = l38.tail\n\
    \        val l40 = l39.tail\n        val l41 = l40.tail\n        val l42 = l41.tail\n\
    \        val l43 = l42.tail\n        val l44 = l43.tail\n        val l45 = l44.tail\n\
    \        val l46 = l45.tail\n        val l47 = l46.tail\n        val l48 = l47.tail\n\
    \        val l49 = l48.tail\n        val l50 = l49.tail\n        val l51 = l50.tail\n\
    \        val l52 = l51.tail\n        val l53 = l52.tail\n        val l54 = l53.tail\n\
    \        val l55 = l54.tail\n        val l56 = l55.tail\n        val l57\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprfmc0ad1.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprfmc0ad1.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      val m = l.head\n        val l2 = l.tail\n        val l3 = l2.tail\n   \
    \     val l4 = l3.tail\n        val l5 = l4.tail\n        val l6 = l5.tail\n \
    \       val l7 = l6.tail\n        val l8 = l7.tail\n        val l9 = l8.tail\n\
    \        val l10 = l9.tail\n        val l11 = l10.tail\n        val l12 = l11.tail\n\
    \        val l13 = l12.tail\n        val l14 = l13.tail\n        val l15 = l14.tail\n\
    \        val l16 = l15.tail\n        val l17 = l16.tail\n        val l18 = l17.tail\n\
    \        val l19 = l18.tail\n        val l20 = l19.tail\n        val l21 = l20.tail\n\
    \        val l22 = l21.tail\n        val l23 = l22.tail\n        val l24 = l23.tail\n\
    \        val l25 = l24.tail\n        val l26 = l25.tail\n        val l27 = l26.tail\n\
    \        val l28 = l27.tail\n        val l29 = l28.tail\n        val l30 = l29.tail\n\
    \        val l31 = l30.tail\n        val l32 = l31.tail\n        val l33 = l32.tail\n\
    \        val l34 = l33.tail\n        val l35 = l34.tail\n        val l36 = l35.tail\n\
    \        val l37 = l36.tail\n        val l38 = l37.tail\n        val l39 = l38.tail\n\
    \        val l40 = l39.tail\n        val l41 = l40.tail\n        val l42 = l41.tail\n\
    \        val l43 = l42.tail\n        val l44 = l43.tail\n        val l45 = l44.tail\n\
    \        val l46 = l45.tail\n        val l47 = l46.tail\n        val l48 = l47.tail\n\
    \        val l49 = l48.tail\n        val l50 = l49.tail\n        val l51 = l50.tail\n\
    \        val l52 = l51.tail\n        val l53 = l52.tail\n        val l54 = l53.tail\n\
    \        val l55 = l54.tail\n        val l56 = l55.tail\n        val l57\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzmmzt16i.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzmmzt16i.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) true else if (m == n) false else monotonic(l.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6iz0v01w.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6iz0v01w.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        l4.forall(l1.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyt61gsi.scala:21)\n\tat Problem.main(tmpoyt61gsi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val sorted = l.sorted\n        val l1 = l.head\n        val l2 = l.last\n\
    \        val l3 = l.tail.head\n        val l4 = l.tail.last\n        val l5 =\
    \ l.tail.tail.head\n        val l6 = l.tail.tail.last\n        val l7 = l.tail.tail.tail.head\n\
    \        val l8 = l.tail.tail.tail.last\n        val l9 = l.tail.tail.tail.tail.head\n\
    \        val l10 = l.tail.tail.tail.tail.last\n        val l11 = l.tail.tail.tail.tail.tail.head\n\
    \        val l12 = l.tail.tail.tail.tail.tail.last\n        val l13 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.last\n        val l15 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.last\n        val l17\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.last\n\
    \        val l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n     \
    \   val l20 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.last\n        val\
    \ l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l22 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.last\n        val\
    \ l23 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n      \
    \  val l24 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.last\n \
    \       val l25 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l26 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc00z09dx.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpc00z09dx.scala:40:5 ---------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse.sortWith(_ <\
    \ _)\n        l3.forall(x => x == l1.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4yxjz4x1.scala:18)\n\tat Problem.main(tmp4yxjz4x1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortBy(-_)\n        val l3 = l2.reverse\n        l3.forall(l1.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnxapsz1.scala:20)\n\tat Problem.main(tmpcnxapsz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.length\n  \
    \      val n = l.head\n        val s = l.tail\n        val d = new Array[Long](m)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var s = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplm82j1hz.scala:142:11 --------------------------\e\
    [0m\e[0m\n\e[31m142 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplm82j1hz.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplm82j1hz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplm82j1hz.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined\
    \ as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplm82j1hz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36md\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplm82j1hz.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) {\n            monotonic(l.tail)\n        } else if (m ==\
    \ n) {\n            true\n        } else {\n            monotonic(l.tail)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwtuf60q5.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwtuf60q5.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val d = l.tail.tail.head\n        if (m > n)\
    \ monotonic(l.tail) else (m > d) && monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0mwe94zj.scala:18)\n\tat Problem.main(tmp0mwe94zj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        l4.head == l1.head && l4.last == l1.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpod5pw6oc.scala:22)\n\tat Problem.main(tmpod5pw6oc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val isIncreasing = m <= n\n        val isDecreasing\
    \ = m >= n\n        if (isIncreasing && isDecreasing) true\n        else if (isIncreasing\
    \ && !isDecreasing) true\n        else if (!isIncreasing && isDecreasing) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphivv6bm1.scala:24)\n\tat Problem.main(tmphivv6bm1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        if (m > n) monotonic(l1)\
    \ else (m == n) && monotonic(l1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqc89k23v.scala:18)\n\tat Problem.main(tmpqc89k23v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr35ykw5n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr35ykw5n.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuedqqlx2.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuedqqlx2.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val isIncreasing = m > n\n        val isDecreasing\
    \ = m < n\n        if (isIncreasing && isDecreasing) true\n        else if (isIncreasing\
    \ && !isDecreasing) true\n        else if (!isIncreasing && isDecreasing) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpesmjjlcl.scala:24)\n\tat Problem.main(tmpesmjjlcl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m - n\n        val n = n - m\n     \
    \   val m = m - n\n        val n = n - m\n        val m = m - n\n        val n\
    \ = n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val l1 = l.sortWith(_ < _)\n        val l2 = l.sortWith(_ > _)\n      \
    \  val l3 = l.sortWith(_ <= _)\n        val l4 = l.sortWith(_ >= _)\n        val\
    \ l5 = l.sortWith(_ <= _)\n        val l6 = l.sortWith(_ >= _)\n        val l7\
    \ = l.sortWith(_ <= _)\n        val l8 = l.sortWith(_ >= _)\n        val l9 =\
    \ l.sortWith(_ <= _)\n        val l10 = l.sortWith(_ >= _)\n        val l11 =\
    \ l.sortWith(_ <= _)\n        val l12 = l.sortWith(_ >= _)\n        val l13 =\
    \ l.sortWith(_ <= _)\n        val l14 = l.sortWith(_ >= _)\n        val l15 =\
    \ l.sortWith(_ <= _)\n        val l16 = l.sortWith(_ >= _)\n        val l17 =\
    \ l.sortWith(_ <= _)\n        val l18 = l.sortWith(_ >= _)\n        val l19 =\
    \ l.sortWith(_ <= _)\n        val l20 = l.sortWith(_ >= _)\n        val l21 =\
    \ l.sortWith(_ <= _)\n        val l22 = l.sortWith(_ >= _)\n        val l23 =\
    \ l.sortWith(_ <= _)\n        val l24 = l.sortWith(_ >= _)\n        val l25 =\
    \ l.sortWith(_ <= _)\n        val l26 = l.sortWith(_ >= _)\n        val l27 =\
    \ l.sortWith(_ <= _)\n        val l28 = l.sortWith(_ >= _)\n        val l29 =\
    \ l.sortWith(_ <= _)\n        val l30 = l.sortWith(_ >= _)\n        val l31 =\
    \ l.sortWith(_ <= _)\n        val l32 = l.sortWith(_ >= _)\n        val l33 =\
    \ l.sortWith(_ <= _)\n        val l34 = l.sortWith(_ >= _)\n        val l35 =\
    \ l.sortWith(_ <= _)\n        val l36 = l.sortWith(_ >= _)\n        val l37 =\
    \ l.sortWith(_ <= _)\n        val l38 = l.sortWith(_ >= _)\n        val l39 =\
    \ l.sortWith(_ <= _)\n        val l40 = l.sortWith(_ >= \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyl6_dsnr.scala:52:33 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36ml40\e[0m = l.sortWith(_\
    \ >= \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m  \
    \ |\e[0m                                 expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyl6_dsnr.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyl6_dsnr.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.length\n  \
    \      var i = 0\n        var j = m-1\n        var k = 0\n        while (i < j)\
    \ {\n            if (l(i) < l(j)) {\n                i += 1\n            } else\
    \ if (l(i) > l(j)) {\n                j -= 1\n            } else {\n         \
    \       k += 1\n            }\n        }\n        if (k == m) {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0rl7b1s.scala:32)\n\tat Problem.main(tmpf0rl7b1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val n = l.size\n        val m = l.head\n        val r = l.tail\n      \
    \  val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp34app8mf.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp34app8mf.scala:26:5 ---------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m1 = l.tail.tail.head\n        val n1 =\
    \ l.tail.tail.tail.head\n        val m2 = l.tail.tail.tail.tail.head\n       \
    \ val n2 = l.tail.tail.tail.tail.tail.head\n        val m3 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val m4 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \       val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp35flbvan.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l = m.toLong - n.toLong\n        val r = m.toLong\
    \ - l.toLong\n        val c = l.toLong - r.toLong\n        val d = r.toLong -\
    \ c.toLong\n        val e = c.toLong - d.toLong\n        val f = d.toLong - e.toLong\n\
    \        val g = e.toLong - f.toLong\n        val h = f.toLong - g.toLong\n  \
    \      val i = g.toLong - h.toLong\n        val j = h.toLong - i.toLong\n    \
    \    val k = i.toLong - j.toLong\n        val l = j.toLong - k.toLong\n      \
    \  val m = k.toLong - l.toLong\n        val n = l.toLong - m.toLong\n        val\
    \ o = m.toLong - n.toLong\n        val p = n.toLong - o.toLong\n        val q\
    \ = o.toLong - p.toLong\n        val r = p.toLong - q.toLong\n        val s =\
    \ q.toLong - r.toLong\n        val t = r.toLong - s.toLong\n        val u = s.toLong\
    \ - t.toLong\n        val v = t.toLong - u.toLong\n        val w = u.toLong -\
    \ v.toLong\n        val x = v.toLong - w.toLong\n        val y = w.toLong - x.toLong\n\
    \        val z = x.toLong - y.toLong\n        val a = y.toLong - z.toLong\n  \
    \      val b = z.toLong - a.toLong\n        val c = a.toLong - b.toLong\n    \
    \    val d = b.toLong - c.toLong\n        val e = c.toLong - d.toLong\n      \
    \  val f = d.toLong - e.toLong\n        val g = e.toLong - f.toLong\n        val\
    \ h = f.toLong - g.toLong\n        val i = g.toLong - h.toLong\n        val j\
    \ = h.toLong - i.toLong\n        val k = i.toLong - j.toLong\n        val l =\
    \ j.toLong - k.toLong\n        val m = k.toLong - l.toLong\n        val n = l.toLong\
    \ - m.toLong\n        val o = m.toLong - n.toLong\n        val p = n.toLong -\
    \ o.toLong\n        val q = o.toLong - p.toLong\n        val r = p.toLong - q.toLong\n\
    \        val s = q.toLong - r.toLong\n        val t = r.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkp99wi0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = j.toLong - k.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml\
    \ is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkp99wi0.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = k.toLong - l.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqkp99wi0.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.toLong - m.toLong\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already\
    \ defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkp99wi0.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = p.toLong - q.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr\
    \ is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkp99wi0.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc\e[0m = a.toLong - b.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val m = l.head\n        val n = l.last\n        val m = m.toLong\n    \
    \    val n = n.toLong\n        if (m > n) true\n        else if (m < n) false\n\
    \        else monotonic(l.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp613lnwmr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp613lnwmr.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp613lnwmr.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        if (m.isDefined && n.isEmpty) true\n        else\
    \ if (m.isDefined && !n.isEmpty) monotonic(m)\n        else n.forall(x => m.compare(x,\
    \ m.get) < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdyvgz60o.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.isDefined && n.isEmpty) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value isDefined is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpdyvgz60o.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.isDefined && !n.isEmpty) monotonic(m)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           value isDefined is not a member of Long\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpdyvgz60o.scala:15:54 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.isDefined && !n.isEmpty)\
    \ monotonic(m)\n\e[31m\e[31m   |\e[0m                                        \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \             Found:    (m : Long)\n\e[31m   |\e[0m                          \
    \                          Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdyvgz60o.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m n.forall(x => m.compare(x, m.get)\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                       value get\
    \ is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659799868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 0) true\n        else if (n == 1) false\n        else {\n    \
    \        val m = l.head\n            val m1 = l.tail.head\n            val m2\
    \ = l.tail.tail.head\n            val m3 = l.tail.tail.tail.head\n           \
    \ val m4 = l.tail.tail.tail.tail.head\n            val m5 = l.tail.tail.tail.tail.tail.head\n\
    \            val m6 = l.tail.tail.tail.tail.tail.tail.head\n            val m7\
    \ = l.tail.tail.tail.tail.tail.tail.tail.head\n            val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n  \
    \          val m10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m11 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val m16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3ax36y3r.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3ax36y3r.scala:46:0 ----------------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ax36y3r.scala:45:1 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp3ax36y3r.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 0) true\n        else if (n == 1) false\n        else {\n    \
    \        val m = l.head\n            var i = 1\n            while (i < n) {\n\
    \                if (l(i) < m) i = i + 1\n                else m = m\n       \
    \     }\n            if (i == n) true\n            else false\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpa3ggixq_.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m m = m\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ Reassignment to val m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 0) true\n        else {\n            val m = l.head\n        \
    \    val i = 2\n            val j = n - 1\n            val k = n - 1\n       \
    \     while (i <= j) {\n                val x = l(i)\n                val y =\
    \ l(j)\n                if (x < y) i -= 1\n                else if (x > y) j +=\
    \ 1\n                else if (x == y) k += 1\n                else {\n       \
    \             val z = l(i)\n                    val w = l(j)\n               \
    \     if (z < w) i -= 1\n                    else if (z > w) j += 1\n        \
    \            else if (z == w) k += 1\n                    else return false\n\
    \                }\n            }\n            if (k == n) return true\n     \
    \       else return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93vgwtq2.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (x < y) i -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value -= is not a member of Int - did you mean i.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp93vgwtq2.scala:23:34 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (x > y)\
    \ j += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                ^^^^\e\
    [0m\n\e[31m   |\e[0m                    value += is not a member of Int - did\
    \ you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93vgwtq2.scala:24:35\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (x == y) k += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                    value +=\
    \ is not a member of Int - did you mean k.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp93vgwtq2.scala:28:33 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                    \e[33mif\e[0m (z < w) i -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m       \
    \             value -= is not a member of Int - did you mean i.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp93vgwtq2.scala:29:38 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (z\
    \ > w) j += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                    value += is not a member\
    \ of Int - did you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93vgwtq2.scala:30:39\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    \e[33melse\e\
    [0m \e[33mif\e[0m (z == w) k += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean k.!=?\n6 errors found\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        if (m.isDefined && n.isEmpty) true\n        else\
    \ if (m.isDefined && n.isDefined) m.get <= n.head\n        else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp746khcor.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.isDefined && n.isEmpty) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value isDefined is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp746khcor.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.isDefined && n.isDefined) m.get\
    \ <= n.head\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                 value isDefined is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp746khcor.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.isDefined &&\
    \ n.isDefined) m.get <= n.head\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           value get is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        if (m > n) true\n        else if (m < n) false\n\
    \        else monotonic(l.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmcay1jsc.scala:19)\n\tat Problem.main(tmpmcay1jsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.sortWith(_ < _)\n        val l3 = l2.reverse\n        val\
    \ l4 = l3.sortWith(_ < _)\n        val l5 = l4.reverse\n        val l6 = l5.sortWith(_\
    \ < _)\n        val l7 = l6.reverse\n        val l8 = l7.sortWith(_ < _)\n   \
    \     val l9 = l8.reverse\n        val l10 = l9.sortWith(_ < _)\n        val l11\
    \ = l10.reverse\n        val l12 = l11.sortWith(_ < _)\n        val l13 = l12.reverse\n\
    \        val l14 = l13.sortWith(_ < _)\n        val l15 = l14.reverse\n      \
    \  val l16 = l15.sortWith(_ < _)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortWith(_ < _)\n        val l19 = l18.reverse\n        val l20 = l19.sortWith(_\
    \ < _)\n        val l21 = l20.reverse\n        val l22 = l21.sortWith(_ < _)\n\
    \        val l23 = l22.reverse\n        val l24 = l23.sortWith(_ < _)\n      \
    \  val l25 = l24.reverse\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortWith(_ < _)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortWith(_ < _)\n        val l31 = l30.reverse\n      \
    \  val l32 = l31.sortWith(_ < _)\n        val l33 = l32.reverse\n        val l34\
    \ = l33.sortWith(_ < _)\n        val l35 = l34.reverse\n        val l36 = l35.sortWith(_\
    \ < _)\n        val l37 = l36.reverse\n        val l38 = l37.sortWith(_ < _)\n\
    \        val l39 = l38.reverse\n        val l40 = l39.sortWith(_ < _)\n      \
    \  val l41 = l40.reverse\n        val l42 = l41.sortWith(_ < _)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortWith(_ < _)\n        val l45 = l44.reverse\n\
    \        val l46 = l45\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1c4prjrf.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuedqqlx2.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuedqqlx2.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) monotonic(l.tail) else (m == n) && monotonic(l.tail)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjjgzhqkt.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjjgzhqkt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val n = l.length\n        val m = l.head\n        val r = l.tail\n    \
    \    val l1 = l.tail.drop(1)\n        val l2 = l.tail.drop(2)\n        val l3\
    \ = l.tail.drop(3)\n        val l4 = l.tail.drop(4)\n        val l5 = l.tail.drop(5)\n\
    \        val l6 = l.tail.drop(6)\n        val l7 = l.tail.drop(7)\n        val\
    \ l8 = l.tail.drop(8)\n        val l9 = l.tail.drop(9)\n        val l10 = l.tail.drop(10)\n\
    \        val l11 = l.tail.drop(11)\n        val l12 = l.tail.drop(12)\n      \
    \  val l13 = l.tail.drop(13)\n        val l14 = l.tail.drop(14)\n        val l15\
    \ = l.tail.drop(15)\n        val l16 = l.tail.drop(16)\n        val l17 = l.tail.drop(17)\n\
    \        val l18 = l.tail.drop(18)\n        val l19 = l.tail.drop(19)\n      \
    \  val l20 = l.tail.drop(20)\n        val l21 = l.tail.drop(21)\n        val l22\
    \ = l.tail.drop(22)\n        val l23 = l.tail.drop(23)\n        val l24 = l.tail.drop(24)\n\
    \        val l25 = l.tail.drop(25)\n        val l26 = l.tail.drop(26)\n      \
    \  val l27 = l.tail.drop(27)\n        val l28 = l.tail.drop(28)\n        val l29\
    \ = l.tail.drop(29)\n        val l30 = l.tail.drop(30)\n        val l31 = l.tail.drop(31)\n\
    \        val l32 = l.tail.drop(32)\n        val l33 = l.tail.drop(33)\n      \
    \  val l34 = l.tail.drop(34)\n        val l35 = l.tail.drop(35)\n        val l36\
    \ = l.tail.drop(36)\n        val l37 = l.tail.drop(37)\n        val l38 = l.tail.drop(38)\n\
    \        val l39 = l.tail.drop(39)\n        val l40 = l.tail.drop(40)\n      \
    \  val l41 = l.tail.drop(41)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkcd9oxkc.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkcd9oxkc.scala:57:5 ---------------------\e[0m\e\
    [0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val n = l.size\n        val m = l.head\n        var i = 1;\n        var\
    \ j = 1;\n        var k = 1;\n        var l = 1;\n        var m = 1;\n       \
    \ var k = 1;\n        var j = 1;\n        var i = 1;\n        var l = 1;\n   \
    \     var m = 1;\n        var k = 1;\n        var j = 1;\n        var i = 1;\n\
    \        var l = 1;\n        var m = 1;\n        var k = 1;\n        var j = 1;\n\
    \        var i = 1;\n        var l = 1;\n        var m = 1;\n        var k = 1;\n\
    \        var j = 1;\n        var i = 1;\n        var l = 1;\n        var m = 1;\n\
    \        var k = 1;\n        var j = 1;\n        var i = 1;\n        var l = 1;\n\
    \        var m = 1;\n        var k = 1;\n        var j = 1;\n        var i = 1;\n\
    \        var l = 1;\n        var m = 1;\n        var k = 1;\n        var j = 1;\n\
    \        var i = 1;\n        var l = 1;\n        var m = 1;\n        var k = 1;\n\
    \        var j = 1;\n        var i = 1;\n        var l = 1;\n        var m = 1;\n\
    \        var k = 1;\n        var j = 1;\n        var i = 1;\n        var l = 1;\n\
    \        var m = 1;\n        var k = 1;\n        var j = 1;\n        var i = 1;\n\
    \        var l = 1;\n        var m = 1;\n        var k = 1;\n        var j = 1;\n\
    \        var i = 1;\n        var l = 1;\n        var m = 1;\n        var k = 1;\n\
    \        var j = 1;\n        var i = 1;\n        var l = 1;\n        var m = 1;\n\
    \        var k = 1;\n        var j = 1;\n        var i = 1;\n        var l = 1;\n\
    \        var m = 1;\n        var k = 1;\n        var j = 1;\n        var i = 1;\n\
    \        var l = 1;\n        var m = 1;\n        var k = 1;\n        var j = 1;\n\
    \        var i = 1;\n        var l = 1;\n        var m = 1;\n        var k = 1;\n\
    \        var j = 1;\n        var i = 1;\n        var l = 1;\n        var m = 1;\n\
    \        var k = 1;\n        var j = 1;\n        var i = 1;\n        var l = 1;\n\
    \        var m = 1;\n        var k = 1;\n        var j = 1;\n        var i = 1;\n\
    \        var l = 1;\n        var m = 1;\n        var k = 1;\n        var j = 1;\n\
    \        var i = 1;\n        var l = 1;\n        var m = 1;\n        var k = 1;\n\
    \        var j = 1;\n        var i = 1;\n        var l = 1;\n        var m = 1;\n\
    \        var k = 1;\n        var j = 1;\n        var i = 1;\n        var l = 1;\n\
    \        var m = 1;\n        var k = 1;\n        var j = 1;\n        var i = 1;\n\
    \        var l = 1;\n        var m = 1;\n        var k = 1;\n        var j = 1;\n\
    \        var i = 1;\n        var l = 1;\n        var m = 1;\n        var k = 1;\n\
    \        var j = 1;\n        var i = 1;\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5wz6u_5k.scala:138:11 --------------------------\e\
    [0m\e[0m\n\e[31m138 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wz6u_5k.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wz6u_5k.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wz6u_5k.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wz6u_5k.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wz6u_5k.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.toList\n        val l4 = l3.reverse\n\
    \        val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.reverse\n\
    \        val l8 = l7.toList\n        val l9 = l8.reverse\n        val l10 = l9.toList\n\
    \        val l11 = l10.reverse\n        val l12 = l11.toList\n        val l13\
    \ = l12.reverse\n        val l14 = l13.toList\n        val l15 = l14.reverse\n\
    \        val l16 = l15.toList\n        val l17 = l16.reverse\n        val l18\
    \ = l17.toList\n        val l19 = l18.reverse\n        val l20 = l19.toList\n\
    \        val l21 = l20.reverse\n        val l22 = l21.toList\n        val l23\
    \ = l22.reverse\n        val l24 = l23.toList\n        val l25 = l24.reverse\n\
    \        val l26 = l25.toList\n        val l27 = l26.reverse\n        val l28\
    \ = l27.toList\n        val l29 = l28.reverse\n        val l30 = l29.toList\n\
    \        val l31 = l30.reverse\n        val l32 = l31.toList\n        val l33\
    \ = l32.reverse\n        val l34 = l33.toList\n        val l35 = l34.reverse\n\
    \        val l36 = l35.toList\n        val l37 = l36.reverse\n        val l38\
    \ = l37.toList\n        val l39 = l38.reverse\n        val l40 = l39.toList\n\
    \        val l41 = l40.reverse\n        val l42 = l41.toList\n        val l43\
    \ = l42.reverse\n        val l44 = l43.toList\n        val l45 = l44.reverse\n\
    \        val l46 = l45.toList\n        val l47 = l46.reverse\n        val l48\
    \ = l47.toList\n        val l49 = l48.reverse\n        val l50 = l49.toList\n\
    \        val l51 = l50.reverse\n        val l52 = l51.toList\n        val l53\
    \ = l52.reverse\n        val l54 = l53.toList\n        val l55 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpymxowke2.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymxowke2.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        if (m > n) monotonic(l.tail) else monotonic(l.tail.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpr1_vbh8a.scala:12)\n\
    \tat Problem$.main(tmpr1_vbh8a.scala:17)\n\tat Problem.main(tmpr1_vbh8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l = l.toList\n  \
    \      val len = l.length\n        val m = len / 2\n        var i = 0\n      \
    \  var j = 0\n        var k = 0\n        var l = 0\n        var m1 = m\n     \
    \   var m2 = m\n        var m3 = m\n        var m4 = m\n        var m5 = m\n \
    \       var m6 = m\n        var m7 = m\n        var m8 = m\n        var m9 = m\n\
    \        var m10 = m\n        var m11 = m\n        var m12 = m\n        var m13\
    \ = m\n        var m14 = m\n        var m15 = m\n        var m16 = m\n       \
    \ var m17 = m\n        var m18 = m\n        var m19 = m\n        var m20 = m\n\
    \        var m21 = m\n        var m22 = m\n        var m23 = m\n        var m24\
    \ = m\n        var m25 = m\n        var m26 = m\n        var m27 = m\n       \
    \ var m28 = m\n        var m29 = m\n        var m30 = m\n        var m31 = m\n\
    \        var m32 = m\n        var m33 = m\n        var m34 = m\n        var m35\
    \ = m\n        var m36 = m\n        var m37 = m\n        var m38 = m\n       \
    \ var m39 = m\n        var m40 = m\n        var m41 = m\n        var m42 = m\n\
    \        var m43 = m\n        var m44 = m\n        var m45 = m\n        var m46\
    \ = m\n        var m47 = m\n        var m48 = m\n        var m49 = m\n       \
    \ var m50 = m\n        var m51 = m\n        var m52 = m\n        var m53 = m\n\
    \        var m54 = m\n        var m55 = m\n        var m56 = m\n        var m57\
    \ = m\n        var m58 = m\n        var m59 = m\n        var m60 = m\n       \
    \ var m61 = m\n        var m62 = m\n        var m63 = m\n        var m64 = m\n\
    \        var m65 = m\n        var m66 = m\n        var m67 = m\n        var m68\
    \ = m\n        var m69 = m\n        var m70 = m\n        var m71 = m\n       \
    \ var m72 = m\n        var m73 = m\n        var m74 = m\n        var m75 = m\n\
    \        var m76 = m\n        var m77 = m\n        var m78 = m\n        var m79\
    \ = m\n        var m80 = m\n        var m81 = m\n        var m82 = m\n       \
    \ var m83 = m\n        var m84 = m\n        var m85 = m\n        var m86 = m\n\
    \        var m87 = m\n        var m88 = m\n        var m89 = m\n        var m90\
    \ = m\n        var m91 = m\n        var m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuk6_yylw.scala:111:4 ---------------------------\e\
    [0m\e[0m\n\e[31m111 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuk6_yylw.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36ml\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuk6_yylw.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk6_yylw.scala:111:5\
    \ --------------------\e[0m\e[0m\n\e[31m111 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66shoy2u.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) true\n        else (m == n) && monotonic(l.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmeenhbv.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmeenhbv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4la7hsxi.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m - n\n        val n = n - m\n     \
    \   val m = m - n\n        val n = n - m\n        val m = m - n\n        val n\
    \ = n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n        val n = n - m\n        val m = m - n\n        val n =\
    \ n - m\n        val m = m - n\n        val n = n - m\n        val m = m - n\n\
    \        val n = n - m\n        val m = m - n\n        val n = n - m\n       \
    \ val m = m - n\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp249qoj9c.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.foldLeft(0L)\
    \ { (sum, e) =>\n            val newSum = sum + e\n            if (newSum < 0)\
    \ newSum\n            else newSum\n        }\n        m == l.last\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0ij9hxl.scala:20)\n\tat Problem.main(tmpw0ij9hxl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val l1 = l.toList\n \
    \       val l2 = l1.reverse\n        val l3 = l2.reverse\n        val l4 = l3.reverse\n\
    \        val l5 = l4.reverse\n        val l6 = l5.reverse\n        val l7 = l6.reverse\n\
    \        val l8 = l7.reverse\n        val l9 = l8.reverse\n        val l10 = l9.reverse\n\
    \        val l11 = l10.reverse\n        val l12 = l11.reverse\n        val l13\
    \ = l12.reverse\n        val l14 = l13.reverse\n        val l15 = l14.reverse\n\
    \        val l16 = l15.reverse\n        val l17 = l16.reverse\n        val l18\
    \ = l17.reverse\n        val l19 = l18.reverse\n        val l20 = l19.reverse\n\
    \        val l21 = l20.reverse\n        val l22 = l21.reverse\n        val l23\
    \ = l22.reverse\n        val l24 = l23.reverse\n        val l25 = l24.reverse\n\
    \        val l26 = l25.reverse\n        val l27 = l26.reverse\n        val l28\
    \ = l27.reverse\n        val l29 = l28.reverse\n        val l30 = l29.reverse\n\
    \        val l31 = l30.reverse\n        val l32 = l31.reverse\n        val l33\
    \ = l32.reverse\n        val l34 = l33.reverse\n        val l35 = l34.reverse\n\
    \        val l36 = l35.reverse\n        val l37 = l36.reverse\n        val l38\
    \ = l37.reverse\n        val l39 = l38.reverse\n        val l40 = l39.reverse\n\
    \        val l41 = l40.reverse\n        val l42 = l41.reverse\n        val l43\
    \ = l42.reverse\n        val l44 = l43.reverse\n        val l45 = l44.reverse\n\
    \        val l46 = l45.reverse\n        val l47 = l46.reverse\n        val l48\
    \ = l47.reverse\n        val l49 = l48.reverse\n        val l50 = l49.reverse\n\
    \        val l51 = l50.reverse\n        val l52 = l51.reverse\n        val l53\
    \ = l52.reverse\n        val l54 = l53.reverse\n        val l55 = l54.reverse\n\
    \        val l56 = l55.reverse\n        val l57 = l56.reverse\n        val l58\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwp_o4p4x.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwp_o4p4x.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.drop(1)\n        val l2 = l.tail.dropRight(1)\n\
    \        val l3 = l.tail.dropRight(2)\n        val l4 = l.tail.dropRight(3)\n\
    \        val l5 = l.tail.dropRight(4)\n        val l6 = l.tail.dropRight(5)\n\
    \        val l7 = l.tail.dropRight(6)\n        val l8 = l.tail.dropRight(7)\n\
    \        val l9 = l.tail.dropRight(8)\n        val l10 = l.tail.dropRight(9)\n\
    \        val l11 = l.tail.dropRight(10)\n        val l12 = l.tail.dropRight(11)\n\
    \        val l13 = l.tail.dropRight(12)\n        val l14 = l.tail.dropRight(13)\n\
    \        val l15 = l.tail.dropRight(14)\n        val l16 = l.tail.dropRight(15)\n\
    \        val l17 = l.tail.dropRight(16)\n        val l18 = l.tail.dropRight(17)\n\
    \        val l19 = l.tail.dropRight(18)\n        val l20 = l.tail.dropRight(19)\n\
    \        val l21 = l.tail.dropRight(20)\n        val l22 = l.tail.dropRight(21)\n\
    \        val l23 = l.tail.dropRight(22)\n        val l24 = l.tail.dropRight(23)\n\
    \        val l25 = l.tail.dropRight(24)\n        val l26 = l.tail.dropRight(25)\n\
    \        val l27 = l.tail.dropRight(26)\n        val l28 = l.tail.dropRight(27)\n\
    \        val l29 = l.tail.dropRight(28)\n        val l30 = l.tail.dropRight(29)\n\
    \        val l31 = l.tail.dropRight(30)\n        val l32 = l.tail.dropRight(31)\n\
    \        val l33 = l.tail.dropRight(32)\n        val l34 = l.tail.dropRight(33)\n\
    \        val l35 = l.tail.dropRight(34)\n        val l36 = l.tail.dropRight(35)\n\
    \        val l37 = l.tail.dropRight(36)\n        val l38 = l.tail.dropRight(37)\n\
    \        val l39 = l.tail.dropRight(38)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs30uju2.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnre8suvz.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnre8suvz.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.head\n    \
    \    val n = l.tail.head\n        val m = m.toLong\n        val n = n.toLong\n\
    \        if (m > n) true\n        else if (m == n) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2h0qmzpu.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2h0qmzpu.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val m = l.length\n  \
    \      if (m == 0) true\n        else {\n            val m1 = m - 1 // m1 is the\
    \ index of the first element greater than the last\n            val m2 = m - 2\
    \ // m2 is the index of the first element less than the last\n            val\
    \ m3 = m - 3 // m3 is the index of the first element equal to the last\n     \
    \       val m4 = m - 4 // m4 is the index of the first element greater than the\
    \ last\n            val m5 = m - 5 // m5 is the index of the first element less\
    \ than the last\n            val m6 = m - 6 // m6 is the index of the first element\
    \ equal to the last\n            val m7 = m - 7 // m7 is the index of the first\
    \ element greater than the last\n            val m8 = m - 8 // m8 is the index\
    \ of the first element less than the last\n            val m9 = m - 9 // m9 is\
    \ the index of the first element equal to the last\n            val m10 = m -\
    \ 10 // m10 is the index of the first element greater than the last\n        \
    \    val m11 = m - 11 // m11 is the index of the first element less than the last\n\
    \            val m12 = m - 12 // m12 is the index of the first element equal to\
    \ the last\n            val m13 = m - 13 // m13 is the index of the first element\
    \ greater than the last\n            val m14 = m - 14 // m14 is the index of the\
    \ first element less than the last\n            val m15 = m - 15 // m15 is the\
    \ index of the first element equal to the last\n            val m16 = m - 16 //\
    \ m16 is the index of the first element greater than the last\n            val\
    \ m17 = m - 17 // m17 is the index of the first element less than the last\n \
    \           val m18 = m - 18 // m18 is the index of the first element equal to\
    \ the last\n            val m19 = m - 19 // m19 is the index of the first element\
    \ greater than the last\n            val m20 = m - 20 // m20 is the index of the\
    \ first element less than the last\n            val m21 = 0 // m21 is the index\
    \ of the first element greater than the last\n            val m22 = 0 // m22 is\
    \ the index of the first element less than the last\n            val m23 = 0 //\
    \ m23 is the index of the first element equal to the last\n            val m24\
    \ = 0 // m24 is the index of the first element greater than the last\n       \
    \     val m25 = 0 // m25 is the index of the first element less than the last\n\
    \            val m26 = 0 // m26 is the index of the first element equal to the\
    \ last\n            val m27 = 0 // m27 is the index of the first element greater\
    \ than the last\n            val m28 = 0 // m28 is the index of the first element\
    \ less than the last\n            val m29 = 0 // m29 is the index of the first\
    \ element equal to the last\n            val m30 = 0 // m30 is the index of the\
    \ first element greater than the last\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpujoa0zdj.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujoa0zdj.scala:58:1\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpujoa0zdj.scala:47:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659799872
