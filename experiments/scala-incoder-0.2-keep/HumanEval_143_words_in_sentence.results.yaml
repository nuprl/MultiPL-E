language: scala
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => x.length)\n\
    \        val primesSet = primes.toSet\n        val result = primes.filter(x =>\
    \ primesSet.contains(x)).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphf4se46q.scala:26)\n\tat Problem.main(tmphf4se46q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x > 1 && x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc,\
    \ prime) => acc + prime + \" \" + words.filter(_.length == prime).mkString(\"\
    \ \"))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsk3hb0rc.scala:25)\n\tat Problem.main(tmpsk3hb0rc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    if(length == 2 || length == 3 || length == 5 || length == 7) {\n        \
    \        result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ax_gmch.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += word\n            }\n\
    \        }\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplt250460.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplt250460.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")((acc, prime)\
    \ => acc + (prime + \" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0dfumpu.scala:25)\n\tat Problem.main(tmpi0dfumpu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val length = word.length\n     \
    \       val prime = length.toInt\n            val isPrime = true\n           \
    \ for(i <- 2 to prime) {\n                if(length % i == 0) {\n            \
    \        isPrime = false\n                    break\n                }\n     \
    \       }\n            if(isPrime) {\n                result += word\n       \
    \     }\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqlm4_6w.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfqlm4_6w.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqlm4_6w.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => x + 1)\n        val result = primes.filter(x => words.count(y\
    \ => y == x.toString) == primes.count(y => y == x.toString + \" \"))\n       \
    \ words.filter(x => words.count(y => y == x.toString + \" \") == primes.count(y\
    \ => y == x.toString)).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnj6ii_1x.scala:21:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(\e[36my\e[0m => y == x.toString) == primes.count(\e\
    [36my\e[0m => y == x.toString + \e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of\
    \ types Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpnj6ii_1x.scala:22:87 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => words.count(\e[36my\e\
    [0m => y == x.toString + \e[31m\" \"\e[0m) == primes.count(\e[36my\e[0m => y ==\
    \ x.toString)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                                                                          ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmuzhptz.scala:25)\n\tat Problem.main(tmpsmuzhptz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => prime(x))\n\
    \        val result = primes.filter(x => words.count(y => x == y) == 1).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpen0eo2yz.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => x * x)\n        val result = primes.filter(x => words.count(_.length\
    \ == x) == primes.length).map(x => words.find(_.length == x).mkString(\" \"))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptvhspd9t.scala:25)\n\tat Problem.main(tmptvhspd9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps85m68v2.scala:25)\n\tat Problem.main(tmps85m68v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val primesSet = primes.toSet\n        val result = words.filter(word\
    \ => primesSet.contains(word.length))\n        result.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03t4rqiz.scala:26)\n\tat Problem.main(tmp03t4rqiz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0)\n        val result = primes.map(x => words.filter(y => y.length\
    \ == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjprwk3h.scala:25)\n\tat Problem.main(tmppjprwk3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + words.filter(_.length == prime).mkString(\" \"))\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy3we1p6o.scala:25)\n\tat Problem.main(tmpy3we1p6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph62byhxx.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val len = word.length\n           \
    \ val primes = primeFactors(len)\n            for(prime <- primes) {\n       \
    \         if(len % prime == 0) {\n                    result.add(word)\n     \
    \               break\n                }\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4dqm0ay9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4dqm0ay9.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(len)\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x > 1).distinct\n        val result = primes.foldLeft(\"\")((acc, prime)\
    \ => acc + (prime + \" \"))\n        result + words.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg0owyze_.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toInt)\n        val primes = words.filter(x => isPrime(x)).map(x\
    \ => x.toString)\n        val result = primes.mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7g144lg.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString)\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                 Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    if(isPrime(length)) {\n                result += (word + \" \")\n       \
    \     }\n        }\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvk4sym8i.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvk4sym8i.scala:23:15\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(isPrime(length))\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \        Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsszdjvgx.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime.toString)\n        result + words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1xsldh_.scala:25)\n\tat Problem.main(tmpa1xsldh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ val result2 = words.filter(x => x % 2 == 0).mkString(\" \")\n        result\
    \ + result2\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21tbw04u.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = words.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ result + words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4agfv0t5.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val isPrime = true\n            for(i <- 2 to length) {\n               \
    \ if(length%i == 0) {\n                    isPrime = false\n                 \
    \   break\n                }\n            }\n            if(isPrime) {\n     \
    \           result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3xd_909.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz3xd_909.scala:26:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3xd_909.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x > 1).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + \" \" + words.filter(_.length == prime).mkString(\" \"))\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgzdcpgco.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        val primesSet2 = mutable.Set[Int]()\n        val primesSet3 = mutable.Set[Int]()\n\
    \        val primesSet4 = mutable.Set[Int]()\n        val primesSet5 = mutable.Set[Int]()\n\
    \        val primesSet6 = mutable.Set[Int]()\n        val primesSet7 = mutable.Set[Int]()\n\
    \        val primesSet8 = mutable.Set[Int]()\n        val primesSet9 = mutable.Set[Int]()\n\
    \        val primesSet10 = mutable.Set[Int]()\n        val primesSet11 = mutable.Set[Int]()\n\
    \        val primesSet12 = mutable.Set[Int]()\n        val primesSet13 = mutable.Set[Int]()\n\
    \        val primesSet14 = mutable.Set[Int]()\n        val primesSet15 = mutable.Set[Int]()\n\
    \        val primesSet16 = mutable.Set[Int]()\n        val primesSet17 = mutable.Set[Int]()\n\
    \        val primesSet18 = mutable.Set[Int]()\n        val primesSet19 = mutable.Set[Int]()\n\
    \        val primesSet20 = mutable.Set[Int]()\n        val primesSet21 = mutable.Set[Int]()\n\
    \        val primesSet22 = mutable.Set[Int]()\n        val primesSet23 = mutable.Set[Int]()\n\
    \        val primesSet24 = mutable.Set[Int]()\n        val primesSet25 = mutable.Set[Int]()\n\
    \        val primesSet26 = mutable.Set[Int]()\n        val primesSet27 = mutable.Set[Int]()\n\
    \        val primesSet28 = mutable.Set[Int]()\n        val primesSet29 = mutable.Set[Int]()\n\
    \        val primesSet30 = mutable.Set[Int]()\n        val primesSet31 = mutable.Set[Int]()\n\
    \        val primesSet32 = mutable.Set[Int]()\n        val primesSet33 = mutable.Set[Int]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659794072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primeFactors(length)\n            for(prime <- primes) {\n \
    \               if(length == prime) {\n                    result += (word + \"\
    \ \")\n                }\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmezsmlov.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmezsmlov.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val len = word.length\n          \
    \  if (len == 1) result.add(word)\n            else if (len == 2 && word.head\
    \ == word.last) result.add(word)\n            else if (!isPrime(len)) result.add(word)\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskz2i_4v.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskz2i_4v.scala:25:22\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (!isPrime(len)) result.add(word)\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(x => x.length == prime).mkString(\" \"\
    ))\n        primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + words.filter(x\
    \ => x.length == prime).mkString(\" \"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfa32wp55.scala:25)\n\tat Problem.main(tmpfa32wp55.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x > 1).distinct\n        val result = primes.map(x => words.filter(_.length\
    \ == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7vzojzr.scala:25)\n\tat Problem.main(tmph7vzojzr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        words.filter(_.length\
    \ == result.length).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiloahu7c.scala:25)\n\tat Problem.main(tmpiloahu7c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val isPrime = length == 2 || length == 3 || length == 5 || length == 7 ||\
    \ length == 11 || length == 13\n            if(isPrime) {\n                result\
    \ += word\n            }\n        }\n        result mkString \" \"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy952kacn.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ > 1).mkString(\" \")\n        val newWords\
    \ = words.filter(_ => primes.contains(_.length))\n        val newResult = newWords.mkString(\"\
    \ \")\n        result + newResult\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpzheyykv6.scala:22:57 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = words.filter(_\
    \ => primes.contains(_.length))\n\e[31m\e[31m   |\e[0m                       \
    \                                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$5 of expanded function:\n\e[31m   |\e[0m   _$5 => _$5.length.\n1 error found\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primes(length)\n            for(prime <- primes) {\n       \
    \         if(prime == length) {\n                    result.add(word)\n      \
    \          }\n            }\n        }\n        result.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmply1sybp_.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val resultSet = mutable.Set[Int]()\n        words.foreach(word\
    \ => {\n            val length = word.length\n            val isPrime = length\
    \ == 2 || length == 3 || length == 5\n            if(isPrime) {\n            \
    \    resultSet += length\n            }\n        })\n        resultSet.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy3j16sw.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val primes = primeFactors(length)\n            if (primes.contains(length))\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dmcu51m.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dmcu51m.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.nonEmpty)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqoldfs58.scala:25)\n\tat Problem.main(tmpqoldfs58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        primes.filter(_\
    \ % 2 == 1).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8sxg9_fg.scala:25)\n\tat Problem.main(tmp8sxg9_fg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for(word\
    \ <- words) {\n            val length = word.length\n            val prime = primes.find(p\
    \ => p < length)\n            if(prime == None) {\n                result.add(word)\n\
    \            } else {\n                val primeLength = prime.get\n         \
    \       val isPrime = true\n                for(i <- 0 until primeLength) {\n\
    \                    if(word.charAt(i) != word.charAt(primeLength - i)) {\n  \
    \                      isPrime = false\n                        break\n      \
    \              }\n                }\n                if(isPrime) {\n         \
    \           result.add(word)\n                }\n            }\n        }\n  \
    \      result.toList().mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4cpt5mr.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4cpt5mr.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpk4cpt5mr.scala:32:32 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                        isPrime = \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpk4cpt5mr.scala:33:24 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => x + 1)\n        val result = primes.foldLeft(\"\")(\
    \ (acc, prime) => acc + (prime + \" \"))\n        result + words.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg1wnsbvb.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pkw8a3a.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 2 || length == 3 || length == 5 || length == 7 || length ==\
    \ 11 || length == 13 || length == 17 || length == 19 || length == 23) {\n    \
    \            result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcpyy6d7.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(x => x.length)\n     \
    \   val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvi7hs4jl.scala:25)\n\tat Problem.main(tmpvi7hs4jl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794080
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps85m68v2.scala:25)\n\tat Problem.main(tmps85m68v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        result + words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk5f4jz8l.scala:25)\n\tat Problem.main(tmpk5f4jz8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).toList\n        val result = primes.map(x => words.filter(y =>\
    \ y.length == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20pjhbzs.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primes(length)\n            for(prime <- primes) {\n       \
    \         if(length == prime) {\n                    result += (word + \" \")\n\
    \                }\n            }\n        }\n        result mkString \" \"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikmzjtfu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 2 || length == 3 || length == 5 || length == 7 || length ==\
    \ 11) {\n                result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikxw5zs9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 != 0).map(x => \" \" + x).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkpv3rci.scala:25)\n\tat Problem.main(tmpgkpv3rci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val prime = word.filter(_ <= 1).length\n\
    \            if(prime == 1) {\n                result += (word + \" \")\n    \
    \        }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnv0yjbk.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.ListBuffer[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        val primesSet2 = mutable.Set[Int]()\n        val primesSet3 = mutable.Set[Int]()\n\
    \        val primesSet4 = mutable.Set[Int]()\n        val primesSet5 = mutable.Set[Int]()\n\
    \        val primesSet6 = mutable.Set[Int]()\n        val primesSet7 = mutable.Set[Int]()\n\
    \        val primesSet8 = mutable.Set[Int]()\n        val primesSet9 = mutable.Set[Int]()\n\
    \        val primesSet10 = mutable.Set[Int]()\n        val primesSet11 = mutable.Set[Int]()\n\
    \        val primesSet12 = mutable.Set[Int]()\n        val primesSet13 = mutable.Set[Int]()\n\
    \        val primesSet14 = mutable.Set[Int]()\n        val primesSet15 = mutable.Set[Int]()\n\
    \        val primesSet16 = mutable.Set[Int]()\n        val primesSet17 = mutable.Set[Int]()\n\
    \        val primesSet18 = mutable.Set[Int]()\n        val primesSet19 = mutable.Set[Int]()\n\
    \        val primesSet20 = mutable.Set[Int]()\n        val primesSet21 = mutable.Set[Int]()\n\
    \        val primesSet22 = mutable.Set[Int]()\n        val primesSet23 = mutable.Set[Int]()\n\
    \        val primesSet24 = mutable.Set[Int]()\n        val primesSet25 = mutable.Set[Int]()\n\
    \        val primesSet26 = mutable.Set[Int]()\n        val primesSet27 = mutable.Set[Int]()\n\
    \        val primesSet28 = mutable.Set[Int]()\n        val primesSet29 = mutable.Set[Int]()\n\
    \        val primesSet30 = mutable.Set[Int]()\n        val primesSet31 = mutable.Set[Int]()\n\
    \        val primesSet32 = mutable.Set[Int]()\n        val primesSet33 = mutable.Set[Int\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_3x8abl.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_3x8abl.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv_3x8abl.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv_3x8abl.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpv_3x8abl.scala:23:25 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_3x8abl.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1659794082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8zfux_9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8zfux_9.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5opwvb0y.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => x ==\
    \ y) == 1).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy3vkuxp.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsy3vkuxp.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime).toList\n\
    \        val result = primes.map(words => words.mkString(\" \")).mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwpevseex.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwpevseex.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwpevseex.scala:21:47\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mwords\e[0m => words.mkString(\e[31m\" \"\e\
    [0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value mkString is\
    \ not a member of Int - did you mean words.toString?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toInt)\n        val primes = words.filter(x => x\
    \ % 2 != 0).map(x => x)\n        val result = primes.map(x => words.filter(y =>\
    \ y == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpvz0vw43_.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.wordsInSentence(tmpvz0vw43_.scala:19)\n\
    \tat Problem$.main(tmpvz0vw43_.scala:25)\n\tat Problem.main(tmpvz0vw43_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        result + words.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9inx5984.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794086
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toInt)\n        val primes = words.filter(x => x\
    \ % 2 != 0)\n        val result = primes.mkString(\" \")\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmplt7jc7ha.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.wordsInSentence(tmplt7jc7ha.scala:19)\n\
    \tat Problem$.main(tmplt7jc7ha.scala:25)\n\tat Problem.main(tmplt7jc7ha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        primes.foldLeft(\"\")( (acc, prime) => acc\
    \ + prime + \" \" )\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcrp8kflt.scala:25)\n\tat Problem.main(tmpcrp8kflt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toInt)\n        val primes = words.filter(x => x\
    \ % 2 != 0).map(x => x)\n        val result = primes.map(x => words.filter(y =>\
    \ y % x == 0).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpwiv4pq2x.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.wordsInSentence(tmpwiv4pq2x.scala:19)\n\
    \tat Problem$.main(tmpwiv4pq2x.scala:25)\n\tat Problem.main(tmpwiv4pq2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        result + words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq1h2rga.scala:25)\n\tat Problem.main(tmpkq1h2rga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val primes = primeFactors(length)\n            if (primes.contains(length))\
    \ {\n                result.add(word)\n            }\n        }\n        result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprgm6o_dc.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprgm6o_dc.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x > 1).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + (prime + \" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw1xrtjvk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpss0wmtou.scala:25)\n\tat Problem.main(tmpss0wmtou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7v7ks48f.scala:25)\n\tat Problem.main(tmp7v7ks48f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.map(x => words.filter(_.length\
    \ == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk04zfmh_.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5opwvb0y.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            primesSet += prime\n            primes\
    \ += prime\n            for(i <- 2 to length) {\n                if(prime % i\
    \ == 0) {\n                    primesSet += i\n                    primes += i\n\
    \                }\n            }\n        }\n        primes.toList.sortWith(_\
    \ < _)\n        primesSet.foreach(prime => {\n            val index = primes.indexOf(prime)\n\
    \            val word = words(index)\n            result += word\n        })\n\
    \        result.toString()\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwwae21r.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwwae21r.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwwae21r.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val len = word.length\n           \
    \ val isPrime = len == 2 || len == 3 || len == 5 || len == 7 || len == 11 || len\
    \ == 13\n            if(isPrime) {\n                result += (word + \" \")\n\
    \            }\n        }\n        result mkString \" \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpni8q6fn1.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8zfux_9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8zfux_9.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794081
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 != 0).map(x => \" \" + x).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkpv3rci.scala:25)\n\tat Problem.main(tmpgkpv3rci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val primes = primeFactors(length)\n            if (primes.contains(length))\
    \ {\n                result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zqk2m_g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zqk2m_g.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ result + words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4agfv0t5.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 != 0).mkString(\" \")\n       \
    \ result + words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyswl0uwr.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => x.length)\n        val result = primes.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n        words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy75vgjrn.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy75vgjrn.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => x.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpny4xfv_o.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 != 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy0e2vdb9.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = scala.collection.mutable.Set[Int]()\n        val primesSet\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet2 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet3 = scala.collection.mutable.Set[Int]()\n        val primesSet4\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet5 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet6 = scala.collection.mutable.Set[Int]()\n        val primesSet7\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet8 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet9 = scala.collection.mutable.Set[Int]()\n        val primesSet10\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet11 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet12 = scala.collection.mutable.Set[Int]()\n        val primesSet13\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet14 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet15 = scala.collection.mutable.Set[Int]()\n        val primesSet16\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet17 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet18 = scala.collection.mutable.Set[Int]()\n        val primesSet19\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet20 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet21 = scala.collection.mutable.Set[Int]()\n        val primesSet22\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet23 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet24 = scala.collection.mutable.Set[Int]()\n        val primesSet25\
    \ = scala.collection.mutable.Set[Int]()\n        val primesSet26 = scala.collection.mutable.Set[Int]()\n\
    \        val primesSet27 = scala.collection.mutable.Set[Int\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7pcoz9nd.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7pcoz9nd.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7pcoz9nd.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val length = word.length\n     \
    \       val primes = primeFactors(length)\n            val primesString = primes.map(_.toString).mkString(\"\
    \ \")\n            val primesStringLength = primesString.length\n            val\
    \ primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesStringLength\
    \ = primesString.length\n            val primesStringLength = primesString.length\n\
    \            val primesStringLength = primesString.length\n            val primesString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwiecv6nq.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwiecv6nq.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpwiecv6nq.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwiecv6nq.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwiecv6nq.scala:23:25 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mval\e[0m \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += word\n            }\n\
    \        }\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplt250460.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplt250460.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        primes.toList.sortWith(_\
    \ < _).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4h2v8pu.scala:25)\n\tat Problem.main(tmpe4h2v8pu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => prime(x))\n\
    \        val result = primes.filter(x => words.count(y => prime(y) == x) == 1).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6epvnf0d.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6epvnf0d.scala:21:57\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.filter(\e[36mx\e[0m => words.count(\e[36my\e[0m => prime(y)\
    \ == x) == \e[31m1\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                                      ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                        Not found: prime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word + \" \")\n     \
    \       }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        result + words.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9inx5984.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5opwvb0y.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word + \" \")\n     \
    \       }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.Set[Int]()\n        for (word <- words) {\n    \
    \        val length = word.length\n            val isPrime = length == 2 || length\
    \ == 3 || length == 5 || length == 7 || length == 11 || length == 13\n       \
    \     if (isPrime) {\n                primes += length\n            }\n      \
    \  }\n        for (prime <- primes) {\n            val newWord = words.filter(word\
    \ => word.length == prime)\n            result.addAll(newWord)\n        }\n  \
    \      result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0izrb5rr.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0izrb5rr.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 != 0).mkString(\" \")\n        result\
    \ + words.filter(_.length == primes.max).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_eujxfw2.scala:25)\n\tat Problem.main(tmp_eujxfw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primeFactors(length)\n            val primesSet = primes.toSet\n\
    \            val primesSetIterator = primesSet.iterator\n            while(primesSetIterator.hasNext)\
    \ {\n                val prime = primesSetIterator.next\n                if(prime\
    \ % length == 0) {\n                    result.add(word)\n                }\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt566vh1g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt566vh1g.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => x * x)\n        val result = primes.filter(x => words.count(_\
    \ == x) == primes.length).mkString(\" \")\n        result + words.filter(x =>\
    \ words.count(_ == x) == primes.length).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpohta6d1z.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(_ == x) == primes.length).mkString(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 2 || length == 3 || length == 5 || length == 7 || length ==\
    \ 11) {\n                result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikxw5zs9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(word => words.filter(w => w.length == word.length\
    \ && w.startsWith(word))).flatten.mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmohl_gmn.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmohl_gmn.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmohl_gmn.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mword\e[0m => words.filter(\e[36mw\e[0m => w.length\
    \ == word.length && w.startsWith(word))).flatten.mkString(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \      value length is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659794097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            val isPrime = true\n            for(i\
    \ <- 2 to length.toInt) {\n                if(length.toInt % i == 0) {\n     \
    \               isPrime = false\n                    break\n                }\n\
    \            }\n            if(isPrime) {\n                result += word\n  \
    \          }\n        }\n        result mkString \" \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuyqh9zy6.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpuyqh9zy6.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuyqh9zy6.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val primesSet = primes.toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val prime = primes.find(_ == word.length)\n\
    \            if(prime != None) {\n                val primeSet = primes.find(_\
    \ == word.length)\n                if(primeSet == None) {\n                  \
    \  primes.find(_ == word.length)\n                } else {\n                 \
    \   primeSet.foreach(p => {\n                        primes.find(_ == p).foreach(p\
    \ => {\n                            primes.find(_ == word.length).foreach(p =>\
    \ {\n                                primes.find(_ == p).foreach(p => {\n    \
    \                                primes.find(_ == word.length).foreach(p => {\n\
    \                                        primes.find(_ == p).foreach(p => {\n\
    \                                            primes.find(_ == word.length).foreach(p\
    \ => {\n                                                primes.find(_ == p).foreach(p\
    \ => {\n                                                    primes.find(_ == word.length).foreach(p\
    \ => {\n                                                        primes.find(_\
    \ == p).foreach(p => {\n                                                     \
    \       primes.find(_ == word.length).foreach(p => {\n                       \
    \                                         primes.find(_ == p).foreach(p => {\n\
    \                                                                    primes.find(_\
    \ == word.length).foreach(p => {\n                                           \
    \                             primes.find(_ == p).foreach(p => {\n           \
    \                                                                 primes.find(_\
    \ == word.length).foreach(p => {\n                                           \
    \                                     primes.find(_ == p).foreach(p => {\n   \
    \                                                                            \
    \     primes.find(_ == word.length).foreach(p => {\n                         \
    \                                                               primes.find(_\
    \ == p).foreach(p => {\n                                                     \
    \                                       primes.find(_ == word.length).foreach(p\
    \ => {\n                                                                     \
    \                           primes.find(_ == p).foreach(p => {\n             \
    \                                                                            \
    \           primes.find(_ == word.length).foreach(p => {\n                   \
    \                                                                            \
    \         primes.find(_ == p).foreach(p => {\n                               \
    \                                                                            \
    \ primes.find(_ == word.length).foreach(p => {\n                             \
    \                                                                            \
    \       primes.find(_ == p).foreach(p => {\n                                 \
    \                                                                            \
    \       primes.find(_ == word.length).foreach(p => {\n                       \
    \                                                                            \
    \                     primes.find(_ == p).foreach(p => {\n                   \
    \                                                                            \
    \                             primes.find(_ == word.length).foreach(p => {\n \
    \                                                                            \
    \                                                                   primes.find(_\
    \ == p).foreach(p => {\n                                                     \
    \                                                                            \
    \                   primes.find(_ == word.length).foreach(p => {\n           \
    \                                                                            \
    \                                         \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0omjup48.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp0omjup48.scala:72:0 ----------------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0omjup48.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x)).filter(x => x != 0)\n        val result = primes.mkString(\" \"\
    )\n        primes.foreach(x => result += \" \" + x)\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8spamb2l.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8spamb2l.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x)).filter(\e[36mx\e[0m => x != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8spamb2l.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        primes.foreach(\e[36mx\e[0m => result += \e[31m\"\
    \ \"\e[0m + x)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of String - did you mean result.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + (prime + \" \"))\n        primes.foldLeft(result)( (acc, prime) =>\
    \ acc + (\" \" + prime))\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp22_zi33s.scala:25)\n\tat Problem.main(tmp22_zi33s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ > 1).mkString(\" \")\n        words.filter(_\
    \ > 1).map(_.toUpperCase).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpze8hu8ib.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        words.filter(_ > \e[31m1\e\
    [0m).map(_.toUpperCase).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         Found: \
    \   (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                         Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) result.add(word)\n            else {\n                val\
    \ primes = primeFactors(length)\n                for (prime <- primes) {\n   \
    \                 if (length == prime) result.add(word)\n                    else\
    \ {\n                        val primeFactors = primeFactors(prime)\n        \
    \                for (primeFactor <- primeFactors) {\n                       \
    \     if (length == primeFactor) result.add(word)\n                        }\n\
    \                    }\n                }\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ssdjegq.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ssdjegq.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8zfux_9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8zfux_9.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794081
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ > 1).mkString(\" \")\n        primes.filter(_\
    \ == 1).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mdeetvp.scala:25)\n\tat Problem.main(tmp7mdeetvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 != 0).mkString(\" \")\n        words\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflg9atu9.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        words\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (words : Array[String])\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        val primesSet2 = mutable.Set[Int]()\n        val primesSet3 = mutable.Set[Int]()\n\
    \        val primesSet4 = mutable.Set[Int]()\n        val primesSet5 = mutable.Set[Int]()\n\
    \        val primesSet6 = mutable.Set[Int]()\n        val primesSet7 = mutable.Set[Int]()\n\
    \        val primesSet8 = mutable.Set[Int]()\n        val primesSet9 = mutable.Set[Int]()\n\
    \        val primesSet10 = mutable.Set[Int]()\n        val primesSet11 = mutable.Set[Int]()\n\
    \        val primesSet12 = mutable.Set[Int]()\n        val primesSet13 = mutable.Set[Int]()\n\
    \        val primesSet14 = mutable.Set[Int]()\n        val primesSet15 = mutable.Set[Int]()\n\
    \        val primesSet16 = mutable.Set[Int]()\n        val primesSet17 = mutable.Set[Int]()\n\
    \        val primesSet18 = mutable.Set[Int]()\n        val primesSet19 = mutable.Set[Int]()\n\
    \        val primesSet20 = mutable.Set[Int]()\n        val primesSet21 = mutable.Set[Int]()\n\
    \        val primesSet22 = mutable.Set[Int]()\n        val primesSet23 = mutable.Set[Int]()\n\
    \        val primesSet24 = mutable.Set[Int]()\n        val primesSet25 = mutable.Set[Int]()\n\
    \        val primesSet26 = mutable.Set[Int]()\n        val primesSet27 = mutable.Set[Int]()\n\
    \        val primesSet28 = mutable.Set[Int]()\n        val primesSet29 = mutable.Set[Int]()\n\
    \        val primesSet30 = mutable.Set[Int]()\n        val primesSet31 = mutable.Set[Int]()\n\
    \        val primesSet32 = mutable.Set[Int]()\n        val primesSet33\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33s9vij9.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp33s9vij9.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp33s9vij9.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp33s9vij9.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp33s9vij9.scala:23:25 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp33s9vij9.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0"
  stdout: ''
  timestamp: 1659794101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val resultSet = mutable.Set[Int]()\n        val\
    \ primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n  \
    \      val resultSetSet = mutable.Set[Int]()\n        val resultSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSet = mutable.Set[Int]()\n        val primesSetSetSet =\
    \ mutable.Set[Int]()\n        val primesSetSetSetSet = mutable.Set[Int]()\n  \
    \      val primesSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSet\
    \ = mutable.Set[Int]()\n        val primesSetSetSetSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n\
    \        val primesSetSetSetSetSetSetSet = mutable.Set[Int]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp45zjeatu.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp45zjeatu.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesSetSetSetSetSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp45zjeatu.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp45zjeatu.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp45zjeatu.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSetSetSet is already "
  stdout: ''
  timestamp: 1659794102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word)\n            }\n\
    \        }\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlmq2x9o.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlmq2x9o.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.ListBuffer[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val isPrime = true\n            for (i <- 2 to length) {\n             \
    \   if (length % i == 0) {\n                    isPrime = false\n            \
    \        break\n                }\n            }\n            if (isPrime) {\n\
    \                primes += length\n                primesSet += length\n     \
    \       }\n        }\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primesSet += x)\n        primes.foreach(x\
    \ => primesSet += x)\n        primes.foreach(x => primes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxb4qyh3q.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxb4qyh3q.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxb4qyh3q.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxb4qyh3q.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpxb4qyh3q.scala:28:28 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxb4qyh3q.scala:29:20 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors "
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => x.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpny4xfv_o.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 == 1).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3dnt5m6.scala:25)\n\tat Problem.main(tmpa3dnt5m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 != 0).mkString(\" \")\n        result\
    \ + words.filter(_.length == primes.max).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_eujxfw2.scala:25)\n\tat Problem.main(tmp_eujxfw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x % 2 == 0).map(x => x -> true)\n        val result = primes.foldLeft(\"\")(\
    \ (acc, x) => acc + (if (x._2) x._1 else \"\") + x._1 )\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7a51pb0o.scala:25)\n\tat Problem.main(tmp7a51pb0o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) result.add(word)\n            else {\n                val\
    \ primes = primeFactors(length)\n                for (prime <- primes) {\n   \
    \                 if (length == prime) result.add(word)\n                    else\
    \ {\n                        val primeFactors = primeFactors(prime)\n        \
    \                for (primeFactor <- primeFactors) {\n                       \
    \     if (length == primeFactor) result.add(word)\n                        }\n\
    \                    }\n                }\n            }\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3aw4ne7.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3aw4ne7.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result + words.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwedzqfxk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) {\n                result.add(word)\n            } else\
    \ if (length == 2 && isPrime(length)) {\n                result.add(word)\n  \
    \          } else if (length == 3 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 29 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 30 && isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4pa1qhhi.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4pa1qhhi.scala:94:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m94 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4pa1qhhi.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4pa1qhhi.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (length ==\
    \ \e[31m2\e[0m && isPrime(length)) {\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4pa1qhhi.scala:27:38 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m            } \e[33melse\e[0m \e[33mif\e[0m (length == \e[31m3\e[0m && isPrime(length))\
    \ {\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4pa1qhhi.scala:29:38 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (length ==\
    \ \e[31m4\e[0m && isPrime(length)) {\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + words.filter(_.length\
    \ == prime).mkString(\" \"))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqhlso72y.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 2 || length == 3 || length == 5 || length == 7) {\n      \
    \          result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4sqlnt4.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).toSet\n\
    \        val result = new mutable.ListBuffer[String]()\n        primes.foreach\
    \ { prime =>\n            val primeString = words.filter(_.length == prime).mkString(\"\
    \ \")\n            result.add(primeString)\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzteg27h.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppzteg27h.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val isPrime = length == 2 || length == 3 || length == 5 || length == 7 ||\
    \ length == 11\n            if (isPrime) {\n                result += word\n \
    \           }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6zqqprqj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            for(i <- 2 to length) {\n         \
    \       if(i % prime == 0) {\n                    result.add(word)\n         \
    \           break\n                }\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp76gqcple.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp76gqcple.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for(word\
    \ <- words) {\n            val length = word.length\n            val prime = primes.find(p\
    \ => p < length)\n            if(prime == None) {\n                result.add(word)\n\
    \            } else {\n                val primeLength = prime.get\n         \
    \       val remainder = length % primeLength\n                if(remainder ==\
    \ 0) {\n                    result.add(word)\n                }\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzxwt08ea.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzxwt08ea.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.nonEmpty)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + words.filter(_.length\
    \ == prime).mkString(\" \"))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoyfxx77.scala:25)\n\tat Problem.main(tmpgoyfxx77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5opwvb0y.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) result.add(word)\n            else if (length == 2 && word.head\
    \ == word.last) result.add(word)\n            else if (!isPrime(length)) result.add(word)\n\
    \            else result.addAll(primeFactors(length))\n        }\n        val\
    \ result = result.toList\n        result.sortWith((a, b) => a.compareTo(b) < 0)\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3ylja9s.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb3ylja9s.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb3ylja9s.scala:25:22 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m (!isPrime(length)) result.add(word)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primes(length)\n            val primesSet = primes.toSet\n \
    \           val isPrime = primes.forall(p => primesSet.contains(p))\n        \
    \    if(isPrime) {\n                result += (word + \" \")\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobu_jfha.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => y ==\
    \ x) == x).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk8p6vtot.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk8p6vtot.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpk8p6vtot.scala:21:65\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.filter(\e[36mx\e[0m => words.count(\e[36my\e[0m => y\
    \ == x) == x).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m==\e[0m in\
    \ \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0m (x$0:\
    \ Any): Boolean\n\e[31m   |\e[0mall match arguments ((x : Nothing))\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            val isPrime = true\n            for(i\
    \ <- 1 to length) {\n                if(i % prime != 0) {\n                  \
    \  isPrime = false\n                    break\n                }\n           \
    \ }\n            if(isPrime) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcf3vv1op.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcf3vv1op.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcf3vv1op.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase).toList\n        val primes = words.map(_.length).toSet\n\
    \        val result = words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7diqq0fd.scala:25)\n\tat Problem.main(tmp7diqq0fd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.Set[Int]()\n        for(word <- words) {\n     \
    \       val length = word.length\n            val prime = length.toInt\n     \
    \       primes += prime\n            if(primes.contains(prime)) {\n          \
    \      result += word\n            }\n        }\n        result.mkString(\" \"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3_edtut.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3_edtut.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(x => prime(x))\n     \
    \   val result = primes.filter(x => words.count(y => prime(y) == x) == 1).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr873dkg7.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpr873dkg7.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659794109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => x.length)\n\
    \        val result = primes.filter(x => x % 2 != 0).mkString(\" \")\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4k_qqyqn.scala:25)\n\tat Problem.main(tmp4k_qqyqn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).toSet\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsc4klvjz.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word + \" \")\n     \
    \       }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) {\n                result.add(word)\n            } else\
    \ if (length == 2 && isPrime(length)) {\n                result.add(word)\n  \
    \          } else if (length == 3 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 29 && isPrime(length)) {\n                result.add(word)\n\
    \            } else if (length == 30 && isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4pa1qhhi.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4pa1qhhi.scala:94:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m94 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4pa1qhhi.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4pa1qhhi.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (length ==\
    \ \e[31m2\e[0m && isPrime(length)) {\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4pa1qhhi.scala:27:38 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m            } \e[33melse\e[0m \e[33mif\e[0m (length == \e[31m3\e[0m && isPrime(length))\
    \ {\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4pa1qhhi.scala:29:38 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (length ==\
    \ \e[31m4\e[0m && isPrime(length)) {\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(word => words.filter(w => w == word).mkString(\"\
    \ \"))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihb4h31p.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpihb4h31p.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- Error: /tmp/tmpihb4h31p.scala:21:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.map(\e\
    [36mword\e[0m => words.filter(\e[36mw\e[0m => w == word).mkString(\e[31m\" \"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and Int\
    \ cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpss0wmtou.scala:25)\n\tat Problem.main(tmpss0wmtou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph62byhxx.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        result\
    \ + words.filter(_ % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp64bl_273.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \              ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => 2 * x).filter(x => x != 1)\n        val result = primes.map(x\
    \ => words.filter(y => y.length == x).mkString(\" \")).mkString(\" \")\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpom8crr_h.scala:25)\n\tat Problem.main(tmpom8crr_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val isPrime = length == 2 || length == 3 || length == 5 || length == 7 ||\
    \ length == 11 || length == 13\n            if (isPrime) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7cw6catz.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => math.pow(x.length, 2)).toSet\n        val result = primes.filter(x => words.count(y\
    \ => math.pow(y.length, 2) == x) == 1).mkString(\" \")\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehswonxz.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => x ==\
    \ y) == x).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl_hgz30h.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl_hgz30h.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpl_hgz30h.scala:21:65\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.filter(\e[36mx\e[0m => words.count(\e[36my\e[0m => x\
    \ == y) == x).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m==\e[0m in\
    \ \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0m (x$0:\
    \ Any): Boolean\n\e[31m   |\e[0mall match arguments ((x : Nothing))\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            val isPrime = true\n            for(i\
    \ <- 2 to length-1) {\n                if(length%i == 0) {\n                 \
    \   isPrime = false\n                    break\n                }\n          \
    \  }\n            if(isPrime) {\n                result += word\n            }\n\
    \        }\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_jxbzqz.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6_jxbzqz.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_jxbzqz.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val resultWords = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) {\n                resultWords += word\n            } else\
    \ if (length == 2 && word.contains(\"a\") && word.contains(\"e\") && word.contains(\"\
    i\") && word.contains(\"o\") && word.contains(\"u\")) {\n                resultWords\
    \ += word\n            } else if (length == 3 && word.contains(\"a\") && word.contains(\"\
    e\") && word.contains(\"i\") && word.contains(\"o\") && word.contains(\"u\") &&\
    \ word.contains(\"y\")) {\n                resultWords += word\n            }\
    \ else if (length == 4 && word.contains(\"a\") && word.contains(\"e\") && word.contains(\"\
    i\") && word.contains(\"o\") && word.contains(\"u\") && word.contains(\"y\") &&\
    \ word.contains(\"s\")) {\n                resultWords += word\n            }\
    \ else if (length == 5 && word.contains(\"a\") && word.contains(\"e\") && word.contains(\"\
    i\") && word.contains(\"o\") && word.contains(\"u\") && word.contains(\"y\") &&\
    \ word.contains(\"s\") && word.contains(\"w\")) {\n                resultWords\
    \ += word\n            } else if (length == 6 && word.contains(\"a\") && word.contains(\"\
    e\") && word.contains(\"i\") && word.contains(\"o\") && word.contains(\"u\") &&\
    \ word.contains(\"y\") && word.contains(\"s\") && word.contains(\"w\") && word.contains(\"\
    m\")) {\n                resultWords += word\n            } else if (length ==\
    \ 7 && word.contains(\"a\") && word.contains(\"e\") && word.contains(\"i\") &&\
    \ word.contains(\"o\") && word.contains(\"u\") && word.contains(\"y\") && word.contains(\"\
    s\") && word.contains(\"w\") && word.contains(\"m\") && word.contains(\"d\"))\
    \ {\n                resultWords += word\n            } else if (length == 8 &&\
    \ word.contains(\"a\") && word.contains(\"e\") && word.contains(\"i\") && word.contains(\"\
    o\") && word.contains(\"u\") && word.contains(\"y\") && word.contains(\"s\") &&\
    \ word.contains(\"w\") && word.contains(\"m\") && word.contains(\"d\") && word.contains(\"\
    n\")) {\n                resultWords += word\n            } else if (length ==\
    \ 9 && word.contains(\"a\") && word.contains(\"e\") && word.contains(\"i\") &&\
    \ word.contains(\"o\") && word.contains(\"u\") && word.contains(\"y\") && word.contains(\"\
    s\") && word.contains(\"w\") && word.contains(\"m\") && word.contains(\"d\") &&\
    \ word.contains(\"n\") && word.contains(\"g\")) {\n                resultWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ri3bv6w.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ri3bv6w.scala:20:26\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresultWords\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8ri3bv6w.scala:40:16 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m                resultWord\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: resultWord\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmp8ri3bv6w.scala:42:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m42 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5opwvb0y.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            val isPrime = true\n            for(i\
    \ <- 2 to prime) {\n                if(length%i == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if(isPrime) {\n                result += word\n            }\n       \
    \ }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8s7mgdm.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpi8s7mgdm.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8s7mgdm.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        result + words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_chdoem0.scala:25)\n\tat Problem.main(tmp_chdoem0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val resultSet = mutable.Set[Int]()\n        for\
    \ (word <- words) {\n            val wordLength = word.length\n            val\
    \ isPrime = wordLength == 2 || wordLength == 3 || wordLength == 5 || wordLength\
    \ == 7\n            if (isPrime) {\n                resultSet += wordLength\n\
    \            }\n        }\n        val resultString = resultSet.mkString(\" \"\
    )\n        return resultString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeukiuewi.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        val primesSet2 = mutable.Set[Int]()\n        val primesSet3 = mutable.Set[Int]()\n\
    \        val primesSet4 = mutable.Set[Int]()\n        val primesSet5 = mutable.Set[Int]()\n\
    \        val primesSet6 = mutable.Set[Int]()\n        val primesSet7 = mutable.Set[Int]()\n\
    \        val primesSet8 = mutable.Set[Int]()\n        val primesSet9 = mutable.Set[Int]()\n\
    \        val primesSet10 = mutable.Set[Int]()\n        val primesSet11 = mutable.Set[Int]()\n\
    \        val primesSet12 = mutable.Set[Int]()\n        val primesSet13 = mutable.Set[Int]()\n\
    \        val primesSet14 = mutable.Set[Int]()\n        val primesSet15 = mutable.Set[Int]()\n\
    \        val primesSet16 = mutable.Set[Int]()\n        val primesSet17 = mutable.Set[Int]()\n\
    \        val primesSet18 = mutable.Set[Int]()\n        val primesSet19 = mutable.Set[Int]()\n\
    \        val primesSet20 = mutable.Set[Int]()\n        val primesSet21 = mutable.Set[Int]()\n\
    \        val primesSet22 = mutable.Set[Int]()\n        val primesSet23 = mutable.Set[Int]()\n\
    \        val primesSet24 = mutable.Set[Int]()\n        val primesSet25 = mutable.Set[Int]()\n\
    \        val primesSet26 = mutable.Set[Int]()\n        val primesSet27 = mutable.Set[Int]()\n\
    \        val primesSet28 = mutable.Set[Int]()\n        val primesSet29 = mutable.Set[Int]()\n\
    \        val primesSet30 = mutable.Set[Int]()\n        val primesSet31 = mutable.Set[Int]()\n\
    \        val primesSet32 = mutable.Set[Int]()\n        val primesSet33 = mutable.Set[Int]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprueq5az3.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659794072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0)\n        val result = primes.foldLeft(\"\") { (result, prime)\
    \ =>\n            val index = primes.indexOf(prime)\n            val word = words(index)\n\
    \            result + word + \" \"\n        }\n        result.substring(0, result.length\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpil0zzck_.scala:29)\n\tat Problem.main(tmpil0zzck_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primeFactors(length)\n            val primesSet = primes.toSet\n\
    \            val primesSetIterator = primes.iterator\n            while(primesSetIterator.hasNext)\
    \ {\n                val prime = primesSetIterator.next\n                if(primesSet.contains(length\
    \ / prime)) {\n                    result.add(word)\n                }\n     \
    \       }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa_r_jxbp.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa_r_jxbp.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word + \" \")\n     \
    \       }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word + \" \")\n     \
    \       }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5_m48g.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8huyidu0.scala:25)\n\tat Problem.main(tmp8huyidu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ val reversed = words.reverse\n        val reversedPrimes = reversed.map(_.length)\n\
    \        val reversedResult = reversedPrimes.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n        result + reversedResult\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbbkg246.scala:28)\n\tat Problem.main(tmpxbbkg246.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => x ==\
    \ y) == 1).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy3vkuxp.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsy3vkuxp.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).toSet\n\
    \        val result = primes.filter(_ > 1).mkString(\" \")\n        result + words.filter(_.length\
    \ == 1).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1yr112_h.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primeFactors(length)\n            for(prime <- primes) {\n \
    \               if(length == prime) {\n                    result += word\n  \
    \              }\n            }\n        }\n        result.mkString(\" \")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkih2i54p.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkih2i54p.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => x)\n        val result = primes.foldLeft(\"\")( (acc,\
    \ x) => acc + (if (x != 1) x else \" \"))\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpm8nli2.scala:25)\n\tat Problem.main(tmpmpm8nli2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val isPrime = length == 2 || length == 3 || length == 5 || length == 7 ||\
    \ length == 11\n            if(isPrime) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        result mkString \" \"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1n_9t2re.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            val isPrime = true\n            for(i\
    \ <- 0 until prime) {\n                if(length%i == 0) {\n                 \
    \   isPrime = false\n                    break\n                }\n          \
    \  }\n            if(isPrime) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt4jobdj_.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpt4jobdj_.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt4jobdj_.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(word => words.filter(_.length == word.length).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzpz6kav8.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzpz6kav8.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzpz6kav8.scala:21:70\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mword\e[0m => words.filter(_.length == word.length).mkString(\e\
    [31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                                                      ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value length is not a member of\
    \ Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659794122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(x => x.length)\n     \
    \   val primesSet = primes.toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(x <- primes.indices) {\n            val prime = primes(x)\n     \
    \       val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val primesSet = primes.toSet\n\
    \            val primesSet = primes.toSet\n            val prime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizb8xm5d.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizb8xm5d.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpizb8xm5d.scala:22:25 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpizb8xm5d.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mprimesSet\e[0m = primes.toSet\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mprimesSet is already defined as \e[33mvalue\e[0m \e[35mprimesSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpizb8xm5d.scala:27:16 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36mprimesSet\e[0m = primes.toSet\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mprimesSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpizb8xm5d.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mprimesSet\e[0m = primes.toSet\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSet is already defined as \e[33mvalue\e[0m \e[35mprimesSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of tople"
  stdout: ''
  timestamp: 1659794124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (isPrime(length)) {\n                result += (word + \" \")\n     \
    \       }\n        }\n        val result = result.toList\n        result.sortBy(_.length)\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgkfwaw14.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkfwaw14.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgkfwaw14.scala:23:16 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mif\e[0m (isPrime(length)) {\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x)).filter(x => x != 0)\n        val result = primes.mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnlornkbc.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnlornkbc.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x)).filter(\e[36mx\e[0m => x != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\") { (result,\
    \ prime) =>\n            val newWords = words.filter(_.length == prime)\n    \
    \        result += newWords.mkString(\" \")\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd24p02b6.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpd24p02b6.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            result += newWords.mkString(\e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value += is not a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x % 2 == 0).toList\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + \" \" + prime)\n        primes.toList.sortWith(_ < _).mkString(\" \"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe29qdmq7.scala:25)\n\tat Problem.main(tmpe29qdmq7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 == 1).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3dnt5m6.scala:25)\n\tat Problem.main(tmpa3dnt5m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        val newWords\
    \ = words.filter(_ % 2 == 0).mkString(\" \")\n        val newResult = newWords.split(\"\
    \ \").map(_.toUpperCase)\n        val newResult2 = newResult.filter(_ % 2 == 0).mkString(\"\
    \ \")\n        val newResult3 = newResult2.filter(_ % 3 == 0).mkString(\" \")\n\
    \        val newResult4 = newResult3.filter(_ % 5 == 0).mkString(\" \")\n    \
    \    val newResult5 = newResult4.filter(_ % 7 == 0).mkString(\" \")\n        val\
    \ newResult6 = newResult5.filter(_ % 11 == 0).mkString(\" \")\n        val newResult7\
    \ = newResult6.filter(_ % 13 == 0).mkString(\" \")\n        val newResult8 = newResult7.filter(_\
    \ % 17 == 0).mkString(\" \")\n        val newResult9 = newResult8.filter(_ % 19\
    \ == 0).mkString(\" \")\n        val newResult10 = newResult9.filter(_ % 23 ==\
    \ 0).mkString(\" \")\n        val newResult11 = newResult10.filter(_ % 29 == 0).mkString(\"\
    \ \")\n        val newResult12 = newResult11.filter(_ % 31 == 0).mkString(\" \"\
    )\n        val newResult13 = newResult12.filter(_ % 37 == 0).mkString(\" \")\n\
    \        val newResult14 = newResult13.filter(_ % 41) == 0).mkString(\" \")\n\
    \        val newResult15 = newResult14.filter(_ % 43) == 0).mkString(\" \")\n\
    \        val newResult16 = newResult15.filter(_ % 47) == 0).mkString(\" \")\n\
    \        val newResult17 = newResult16.filter(_ % 53) == 0).mkString(\" \")\n\
    \        val newResult18 = newResult17.filter(_ % 59) == 0).mkString(\" \")\n\
    \        val newResult19 = newResult18.filter(_ % 61) == 0).mkString(\" \")\n\
    \        val newResult20 = newResult19.filter(_ % 67) == 0).mkString(\" \")\n\
    \        val newResult21 = newResult20.filter(_ % 71 == 0).mkString(\" \")\n \
    \       val newResult22 = newResult21.filter(_ % 73) == 0).mkString(\" \")\n \
    \       val newResult23 = newResult22.filter(_ % 79) == 0).mkString(\" \")\n \
    \       val newResult24 = newResult23.filter(_ % 83) == 0).mkString(\" \")\n \
    \       val newResult25 = newResult24.filter(_ % 89) == 0).mkString(\" \")\n \
    \       val newResult26 = newResult25.filter(_ % 97) == 0).mk\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp70lkt7aj.scala:36:57 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnewResult14\e[0m = newResult13.filter(_\
    \ % \e[31m41\e[0m) == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                         ^\e[0m\n\e[31m\
    \   |\e[0m                                             '}' expected, but ')' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp70lkt7aj.scala:37:57 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnewResult15\e[0m = newResult14.filter(_\
    \ % \e[31m43\e[0m) == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                         ^\e[0m\n\e[31m\
    \   |\e[0m                                             '}' expected, but ')' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp70lkt7aj.scala:38:57 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewResult16\e[0m = newResult15.filter(_\
    \ % \e[31m47\e[0m) == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                         ^\e[0m\n\e[31m\
    \   |\e[0m                                             eof expected, but ')' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp70lkt7aj.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = words.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                    ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp70lkt7aj.scala:24:44\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnewResult2\e[0m = newResult.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \   ^^^\e"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(word => words.filter(w => w.length == word.length\
    \ && w.startsWith(word)).mkString(\" \")).mkString(\" \")\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx549no4r.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx549no4r.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx549no4r.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mword\e[0m => words.filter(\e[36mw\e[0m => w.length\
    \ == word.length && w.startsWith(word)).mkString(\e[31m\" \"\e[0m)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                         value length is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659794124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val len = word.length\n          \
    \  if (len == 1) result.add(word)\n            else if (len == 2 && word.head\
    \ == word.last) result.add(word)\n            else if (!isPrime(len)) result.add(word)\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskz2i_4v.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskz2i_4v.scala:25:22\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (!isPrime(len)) result.add(word)\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + (prime + \" \"))\n        result + words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahzkxgwh.scala:25)\n\tat Problem.main(tmpahzkxgwh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        result\
    \ + words.filter(_ % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp64bl_273.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \              ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ primes.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps85m68v2.scala:25)\n\tat Problem.main(tmps85m68v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7v7ks48f.scala:25)\n\tat Problem.main(tmp7v7ks48f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(word => prime(word.length))\n\
    \        val result = primes.filter(prime => words.count(word => prime(word.length)\
    \ == word.length) == 1)\n        words.filter(word => prime(word.length) == word.length).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb993pnhq.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mword\e[0m => prime(word.length))\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpb993pnhq.scala:20:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e[36mword\e[0m => prime(word.length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpb993pnhq.scala:22:29 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        words.filter(\e[36mword\e[0m => prime(word.length) == word.length).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: prime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.map(_.length).filter(x =>\
    \ x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \") )\n\
    \        primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + words.filter(_.length\
    \ == prime).mkString(\" \") )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0x10d6aj.scala:25)\n\tat Problem.main(tmp0x10d6aj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \"))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pkw8a3a.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(_ % 2 == 0).mkString(\" \")\n        primes.filter(_\
    \ % 2 == 1).foreach(x => result += \" \" + x)\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1yqo_t5s.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        primes.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).foreach(\e\
    [36mx\e[0m => result += \e[31m\" \"\e[0m + x)\n\e[31m\e[31m   |\e[0m         \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value += is not a member of String - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => y ==\
    \ x) == 1).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrr41s3s.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbrr41s3s.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => x ==\
    \ y) == 1).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy3vkuxp.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsy3vkuxp.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.map(x => words.filter(_.length\
    \ == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy_p_axjz.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val len = word.length\n          \
    \  if (len == 1) result.add(word)\n            else if (len == 2 && word.head\
    \ == word.last) result.add(word)\n            else if (!(len == 2 || len == 3))\
    \ result.add(word)\n        }\n        result.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdu000an2.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.map(x => words.filter(_.length\
    \ == x).mkString(\" \")).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk04zfmh_.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).map(_.toUpperCase).mkString(\"\
    \ \"))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00a2p0hj.scala:25)\n\tat Problem.main(tmp00a2p0hj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 2 || length == 3) {\n                result.add(word)\n  \
    \          } else if (length == 5) {\n                result.add(word)\n     \
    \       } else if (length == 7) {\n                result.add(word)\n        \
    \    } else if (length == 11) {\n                result.add(word)\n          \
    \  } else if (length == 13) {\n                result.add(word)\n            }\
    \ else if (length == 17) {\n                result.add(word)\n            } else\
    \ if (length == 19) {\n                result.add(word)\n            } else if\
    \ (length == 21) {\n                result.add(word)\n            } else if (length\
    \ == 23) {\n                result.add(word)\n            } else if (length ==\
    \ 25) {\n                result.add(word)\n            } else if (length == 27)\
    \ {\n                result.add(word)\n            } else if (length == 29) {\n\
    \                result.add(word)\n            } else if (length == 31) {\n  \
    \              result.add(word)\n            } else if (length == 33) {\n    \
    \            result.add(word)\n            } else if (length == 35) {\n      \
    \          result.add(word)\n            } else if (length == 37) {\n        \
    \        result.add(word)\n            } else if (length == 39) {\n          \
    \      result.add(word)\n            } else if (length == 41) {\n            \
    \    result.add(word)\n            } else if (length == 43) {\n              \
    \  result.add(word)\n            } else if (length == 45) {\n                result.add(word)\n\
    \            } else if (length == 47) {\n                result.add(word)\n  \
    \          } else if (length == 49) {\n                result.add(word)\n    \
    \        } else if (length == 51) {\n                result.add(word)\n      \
    \      } else if (length == 53) {\n                result.add(word)\n        \
    \    } else if (length == 55) {\n                result.add(word)\n          \
    \  } else if (length == 57) {\n                result.add(word)\n            }\
    \ else if (length == 59) {\n                result.add(word)\n            } else\
    \ if (length == 61) {\n                result.add(word)\n            } else if\
    \ (length == 63) {\n                result.add(word)\n            } else if (length\
    \ == 65) {\n                result.add(word)\n            } else if (length ==\
    \ 67) {\n                result.add(word)\n            } else if (length == 69)\
    \ {\n                result.add(word)\n            } else if (length == 71) {\n\
    \                result.add(word)\n            } else if (length == 73) {\n  \
    \              result.add(word)\n            } else if (length == 75) {\n    \
    \            result.add(word)\n            } else if (length == 77) {\n      \
    \          result.add(word)\n            } else if (length == 79) {\n        \
    \        result.add(word)\n            } else if (length == 81) {\n          \
    \      result.add(word)\n            } else if (length == 83) {\n            \
    \    result.add(word)\n            } else if (length == 85) {\n              \
    \  result.add(word)\n            } else if (length == 87) {\n                result.add(word)\n\
    \            } else if (length == 89) {\n                result.add(word)\n  \
    \          } else if (length == 91) {\n                result.add(word)\n    \
    \        } else if (length == 93) {\n                result.add(word)\n      \
    \      } else if (length == 95) {\n                result.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjtg__5qk.scala:113:4 ---------------------------\e\
    [0m\e[0m\n\e[31m113 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpjtg__5qk.scala:125:0 ---------------------------\e[0m\e[0m\n\e[31m125\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjtg__5qk.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpjtg__5qk.scala:114:4\
    \ ---------------------------------------\e[0m\e[0m\n\e[33m114 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m    Line is indented too far\
    \ to the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primes(length)\n            for(prime <- primes) {\n       \
    \         if(length == prime) {\n                    result += (word + \" \")\n\
    \                }\n            }\n        }\n        result mkString \" \"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikmzjtfu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" )\n        result + words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk5f4jz8l.scala:25)\n\tat Problem.main(tmpk5f4jz8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(_.toString).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9ue4z3vk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").toList\n        val primes = words.map(x => x.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ words.filter(x => x % 2 == 0).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpny4xfv_o.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val len = word.length\n          \
    \  if (len == 1) result.add(word)\n            else {\n                val primes\
    \ = primeFactors(len)\n                for (prime <- primes) {\n             \
    \       if (len % prime == 0) result.add(word + \" \" + prime)\n             \
    \   }\n            }\n        }\n        result.toList().mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyunea53p.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyunea53p.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(len)\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \   Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 != 0).distinct\n        val result = primes.foldLeft(\"\")( (acc, prime)\
    \ => acc + prime + \" \" + words.filter(_.length == prime).mkString(\" \") )\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmjjymtsg.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val primes = primeFactors(length)\n            for(prime <- primes) {\n \
    \               if(length == prime) {\n                    result += word\n  \
    \              }\n            }\n        }\n        result.mkString(\" \")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkih2i54p.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkih2i54p.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val prime = word.filter(_ <= 1).length\n\
    \            if (prime == 1) {\n                result += word\n            }\n\
    \        })\n        words.toList.sortWith((x, y) => x.compareTo(y) == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2hhntya.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length).filter(x\
    \ => x % 2 == 0).map(x => x -> 1)\n        val result = primes.foldLeft(\"\")(\
    \ (acc, x) => acc + (x._1 + \" \" + x._2) )\n        val result = result.split(\"\
    \ \").map(_.toUpperCase)\n        val result = result.filter(x => x != \"\")\n\
    \        val result = result.map(x => x -> 1)\n        val result = result.foldLeft(\"\
    \")( (acc, x) => acc + (x._1 + \" \" + x._2) )\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ncmu1iw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.split(\e\
    [31m\" \"\e[0m).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ncmu1iw.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.filter(\e[36mx\e\
    [0m => x != \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ncmu1iw.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.map(\e[36mx\e[0m\
    \ => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ncmu1iw.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.foldLeft(\e[31m\"\
    \"\e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (x._1 + \e[31m\" \"\e[0m + x._2)\
    \ )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \").filter(_.isLetter).toList\n        val primes = words.map(_.length).filter(_.isPrime)\n\
    \        val result = primes.map(word => words.filter(w => w.length == word.length\
    \ && w.startsWith(word)).mkString(\" \")).mkString(\" \")\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx549no4r.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx549no4r.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx549no4r.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mword\e[0m => words.filter(\e[36mw\e[0m => w.length\
    \ == word.length && w.startsWith(word)).mkString(\e[31m\" \"\e[0m)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                         value length is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659794124
