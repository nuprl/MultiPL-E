language: scala
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / numbers.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdnj8p9xp.scala:17)\n\tat Problem.main(tmpdnj8p9xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean))\n        val\
    \ sumOfDiffsSum = sumOfDiffs.sum\n        val mad = math.abs(sumOfDiffsSum / n)\n\
    \        mad\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_634yld.scala:17)\n\tat Problem.main(tmpx_634yld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        numbers.map(x => math.abs(x - mean)).sum / n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        val\
    \ mad = deviations.sum / n\n        mad\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => (x - mean).abs).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfSquares = numbers.map(x => math.pow((x - mean), 2)).sum\n\
    \        math.sqrt(sumOfSquares / n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4h62vo8b.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        math.sqrt(sumOfSquares\
    \ / n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val numbers_mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => x - numbers_mean)\n        deviations.sum\
    \ / deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzyparcom.scala:17)\n\tat Problem.main(tmpzyparcom.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => (x - mean).abs).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val numbers_mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => x - numbers_mean)\n        deviations.sum\
    \ / deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuadjqxab.scala:17)\n\tat Problem.main(tmpuadjqxab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => (x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7c92ted8.scala:16)\n\tat Problem.main(tmp7c92ted8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(x => math.abs(x)).sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean))\n        deviations.map(x => math.abs(x)).sum\
    \ / deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => (x - mean).abs).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(x => math.abs(x)).sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\
    \ // mean of deviations\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp16b8zabq.scala:17)\n\tat Problem.main(tmp16b8zabq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjnp2h59.scala:17)\n\tat Problem.main(tmpvjnp2h59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean: Float = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val numbers_mean = numbers.sum / numbers.size\n       \
    \ val numbers_deviations = numbers.map(x => x - numbers_mean)\n        numbers_deviations.sum\
    \ / numbers.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpid85ocl6.scala:17)\n\tat Problem.main(tmpid85ocl6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\
    \ // average absolute deviation\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) ==\
    \ (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpznums1r5.scala:17)\n\tat Problem.main(tmpznums1r5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n     \
    \   sumOfDiffs / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(abs).sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    val mad = deviations.sum / n\n        mad\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpivk_es6_.scala:19)\n\tat Problem.main(tmpivk_es6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    val mad = deviations.sum / n\n        mad\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpivk_es6_.scala:19)\n\tat Problem.main(tmpivk_es6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => x - mean).sum / numbers.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ra3h5sc.scala:16)\n\tat Problem.main(tmp_ra3h5sc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvqp4a6q.scala:17)\n\tat Problem.main(tmpbvqp4a6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvqp4a6q.scala:17)\n\tat Problem.main(tmpbvqp4a6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => x - mean).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2m1tc6op.scala:16)\n\tat Problem.main(tmp2m1tc6op.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjnp2h59.scala:17)\n\tat Problem.main(tmpvjnp2h59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(abs).sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val numbers_mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => (x - numbers_mean))\n        deviations.sum\
    \ / deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmu4rc82.scala:17)\n\tat Problem.main(tmptmu4rc82.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n     \
    \   sumOfDiffs / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(x => math.abs(x)).sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvqp4a6q.scala:17)\n\tat Problem.main(tmpbvqp4a6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => x - mean)\n        deviations.map(x => math.abs(x)).sum\
    \ / deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjnp2h59.scala:17)\n\tat Problem.main(tmpvjnp2h59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(abs).sum / numbers.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        numbers.map(x => math.abs(x - mean)).sum / n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.map(x => math.abs(x)).sum /\
    \ deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean))\n        deviations.map(x => math.abs(x)).sum\
    \ / deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => (x - mean))\n        val mad = deviations.map(x\
    \ => math.abs(x)).sum / deviations.size\n        mad\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb1c6xhq.scala:17)\n\tat Problem.main(tmpvb1c6xhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    val sum = deviations.sum\n        val mean = sum / n\n        val mad = sum\
    \ / n\n        return mad\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5pev92l9.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmean\e[0m = sum / n\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmean is already\
    \ defined as \e[33mvalue\e[0m \e[35mmean\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07i_8vs3.scala:17)\n\tat Problem.main(tmp07i_8vs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        numbers.map(x => math.abs(x - mean)).sum / n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n     \
    \   sumOfDiffs / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size\
    \ // average deviation\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpukjiesh6.scala:17)\n\tat Problem.main(tmpukjiesh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n     \
    \   sumOfDiffs / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    val sum = deviations.sum\n        val mean = sum / n\n        val mad = sum\
    \ / n\n        mean\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp927mjach.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmean\e[0m = sum / n\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmean is already\
    \ defined as \e[33mvalue\e[0m \e[35mmean\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / deviations.size\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51waydpt.scala:17)\n\tat Problem.main(tmp51waydpt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n    \
    \    deviations.sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymknw6gc.scala:18)\n\tat Problem.main(tmpymknw6gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d2ft8x.scala:18)\n\tat Problem.main(tmpt4d2ft8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean: Float = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797598
